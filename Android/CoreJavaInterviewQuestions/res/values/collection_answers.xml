<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="collection_answers">
        <item>
            Collections are used in every programming language and initial java release contained few
				classes for collections: Vector, Stack, Hash table, and Array. But looking at the larger scope
				and usage, Java 1.2 came up with Collections Framework that group all the collections
				interfaces, implementations and algorithms.\n
			Java Collections have come through a long way with usage of Generics and Concurrent
				Collection classes for thread-safe operations. It also includes blocking interfaces and their
				implementations in java concurrent package.\n
			Some of the benefits of collections framework are:\n
			1. Reduced development effort by using core collection classes rather than
				implementing our own collection classes.\n
			2. Code quality is enhanced with the use of well tested collections framework classes.\n
			3. Reduced effort for code maintenance by using collection classes shipped with JDK.\n
			4. Reusability and Interoperability.            
        </item>
        <item>
            Java 1.5 came with Generics and all collection interfaces and implementations use it heavily.
				Generics allow us to provide the type of Object that a collection can contain, so if you try to add
				any element of other type it throws compile time error.\n
			This avoids ClassCastException at Runtime because you will get the error at compilation. Also
				Generics make code clean since we don’t need to use casting and instanceof operator.
        </item>
        <item>
            Collection is the root of the collection hierarchy. A collection represents a group of objects
				known as its elements. The Java platform doesn’t provide any direct implementations of this interface.\n
			Set is a collection that cannot contain duplicate elements. This interface models the
				mathematical set abstraction and is used to represent sets, such as the deck of cards.\n
			List is an ordered collection and can contain duplicate elements. You can access any element
				from its index. List is more like array with dynamic length.\n
			A Map is an object that maps keys to values. A map cannot contain duplicate keys: Each key
				can map to at most one value.\n\n
			Some other interfaces are Queue, Dequeue, Iterator, SortedSet, SortedMap and ListIterator.
        </item>
        <item>
            Collection interface specifies group of Objects known as elements. How the elements are
				maintained is left up to the concrete implementations of Collection. For example, some
				Collection implementations like List allow duplicate elements whereas other implementations
				like Set don’t.\n
			A lot of the Collection implementations have a public clone method. However, it doesn’t really
				make sense to include it in all implementations of Collection. This is because Collection is an
				abstract representation. What matters is the implementation.\n
			The semantics and the implications of either cloning or serializing come into play when dealing
				with the actual implementation; so concrete implementation should decide how it should be
				cloned or serialized, or even if it can be cloned or serialized.\n
			So mandating cloning and serialization in all implementations is actually less flexible and more
				restrictive. The specific implementation should make the decision as to whether it can be cloned or serialized.
        </item>
        <item>
            Although Map interface and its implementations are part of Collections Framework, Map is not
				collections and collections are not Map. Hence it doesn’t make sense for Map to extend
				Collection or vice versa.\n
			If Map extends Collection interface, then where are the elements? Map contains key-value pairs
				and it provides methods to retrieve list of Keys or Values as Collection but it doesn’t fit into the
				“group of elements” paradigm.
        </item>
        <item>
            Iterator interface provides methods to iterate over any Collection. We can get iterator instance
				from a Collection using iterator() method. Iterator takes the place of Enumeration in the Java
				Collections Framework. Iterators allow the caller to remove elements from the underlying
				collection during the iteration. Java Collection iterator provides a generic way for traversal
				through the elements of a collection and implements.
        </item>
        <item>
            Enumeration is twice as fast as Iterator and uses very less memory. Enumeration is very basic
				and fits to basic needs. But Iterator is much safer as compared to Enumeration because it always
				denies other threads to modify the collection object which is being iterated by it.\n
			Iterator takes the place of Enumeration in the Java Collections Framework. Iterators allow the
				caller to remove elements from the underlying collection that is not possible with Enumeration.
				Iterator method names have been improved to make its functionality clear.
        </item>
        <item>
            The semantics are unclear, given that the contract for Iterator makes no guarantees about the
				order of iteration. Note, however, that ListIterator does provide an add operation, as it does
				guarantee the order of the iteration.
        </item>
        <item>
            It can be implemented on top of current Iterator interface but since its use will be rare, it doesn’t
				make sense to include it in the interface that everyone has to implement.
        </item>
        <item>
            1. We can use Iterator to traverse Set and List collections whereas ListIterator can be
				used with Lists only.\n
			2. Iterator can traverse in forward direction only whereas ListIterator can be used to
				traverse in both the directions.\n
			3. ListIterator inherits from Iterator interface and comes with extra functionalities like
				adding an element, replacing an element, getting index position for previous and next elements.
        </item>
        <item>
            We can iterate over a list in two different ways:\n
            1. Using iterator\n
            2. Using for-each loop
            \n\n\n
            List&lt;String&gt; strList = new ArrayList&lt;&gt;();\n
            \n\n
            for(String obj : strList){\n
            System.out.println(obj);\n
            }\n
            \n\n
            Iterator&lt;String&gt; it = strList.iterator();\n
            while(it.hasNext()){\n
			String obj = it.next();\n
			System.out.println(obj);\n
			}\n\n
			
			Using iterator is more thread-safe because it makes sure that if underlying list elements are
				modified, it will throw ConcurrentModificationException.
        </item>
        <item>
            Iterator fail-fast property checks for any modification in the structure of the underlying
				collection every time we try to get the next element. If there are any modifications found, it
				throws ConcurrentModificationException. All the implementations of Iterator in Collection
				classes are fail-fast by design except the concurrent collection classes like:\n\n
			ConcurrentHashMap and CopyOnWriteArrayList
        </item>
        <item>
            Iterator fail-safe property work with the clone of underlying collection, hence it’s not affected
				by any modification in the collection. By design, all the collection classes in java.util package
				are fail-fast whereas collection classes in java.util.concurrent are fail-safe.
				Fail-fast iterators throw ConcurrentModificationException whereas fail-safe iterator never
				throws ConcurrentModificationException.
        </item>
        <item>
            We can use concurrent collection classes to avoid ConcurrentModificationException while
				iterating over a collection, for example CopyOnWriteArrayList instead of ArrayList.
        </item>
        <item>
            Iterator interface declare methods for iterating a collection but its implementation is
				responsibility of the Collection implementation classes. Every collection class that returns an
				iterator for traversing has its own Iterator implementation nested class.\n
			This allows collection classes to choose whether iterator is fail-fast or fail-safe. For example
				ArrayList iterator is fail-fast whereas CopyOnWriteArrayList iterator is fail-safe.
        </item>
        <item>
            HashMap stores key-value pair in Map.Entry static nested class implementation. HashMap works
				on hashing algorithm and uses hashCode() and equals() method in put and get methods.\n
			When we call put method by passing key-value pair, HashMap uses Key hashCode() with
				hashing to find out the index to store the key-value pair. The Entry is stored in the LinkedList,
				so if there are already existing entry, it uses equals() method to check if the passed key already
				exists, if yes it overwrites the value else it creates a new entry and store this key-value Entry.
				When we call get method by passing Key, again it uses the hashCode() to find the index in the
				array and then use equals() method to find the correct Entry and return it’s value.\n\n
			The other important things to know about HashMap are capacity, load factor, threshold resizing.
				HashMap initial default capacity is 16 and load factor is 0.75. Threshold is capacity multiplied
				by load factor and whenever we try to add an entry, if map size is greater than threshold,
				HashMap rehashes the contents of map into a new array with a larger capacity. The capacity is
				always power of 2, so if you know that you need to store a large number of key-value pairs, for
				example in caching data from database, it’s good idea to initialize the HashMap with correct
				capacity and load factor.
        </item>
        <item>HashMap uses Key object hashCode() and equals() method to determine the index to put the
				key-value pair. These methods are also used when we try to get value from HashMap. If these
				methods are not implemented correctly, two different Key’s might produce same hashCode()
				and equals() output and in that case rather than storing it at different location, HashMap will
				consider them same and overwrite them.\n
			Similarly all the collection classes that doesn’t store duplicate data use hashCode() and equals()
				to find duplicates, so it’s very important to implement them correctly. The implementation of
				equals() and hashCode() should follow these rules:\n\n
			1. If o1.equals(o2), then o1.hashCode() == o2.hashCode()should always be true.\n
			2. If o1.hashCode() == o2.hashCode is true, it doesn’t mean that o1.equals(o2) will be true.
		</item>
		<item>
		    We can use any class as Map Key, however following points should be considered before using them:\n\n
		    1. If the class overrides equals() method, it should also override hashCode() method.\n
		    2. The class should follow the rules associated with equals() and hashCode() for all
				instances. Please refer earlier question for these rules.\n
			3. If a class field is not used in equals(), you should not use it in hashCode() method.\n
			4. Best practice for user defined key class is to make it immutable, so that hashCode()
				value can be cached for fast performance. Also immutable classes make sure that
				hashCode() and equals() will not change in future that will solve any issue with
				mutability.
		</item>
		<item>
		    Map interface provides three collection views:\n\n
		    1. Set keySet(): Returns a Set view of the keys contained in this map. The set is backed by the
				map, so changes to the map are reflected in the set, and vice-versa. If the map is modified
				while an iteration over the set is in progress (except through the iterator’s own remove
				operation), the results of the iteration are undefined. The set supports element removal,
				which removes the corresponding mapping from the map, via the Iterator.remove,
				Set.remove, removeAll, retainAll, and clear operations. It does not support the add or
				addAll operations.\n\n
			2. Collection values(): Returns a Collection view of the values contained in this map. The
				collection is backed by the map, so changes to the map are reflected in the collection, and
				vice-versa. If the map is modified while an iteration over the collection is in progress
				(except through the iterator’s own remove operation), the results of the iteration are
				undefined. The collection supports element removal, which removes the corresponding
				mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll
				and clear operations. It does not support the add or addAll operations.\n\n
			3. Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet(): Returns a Set view of the mappings contained in this
				map. The set is backed by the map, so changes to the map are reflected in the set, and viceversa.
				If the map is modified while an iteration over the set is in progress (except through
				the iterator’s own remove operation, or through the setValue operation on a map entry
				returned by the iterator) the results of the iteration are undefined. The set supports element
				removal, which removes the corresponding mapping from the map, via the Iterator.remove,
				Set.remove, removeAll, retainAll and clear operations. It does not support the add or
				addAll operations.
		</item>
		<item>
		    HashMap and Hashtable both implements Map interface and looks similar, however there are
				following difference between HashMap and Hashtable:\n\n
			1. HashMap allows null key and values whereas Hashtable doesn’t allow null key and values.\n
			2. Hashtable is synchronized but HashMap is not synchronized. So HashMap is better for
				single threaded environment, Hashtable is suitable for multi-threaded environment.\n
			3. LinkedHashMap was introduced in Java 1.4 as a subclass of HashMap, so incase you want
				iteration order, you can easily switch from HashMap to LinkedHashMap but that is not the
				case with Hashtable whose iteration order is unpredictable.\n
			4. HashMap provides Set of keys to iterate and hence it’s fail-fast but Hashtable provides
				Enumeration of keys that doesn’t support this feature.\n
			5. Hashtable is considered to be legacy class and if you are looking for modifications of Map
				while iterating, you should use ConcurrentHashMap.
		</item>
		<item>
		    For inserting, deleting, and locating elements in a Map, the HashMap offers the best alternative.\n
		    If, however, you need to traverse the keys in a sorted order, then TreeMap is your better
				alternative.\n
			Depending upon the size of your collection, it may be faster to add elements to a
				HashMap, then convert the map to a TreeMap for sorted key traversal.
		</item>
		<item>
		    ArrayList and Vector are similar classes in many ways:\n\n
		    1. Both are index based and backed up by an array internally.\n
		    2. Both maintains the order of insertion and we can get the elements in the order of insertion.\n
		    3. The iterator implementations of ArrayList and Vector both are fail-fast by design.\n
		    4. ArrayList and Vector both allows null values and random access to element using index number.\n
		    \n
		    These are the differences between ArrayList and Vector:\n\n
		    1. Vector is synchronized whereas ArrayList is not synchronized. However if you are looking
				for modification of list while iterating, you should use CopyOnWriteArrayList.\n
			2. ArrayList is faster than Vector because it doesn’t have any overhead because of
				synchronization.\n
			3. ArrayList is more versatile because we can get synchronized list or read-only list from it
				easily using Collections utility class.
		</item>
		<item>
		    The main different is:\n
		    1. Arrays can contain primitive or Objects whereas ArrayList can contain only Objects.\n
			2. Arrays are fixed size whereas ArrayList size is dynamic.\n
			3. Arrays doesn’t provide a lot of features like ArrayList, such as addAll, removeAll, iterator etc.\n
		    \n
		    Although ArrayList is the obvious choice when we work on list, there are few times when array
				are good to use:\n
			1. If the size of list is fixed and mostly used to store and traverse them.\n
			2. For list of primitive data types, although Collections use autoboxing to reduce the
				coding effort but still it makes them slow when working on fixed size primitive data types.\n
			3. If you are working on fixed multi-dimensional situation, using [][] is far more easier
				than List&lt;List&lt;&gt;&gt;
		</item>
		<item>
		    ArrayList and LinkedList both implement List interface but there are some differences between them:\n\n
		    1. ArrayList is an index based data structure backed by Array, so it provides random
				access to its elements with performance as O(1) but LinkedList stores data as list of nodes
				where every node is linked to its previous and next node. So even though there is a method
				to get the element using index, internally it traverse from start to reach at the index node
				and then return the element, so performance is O(n) that is slower than ArrayList.\n
			2. Insertion, addition or removal of an element is faster in LinkedList compared to
				ArrayList because there is no concept of resizing array or updating index when element is
				added in middle.\n
			3. LinkedList consumes more memory than ArrayList because every node in LinkedList
				stores reference of previous and next elements.
		</item>
		<item>
		    ArrayList, HashMap, TreeMap, Hashtable classes provide random access to its elements.
		</item>
		<item>
		    java.util.EnumSet is Set implementation to use with enum types. All of the elements in an enum
				set must come from a single enum type that is specified, explicitly or implicitly, when the set is
				created. EnumSet is not synchronized and null elements are not allowed. It also provides some
				useful methods like copyOf(Collection c), of(E first, E… rest) and complementOf(EnumSet s).
		</item>
		<item>
		    Vector, Hashtable, Properties and Stack are synchronized classes, so they are thread-safe and
				can be used in multi-threaded environment. Java 1.5 Concurrent API included some collection
				classes that allow modification of collection while iteration because they work on the clone of
				the collection, so they are safe to use in multi-threaded environment.
		</item>
		<item>
		    Java 1.5 Concurrent package (java.util.concurrent) contains thread-safe collection classes that
				allow collections to be modified while iterating. By design Iterator implementation
				in java.util packages are fail-fast and throws ConcurrentModificationException. But Iterator
				implementation injava.util.concurrent packages are fail-safe and we can modify the collection
				while iterating.\n\n
			Some of these classes are:\n
			CopyOnWriteArrayList, ConcurrentHashMap, CopyOnWriteArraySet.
		</item>
		<item>
		    java.util.concurrent.BlockingQueue is a Queue that supports operations that wait for the queue
				to become non-empty when retrieving and removing an element, and wait for space to become
				available in the queue when adding an element.\n
			BlockingQueue interface is part of java collections framework and it’s primarily used for
				implementing producer consumer problem. We don’t need to worry about waiting for the space
				to be available for producer or object to be available for consumer in BlockingQueue as its
				handled by implementation classes of BlockingQueue.\n
			Java provides several BlockingQueue implementations such as ArrayBlockingQueue,
				LinkedBlockingQueue, PriorityBlockingQueue, SynchronousQueue etc.
		</item>
		<item>
		    Both Queue and Stack are used to store data before processing them. java.util.Queue is an
				interface whose implementation classes are present in java concurrent package. Queue allows
				retrieval of element in First-In-First-Out (FIFO) order but it’s not always the case. There is also
				Deque interface that allows elements to be retrieved from both end of the queue.\n\n
			Stack is similar to queue except that it allows elements to be retrieved in Last-In-First-Out
				(LIFO) order.\n\n
			Stack is a class that extends Vector whereas Queue is an interface.
		</item>
		<item>
		    java.util.Collections is a utility class consists exclusively of static methods that operate on or
				return collections. It contains polymorphic algorithms that operate on collections, “wrappers”,
				which return a new collection backed by a specified collection, and a few other odds and ends.
				This class contains methods for collection framework algorithms, such as binary search,
				sorting, shuffling, reverse etc.
		</item>
		<item>
		    Java provides Comparable interface which should be implemented by any custom class if we
				want to use Arrays or Collections sorting methods. Comparable interface has compareTo(T obj)
				method which is used by sorting methods. We should override this method in such a way that it
				returns a negative integer, zero, or a positive integer if “this” object is less than, equal to, or
				greater than the object passed as argument.\n
			Comparable.compareTo(Object o)method implementation can sort based on one field
				only and we can’t choose the field on which we want to sort the Object.\n
			Comparator interface compare(Object o1, Object o2) method need to be implemented that takes
				two Object argument, it should be implemented in such a way that it returns negative int if first
				argument is less than the second one and returns zero if they are equal and positive int if first
				argument is greater than second one.\n\n
			Comparable and Comparator interfaces are used to sort collection or array of objects.\n
			Comparable interface is used to provide the natural sorting of objects and we can use it to
				provide sorting based on single logic.\n
			Comparator interface is used to provide different algorithms for sorting and we can choose the
				comparator we want to use to sort the given collection of objects.
		</item>
		<item>
		    If we need to sort an array of Objects, we can use Arrays.sort(). If we need to sort a list of
				objects, we can use Collections.sort(). Both these classes have overloaded sort() methods for
				natural sorting (using Comparable) or sorting based on criteria (using Comparator).\n
			Collections internally uses Arrays sorting method, so both of them have same performance
				except that Collections take some time to convert list to array.
		</item>
		<item>
		    We can create a read-only collection using\n Collections.unmodifiableCollection(Collection
				c) method before passing it as argument, this will make sure that any operation to change the
				collection will throw UnsupportedOperationException.
		</item>
		<item>
		    We can use Collections.synchronizedCollection(Collection c) to get a synchronized (threadsafe)
				collection backed by the specified collection.
		</item>
		<item>
		    Java Collections Framework provides algorithm implementations that are commonly used such
				as sorting and searching. Collections class contain these method implementations. Most of these
				algorithms work on List but some of them are applicable for all kinds of collections.\n\n
			Some of them are sorting, searching, shuffling, min-max values.
		</item>
		<item>
		    PriorityQueue is an unbounded queue based on a priority heap and the elements are ordered in
				their natural order or we can provide Comparator for ordering at the time of creation.\n
			PriorityQueue doesn’t allow null values and we can’t add any object that doesn’t provide natural
				ordering or we don’t have any comparator for them for ordering. Java PriorityQueue is
				not thread-safe.\n
			Provided O(log(n)) time for enqueing and dequeing operations.
		</item>
        
    </string-array>
    
</resources>
