<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="exception_answers">
        <item>
            Exception is an error event that can happen during the execution of a program and disrupts
				it’s normal flow. Exception can arise from different kind of situations such as wrong data
				entered by user, hardware failure, network connection failure etc.\n
			Whenever any error occurs while executing a java statement, an exception object is created
				and thenJRE tries to find exception handler to handle the exception. If suitable exception
				handler is found then the exception object is passed to the handler code to process the exception,
				known as catching the exception. If no handler is found then application throws the exception
				to runtime environment and JRE terminates the program.\n
			Java Exception handling framework is used to handle runtime errors only, compile time errors
				are not handled by exception handling framework.
        </item>
        <item>
            There are four keywords used in java exception handling.\n\n
            1. throw: Sometimes we explicitly want to create exception object and then throw it to
				halt the normal processing of the program. throw keyword is used to throw exception to
				the runtime to handle it.\n
			2. throws: When we are throwing any checked exception in a method and not handling
				it, then we need to use throws keyword in method signature to let caller program know the
				exceptions that might be thrown by the method. The caller method might handle these
				exceptions or propagate it to it’s caller method using throws keyword. We can provide
				multiple exceptions in the throws clause and it can be used with main() method also.\n
			3. try-catch: We use try-catch block for exception handling in our code. try is the start
				of the block and catch is at the end of try block to handle the exceptions. We can have
				multiple catch blocks with a try and try-catch block can be nested also. catch block requires
				a parameter that should be of type Exception.\n
			4. finally: finally block is optional and can be used only with try-catch block. Since
				exception halts the process of execution, we might have some resources open that will not
				get closed, so we can use finally block. finally block gets executed always, whether
				exception occurrs or not.
        </item>
        <item>
            If you are catching a lot of exceptions in a single try block, you will notice that catch block code
				looks very ugly and mostly consists of redundant code to log the error, keeping this in mind Java
				7 one of the feature was multi-catch block where we can catch multiple exceptions in a single
				catch block. The catch block with this feature looks like below:\n\n
			catch(IOException | SQLException | Exception ex){\n
			throw new MyException(ex.getMessage());\n
			}\n\n
			
			Most of the time, we use finally block just to close the resources and sometimes we forget to
				close them and get runtime exceptions when the resources are exhausted. These exceptions are
				hard to debug and we might need to look into each place where we are using that type of
				resource to make sure we are closing it. So java 7 one of the improvement was try-withresources
				where we can create a resource in the try statement itself and use it inside the trycatch
				block. When the execution comes out of try-catch block, runtime environment
				automatically close these resources. Sample of try-catch block with this improvement is:\n\n
			
			try (MyResource mr = new MyResource()) {\n
			System.out.println("MyResource created in try-with-resources");\n
			} catch (Exception e) {\n
			e.printStackTrace();\n
			}\n
        </item>
        <item>
            Checked Exceptions should be handled in the code using try-catch block or else
				main() method should use throws keyword to let JRE know about these exception that
				might be thrown from the program. Unchecked Exceptions are not required to be handled
				in the program or to mention them in throws clause.\n\n
			Exception is the super class of all checked exceptions whereas RuntimeException is the
				super class of all unchecked exceptions.\n\n
			Checked exceptions are error scenarios that are not caused by program, for example
				FileNotFoundException in reading a file that is not present, whereas Unchecked exceptions
				are mostly caused by poor programming, for example NullPointerException when invoking
				a method on an object reference without making sure that it’s not null.
        </item>
        <item>
            throws keyword is used with method signature to declare the exceptions that the method might
				throw whereas throw keyword is used to disrupt the flow of program and handing over the
				exception object to runtime to handle it.
        </item>
        <item>
            final and finally are keywords in java whereas finalize is a method.\n\n
            final keyword can be used with class variables so that they can’t be reassigned, with class to
				avoid extending by classes and with methods to avoid overriding by subclasses, finally keyword
				is used with try-catch block to provide statements that will always gets executed even if some
				exception arises, usually finally is used to close resources. finalize() method is executed by
				Garbage Collector before the object is destroyed, it’s great way to make sure all the global
				resources are closed.\n\n
			Out of these three, only finally is related to java exception handling.
        </item>
         <item>
            One of the Java 7 features is try-with-resources statement for automatic resource management.
				Before Java 7, there was no auto resource management and we should explicitly close the
				resource. Usually, it was done in the finally block of a try-catch statement. This approach used to
				cause memory leaks when we forgot to close the resource.\n
			From Java 7, we can create resources inside try block and use it. Java takes care of closing it as
				soon as try-catch block gets finished.\n
			\n
			Example:\n
			try(FileInputStream input = new FileInputStream("file.txt")) {\n.
			..\n
			}\n
        </item>
        <item>
            Java 7 one of the improvement was multi-catch block where we can catch multiple exceptions in
				a single catch block. This makes are code shorter and cleaner when every catch block has similar code.\n
			If a catch block handles multiple exception, you can separate them using a pipe (|) and in this
				case exception parameter (ex) is final, so you can’t change it.
        </item>
    </string-array>
    
</resources>
