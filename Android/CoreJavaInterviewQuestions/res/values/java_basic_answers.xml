<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="java_basic_answers">
        <item>
            Java doesn’t support multiple inheritance in classes because of “Diamond Problem”.\n
            Example of Diamond Problem:\n\n
            class A {}\n
            class B extends A {}\n
            class C extends A {}\n
            class D extends B,C {}  //Here is the problem.\n
            However multiple inheritance is supported in interfaces. An interface can extend multiple
				interfaces because they just declare the methods and implementation will be present in the
				implementing class. So there is no issue of diamond problem with interfaces.
        </item>
        <item>
            Java is not said to be pure object oriented because it support primitive types such as int, byte,
				short, long etc. I believe it brings simplicity to the language while writing our code. Obviously
				java could have wrapper objects for the primitive types but just for the representation, they
				would not have provided any benefit.\n
			For all the primitive types we have wrapper classes such as Integer, Long etc that
				provides some additional methods.
        </item>
        <item>
            PATH is an environment variable used by operating system to locate the executables. That’s
				why when we install Java or want any executable to be found by OS, we need to add the
				directory location in the PATH variable.\n\n
			Classpath is specific to java and used by java executables to locate class files. We can provide
				the classpath location while running java application and it can be a directory, ZIP files, JAR files etc.
        </item>
        <item>
            main() method is the entry point of any standalone java application. The syntax of main method is:\n
            public static void main(String args[]) {}\n
            main method is public and static so that java can access it without initializing the class. The
				input parameter is an array of String through which we can pass runtime arguments to the java program.
        </item>
        <item>
            When we have more than one method with same name in a single class but the arguments are
				different, then it is called as method overloading.\n\n
			Overriding concept comes in picture with inheritance when we have two methods with same
				signature, one in parent class and another in child class. We can use @Override annotation in
				the child class overridden method to make sure if parent class method is changed, so as child class.
        </item>
        <item>
            Yes, we can have multiple methods with name “main” in a single class. However if we run the
				class, java runtime environment will look for main method with syntax as:\n
			public static void main(String args[])
        </item>
        <item>
            We can’t have more than one public class in a single java source file. A single source file can
				have multiple classes that are not public.
        </item>
        <item>
            Java package is the mechanism to organize the java classes by grouping them. The grouping
				logic can be based on functionality or modules based. A java class fully classified name contains
				package and class name. For example, java.lang.Object is the fully classified name
				of Object class that is part ofjava.lang package.\n\n
			java.lang package is imported by default and we don’t need to import any class from this package explicitly.
        </item>
        <item>
            Java provides access control through public, private and protected access modifier keywords.
				When none of these are used, it’s called default access modifier.\n
			A java class can only have public or default access modifier.
        </item>
        <item>
            final keyword is used with Class to make sure no other class can extend it, for example String
				class is final and we can’t extend it.\n
			We can use final keyword with methods to make sure child classes can’t override it.\n
			final keyword can be used with variables to make sure that it can be assigned only once.
				However the state of the variable can be changed, for example we can assign a final variable to
				an object only once but the object variables can change later on.\n
			Java interface variables are by default final and static.
        </item>
        <item>
            static keyword can be used with class level variables to make it global i.e all the objects will
				share the same variable.\n
			static keyword can be used with methods also. A static method can access only static variables of
				class and invoke only static methods of the class.
        </item>
        <item>
            finally block is used with try-catch to put the code that you want to get executed always, even if
				any exception is thrown by the try-catch block. finally block is mostly used to release resources created in the try block.\n
			finalize() is a special method in Object class that we can override in our classes. This method
				get’s called by garbage collector when the object is getting garbage collected. This method is
				usually overridden to release system resources when object is garbage collected.
        </item>
        <item>
            We can’t declare a top-level class as static however an inner class can be declared as static. If
				inner class is declared as static, it’s called static nested class.\n
			Static nested class is same as any other top-level class and is nested for only packaging convenience.
        </item>
        <item>
            If we have to use any static variable or method from other class, usually we import the class and
				then use the method/variable with class name.\n\n
			For example,\n
			Without static import:\n
			import java.lang.Math;\n
			double test = Math.PI * 5;\n
			\n
			We can do the same thing by importing the static method or variable only and then use it in the
				class as if it belongs to it.\n
			import static java.lang.Math.PI;\n
			double test = PI * 5;\n
			\n
			Note: Use of static import can cause confusion, so it’s better to avoid it. Overuse of static import can
				make your program unreadable and unmaintainable.
        </item>
        <item>
            Interfaces are core part of java programming language and used a lot not only in JDK but also
				java design patterns, most of the frameworks and tools. Interfaces provide a way to achieve
				abstraction in java and used to define the contract for the subclasses to implement.\n
			Interfaces are good for starting point to define Type and create top level hierarchy in our code.
				Since a java class can implements multiple interfaces, it’s better to use interfaces as super class
				in most of the cases.
        </item>
        <item>
            Abstract classes are used in java to create a class with some default method implementation for
				subclasses. An abstract class can have abstract method without body and it can have methods
				with implementation also.\n
			abstract keyword is used to create a abstract class. Abstract classes can’t be instantiated and
				mostly used to provide base for sub-classes to extend and implement the abstract methods and
				override or use the implemented methods in abstract class.
        </item>
        <item>
            The difference are:\n\n
            1. abstract keyword is used to create abstract class whereas interface is the keyword for interfaces.\n
            2. Abstract classes can have method implementations whereas interfaces can’t.\n
            3. A class can extend only one abstract class but it can implement multiple interfaces.\n
            4. We can run abstract class if it has main() method whereas we can’t run an interface.
        </item>
        <item>
            Interfaces don’t implement another interface, they extend it. Since interfaces can’t have method
				implementations, there is no issue of diamond problem. That’s why we have multiple inheritance
				in interfaces i.e an interface can extend multiple interfaces.
        </item>
        <item>
            A marker interface is an empty interface without any method but used to force some
				functionality in implementing classes by Java. Some of the well known marker interfaces are:\n
			Serializable and Cloneable.
        </item>
        <item>
            Java wrapper classes are the Object representation of eight primitive types in java. All the
				wrapper classes in java are immutable and final. Java 5 autoboxing and unboxing allows easy
				conversion between primitive types and their corresponding wrapper classes.
        </item>
        <item>
            Enum was introduced in Java 1.5 as a new type whose fields consists of fixed set of constants.
				For example, in Java we can create Direction as enum with fixed fields as EAST, WEST, NORTH, SOUTH.\n
			enum is the keyword to create an enum type and similar to class. Enum constants are implicitly static and final.
        </item>
        <item>
            Java Annotations provide information about the code and they have no direct effect on the code
				they annotate. Annotations are introduced in Java 5. Annotation is metadata about the program
				embedded in the program itself. It can be parsed by the annotation parsing tool or by compiler.
				We can also specify annotation availability to either compile time only or till runtime also. Java
				Built-in annotations are:\n
			@Override, @Deprecated and @SuppressWarnings
        </item>
        <item>
            Java Reflection API provides ability to inspect and modify the runtime behavior of java
				application. We can inspect a java class, interface, enum and get their methods and field details.\n
			Reflection API is an advanced topic and we should avoid it in normal programming. Reflection
				API usage can break the design pattern such as Singleton pattern by invoking the private
				constructor i.e violating the rules of access modifiers.\n\n
			Even though we don’t use Reflection API in normal programming, it’s very important to have.
				We can’t have any frameworks such as Spring, Hibernate or servers such as Tomcat, JBoss
				without Reflection API. They invoke the appropriate methods and instantiate classes through
				reflection API and use it a lot for other processing.
        </item>
        <item>
            Composition is the design technique to implement has-a relationship in classes. We can use
				Object composition for code reuse.\n
			Java composition is achieved by using instance variables that refers to other objects. Benefit of
				using composition is that we can control the visibility of other object to client classes and reuse only what we need.
        </item>
        <item>
            One of the best practices of java programming is to “favor composition over inheritance”.\n
            Some of the possible reasons are:\n\n
            1. Any change in the superclass might affect subclass even though we might not be using
				the superclass methods. For example, if we have a method test() in subclass and suddenly
				somebody introduces a method test() in superclass, we will get compilation errors in
				subclass. Composition will never face this issue because we are using only what methods we need.\n
			2. Inheritance exposes all the super class methods and variables to client and if we have no
				control in designing superclass, it can lead to security holes. Composition allows us to
				provide restricted access to the methods and hence more secure.\n
			3. We can get runtime binding in composition where inheritance binds the classes at
				compile time. So composition provides flexibility in invocation of methods.
        </item>
        <item>
            We need to implement Comparable interface to support sorting of custom objects in a collection.
				Comparable interface has compareTo(T obj) method which is used by sorting methods and by
				providing this method implementation, we can provide default way to sort custom objects
				collection.\n\n
			However, if you want to sort based on different criteria, such as sorting an Employees collection
				based on salary or age, then we can create Comparator instances and pass it as sorting methodology. 
        </item>
        <item>
            We can define a class inside a class and they are called nested classes. Any non-static nested
				class is known as inner class. Inner classes are associated with the object of the class and they
				can access all the variables and methods of the outer class. Since inner classes are associated
				with instance, we can’t have any static variables in them.\n
			We can have local inner class or anonymous inner class inside a class. 
        </item>
        <item>
            A local inner class without name is known as anonymous inner class. An anonymous class is
				defined and instantiated in a single statement. Anonymous inner class always extend a class or
				implement an interface.\n
			Since an anonymous class has no name, it is not possible to define a constructor for an
				anonymous class. Anonymous inner classes are accessible only at the point where it is defined.
        </item>
        <item>
            Java Classloader is the program that loads byte code program into memory when we want to
				access any class. We can create our own classloader by extending ClassLoader class and
				overriding loadClass(String name) method.
        </item>
        <item>
            There are three types of built-in Class Loaders in Java:\n\n
            1. Bootstrap Class Loader – It loads JDK internal classes, typically loads rt.jar and other core classes.\n
            2. Extensions Class Loader – It loads classes from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory.\n
            3. System Class Loader – It loads classes from the current classpath that can be set while invoking a program using -cp or 
            	-classpath command line options.
        </item>
        <item>
            Java ternary operator is the only conditional operator that takes three operands. It’s a one liner
				replacement for if-then-else statement and used a lot in java programming. We can use ternary
				operator if-else conditions or even switch conditions using nested ternary operators.
        </item>
        <item>
            super keyword can be used to access super class method when you have overridden the method
				in the child class.\n
			We can use super keyword to invoke super class constructor in child class constructor but in this
				case it should be the first statement in the constructor method.
        </item>
        <item>
            We can use break statement to terminate for, while, or do-while loop. We can use break
				statement in switch statement to exit the switch case. You can see the example of break
				statement at java break. We can use break with label to terminate the nested loops.\n
			The continue statement skips the current iteration of a for, while or do-while loop. We can use
				continue statement with label to skip the current iteration of outermost loop.
        </item>
        <item>
            this keyword provides reference to the current object and it’s mostly used to make sure that
				object variables are used, not the local variables having same name.\n
			We can also use this keyword to invoke other constructors from a constructor.
        </item>
        <item>
            No argument constructor of a class is known as default constructor. When we don’t define any
				constructor for the class, java compiler automatically creates the default no-args constructor for
				the class. If there are other constructors defined, then compiler won’t create default constructor for us.
        </item>
        <item>
            Yes, we can have try-finally statement and hence avoiding catch block.
        </item>
        <item>
            Garbage Collection is the process of looking at heap memory, identifying which objects are in
				use and which are not, and deleting the unused objects. In Java, process of deallocating memory
				is handled automatically by the garbage collector.\n
			We can run the garbage collector with code Runtime.getRuntime().gc() or use utility
				method System.gc(). For a detailed analysis of Heap Memory and Garbage Collection.
        </item>
        <item>
            We can convert a Java object to an Stream that is called Serialization. Once an object is
				converted to Stream, it can be saved to file or send over the network or used in socket connections.\n
			The object should implement Serializable interface and we can use java.io.ObjectOutputStream
				to write object to file or to any OutputStream object.\n\n
			The process of converting stream data created through serialization to Object is called deserialization. 
        </item>
        <item>
            We can run a jar file using java command but it requires Main-Class entry in jar manifest file.
				Main-Class is the entry point of the jar and used by java command to execute the class.
        </item>
        <item>
            Java System Class is one of the core classes. One of the easiest way to log information for
				debugging is System.out.print() method.\n
			System class is final so that we can’t subclass and override it’s behavior through inheritance.
				System class doesn’t provide any public constructors, so we can’t instantiate this class and that’s
				why all of it’s methods are static.\n
			Some of the utility methods of System class are for array copy, get current time, reading
				environment variables.
        </item>
        <item>
            We can use instanceof keyword to check if an object belongs to a class or not. We should avoid
				it’s usage as much as possible.
        </item>
        <item>
            This is a very confusing question, we know that object variables contain reference to the Objects
				in heap space. When we invoke any method, a copy of these variables is passed and gets stored
				in the stack memory of the method. We can test any language whether it’s pass by reference or
				pass by value through a simple generic swap method.
        </item>
        <item>
            Major difference between Heap and Stack memory are as follows:\n\n
            1. Heap memory is used by all the parts of the application whereas stack memory is used
				only by one thread of execution.\n
			2. Whenever an object is created, it’s always stored in the Heap space and stack memory
				contains the reference to it. Stack memory only contains local primitive variables and
				reference variables to objects in heap space.\n
			3. Memory management in stack is done in LIFO manner whereas it’s more complex in
				Heap memory because it’s used globally.
        </item>
        
    </string-array>
    
</resources>
