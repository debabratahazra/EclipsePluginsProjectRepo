<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="string_answers">
        <item>We can use String getBytes() method to convert String to byte array and we can use String constructor new String(byte[] arr) to convert byte array to String.
		</item>
		<item>
		    Java 7 extended the capability of switch case to use Strings also, earlier java versions doesn’t support this.\n
			If you are implementing conditional flow for Strings, you can use if-else conditions and you can use switch case if you are using Java 7 or higher versions.
		</item>
		<item>
		    String is immutable and final in java, so whenever we do String manipulation, it creates a new String. String manipulations are resource consuming, so java provides two utility classes for String manipulations – StringBuffer and StringBuilder.\n
			StringBuffer and StringBuilder are mutable classes. StringBuffer operations are thread-safe and synchronized where StringBuilder operations are not thread-safe. So when multiple threads are working on same String, we should use StringBuffer but in single threaded environment we should use StringBuilder.\n
			StringBuilder performance is fast than StringBuffer because of no overhead of synchronization.
		</item>
        <item>
            There are several benefits of String because it’s immutable and final.\n
			1. String Pool is possible because String is immutable in java.\n
			2. It increases security because any hacker can’t change its value and it’s used for storing sensitive information such as database username, password etc.\n
			3. Since String is immutable, it’s safe to use in multi-threading and we don’t need any synchronization.\n
			4. Strings are used in java classloader and immutability provides security that correct class is getting loaded by Classloader.
        </item>
        <item>
            String is immutable in java and stored in String pool. Once it’s created it stays in the pool until unless garbage collected, so even though we are done with password it’s available in memory for longer duration and there is no way to avoid it. It’s a security risk because anyone having access to memory dump can find the password as clear text.\n
			If we use char array to store password, we can set it to blank once we are done with it. So we can control for how long it’s available in memory that avoids the security threat with String.
        </item>
        <item>
            There are two ways to check if two Strings are equal or not – using \“==\” operator or using equals method. When we use “==” operator, it checks for value of String as well as
				reference but in our programming, most of the time we are checking equality of String for value only. So we should use equals method to check if two Strings are equal or not.
				There is another function equalsIgnoreCase that we can use to ignore case.\n
			String s1 = "abc";\n
			String s2 = "abc";\n
			String s3= new String("abc");\n
			System.out.println("s1 == s2 ? "+(s1==s2)); //true\n
			System.out.println("s1 == s3 ? "+(s1==s3)); //false\n
			System.out.println("s1 equals s3 ? "+(s1.equals(s3))); //true 	
        </item>
        <item>
            As the name suggests, String Pool is a pool of Strings stored in Java heap memory. We know that String is special class in java and we can create String object using new operator
				as well as providing values in double quotes.
        </item>
        <item>
            When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is
				returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.\n
			This method always return a String that has the same contents as this string, but is guaranteed to be from a pool of unique strings.
        </item>
        <item>
            Strings are immutable, so we can’t change it’s value in program. Hence it’s thread-safe and can be safely used in multi-threaded environment.
        </item>
        <item>
            Since String is immutable, its hashcode is cached at the time of creation and it doesn’t need to be calculated again. This makes it a great candidate for key in a Map and it’s processing
				is fast than other HashMap key objects. This is why String is mostly used Object as HashMap keys.
        </item>
        <item>
            We can create String object using new operator like any normal java class or we can use double quotes to create a String object. There are several constructors available in String
				class to get String from char array, byte array, StringBuffer and StringBuilder.\n
			1. String str = new String("abc");\n
			2. String str1 = "abc";\n\n
			When we create a String using double quotes, JVM looks in the String pool to find if any
				other String is stored with same value. If found, it just returns the reference to that String
				object else it creates a new String object with given value and stores it in the String pool.
				When we use new operator, JVM creates the String object but don’t store it into the String
				Pool. We can useintern() method to store the String object into String pool or return the
				reference if there is already a String with equal value present in the pool.
        </item>
        <item>
            Java String implements Comparable interface and it has two variants of compareTo() methods.
				compareTo(String anotherString) method compares the String object with the String argument
				passed lexicographically. If String object precedes the argument passed, it returns negative
				integer and if String object follows the argument String passed, it returns positive integer. It
				returns zero when both the String have same value, in this case equals(String str) method
				will also return true.\n
				compareToIgnoreCase(String str): This method is similar to the first one, except that it
					ignores the case. It uses String CASE_INSENSITIVE_ORDER Comparator for case
					insensitive comparison. If the value is zero thenequalsIgnoreCase(String str) will also return true.
        </item>
        
    </string-array>
</resources>
