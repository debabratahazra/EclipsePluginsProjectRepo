<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->
<module name="Checker">
	
	<!-- Checks that a package.html file exists for each package.     -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
	<!-- module name="PackageHtml">
		<property name="severity" value="warning"/>
	</module -->
	
	
	<!-- Checks whether files end with a new line.                        -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	
	<!-- commented out for reduction of checks
	<module name="NewlineAtEndOfFile">
		<property name="severity" value="info"/>
	</module>
	-->
	
	<!-- Checks that property files contain the same keys.         -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<!-- module name="Translation">
        <property name="severity" value="error"/>
    </module -->
		
	<!-- Checks for duplicated code.                         -->
	<!-- See http://checkstyle.sf.net/config_duplicates.html -->
	<module name="StrictDuplicateCode">
		<property name="severity" value="warning"/>
	</module>
    
    
	<module name="TreeWalker">
		<property name="tabWidth" value="4"/>
        <module name="FileContentsHolder"/>
		
		<!-- Checks for Javadoc comments.                     -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		
		<module name="JavadocType">
			<property name="scope" value="protected"/>
			<property name="severity" value="error"/>
		</module>
		<module name="JavadocMethod">
			<property name="scope" value="protected"/>
			<property name="allowUndeclaredRTE" value="true"/>
			<property name="allowMissingPropertyJavadoc" value="true"/>
			<property name="severity" value="error"/>
		</module>
		<module name="JavadocVariable">
			<property name="scope" value="protected"/>
			<property name="severity" value="error"/>
		</module>
		<module name="JavadocStyle">
			<property name="scope" value="protected"/>
			<property name="checkEmptyJavadoc" value="true"/>
			<property name="severity" value="error"/>
		</module>
		
		<!-- Checks for Naming Conventions.                  -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		
		<module name="AbstractClassName">
			<property name="format" value="^Abstract.*$|^.*Skeleton$"/>
			<property name="severity" value="warning"/>
		</module>
		
		<module name="ConstantName">
			<property name="format" value="^[A-Z](_?[A-Z0-9]+)*$"/>
			<property name="severity" value="error"/>
		</module>
	
		<module name="LocalFinalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="LocalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="ParameterName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="StaticVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>
		
		<module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
			<property name="severity" value="error"/>
		</module>
		<module name="TypeName">
			<property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
			<property name="severity" value="error"/>
		</module>
		
		
		<module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
			<property name="severity" value="warning"/>
		</module>

		
		<!-- Checks for Headers                                -->
		<!-- See http://checkstyle.sf.net/config_header.html   -->
		<!-- <module name="Header">                            -->
		<!-- The follow property value demonstrates the ability     -->
		<!-- to have access to ANT properties. In this case it uses -->
		<!-- the ${basedir} property to allow Checkstyle to be run  -->
		<!-- from any directory within a project. See property      -->
		<!-- expansion,                                             -->
		<!-- http://checkstyle.sf.net/config.html#properties        -->
		<!-- <property                                              -->
		<!--     name="headerFile"                                  -->
		<!--     value="${basedir}/java.header"/>                   -->
		<!-- </module> -->
		<!-- Following interprets the header file as regular expressions. -->
		<!-- <module name="RegexpHeader">
            <property name="severity" value="warning"/>
        </module -->
        
        
		<!-- Checks for imports                              -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		
		<module name="AvoidStarImport">
			<property name="severity" value="warning"/>
		</module>
		<module name="IllegalImport">
			<property name="severity" value="error"/>
		</module>
		<module name="RedundantImport">
			<property name="severity" value="warning"/>
		</module>
		<module name="UnusedImports">
			<property name="severity" value="warning"/>
		</module>
		
		
		<!-- Checks for Size Violations.                    -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		
		<module name="FileLength">
			<property name="max" value="2000"/>
			<property name="severity" value="warning"/>
		</module>
		<!--module name="LineLength">
			<property name="ignorePattern" value="^import"/>
			<property name="max" value="80"/>
			<property name="severity" value="warning"/>
		</module-->
		<module name="MethodLength">
			<property name="max" value="150"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="ParameterNumber">
			<property name="max" value="7"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="ExecutableStatementCount">
			<property name="max" value="30"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="AnonInnerLength">
			<property name="max" value="20"/>
			<property name="severity" value="warning"/>
		</module>

		
		<!-- Checks for whitespace                               -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		
		<!-- module name="EmptyForInitializerPad">
			<property name="severity" value="warning"/>
		</module>
		<module name="EmptyForIteratorPad">
			<property name="severity" value="warning"/>
		</module>
		<module name="MethodParamPad">
			<property name="severity" value="warning"/>
		</module>
		<module name="NoWhitespaceAfter">
			<property name="severity" value="warning"/>
		</module>
		<module name="NoWhitespaceBefore">
			<property name="severity" value="warning"/>
		</module>
		<module name="OperatorWrap">
			<property name="option" value="eol"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="ParenPad">
			<property name="option" value="nospace"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="TypecastParenPad">
			<property name="severity" value="warning"/>
		</module>				
		<module name="WhitespaceAfter">
			<property name="severity" value="warning"/>
		</module>
		<module name="WhitespaceAround">
			<property name="severity" value="warning"/>
		</module -->

		<!-- Too much verbose -->
		<!-- module name="TabCharacter">
            <property name="severity" value="info"/>
        </module -->
		
		
		<!-- Modifier Checks                                    -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		
		<module name="ModifierOrder">
			<property name="severity" value="warning"/>
		</module>
		<module name="RedundantModifier">
			<property name="severity" value="warning"/>
		</module>

		
		<!-- Checks for blocks. You know, those {}'s         -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="NeedBraces">
			<property name="severity" value="info"/>
		</module>
		<module name="EmptyBlock">
            		<property name="tokens" value="LITERAL_CATCH"/>
            		<property name="option" value="text"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="LeftCurly">
			<property name="option" value="eol"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="RightCurly">
			<property name="option" value="same"/>
			<property name="severity" value="warning"/>
		</module>

		
		<!-- Checks for common coding problems               -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		
		<module name="AvoidInlineConditionals">
			<property name="severity" value="warning"/>
		</module>
		<module name="CovariantEquals">
			<property name="severity" value="warning"/>
		</module>
			
		<module name="DoubleCheckedLocking">
			<property name="severity" value="error"/>
		</module>
		
		<module name="EmptyStatement">
			<property name="severity" value="warning"/>
		</module>
		
		<module name="EqualsHashCode">
			<property name="severity" value="error"/>
		</module>
		
		<module name="FinalLocalVariable">
			<property name="severity" value="warning"/>
		</module>
		<module name="HiddenField">
			<property name="ignoreConstructorParameter" value="true"/>
			<property name="ignoreSetter" value="true"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean, java.lang.String"/>
			<property name="severity" value="warning"/>
		</module>

		<module name="IllegalToken">
			<property name="tokens" value="LITERAL_ASSERT"/>
			<property name="severity" value="error"/>
		</module>
		
        	<module name="IllegalTokenText">
            		<property name="severity" value="error"/>
            		<property name="tokens" value="IDENT"/>
            		<property name="format" value="^enum$"/>
            		<property name="ignoreCase" value="false"/>
            		<property name="message" value="Illegal use of enum as identifier"/>
        	</module>
		
		<module name="InnerAssignment">
			<property name="severity" value="error"/>
		</module>
		<module name="MagicNumber">
			<property name="severity" value="warning"/>
		</module>
		<module name="MissingSwitchDefault">
			<property name="severity" value="error"/>
		</module>
		<module name="ModifiedControlVariable">
			<property name="severity" value="error"/>
		</module>
		<module name="RedundantThrows">
			<property name="severity" value="warning"/>
		</module>
		<module name="SimplifyBooleanExpression">
			<property name="severity" value="warning"/>
		</module>
		<module name="SimplifyBooleanReturn">
			<property name="severity" value="warning"/>
		</module>

		<module name="StringLiteralEquality">
			<property name="severity" value="error"/>
		</module>
		
		<module name="NestedIfDepth">
			<property name="max" value="2"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="NestedTryDepth">
			<property name="max" value="2"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="SuperClone">
			<property name="severity" value="error"/>
		</module>
		<module name="SuperFinalize">
			<property name="severity" value="error"/>
		</module>
		<module name="IllegalCatch">
			<property name="severity" value="error"/>
		</module>
		<module name="IllegalThrows">
			<property name="severity" value="error"/>
		</module>
		<module name="PackageDeclaration">
			<property name="severity" value="error"/>
		</module>
		<module name="JUnitTestCase">
			<property name="severity" value="warning"/>
		</module>
		<module name="ReturnCount">
			<property name="severity" value="warning"/>
		</module>
		<module name="IllegalType">
			<property name="severity" value="error"/>
		</module>
		<module name="DeclarationOrder">
			<property name="severity" value="warning"/>
		</module>
		<module name="ParameterAssignment">
			<property name="severity" value="warning"/>
		</module>
		<module name="ExplicitInitialization">
			<property name="severity" value="info"/>
		</module>
		<module name="DefaultComesLast">
			<property name="severity" value="info"/>
		</module>
		<module name="FallThrough">
			<property name="severity" value="warning"/>
		</module>
		<module name="MultipleStringLiterals">
			<property name="severity" value="warning"/>
		</module>
		<module name="MultipleVariableDeclarations">
			<property name="severity" value="warning"/>
		</module>
		<module name="UnnecessaryParentheses">
			<property name="severity" value="warning"/>
		</module>
		
		<!-- Checks for class design                         -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		
		<module name="VisibilityModifier">
			<property name="publicMemberPattern" value="^serialVersionUID$"/>
			<property name="severity" value="error"/>
		</module>
		
		<module name="FinalClass">
			<property name="severity" value="warning"/>
		</module>
		<module name="InterfaceIsType">
			<property name="severity" value="warning"/>
		</module>
		<module name="HideUtilityClassConstructor">
			<property name="severity" value="warning"/>
		</module>

		<!-- Too much verbose -->
		<!-- module name="DesignForExtension">
			<property name="severity" value="warning"/>
		</module -->
		
		<module name="MutableException">
			<property name="severity" value="warning"/>
		</module>
		<module name="ThrowsCount">
			<property name="max" value="4"/>
			<property name="severity" value="warning"/>
		</module>

	
		<!-- Checks for class metrics.                        -->
		<!-- See http://checkstyle.sf.net/config_metrics.html -->
		
		<module name="BooleanExpressionComplexity">
			<property name="severity" value="warning"/>
		</module>
		<module name="ClassDataAbstractionCoupling">
			<property name="severity" value="warning"/>
		</module>
		<module name="ClassFanOutComplexity">
			<property name="severity" value="warning"/>
		</module>
		<module name="CyclomaticComplexity">
			<property name="severity" value="warning"/>
		</module>
		<module name="NPathComplexity">
			<property name="severity" value="warning"/>
		</module>				

		<!-- Redundant -->
		<!-- module name="JavaNCSS">
            <property name="severity" value="warning"/>
        </module -->
        
        
		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="GenericIllegalRegexp">
			<property name="severity" value="error"/>
			<property name="format" value="System\.(out|err)\.print"/>
			<property name="message" value="Illegal use of System.out or System.err, use a logger instead"/>
		</module>
		
		
		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="GenericIllegalRegexp">
			<property name="severity" value="error"/>
			<property name="format" value="\.printStackTrace\(\)"/>
			<property name="message" value="Illegal use of printStackTrace(), use a logger instead"/>
		</module>
		
		
		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="GenericIllegalRegexp">
			<property name="severity" value="error"/>
			<property name="format" value="System\.gc"/>
			<property name="message" value="Illegal use of System.gc(), it cannot be used since it can be pilot by external arguments. This is a design error."/>
		</module>
		
		
		
		<!-- Miscellaneous other checks.                   -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="GenericIllegalRegexp">
			<property name="severity" value="warning"/>
			<property name="format" value="Vector"/>
			<property name="message" value="Avoid use of Vector, use ArrayList instead. Check developer guidelines to know why."/>
		</module>
		
        <module name="GenericIllegalRegexp">
			<property name="severity" value="warning"/>
            <property name="format" value="((public)|(protected))\s+void\s+finalize\(\s*\)"/>
			<property name="message" value="Avoid finalizers"/>            
        </module>
		<module name="TodoComment">
			<property name="format" value="TODO|XXX"/>
			<property name="severity" value="warning"/>
		</module>
		<module name="UpperEll">
			<property name="severity" value="warning"/>
		</module>
		<module name="ArrayTypeStyle">
			<property name="severity" value="warning"/>
		</module>
		<module name="Indentation">
			<property name="severity" value="warning"/>
		</module>
		<module name="TrailingComment">
			<property name="severity" value="warning"/>
		</module>
	</module>
    <module name="SuppressionCommentFilter"/>
</module>
