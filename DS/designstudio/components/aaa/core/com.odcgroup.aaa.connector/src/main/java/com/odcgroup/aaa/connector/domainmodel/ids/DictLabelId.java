package com.odcgroup.aaa.connector.domainmodel.ids;

import java.io.Serializable;

import com.odcgroup.aaa.connector.domainmodel.DictLabelEntity;

/**
 * DictLabel's JPA Application identity clsss (AKA *Ref class, the PK as object).
 * 
 * Hand-written, but strongly inspired by an example generated by the org.apache.openjpa.enhance.ApplicationIdTool.
 * 
 * @see DictLabelEntity
 * 
 * @author Michael Vorburger
 */
public class DictLabelId implements Serializable {

    private static final long serialVersionUID = -1740668299675850786L;
    
    public long language;
    public long entityRef;

    public long objectRef;
    
    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (int) (entityRef ^ (entityRef >>> 32));
        result = prime * result + (int) (language ^ (language >>> 32));
        result = prime * result + (int) (objectRef ^ (objectRef >>> 32));
        return result;
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null  || getClass() != obj.getClass())
            return false;
        
        final DictLabelId other = (DictLabelId) obj;
        return (entityRef == other.entityRef) && (language == other.language) && (objectRef == other.objectRef);
    }

     static {
        // register persistent class in JVM (the OpenJPA ApplicationIdTool gen. this; seemed like a good idea)
        try {
            Class.forName(DictLabelEntity.class.getName());
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } 
    }

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "DictLabelId [entityRef=" + entityRef + ", language=" + language + ", objectRef=" + objectRef + "]";
	}
}
