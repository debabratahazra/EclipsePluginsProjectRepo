* Version 174 15/06/01  GLOBUS Release No. G12.0.00 29/06/01
*-----------------------------------------------------------------------------
* <Rating>298672</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE SEC.TRADE.BASIC
*-----------------------------------------------------------------------------
* M O D I F I C A T I O N S
*-----------------------------------------------------------------------------
* 23/06/92 - GB9200439
*            Check in ISIN code on SECURITY.MASTER added for valuation section for CEDEL and
*            EUROCLEAR clearing (Pete May 1992).
*
* 22/10/92 - GB9200952
*            YARRAY(20) corrected to not be null when calling SC.SE.CALC:STK.COUNTRY.
*a
* 21/12/93 - GB9301824
*            BDG Merge - New field CL.COMMISSION added. Logic to default CL.COMMISSION. Override
*            if payment cable is generated.
*
* 13/01/94 - GB9400028
*            Don't do price tolerance check if there is no SECURITY.MASTER price (pete) Helpdesk
*            HD9400034.
*
* 29/03/94 - GB9400365 
*            Display error from WORKING.DAY against correct field when missing holidays.
*
* 05/05/94 - GB9400606
*            Generate override if Maturity date less than today.
*
* 15/09/94 - GB9401012
*            New field of TRADE.TIME added. If TRADE.TIME.FLAG is 'Y' then TRADE.TIME is accepted
*            by the user OR defaulted to current time, else TRADE.TIME is left with blank
*
* 10/10/96 - GB9601417
*            Previous change on GB9601341 to prevent Security.Trans being flagged as Reversals
*            when not so Error produced by amending and deleting a Sec.Trade. This program change
*            caused a crash on amend and delete an unauthorised Sec.Trade. It was impossible to
*            amend an authorised trade Changes - unauthorised deleted, no further action Authorised
*            deleted, only reinstate the Old record once
*
* 14/10/96 - GB9601439
*            Reversal of a Sec Trade does not reverse out the correct accounting entries after an
*            authorised amendment
*
* 21/11/96 - GB9601604
*            Modify to allow GUI to handle automatic multivalue expansion, and field skipping,
*            program uses input buffer to do this, further changes will be required to make this
*            program conform to normal globus standards
*
* 19/12/96 - GB9601771
*            To produce deal slips for Reversals the Function for the Call of Deals slips needs to
*            be set to R and reset on returning
*
* 20/12/96 - GB9601775
*            Bug on Version which does not include the INTR.AMT and REALLOWANCE fields. The NO.NOM
*            and Price fields values are removed when return is hit
*
* 17/01/97 - GB9700048
*            Give an override warning if the last customer price is null in the Security Master
*
* 14/02/97 - GB9700068
*            Special checking for compound discount accrual:
*            1.  Block price types other than DPRICE
*            2.  Disallow discount sold to real.pl
*
* 21/02/97 - GB9700201
*            Modified to correct spelling error when reading SC.SETTL.DATE.CONTROL and also correct
*            variable undefined error.
*
* 27/02/97 - GB9700195
*            (1) Exchange rate was being defaulted prior to amount of deal being known.
*            (2) Mid reval rate was being deafulted into EX.RATE.ACC after CU.FEES.MISC instead of
*                customer rate for net amount.
*            (3) Override was not generated for CU.EX.RATE.ACC when net amount for customer
*                exceeded negotiable amount defined on Currency file.
*
* 10/03/97 - GB9700290
*            Default CU.EX.RATE.ACC to 1 when trade and account currencies are the same.
*
* 17/03/97 - GB9700257
*            Add an extra multi value field into the MY.MESSAGE parameter when calling
*            SC.TRANS.UPDATE to indicate to the program the call type
*
* 01/04/97 - GB9700359
*            Don't expand the cust price / broker price sub values if we are in a version with
*            expansion set to no for these fields
*
* 23/04/97 - GB9700479
*            For the Depository, Nominee codes may default from the Vault.Parameter record. If the
*            Depository is changed the Nominee codes should default again
*
* 19/05/97 - GB9700626
*            CONSOL.RATE and SETTLE.AMOUNT are empty even when the customer account ccy is
*            different from the trade ccy.
*
* 16/06/97 - GB9700707
*            The changes introduced for rates at GB9700195 use the field Ret.Code, but this may not
*            have been set up for Own Dealer Book processing
*
* 08/08/97 - GB9700915
*            Ben.Bank.1 does not always display
*
* 11/08/97 - GB9700921
*            Clients included in a trade but not themselves amended showed 3 cash movements over
*            their account instead of one.
*
* 04/09/97 - GB9701014
*            If the customer'a/c currency is not in sync with the currency populated in the field
*            CU.ACCOUNT.CCY then an error must be displayed in the cross validation.
*
* 05/09/97 - GB9701018
*            Override text is not set up correctly for restriction authorisation through
*            Override.Class. HD item for 'NONE TO SELL', but correct the other text too
*
* 15/09/97 - GB9701050
*            Further to the fix in GB9701014 perform the processing only if the ACCOUNT No in view
*            is numeric.
*
* 16/09/97 - GB9701059
*            SWIFT'97 changes - add validation for new field CUM.EX.IND
*
* 03/12/97 - GB9701432
*            When any of the fields are changed on SEC.TRADE alone the program ends with a fatal
*            error on not finding the SECS.UNAUTH record in SC.TRANS.UPDATE on authorisation of
*            the change. The fields involved are : TRADE.TIME, NARRATIVE, DELIV.INSTR, OVE.ADDR and
*            MESS.CONTROL
*
* 17/12/97 - GB9701451
*            Add new field PORT.CONSTRAINT.NO for portfolio issuer limit. Also add call to
*            SC.CHECK.PORTFOLIO.CONSTRAINT at OVERRIDE stage. However, this can only be applied to
*            single customer SEC.TRADEs, i.e. only one CUST.SEC.ACC.
*
* 12/01/98 - GB9800014
*            The program must recreate the SECS.UNAUTH file after EB.ACCOUNTING has given an
*            override and the user has replied with a 'NO' to it.
*
* 27/01/98 - GB9800045
*            The introduction of separate accounting entry files to deal with amendments leads to
*            the loss of identical entries on input
*
* 17/03/98 - GB9800274
*            Make program work with GTS inputs. Make sure that fields normally defaulted from
*            SEC.ACC.MASTER during field input are set up at the begining of cross validation.
*            Make price type a non mandatory field as it is no input and set up from sec acc
*            master. If message is set to 'RET' after unauth record write then return to ID.INPUT
*            as a validation error has occurred.
*
* 18/05/98 - GB9800465
*            Keep any overrides generated from a call to SC.TRANS.UPDATE as issuer limit overrrides
*            could be invoked.
*
* 12/06/98 - GB9800696
*            IF a limit override has 'NO' replied to it then abort the update and return to field
*            input.
*
* 12/06/98 - GB9800700
*            Remove automatic multi valued expansion, comment out original code until fix is proven
*
* 24/06/98 - GB9800789
*            Defualt calculation of total nom fields is dependant on auto multi value expansion.
*            Remove above change.
*
* 22/07/98 - GB9800915
*            Clear undefined variable for Port Constraint
*
* 12/07/98 - GB9800922
*            counterparty limits
*
* 04/08/98 - GB9800993
*            Added Portfolio ID and GROSS.INT.AMT for SC.CALC.INT.AMT subroutine call.
*
* 12/08/98 - GB9801040
*            Process reversal re counterparty limts correctly
*
* 14/05/98 - GB9801051
*            Pass broker account number to SC.REV.DELIV.CONTROL
*
* 01/09/98 - GB9801068
*            Update the trade with the capitalised interest obtained from SC.CALC.CONSID
*
* 14/09/98 - GB9801144
*            If the override field changes between UNAUTH.RECORD.WRITE and JOURNAL.UPDATE, then
*            re-write R.NEW into the cache.
*
* 06/10/98 - GB9801220
*            Unassigned variable (SECURITY.PRICE). Inhibit dealer book trades for bonds with factors
*
* 06/10/98 - GB9801239
*            Tidy up prevention of automatic multi value expansion
*
* 16/10/98 - GB9801256
*            Override messages from portfolio constraint are overwritten in some cases. Also,
*            clear PORT.CONSTRAINT.NO when CUSTOMER.NO is changed.
*
* 28/10/98 - GB9801331
*            GUI.FIELD.SKIP is causing a crash as it is using A as opposed to T.FIELDNO to work out
*            the next field position after fields have been defualted via input buffer
*
* 02/12/98 - GB9801289
*            Dealer book trading for bonds with factors must be re allowed now.
*
* 02/12/98 - GB9801517
*            Only populate CU.COUP.TAX.AMT if dealer book and EXEMPT. Also, always use INTEREST.AMT
*            for broker side.
*
* 16/12/98 - GB9801576
*            Disallow redenominated (old) securities being traded. For newly converted securities,
*            back value trades prior to the redenomination date are blocked.
*
* 08/01/99 - GB9900028
*            Common variable used in call to counterparty limits, change name.
*
* 14/01/99 - GB9900056
*            Check that the correct Array is used for Pl.Category in Categ.Entry for Brokerage
*            (Misc. Fees)
*
* 22/02/99 - GB9900172
*            An attempt was made to get a straight conversion between Sec and Trd ccys using the
*            Exchange Rates as amts. This will not work for all currencies.
*
* 11/03/99 - GB9900350
*            SEC.TRADE can abort when an ACCOUNT is not found on file. This should not happen.
*
* 06/05/99 - GB9900576
*            Subscript error when > 125 customer entered on a customer only trade. Make sure
*            INPUT.BUFFER is initialised correctly, and put some code in GUI.FIELD.SKIP to check
*            for the end of the T array.
*
* 07/06/99 - GB9900797
*            The change under GB9900056 in G9.1.04 that fixes Categories for Fees misses the point
*            that not all users will be using the same called routines.
*
* 20/07/99 - GB9900831
*            Default the CG.TRADE.TIME field with the TRADE.TIME field
*
* 28/07/99 - GB9900963
*            Add CGT processing
*
* 29/07/99 - GB9900998
*            CGT processing must be performed on authorisation and if there have been any changes
*            since the input stage.
*
* 29/07/99 - GB9901005
*            Removal of validation from Check.Fields for the CUST.ACC.NO field to allow for the
*            input of any account. But at Cross.Val, an override is given if the account is not
*            defined in SEC.ACC.MASTER.
*
* 05/08/99 - GB9901034
*            Further validation for the CUST.ACC.NO field in the override section. Overrides are
*            now given if the account input to the field is, a) not defined on SEC.ACC.MASTER for
*            that cust, b) already being used in another portfolio, and c), If the account customer
*            differs from the portfolio owner
*
* 23/08/99 - GB9901179
*            Changes at G9.1.02 perform ccy formatting calls with no ccy
*            Unassigned var in UPD.CCY and currency file read failure
*
* 06/09/99 - GB9901233
*            A call to EXCEPTION.LOG is made to store the OVERRIDE message.
*
* 10/09/99 - GB9901282
*            Instead of having disallowed a change to the CG base PandL amt there should have been
*            extra code added to determine whether a change was made by the user and use the PandL
*            entered by the user instead. This PIF attempts to correct this by maintaining an array
*            of flags that determines this for every multi valued set of customers.
*
* 08/10/99 - GB9901023
*            SECURITY.TRANS.CODE and CUST.NO.NOMINALS are passed to DEAL.ARRAY to call
*            SC.CHECK.PORTFOLIO.CONSTRAINT
*
* 14/10/99 - GB9900532
*            Problem with Bank Portfolio and securities with EUR price currency rectified.
*
* 01/12/99 - GB9801264
*            Problem with Unauthorised Record write that it was locking the record when it was
*            exiting the record, rectified
*
* 03/12/99 - GB9901745
*            Bonds with Factors has been opened up for Mortgage Backed Securities on Dealer Books.
*
* 09/12/99 - GB9901773
*            Bonds with Factors has to blocked back due to change in requirement on Dealer Books.
*
* 13/12/99 - GB9901705
*            Cu Misc Fees are being posted to Categ Entry with a trans code as the Pl Category
*
* 05/01/00 - GB9901855
*            Take an Inau Sec Trade and change the Trade Ccy (e.g. EUR)
*            If no FX Consolidation takes place then the Cu Acc Rate does not change
*
* 17/01/00 - GB0000042
*            Checking for Broker/Counterparty whether he is Authorised (or) Unauthorised.
*
* 29/02/00 - GB0000217
*            Remove 3 decimal format validation, which is replaced by IN2NOMAMT
*
* 03/03/00 - GB0000350
*            Control of the production of Swift Messages from the Trade Input Screen
*
* 15/03/00 - GB0000454
*            To tidy up GB0000217 as the above changes dont work when nominal is a multivalue
*
* 5/04/00 - GB0000620
*           Disapperance of Accounting Entries on modification of autherised SEC.TRADE Records.
*
* 01/05/00 - GB0000296
*            Check if security is blocked in SECURITY.MASTER
*
* 31/08/00 - GB0001938
*            Add new fields CASH.HOLD.SETTLE,SEC.HOLD.SETTLE and do the necessary validations for
*            the Contractual and Actual Settlement Enhancement. Additional argument, SETTLEMENT is
*            added to the routine SC.POS.UPDATE facilitate Contractual and Actual Settlement.
*            Hence there is a change to call to SC.POS.UPDATE. This is done is SC.TRANS.UPDATE.
*            Stop Actual Settlement if CUST.SEC.ACC is dealer book
*
* 04/09/00 - GB0001990
*            Add a call to SC.SETTLEMENT.BUILD if actual settlement has been requested.
*            If the trade is being reversed and settlement has already taken place, produce an
*            override message.
*
* 27/09/00 - GB0001700
*            Add procedure for actual cash settlement
*
* 05/10/00 - GB0002495 - Bug fixes for GB0001990
*            Prevent the settlement checks from taking place if actual settlement has not been
*            activated. Initialise SETT.FLAG to zero. Do the check for the value in the field
*            ACTUAL.SETTLEMENT on SC.PARAMETER against YES rather than NO. Populate SC.SETTLEMENT
*            appropriately depending on whether actual settlement is turned on for stock or cash or
*            both
*
* 09/10/00 - GB0002536 - Bug fixes for GB0001990
*            Add code to handle reply from STORE.OVERRIDE. Set TOTAL.NOMINAL or TOTAL.AMOUNT to
*            null rather than zero in the call to SC.SETTLEMENT.BUILD. In the override at reversal
*            if settlement has taken place check in the inau file as well
*
* 16/10/00 - GB0002636
*            Pass one more argument in the call to SC.SETTLEMENT.BUILD
*
* 17/10/00 - GB0002651
*            The override message in the reversal of SEC.TRADE is changed from SOME SETTLEMENT to
*            SETTLEMENT.
*
* 23/10/00 - GB0002723
*            Remove ENTRY.HOLD which was built by actual settlement when contract is reversed
*
* 23/10/00 - GB0002724
*            Reverse the calling of SC.REV.SETTLED.AMT and SC.REBUILD.SETTLEMENT
*
* 05/12/00 - GB0002938
*            An Override has been introduced when the VALUE.DATE is greater than
*            FORW.VALUE.MAXIMUM of DATES
*
* 07/12/00 - GB0003142
*            When data comes from OFS, the SEC.TRADE was defaulted with orginal commission and
*            charges  without using the OFS inputs ...
*
* 21/12/00 - GB0001338
*            Changes has been made so that BR.FEES.MISC is posted to correct PL category.
*
* 10/01/01 - GB0100072
*            Change in number of arguments in SC.SETTLEMENT.BUILD has affected the calling
*            programs. So, the other programs are also changed accordingly. Block the change to
*            the underlying transaction for Actual Settlement.
*
* 19/01/01 - GB0100114
*            Further problem is found in Coupon Tax Process when TAX.TO.BE.PAID is 'Y' and
*            COUPON.TAX.STATUS is 'NON.EXEMPT' i.e. Net interest.  The problem is the interest is
*            calculated Net on the Customer side and Gross on the Broker side which leads to the
*            CR INT NE DR INT error. Change the program to calculate the interest on the
*            Broker side in line with the Cus side.
*
* 22/01/01 - GB0100146
*            Cash settlement changes in Pif GB0001700 are not valid anymore.
*
* 25/01/01 - GB0002591
*            Add security constraint functionnality. When a transaction is done, there will be a
*            check in SC.SECURITY.CONTRAINT application, to see if there is any constraint for the
*            security. If yes, then an override message will be generated.
*
* 26/02/01 - GB0100524
*            Block a trade with a mix of transaction codes if settlement is actual
*
* 20/04/01 - GB0100871
*            Amendment to allow for 364 day interest basis
*
* 02/03/01 - GB0002851
*            SEC.TRADE version generates stock exchange fees for a net trade and then removes them
*
* 23/03/01 - GB0002849
*            Defaulted NET.TRADE flag should not be altered by the return key.
*
* 13/02/01 - GB0100224
*            A new SUB.ACCOUNT field is added to SEC.TRADE application
*
* 02/05/01 - GB0101216
*            Add four new fields for the customer, broker and misc suspense accounts being used in
*            actual settlement. Also a field to allow the supression of forward entries being
*            created.
*
* 17/05/01 - GB0101371
*            DEPOSITORY to be defaulted according to decision fields on the SAM. If none are
*            defined, then check the CUSTOMER.SECURITY depo. If not defined, check the
*            SECURITY.MASTER level for a depo.
*
* 21/05/01 - GB0101422
*            STORE.OVERRIDE routine is called with CURR.NO argument instead of YCURR.NO. This
*            generates  an 'undefined variable' message. Allow 'reset' of field sub account when it
*            is already populated by default, and when user enters null in this field.
*
* 30/05/01 - GB0101552
*            Changing Validations for AUTO.CUST.SETT
*
* 30/05/01 - GB0101290
*
* 30/05/01 - GB0101649
*            The SECURITY.POSITION is updated when the transaction is unauthorised and minimum
*            holding checking is adding the transaction amount into the existing security position
*            (effectively using the same nominal twice) and deciding that the holding is equal to
*            or above the minimum threshold. This check excludes the amount being checked from the
*            holding if record has a status of INAU by passing the parameter to SC.VAL.MIN.HOLD
*
* 31/05/01 - GB0101564
*            Override or default depository is at check field level. Moving it to validation level.
*
* 11/06/01 - GB0101650
*            Modifying the program with SC.DEPOT.ROUTING and SC.SUB.ACC.ROUTING to work in
*            conjunction Depository is to be checked when SUB.ACCOUNT is entered
*
* 12/06/01 - GB0101625
*            Making changes to incorporate correct functioning of Auto Settlement. The routine
*            SC.UPD.SETTL.DATE.CONTROL was called after SC.SETTLEMENT.BUILD, this change along
*            with other small related changes
*
* 13/06/01 - GB0101757
*            Incorporating the Auto Settlement functionality in SEC.TRADE. After Authorization of
*            SEC.TRADE, the routine SC.SETT.AUTO.SETTLEMENT will be.  This cannot be called at any
*            other place other than authorization since, we will not be able to tackle the
*            STATEMENT.NOS problem (i.e. 'coz we will writing theSuspense entries first and then
*            the Auto Settlement entries.  Since the Statement nos will be different for both the
*            Accountings raised, we need to write the SEC.TRADE to history  and then perform the
*            AUTO Settlement functionality.
*
* 15/06/01 - GB0101788
*            Re-setting the V parameter after calling the routine SC.SETT.AUTO.SETTLEMENT.
*            (Forgotton in the previous PIF) PIF - GB0101757
*
* 14/08/01 - GB0101657/GLOBUS_CI_101657
*            CONSOL.AMT is calculated  by deducting the commission and charges twice,  the
*            respective lines which are deducting twice has been deleted by this pif
*
* 03/09/01 - GLOBUS_CI_10000061
*            OFS doesn't validate CHECK.FIELDS. The field Depository should be defaulted from
*            SECURITY.MASTER in CHECK.RECORD section before validating BR.DELIV.INSTR field.
*
* 03/09/01 - GLOBUS_EN_100000088
*            If CASH.HOLD.SETTLE is YES - Do not allow Reversal from SEC.TRADE
*            Delete SC.SETT.ENTRIES and SC.SETT.ENTRIES.ORG when a SEC.TRADE is deleted.

* 20/09/01 - GLOBUS_CI_10000283
*            Since AUTH.RECORD.WRITE is called at improper place, the routine attached to
*            SEC.TRADE version is executed twice. The calling AUTH.RECORD.WRITE is used as part of
*            a pif GB0002591. It should be removed to call the attached authorize routine to call
*            only once.

* 24/09/01 - GLOBUS_EN_10000177
*            Allow linked tax codes in CGT.CODE field.
*            This will include sub-valuing the associated fields.
*
* 28/09/01 - GLOBUS_EN_10000184
*            Added new field checks and validation checks for the new field ODD.LOT.TRADE and new
*            checks for fields BROKER,STOCK, EXCHANGE, CUST.TRANS.CODE, CUST.NO.NOM and DEPOSITORY
*
* 03/10/01 - GLOBUS_CI_10000310
*            Input buffer has not been cleared properly after the check fields of BR.INTR.AM.TRD.
*            This is causing an error in Desktop while authorising a transaction.
*
* 05/10/10 - GLOBUS_CI_10000202
*            Broker commission is calculated wrongly because of the commission amount was
*            calculted using Gross.Accr amt and interest amount. Since Gross.accr.amt consists of
*            int.amt in it, we must get the commission amount by adding the Gross.am.trd and the
*            Int.amt
*
* 16/10/01 - GLOBUS_CI_10000362
*            Transaction from depository CEDEL to other depostitories which are not the standard
*            ones and the transactions which are not free of payment has been restricted. This
*            check has to be removed as they are redundant now.
*
* 14/11/01 - GLOBUS_CI_10000493
*            Recalculate Amount Due after Changes are made to commission
*
* 30/11/01 - GLOBUS_CI_10000443
*            Common variable JOURNAL.BYPASS will be set at the commit stage and sometimes not reset
*            even after cancelling the transaction. As a result if the same user subsequently
*            gets into another Application and if it doesn't reset the JOURNAL.BYPASS then the
*            transaction entered will not be completed because of the previous Application setting
*            of JOURNAL.BYPASS. Here, in SEC.TRADE routine when the transaction is cancelled by
*            giving NO to the Blocking override the JOURNAL.BYPASS is still set. And subsequently
*            when the user inputs and commits the transaction in another application the
*            transaction is not done properly To fix this, JOURNAL.BYPASS is reset before the
*            transaction is cancelled inisde FIELD.DISPLAY.OR.INPUT para.
*
* 04/01/02 - GLOBUS_CI_10000725
*            When changes are made to an Authorised own book deal, SC.ENT.TODAY is not reversed out
*            properly and causes crash in SC.TRADE.UPD.CONSOL. This is becos the TRAND.FLAG is
*            being wrongly passed as 'ADD' even for authorised deals. It has to be changed to
*            'DEL' when the deal has been authorised previously.
*
* 04/01/02 - GLOBUS_EN_10000316
*            Changes to all TIME fields to include seconds in the display - part of the Atomic
*            Clock changes.  Also, new field BR.TRADE.TIME (MV) added. This field is defaulted
*            from SC.EXE.SEC.ORDERS if the SEC.TRADE has been generated by this application. Else,
*            this field will be inputable.  The value of TRADE.TIME will now default from the first
*            MV of BR.TRADE.TIME.#
*
* 08/01/02 - GLOBUS_EN_10000345 - Override Processing
*            Modified OVERRIDE message so that they use the OVERRIDE file instead of being hard
*            coded.
*
* 29/01/02 - GLOBUS_BG_1000430 - MARKET.TYPE field validation
*            MARKET.TYPE field is defaulted to 'N' if COMI is ''
*
* 04/02/02   GLOBUS_BG_100000407
*            Remove the check that prevents the entry of a linked tax code against the CGT tax code.
*
* 06/02/02 - GLOBUS_CI_10000568
*            When any changes are made to an authorised TRADE, and the changes are left
*            unauthorised,during EOD, the SP is put back to as it has to be for the authorised
*            record. But while we try to commit the unauthorised record, the previous update is not
*            reversed out and this results in doubling of position. So an appropriate call has been
*            made to SC.TRANS.UPDATE when an authorised trade is in 'HLD' status.
*
* 07/02/02 - GLOBUS_EN_10000360 PORTFOLIO CONSTRAINT
*            To ensure multiple Portfolio Constraints to be applicable when there are more than 1
*            customer SEC TRADE. Portfolio Constraint is now part of Customer Multivalue field.
*
* 14/02/02 - GLOBUS_CI_10000609
*            The R.NEW of Broker No. is set in a loop to extract the multivalue data.
*
* 15/02/02 - GLOBUS_EN_10000345 - Override Processing
*            Modified OVERRIDE message LAST.PRICE.DIFF do that it now references either
*            CUST.LAST.PRICE.DIFF or BROK.LAST.PRICE.DIFF.
*
* 18/02/02 - GLOBUS_EN_10000457
*            New routine  SC.DEFAULT.SETT.INSTR is called to default the following fields
*            BROKER.DEPO , BR.ACC.NOC ,BR.DEL.INSTR for Defaulting Standard Settlement Instructions
*
* 19/02/02 - GLOBUS_EN_10000438
*
* 25/02/02 - GLOBUS_EN_10000419
*            Auto Settlement introduced for Broker also and Actual Settlement field in
*            SC.PARAMETER is set to 'YES', Customer and Broker settlement goes throw the
*            SC.SETTLEMENT irrespective of the CASH.HOLD.SETTLE and SEC.HOLD.SETTLE fields in
*            SEC.TRADE/SECURITY.TRANSFER/DIARY.
*            Custodian Defaulting in SEC.OPEN.ORDER. Adding one more argument to the call routine
*            SC.DEFAULT.DEPO.
*
* 26/02/02 - GLOBUS_EN_10000333
*            Updation of the concat file SEC.REVERSAL.TODAY for SEC.TRADES which are input on a
*            date previous to today.
*
* 10/03/02 - GLOBUS_CI_10001196
*            Variable undefined error raised by TQM ref. TQA0200096
*
* 13/03/02 - GLOBUS_CI_10001192
*            For a Yield price type Bond for which if the value date is prior to the issue date
*            then an override has to be displayed for the user since it does various calculation
*            based on this value date. Apart from this for a multi-company environment in
*            SECURITY.MASTER if you change the PRICE.TYPE for a traded security in any company it
*            should block like the one it which presently does for single company environment.
*
* 03/04/02 - GLOBUS_CI_10001191
*            Suitable validations in CHECK.FILEDS for CUST.ACC.NO has to be added for customer
*            portfolio.
*
* 03/04/02 - CI-10001481
*            Generic changes have made to subroutine SEC.TRADE in order to support any kind of OFS
*            transactions
*
* 03/04/02 - GLOBUS_CI_10001375
*            Unable to verify SEC.TRADE through Desktop.
*
* 03/04/02 - GLOBUS_CI_10001487 / CI_10002506
*            BR.BEN.ACCT  defaulted from Agency record.
*
* 03/04/02 - GLOBUS_CI_10001488
*            Interest amounts are not recalculated if the nominals are changed in a Trade.
*
* 10/04/02 - GLOBUS_CI_10001546
*            SEC.TRADE gets committed without any value in BR.NO.NOM field.
*            A check has been introduced in crossval to fix the problem.
*
* 10/04/02 - BG_100000851
*            Actual Settlement Bugs
*
* 11/04/02 - GLOBUS_BG_100000854
*            1. Standard Settlement Instructions Bug Fix
*            2. Actual Settlement Bug Fix
*
* 16/04/02 - GLOBUS_CI_10000712
*            System calculates negative interest days and amount. To calculate correct interest
*            days, if value date is lesser than the accrual date then value from PREV.ACCR.STR.DATE
*            should be assigned to LAST.PAYMENT.DATE field.
*
* 18/04/02 - GLOBUS_BG_100000790
*            Am product installation check
*
* 21/04/02 - GLOBUS_CI_10001651
*            When a trade is input for 0 cost, crash happens if the customer is a dealer book.
*            Also the trade cannot be reversed since there is no statement entries raised, this
*            occurs for all portfolios. To overcome this, when there is no amount due from customer
*            there should not be a call to SC.TRADE.UPD.CONSOL, also there should not be any entry
*            in SC.ENT.TODAY record for this trade. Similarly while reversing the trade, when there
*            is no entries raised earlier, EB.ACCOUNTING should not be called.
*
* 25/04/02 - GLOBUS_BG_100000919
*            Defaulting BR.ACC.NO, BROKER.DEPO , BR.DELIV.INSTR
*
* 26/04/02 - GLOBUS_CI_10001387
*            The error 'Invalid instr, nostro does not belong to Depo' is displayed even though the
*            customer depository is a joint holder of the account specified in the field BR.ACC.NO.
*
* 07/05/02 - GLOBUS_CI_10001776
*            Bug in Swift message 522 for Us tax - GE0101188
*
* 06/05/02 - GLOBUS_CI_10001782 / CI_10001803 / CI_10002552
*            AGENCY default in SEC.TRADE
*
* 10/05/02 - GLOBUS_CI_10001390
*            Consol.Trading.Bal field doubling in STP. While reversing CRF entries the variable
*            TRANS.FLAG is set to 'ADD' irrespective of any function used by the user. Due to this
*            SC.ENT.TODAY is set with improper Trans flag and updated wrongly and hence creation of
*            this error. It was done as part of an earlier pif which was for the vanishing of
*            SC.HOLD.ENTRIES. This is due to the deletion of SC.HOLD.ENTRIES in SC.UPD.SETTL.DATE.CONTROL
*            program without checking it with proper conditon. And hence added a condition in
*            SC.UPD.SETTL.DATE.CONTROL for checking whether the reocrd is reversed and application
*            is SEC.TRADE.
*
* 13/05/02 - GLOBUS_CI_10001859
*            Duplicate values checked in field CUM.EX.IND in SEC.TRADE
*
* 16/05/02 - GLOBUS_CI_10001223
*            Fields CU.BRKR.COMM, CU.FOREIGN.FEE, CU.COMMISSION, CU.STAMP.TAX and CU.EBV.FEES where
*            not updated if any value is given in any of these fields.
*
* 20/05/02 - GLOBUS_CI_10002012
*            Problem in defaulting BR.ACC.No
*
* 20/05/02 - GLOBUS_EN_10000696
*            Field FUND.ID is input only for MF application
*
* 20/05/02 - GLOBUS_CI_10002023
*            Err msg wrong when trying to use closed account
*
* 20/05/02 - GOBUS_CI_10002001
*            Forward Entries not raised when SEC.TRADE in NAU.
*
* 20/05/02 - GLOBUS_CI_10002030
*             The TAX.DETAILS are moved to CUST.CHARGES and BROKER.CHARGES.
*
* 21/05/02 - GLOBUS_EN_10000534 - Pre-trade Restrictions
*            Made modifications to the calling of routine SC.CHECK.SECURITY.CONSTRAINT, which now
*            processes multiple error messages
*
* 22/05/02 - GLOBUS_BG_100001098
*          - Application MF instalation checked at company level
*
* 25/05/02 - GLOBUS_EN_10000622
*            Bug fix on OFS process
*
* 27/05/02 - CI-10002117
*            Modification done for CI-10001191 has been moved to
*            correct place
*
* 27/05/02 - BG_100001183
*            Unwinding Settlement changes.  Control reverted back to
*            Trade level fields - SEC.HOLD.SETTLE and CASH.HOLD.SETTLE
*            from ACTUAL.SETTLEMENT in SC.PARAMETER
*
* 28/05/02 - EN_10000753
*            Gap - 99 for BJB - Actual Settlement for NOSTRO Portfolio
*            Allowing a NOSTRO Portfolio with Actual Settlement to pass
*            thru.  Accounting handled in SC.UPD.SETTL.DATE.CONTROL
*            Code from CD - CI_10001546 moved since there was a problem
*            while raising Accounting entries with 2 Broker.
*            This change is done in consultation with owner of the CD.
*
* 29/05/02 - GLOBUS_CI_10002116
*            FATAL ERROR IN SEC.TRADE WHEN NO VALUE IN FIELD
*            STOCK.EXCHANGE.
*
* 30/05/02 - GLOBUS_CI_10002125
*            Message INVALID INSTR, NOSTRO DOES NOT BELONG TO DEPO
*            should not be displayed when the depository is entered
*            in SC.CLEARING.SYSTEM.  This check does not apply only
*            to SEGA but also to other systems.
*
* 30/05/02 - GLOBUS_BG_100001231
*            Allow contractual settlement if SETTLE.METHOD is set to 'US'
*
* 04/06/02 - BG_100001272
*            Update call to SC.UPDATE.BROKER.CONCATS with new parameter.
*            Block a trade when SETTLE.METHOD = 'US' and when the customer side
*            and broker side has a mix of transaction codes.
*
* 13/06/02 - BG_100001218
*            Actual Settlement Bugs. Also raising Forward Entries in Hold
*            then authorising them in SC.UPD.SETTL.DATE.CONTROL
*            Open up Customer to Customer Trades
*
* 20/05/02 - GLOBUS_CI_10002303
*            Err msg wrong when trying to use closed account
*
* 25/06/02 - GLOBUS_CI_10002404
*            Field BR.TRADE.TIME is now sub-valued and rename to BR.TRD.TIME
*
* 01/07/02 - CI_10002495
*            Maintenance Bug fix for TQA0200460
*
* 02/07/02 - GLOBUS_CI_10002501 / CI_10002802
*          - Gross amount in SECURITY and TRADE currency are incorrect
*
* 03/07/02 - GLOBUS_CI_10002532 / CI_10002820
*          - Changes made in the CD 10002532 have been reversed
*          - with the new CD 10002820
*          - Wrong calculation while defaulting for fields
*          - CUST.INTR.AMT and BR.INTR.AM.TRD
*
* 08/07/02 - CI_10002582
*            Message MISSING COMPANY CODE IN ENTRY.
*            The above mentioned problem is fixed by CD- CI_10001651.
*            But the CATEG.ENTRY produced by the SEC.TRADE is
*            not reversed.
*
* 08/07/02 - CI_10002477
*            The field CONSOL.RATE becomes Null on first Input and
*            only processes after Second INPUT.
*
* 18/07/02 - GLOBUS_CI_10002724
*          - OFS updation in field CU.EX.RATE.ACC and CU.AMOUNT.DUE
*          -  ARE wrong when CU.EX.RATE.ACC is given.
*
* 19/07/02 - GLOBUS_BG_100001640
*          - Additional check made while defaulting BROKER.DEPO
*
* 24/07/02 - GLOBUS_BG_100001594 - Check restrictions.
*
* 31/07/02 - GLOBUS_CI_10002884
*          - Changes to CD CI_10002820 have been removed
*          - Calculation of interest for Broker and Customer
*
* 08/08/02 - CI_10003020
*            SC.SETT.ENTRIES do not get delated if CASH.HOLD.SETTLE
*            is changed from YES to NO.
*            When Securities is TRADE Dated and Trade is Value Dated
*            and Actual Settlement invoked - Accounting entries are
*            wrong i.e. Hits FOWARDDB rather than LIVEDB.
*
* 12/08/02 - GLOBUS_EN_10000784
*            Add processing to handle part-paid and grouped shares/bonds such as
*            Telekurs Price Types 10, 11, 20 and 51.
*
* 20/08/02 - GLOBUS_CI_10003099
*            At validation, Globus is requesting field BR.BEN.BANK.1
*
* 21/08/02 - EN_10000836
*            Different FX rates at Customers input
*
* 27/08/02 - BG_100001905
*            Bug fix for EN_10000836
*
* 30/08/02 - CI_10003428
*            Wrong int rate in case of FRN via OFS
*
* 06/09/02 - CI_10003556
*            HD0201950 and NY0200273
*            Broker account should be defaulted at
*            field level in addition to BR.TRANS.CODE.
*            In a Trade b/w CUSTOMER to DEALER BOOK from SEC.OPEN.ORDER
*            an error msg "ACCOUNT CLOSED" is thrown against Dealer book
*            account.
*
* 12/09/02 - CI_10003620
*            Depo and Int defaulting
*            OFS bug fixes
*
* 19/09/02 - GLOBUS_EN_10001066
*            Add new check for field CUM.EX.IND
*
* 20/09/02 - GLOBUS_EN_10001090
*            Integrate ML CGT into DEV
*
* 26/09/02 - CI_10003842
*            BR.BEN.ACCT should be defaulted only when it is a debit
*            transaction.
*
* 30/09/02 - GLOBUS_EN_10001271
*                     Enhancements for TI - Tax-Engine
*                     details of security transactions are writen to a LIVE
*                     file SEC.TRANS.INFO.
*
* 30/09/02 - GLOBUS_BG_100002144
*            Incorrect subroutine arguments for SC.CGT.PROCESSING
*
* 04/10/02 - BG_100002230
*            - Fix for error 'MISSING PORTFOLIO.NO' when defaulting
*              depository.
*            - Defaulting BR.ACC.NO from the CUSTOMER.SECURITY of the
*              Broker.
*            - Call to SC.BROKER.POS.UPDATE blocked during reversal.
*            - If the BR.DELIV.INSTR has both TO.BE.RECD.OR.DEL and
*              WITH.PAYMENT.FLAG set to 'YES' then the fields
*              BR.BEN.BANK.1 , BR.BEN.BANK.2 and BR.BEN.ACCT should not
*              be defaulted.
*
* 10/09/02 - CI_10003743 (BJB modifications integration)
*            Fix problem with odd lot unit 0
*
* 22/10/02 - GLOBUS_BG_100002477
*            CGT error message showing against incorrect customer
*
* 24/10/02 - CI_10004297
*            SEC.TRADE - "No Specified Value" message is displayed for no
*            particular reason.
*
* 25/10/02 - BG_100002521
*            Mandatory field category of Account file used instead
*            of the field Customer while using CALL DBR
*
* 07/11/02 - BG_100002657
*            Update NET.OPEN.ORD.POS field in SECURITY.POSITION when
*            the trade is deleted from IHLD status.
*
* 12/11/02 - GLOBUS_CI_10004614
*            Default Sub account at the time of input of Customer.
*
* 13/11/02 - CI_10004668
*            Depo defaulting as to consider all the 4 levels -
*            SEC.ACC.MASTER , CUSTOMER.SECURITY , SC.CU.DEPO.DEFAULT and
*            SECURITY.MASTER.
*
* 13/11/02 - GLOBUS_BG_100002698
*            Transaction details written to files after an error from CGT
*            processing and record is put on IHLD.
*
* 19/11/02 - GLOBUS_BG_100002797
*            Common variables hanging around, causing aut process in CGT to fail
*
* 21/11/02 - CI_10004843
*            ST OFS ISSUE and defaulting BR.BEN.BANK.2
*
* 28/11/02 - CI_10005017
*            COMMISSION DEFAULTING IN OFS
*
* 29/11/02 - CI_10005075
*            Default depository based on the customer's position for
*            debit transaction.
*
* 29/11/02 - CI_10005082
*            'No Specified value' message raised, when committing
*            SEC.TRADE record
*
* 03/12/02 - CI_10005154
*            Stamp tax and EBV Fees are overwritten.
*
* 04/12/02 - GLOBUS_CI_10005226
*          - Interest days not populated if maturity date
*          - is blank in SM for BOND
*
* 04/12/02 - CI-10005230
*            If trade ccy is diff from Sec. ccy for a percentage
*            type instrument then PRICE should not apply ccy
*            conversion for it. And also Override for CUST and BROKER
*            PRICE corrected.
*
* 09/12/02 - GLOBUS_BG_100002934
*            PRICE.QUAL.MARKER moved to SM.PARAMETER
* 16/12/02 - BG_10002991
*            Changes made in accordance with the field
*            BR.AGENT,BR.AGENT.AC,PSET
*
* 17/12/02 - CI_10005556 / CI_10006641
*            Incorrect enrichment for CU.REF.CCY and CU.ACCOUNT.CCY when
*            the customer is changed.
*
* 20/12/02 - GLOBUS_BG_100003057
*            CGT overrides repeated
*
* 02/01/03 - GLOBUS_EN_10001556
*
*   Enhancement for Performance breakdown and segmentation
*
* 13/01/03 - CI_10006050
*            BR.BEN.BANK.2 defaulting in check fields
*            Commission default problem
*            Restricting BR.AGENT and BR.AGENT.AC to only 10 sub value set
*
* 23/01/03 - CI_10006371
*            CU.EX.RATE.ACC overwritten with CU.FEES.MISC
*
* 31/01/03 - CI_10006386
*            Pressing enter or entering values in CUST.INTR.AMT and
*            BR.INTR.AM.TRD overwrites subsequent fields - HD0300547
*            PL calculation prorated among customers instead of
*             applying for the single customer - HD0300357
*             CL.COMMISSION OFS ISSUE - HD0300843
*
* 30/01/03 - CI_10005244
*            When a SEC.TRADE is deleted at INAU status the
*            corresponding SC.CONSOL.ENTRIES are not getting reversed.
*            This is the cause of Asset and Liabilities difference.
*
* 31/01/03 - EN_10001612
*            Check field error message for Broker Cross ccy
*            settlement is removed and changed to display
*            override on verification.
*
* 04/02/03 - BG_100003373
*            Bug fixes for the CD - EN_10001612
*
* 10/02/03 - CI_10006698
*            CU.BRKR.COMM not defaulted in GUI
*
* 11/02/03 - BG_100003439
*            Bug fix for Enhancement on Cross Currency - EN_10001612
*
* 18/12/03 - CI_10006871
*            Unbalanced GL
*
* 25/02/03 - CI_10007024
*            CU.EX.RATE.ACC getting overwritten
*
* 27/02/03 - BG_100003642
*            Bug fix for Enhancement on Cross Currency - EN_10001612
*
* 03/03/03 - CI_10007133
*            Fatal error occurs when trade for dealer book is reversed
*            after the value date
*
* 05/03/03 - CI_10007211
*            When a trade for dealer book is reversed on the value date,
*            a fatal error occurs during EOD
*
* 24/03/03 - CI_10007746
*            HD0303052-Err BR.BEN.BANK.1 missing when BR.BEN.ADD is input
*            HD0301307-Forward entry disappears when change on change
*            is done
*
* 01/04/03 - BG_100003967
*            Pressing enter in CUST.INTR.AMT and BR.INTR.AM.TRD
*            doesnt move to CU.FEES.MISC and BR.FEES.MISC fields
*
* 02/04/03 - CI_10007920
*            SEC.TRADE getting committed without nominals in both customer side
*            and broker side.
*
* 03/04/03 - CI_10007969
*            EXCH.RATE.TRD and EXCH.RATE.SEC fields not getting refreshed
*            if the currency table is updated when the record is in
*            IHLD status.
*
* 04/04/03 - CI_10008023
*            OFS issue for own book portfolio trades
*
* 04/04/03 - GLOBUS_CI_10008040
*            The existing value in the Security code field must be checked
*            with COMI and if they are not the same then the message
*            'Commission and Charges are to be recalculated' be raised.
*            If the security is the same, then the relevant
*            information related to the security that already exists ,
*            like Stock exchange, Exchange rates which the user might
*            have changed, must not be overwritten or re-calculated.
*
* 08/04/03 - CI_10008132
*            SC.CU.DEFAULT.DEPO called with 4 arguments.
*
* 08/04/03 - CI_10008194
*            Incorrect commission calculated when COMM.PRIN.INT
*            SC.STD.SEC.TRADE is both for OFS transactions
* 25/04/03 - CI_10008604
*            Unwinding the changes done for TQA0200784 under cd CI_10007920.
*
* 13/05/2003  - CI_10009057
*               During the authorised SEC.TRADE amendment, the accounting
*               entries were not raised properly. This is because instead
*               of checking the records of SEC.TRADE.ENTRIES and
*               SEC.TRADE.ENTRIES.SAVE, check the error text from the
*               F.READ and assign a variable and based on these variables
*               populate the concat file SEC.TRADE.ENTRIES.SAVE and
*               SEC.TRADE.ENTRIES
*
* 17/05/2003 - GLOBUS_CI_10009210
*              Interest rate need to be picked for Prev.accr.str.date when
*              the value date is greater than Accrual start date.
*
* 20/05/03 - CI_10009300
*            Deletion of an INAU record doubles the SECURITY.POSITION.
*
* 23/05/03 - BG_100004278
*            SEC.TRADE fatals out in FWD.ACCOUNTING for a backvalue
*            dated trade.
* 23/05/03 - EN_10001823
*            Added field TO.CONTRA.REF and CONTRA.BY.REF
*            and reserved fields for new functionality
*            for SAR - Partial reversal of debit/credit
*            transaction in Securities Module.And make the field
*            EXCH.RATE.SEC input if the field TO.CONTRA.REF is not
*            null.
*
* 28/05/03 - EN_10001841 / BG_100004389
*          - BULK PROCESSING Validation
*
* 29/05/03 - GLOBUS_EN_10001847
*            Stop checking for Mortgage Backed Securities for Own book.
*
* 30/05/03 - CI_10009552
*            Int rate problem
*
* 19/06/03 - CI_10010072
*            OFS OWN BOOK PROBLEM -associated multivalue
*            not handled
*
* 23/06/03 - CI_10010156
*            MARKET.TYPE defautling in check fields
*
* 04/07/03 - CI_10010409
*            Stamp tax and ebv fees to default during crossval
*            rather than pressing enter in int related fields,
*            when nominal is changed
*
* 18/07/03 -CI_10010949
*           To invoke the override stored in OVERRIDE application
*           the  TEXT<1> should contain the record id of that override
*           in OVERRIDE application   and TEXT<2> will contain the
*           value of the variables if any. But these variables are not
*           assigned value before calling the override
*           "SUB.ACCOUNT ADVISED FOR"  and before calling the
*            STORE.OVERRIDE we have to assign the values .
*
* 22/07/2003 - EN_10001930
*         If a security is traded on back date, system
*         recalculates SC.VEH files from trade date
*         during EOD. After EOD, if the customer portfolio
*         is changed, SC.VEH files for the old portfolio
*         must be again recalculated from trade date.
*
* 29/07/03 - CI_10011225
* AV SET TO 1
*
* 30/06/03 - CI_10011243
*            Suppress the BROKER side FORWARD entries if AUTO.CUST.SETT
*            is set to "YES".
*
* 30/06/03 - CI_10011265
*            Stock Entry getting raised even before the SEC.TRADE
*            is validated. The system updates the record even if there
*            is an error message.
*
* 30/07/03 - CI_10011283
*            OFS fix
*
* 31/07/03 - CI_10011249
*            Prorata problem
*
* 21/08/03 - CI_10011894
*            BR.ACC.NO defaulting problem in OFS
*
* 28/08/03 -CI_10012115
*           Portfolio constraint should be portfolio specific and not
*           customer specific
*
* 29/08/03 - BG_100005060
*            No.of arguments in SC.DEFAULT.SETT.INSTR has been increased.
*            This program catered to SEC.TRADE ONLY, now it caters to
*            REPO and SECURITY.TRANSFER.
*
* 15/09/03 -CI_10012564
*           Entries should not be generated for
*           Narrative field amendment
*
* 17/09/03 - EN_10001974
*            SAR-2002012-11-0035 - For Updating SEC.REVERSAL.TODAY, irrespective
*            of AM is installed or not.
*
* 23/09/03 - CI_10012868
*            HD0310897 - SEC.TRADE diff of 0.01 Changes made to assign
*            net interest amount instead of gross
*            HD0311923 - BR.BEN.BANK.1 missing error when INAU trade
*            is amended
*
* 29/09/03 - EN_10002037
*             Calculation of US WHT TAX.
*
* 30 SEP 03 - BG_100005266
*             Bug fixes for HOUSE BARGAIN.
*
* 09/10/03 - CI_10013406
*               During the authorised SEC.TRADE amendment, the accounting
*               entries were not raised properly. This is because instead
*               of checking the records of SEC.TRADE.ENTRIES and
*               SEC.TRADE.ENTRIES.SAVE, check the error text from the
*               F.READ and assign a variable and based on these variables
*               populate the concat file SEC.TRADE.ENTRIES.SAVE and
*               SEC.TRADE.ENTRIES - fixed under CI_10009057
*               Also SC.CONSOL.ENTRIES not getting restored when authorised
*               trade is brought to INAU and deleted
* 31/10/03 - CI_10014244
*            Portfolio constrinat override problem
*            and customer specific is changed to portfolio specific
*
* 14/11/03 - CI_10014817
*            When the field FIELD.VAL of OFS.SOURCE record is set to 'YES'
*            OFS record update failed. Therefore the variable GTSACTIVE
*            is replaced with GTSVAL which will be set when GTSACTIVE and
*            the field FIELD.VAL # 'YES'
*
* 22/11/03  - BG_100005324
*             BG for  EN_10002037
*
* 03/12/03 - CI_10015512
*            Chaning nominal should recalculate charges and comm
*
* 09/12/03 - CI_10015648
*            PL calculation incorrect(i.e. prorated) when all customer prices are
*            different from broker price.
*
* 09/12/03 - CI_10015660
*            Charges and commission should get recalculated
*            when price is changed
*
* 10/12/03 - CI_10015673
*            If the Internal Account is used as Broker Nostro then FWD
*            Entries are not raised for this account.
*
*10/12/03 -CI_10015686
*          Portfolio defaulted should be company specific.
*
*31/12/03 - CI_10016249
*           Call ACC.ROUTINE shoud not be called when MRKT.PL.AMT is zero when
*           returned from SC.FORMAT.CCY.AMT
*
* 13/01/04 - CI_10016535
*            BR.ACC.NO not defaulted correctly when a change is made
*            to the TRADE.CCY.Hence an error message 'ACCOUNT AND
*            'TRADE CURRENCIES NOT EQUAL'occurs while committing.
*
* 19/01/04 - CI_10013128
*            Changes made to correct updation of SEC.TRANS.INFO in case
*            of deletion of unauth change.
*
* 29/01/04 - BG_100006101
*            SC.DEFAULT.SETT.INSTR needs to be called with 2 arguements.
*
* 13/02/04 - CI_10017271
*            Corrupt values in fields CU.GROSS.ACCR, CU.CAP.INT.AMT,
*            BR.GROSS.ACCR, BR.CAP.INT.AMT.It is due to price related
*            fields being sub-valued. Hence SC.CALC.COST is called
*            to determine the price.
* 17/02/04 - CI_10017436
*            Depo shouldn't be overwritten if value is present
*
* 23/02/04 - CI_10017599
*            Problem in defaulting of Ben.Bank fields
*
* 26/02/04 - CI_10017663
*            Some changes done for change on change of a SEC.TRADE
*            Incorrect overrides from SC.TRANS.UPDATE.
*
*01/03/04  - CI_10017747
*            CUS.SEC.ACC is not defaulting while CUSTOMER.NO having
*            multivalues.
*
* 02/03/04 - CI_10017752
*            Reversals should not be allowed for SEC.TRADE when the
*            SETTLEMENT has matured, ie, SC.SETTLEMENT record has
*            been moved to history.
*
* 03/03/04 - CI_10017800
*            CL.COMMISSION OFS when decimal is passed
*            it raises an error message NO DECIMALS
*            BR.BEN.BANK.1 fixed under CI_10012868
*            CL.COMMISSION overwritten with default fixed under CI_10008040
*
* 09/03/04 - CI_10017957
*            Enrichment error on CU.REF.CCY
*
* 11/03/04 - CI_10018059
*            Tax on commission is not being recalculated on changing
*            the default commission.
*
* 15/03/04 - CI_10018118
*            SC.SBS.CUST.SEC.ACC - defaulting problem.
*
* 23/03/04 - CI_10018362
*            CU.COMM.TAX not changed when CU.COMMISSION inputted thro OFS
*
* 24/03/04 - CI_10018436
*            While commiting BR.BEN.BANK1 and BR.BEN.BANK2
*            should not be same.
* 26/03/04 - CI_10018453
*            Unwnated REBUILD.SCREEN are removed
*
* 26/03/04 - CI_10018494
*            Recalculating USWHT while changed made on TRANSACTION CODE.
*
* 30/03/04 - CI_10018596
*            BR.BEN.BANK1 and BR.BEN.BANK2 cant be the same
*
* 31/03/04 - CI_10018620
*            COM.TAX.BCUR not recalculated on changing CU.COMMISSION
*
* 01/04/04 - CI_10018686
*            Problem in defaulting of Ben.Bank fields
*
* 05/04/04 - CI_10018505
*            Handling EB.ACCOUNTING error.
*
* 09/04/04 - CI_10018894
*            Modifying changes under CI_10015686
*
* 05/07/04 - GLOBUS_BG_100006640
*            Overrides are not raised in SEC.TRADE
*
* 05/07/04 - GLOBUS_BG_100006895
*            remove commented out code, fix unassigned variable BULK.PROCESSING when
*            authorising.
*
* 07/07/04 - CI_10020867
*            Forward entries are removed when there is any change in
*            the local ref fields in SEC.TRADE.
*
* 08/07/04 - EN_10002167
*            Accounting entries are generated based on ACCOUNT.PARAMETER.
*
* 12/07/04 - GLOBUS_BG_100006948
*            Initialise variables correctly. Remove commented out code
*
* 21/07/04 - GLOBUS_CI_10021474
*            Expandable tabbed versions getting wrong multivalue.
*
* 03/08/04 - CI_10020804
*            STATEMENT ENTRY id's are removed from SEC.TRADE,
*            when you make any changes in BROKER.ADV.REQD or
*            CG.TRADE.TIME or PAYMENT.REQD or DEPOT.ADVICE.REQD
*            in the SEC.TRADE record.
*
* 09/08/04 - CI_10021922
*            Cust / Broker Price fails to default while they are empty
*            thru Browser.
*
* 13/08/04 - CI_10022138
*            commission related fields to be cleared when
*            CUSTOMER.NO is changed
*
* 02/09/04 - CI_10022797
*            SC.SBS.BR.BEN.ACCT,SC.SBS.BR.BEN.ADDR should not be removed
*            while PAYMENT.FLAG and DELIVER.CODE having value as Y.
*
* 07/09/04 - GLOBUS_EN_10002336
*            Transaction Management changes - Phase II. Remove calls to
*            Journal Update. There are two calls to UNAUTH.RECORD.WRITE
*            and AUTH.RECORD.WRITE. Each routine is called only once
*            with JOURNAL.BYPASS set to 'Null'. Hence update to journal
*            will happen only once. Journal update during Verification
*            function needs to be retained.
*
* 10/09/04 - CI_10023010
*            Err "CUSTOMER ACCOUNT NOT ON FILE" for dealer book
*
* 23/09/04 - CI_10023400
*            Error cust acc not on file
*
* 23/09/04 - CI_10023427
*            On input COMMISSION AMOUNT GREATER THAN TRADE is raised
*
* 24/09/04 - CI_10023441
*            Wrong Account.closed msg moved into the proper place.
*
* 27/09/04 - GLOBUS_CI_10023487
*            Unable to commit SEC.TRADE when input to mandatory fields
*            are not input; due to improper call to TRANSACTION.ABORT
*            when END.ERROR is set.
*
* 05/10/04 - CI_10023708
*            HD0410935 : The Gross Interest Amount is being updated for the
*            broker side when the COUPON tax has been set.
*            Fix : The COUPON.TAX.STATUS needs to be passed as 'NON.EXEMPT'.
*
* 13/10/04 - CI_10023931
*            CONSOL.AMT should get populated with net amount not gross amount.
*
* 27/10/04 - BG_100007541
*            HD0410935 : The changes to be done in the above fix such that
*            the Broker Intr. would be calculated as always 'EXEMPT' and
*            during the Commit / Crossval the net Customer COUPON.TAX
*            woule be distributed among the Brokers.
*
* 04/11/04 - CI_10024495
*            Change of Dealer book in the field CUSTOMER.NO and thereafter on pressing
*            enter<CR> in the field CUST.ACC.NO in Desktop,produces an error message
*            "Invalid for Dealer Book-Enter <CR>".Fix - If Dealer Book and COMI present,
*            then COMI is made null,so that it gets computed again.
*
* 05/11/04 - CI_10024505
*            When certain portfolios are blocked and those are used in the transaction,
*            on committing an Override message is generated.When an option of "NO" is choosen
*            the entire transaction gets cancelled.To avoid this the control is taken back to the
*            place , for which the portfolio is blocked.
*
* 10/11/04 - CI_10024653
*            Problem in defaulting CUST.ACCOUNT.CCY
*
* 24/11/04 - CI_10024936
*            LIVE ST reverse error message "Missing Co. Code in Entry.
*
* 02/12/04 - CI_10025213
*            Ben Bank becomes null for DAP trades
*
* 08/12/04 - CI_10025349
*            Variable undefined error
*
* 13/12/04 - EN_10002382
*            SC Phase I non stop processing.
*
* 31/12/04 - CI_10026006
*            FWD.ENTRY.HOLD doesn't get removed when SEC.TRADE is deleted
*            Also, When SETTLE.METHOD is US with TRADE dated accounting and
*            if forward value dated trade is input for AUTO.CUS.SETT and
*            AUTO.BROK.SETT equal to YES, system generates F entry.
*
* 03/01/05 - CI_10026040
*            Variable undefined error. COUPON.TAX.AMOUNT. Ref. HD0416801.
*
* 03/01/05 - CI_10026044
*            No validation for PORTFOLIO.CONSTRAINT
*
* 07/01/05 - EN_10002391
*            EU SAVINGS Directives changes.
*
* 24/01/05 - BG_100007935
*            Bug fixes for non stop.
* 26/01/05 - EN_10002409
*            Eu savings changes
*
* 01/02/05 - BG_100007989
*            EUSD Credit Block.
* 02/02/05 - CI_10026922
*            Bulk trade not going to INAB status.
*
* 03/02/05 - CI_10026985
*            Introducing online service for bulk trade.
*
* 03/02/05 - BG_100008032
*            Bug fixes for non stop.
*
* 09/02/05 - GLOBUS_BG_100008063
*            Category fields don't default properly when OFS sec.trade is entered.
*            Use cache.read where applicable. Tidy up dbr's.
*            Allow ofs input of alternative susp categories.
*
* 14/02/05 - CI_10027364
*            CU.COMMISSION DECIMAL PROBLEM
*
* 16/02/05 - BG_10008102
*            Bug fixes for non stop.
*
* 16/02/05 - CI_10027433
*            EBV fees category code is overwritten by category in SC.STD.SEC.TRADE.
*
* 15/03/05 - CI_10028237
*            Empty SEC.TRADE fatals out on committing
*
* 16/03/05 - CI_10028319
*             When broker BUYS 'INPUT MANDATORY FOR PURCHASE"
*             Error is thrown still the field BROKER.DEPO Holds value '.'
*
* 16/03/05 - GLOBUS_BG_100008370
*            Unassigned variables on entry of transction if f5 used before all
*            customer & nominals are entered. Problems copying multi-customer trades.
*
* 21/03/05 - CI_10028487
*            The US with-holding TAX is being calculated without using the
*            BROKER COMMISSION. Ref. HD0502838 - BLS.
*
* 30/03/05 - CI_10028534
*            EOD crash in SC.EOD.TRADE.UPD.CONSOL.
*
* 24/03/05 - BG_100008409
*            EUSD Changes - Changes Done For TRADE.CCY
*
* 01/04/05 - BG_100008490
*            Variable initialise.
*
* 08/04/05 - GLOBUS_BG_100008558
*            unassigned variables
*
* 29/04/05 - CI_10029730
*            The SC.SETTLEMENT record is not being reversed when SEC.TRADE is authorised
*            in RNAO. Ref. HD0500297. Check for RNAO / RNAU.
*
* 06/05/05 - CI_10029969
*            Variable unassigned
*
* 06/06/05 - CI_10029986
*            The ID of Portfolio constraint is changed from SYSTEM to ID.COMPANY hence
*            changed this.
*
* 10/05/05 - EN_10002507
*            SC Phase II non stop processing.
*
* 12/05/05 - GLOBUS_BG_100008739
*            Bug after changing security using copy function if the price types change to/from
*            percentage type.
*
* 17/05/05 - GLOBUS_CI_10030276
*            The Customer and Broker Interest(s) are different.
*            Ref. TTS0550653.
*
* 01/06/05 - CI_10030695
*            CGT.TAX.CODE overwritten with default
*
* 02/06/05 - EN_10002550
*            EUSD - for NAV calculation.
*
* 06/06/05 - CI_10030840
*            EUSD - Accounting entry for Tax in Local in Tax record.
*
* 07/06/05 - CI_10030894
*            Variable undefined error when CU.FEES.MISC is changed.
*
* 08/06/05 - CI_10030578
*            Deleting SC.CONSOL.ENTRIES during change on change
*
* 09/06/05 - CI_10030970
*             EUSD - Account entry array.
*
* 28/06/05 - GLOBUS_EN_10002576
*            Allow for alpha-numeric ids.
*
* 18/07/05 - CI_10032473
*            FATALS OUT when inputted through OFS
*
* 19/07/05 - CI_10032475
*            Consol rate doesnt get cleared when both Trade ccy and Account ccy are same.
*
*
* 21/07/05 - CI_10032589
*            DR.CODE and CR.CODE get cleared when NET.TRADE
*            is PRORATEd
*
* 28/07/05 - CI_100327827
*            PORT.CONST.NO - default the Company id instead of portfolio.constraint NO.
*
* 02/08/05 - GLOBUS_BG_100009201
*            Unable to use auto.cust.sett & auto.brok.sett = yes in browser for 1st input as
*            the fields are processed in numerical order and cash.hold.settle & sec.hold.settle
*            have not been populated yet.
*
* 08/08/05 - GLOBUS_CI_10033175
*            Incorrect Override on SEC.TRADE
*
* 09/08/05 - CI_10033208
*            Incorrect intereset calc when TAX.RECOVERABLE in
*            COUPON.TAX.CODE is NO
*
* 16/08/05 - GLOBUS_CI_10033466
*            Change on change of a trade results in 'CR INT NE DR INT' error
*
* 18/08/05 - CI_10033576
*            TOTAL SECURITY POSITION LESS THAN MINIMUM HOLDING error message is
*            thrown when a security is purchased for the first time
*
* 24/08/05 - CI_10033887
*            Select from PORTFOLIO.CONSTRAINT is done thru CACHE.READ.
*
* 29/08/05 - CI_10033997
*            Trade ccy default in Browser.
*
* 05/09/05 - EN_10002646
*           Treasury Bill Transactions and Withholding Tax
*
* 16/09/05 - GLOBUS_CI_10034755
*            CONSOL.RATE becomes null on first input because of the changes done
*            in CI_10032475
*
* 21/09/05 - CI_10034876
*            Undefined variable
*
* 22/09/05 - CI_10034907
*            No sales tax on Premium traded bonds
*
* 23/09/05 - GLOBUS_BG_1000009442
*            Remove exit from default depository loop checking otherwise
*            "false" errors are generated in browser.
*
* 26/09/05 - GLOBUS_CI_10034965
*            WHT not calculated when TAX code specified in TXN.TAX.CODE.
*
* 29/09/05 - GLOBUS_EN_10002638
*            Archival of TRN.CON.DATE - Trade date check with LAST.ARCH.DATE of SC.PARAMETER.
*
* 05/10/05 - CI_10035335
*            Crash if any ammendment on own book trades.
*
* 19/10/05 - GLOBUS_CI_10035682
*            System fatals out when a authorised dealer book trade is changed to a
*            normal customer.
*
* 21/10/05 - GLOBUS_CI_10035913
*            SEC.HOLD.SETTLE = 'NO' and CASH.HOLD = ''YES' updates
*            wrong SECURITY.POSITION
*
* 28/10/05 - GLOBUS_CI_10036016
*            Undefined variable
*
* 02/11/05 - GLOBUS_CI_10035944
*            The SETTLE.AMT field disappears for cross currency trade
*
* 10/11/05 - GLOBUS_CI_10036318
*            EBV fees category is wrongly assigned
*
* 25/11/05 - CI_10036841
*            Sec Trade Error in Field Br Ben Acct
*
* 06/12/05 - CI_10037058
*            SC.BROKER.POS.UPDATE should not be called when there are no brokers
*            involved in th trade.
*
* 07/12/05 - EN_10002717
*            Manual input of EUSD changes.
*
* 12/12/05 - CI_10037228
*            PORT.CONST.NO field is assigned according to the issuer in PORTFOLIO.CONSTRAINT
*
* 15/12/05 - CI_10037362
*            Incorrect cost update while trading in CHF security
*
* 28/12/05 - CI_10037724
*            Problem with PORTFOLIO.CONSTRAINT field
*
* 04/01/06 - CI_10037830
*            EUSD rework clearing by entering CU.NOTES value .
* 06/01/06 - CI_10037914
*            Revised tax not shown online in Desktop
*
* 10/01/06 - CI_10038076
*            System was not deleteing the record from SEC.TRANS.INFO.
*
* 13/02/06 - CI_10038895
*            Brokerage posted to wrong category
*
* 22/02/06 - GLOBUS_BG_100010364
*            Application hangs when committing with memo account using a nostro for cust acc.
*            etext is not set prior to calling store.end.error so unauth.record.write gets
*            stuck in an infinite loop.
*            Remove redundant subroutines, SET.UP.ENRI & CHECK.ODD.LOT.CONSOLID
*
* 08/03/06 - GLOBUS_CI_10039457
*            Error message "Dealing Book prices must be the same" is thrown before defaulting
*            the customer price
*
* 14/03/06 - GLOBUS_BG_100010567
*            Unable to enter consol rate through ofs, field gets cleared.
*            Tidy up for standards. Replace dbrs for currency & sc.tra.code/sc.trans.type
*            with cache.read and consolidate into one place in the program.
*
* 22/03/06 - GLOBUS_EN_10002868
*            Bond Pricing Calculation - Fixed
*
* 27/03/06 - GLOBUS_CI_10039869
*            Accounting override not raised for Customers whoe settle automatic in US
*            settlement set-up.
*
* 29/03/06 - CI_10039990
*            Auto expansion of BROKER.DEPO
*
* 05/04/06 - GLOBUS_CI_10040326
*            When we reinput a trade which is in INAU status and reject an
*            limit override, the record status which is temporarily assigned
*            to RNAU is not reverted back to INAU.
*
* 07/04/06 - CI_10040378
*            Setting up NET and GROSS of interest.
*
* 20/04/06 - BG_100011017
*            Discounted factor for Thai Bonds not being calculated in final cash cosideration
*
* 24/04/06 - CI_10040710
*            Field BROKER.TYPE defaulted incorrectly.
*
* 03/05/06 - CI_10040894
*            Nullify exch rate fields during Copy.
*
* 04/05/06 - CI_10040918
*            Replace READ with CACHE READS and to avoid reading records with null id
*
* 11/07/06 - CI_10041230
*            PM.CONTROL.SC should be called only if END.ERROR flag is null
*
* 11/07/06 - CI_10041453
*            SEC.TRADE without override is also updating records in exception.log.file
*
* 11/07/06 - EN_10002956
*            Post treasury and market pl if treasury price is given.
*
*------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_BOND.ROUNDING.COMMON      ;* EN_1000793
    $INSERT I_F.ACCOUNT
    $INSERT I_F.ACCOUNT.CLASS
    $INSERT I_F.ACCOUNT.PARAMETER       ;* GB0002358
    $INSERT I_F.AM.PARAMETER  ;* GLOBUS_BG_100000790
    $INSERT I_F.CATEG.ENTRY
    $INSERT I_F.COMPANY
    $INSERT I_F.COUPON.TAX.CODE
    $INSERT I_F.TXN.TAX.CODE  ;* EN_10002037 S/E
    $INSERT I_F.TAX.TYPE.CONDITION      ;* EN_10002037 S/E
    $INSERT I_F.CUSTOMER.CHARGE         ;* EN_10002037 S/E
    $INSERT I_F.CURRENCY
    $INSERT I_F.CUSTOMER
    $INSERT I_F.CUSTOMER.SECURITY
    $INSERT I_F.DATES
    $INSERT I_F.DE.TRANSLATION          ;* GB9701059
    $INSERT I_F.FT.COMMISSION.TYPE
    $INSERT I_F.MESSAGE.CONTROL
    $INSERT I_F.NOMINEE.CODE
    $INSERT I_F.PM.PARAMETER
    $INSERT I_F.PRICE.TYPE
    $INSERT I_F.SC.CLEARING.SYSTEM
    $INSERT I_F.SC.DEL.INSTR
    $INSERT I_F.SC.PARAMETER
    $INSERT I_F.SC.SETTLEMENT
    $INSERT I_F.SC.STD.NEW.ISSUE
    $INSERT I_F.SC.STD.SEC.TRADE
    $INSERT I_F.SC.TRANS.NAME
    $INSERT I_F.SC.TRANS.POS.HISTORY    ;* GB9801576
    $INSERT I_F.SC.TRANS.TYPE
    $INSERT I_F.SECURITY.MASTER
    $INSERT I_F.SEC.ACC.MASTER
    $INSERT I_F.SEC.TRADE
    $INSERT I_F.GM.FUND.MASTER          ;* BG_100001098 - S/E
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.STOCK.EXCHANGE
    $INSERT I_F.SUB.ASSET.TYPE
    $INSERT I_F.TAX ;* EN_10000177
    $INSERT I_F.USER
    $INSERT I_F.VAULT.PARAMETER
    $INSERT I_F.VERSION
    $INSERT I_GTS.COMMON      ;* GB0003142
    $INSERT I_PM.COMMON
    $INSERT I_F.SC.HOLD.POS   ;* BG_100001231 S/E
    $INSERT I_F.OVERRIDE
    $INSERT I_SC.SC.ERROR
* EN_10001090 s
    $INSERT I_F.CG.TXN.RULES
    $INSERT I_CGT.ONLINE.COMMON
    $INSERT I_F.SECURITY.TRANS
    $INSERT I_F.CG.TXN.BASE
    $INSERT I_F.PORTFOLIO.GROUPING
* EN_10001090 e
    $INSERT I_F.SEC.TRANS.INFO          ;* EN_10001271 S/E
    $INSERT I_F.SECURITY.POSITION       ;* BG_100002657 S/E
    $INSERT I_F.SM.PARAMETER  ;* BG_100002934
    $INSERT I_F.BV.TRANSACTIONS         ;*CI_10001930
    $INSERT I_F.OFS.SOURCE    ;* CI_10014817/S/E

    MAT F = "" ; MAT N = "" ; MAT T = "" ; ID.T = ""
    MAT CHECKFILE = "" ; MAT CONCATFILE = ""
    ID.CHECKFILE = "" ; ID.CONCATFILE = ""
*
* FIELD DEFINITIONS FOR SEC.TRADE
*
    CONSOL.RATE.INPUT = 0     ;* EN_10000836 S/E
    ACC.ROUTINE = 'SC.SEC.TRADE.ACC'
*
* CI_10001375 Starts
*
* When Verification is done through Desktop, Broker no is sent along with
* the Transaction id, so remove the Broker no from Transaction Reference
* before passing ID for validation.
*
    VER.BROKER.NO = ''
*
    IF INDEX(TTYPE,"GUI",1) THEN
        VER.BROKER.NO = FIELD(INPUT.BUFFER,'*',2)
        INPUT.BUFFER = FIELD(INPUT.BUFFER,'*',1)
    END
* CI_10001375 Ends
*
    CALL SC.SEC.TRADE.FIELDS  ;* Define SEC.TRADE fields
* CI_10014817 S
    GTSVAL = 0
    IF GTSACTIVE AND OFS$SOURCE.REC<OFS.SRC.FIELD.VAL> # 'YES' THEN
        GTSVAL = 1
    END
* CI_10014817 E
*
    IF LEN(V$FUNCTION) > 1 THEN
        RETURN
    END
* RETURN when pgm used to get parameters only
*---------------------------------------------------------
    DIM YARRAY(55)
    DIM OLD.YARRAY(55)
    DIM LOCALI(V)
    DIM TEMP.ARRAY(55)
    MAT YARRAY = ''
    MAT OLD.YARRAY = ''
    OLD.TRADE.DATE = ''
    SAVE.BROKE.CAT = ''
    SAVE.CUST.CAT = ''
    DISC.AMOUNT = 0
    TXN.TYPE.CODE = ''        ;* CI_10036016 S/E
    TXN.TAX.CUM.AMT = ''      ;*CI_10034876 S/E
    PL.CALCULATION = ''       ;* CI_10015648
    CGT.SAM.LIST = ''         ;* GB9901282 S
    CGT.AMT.CHG.LIST = ''     ;* GB9901282 E
    DEF.PRICE = 0   ;* CI_10029122 S/E
    CHANGED.ENTRIES = 'NEW'   ;* CI_10024936/S/E
    TAXPOS = 0      ;* EN_10002391 S/E
    CU.TAX.STATUS = ''
    CU.TAX.ERROR = ''         ;* EN_10002391 S/E
    POPULATE.FLD.VAL = 0      ;* BG_100007541 S/E
    SECURITY.CCY = ''
* CI_10026040 - S
    COUPON.TAX.IDX = ''
    COUPON.TAX.AMOUNT = ''
* CI_10026040 - E
    SAVE.CTAX.STATUS = ""
    CU.NAV.TYPE = 'GROSS'     ;* EN_10002550
    F.SC.CONSOL.ENTRIES = ''  ;* CI_10005244/S
    CALL OPF("F.SC.CONSOL.ENTRIES",F.SC.CONSOL.ENTRIES)     ;* CI_10005244/E

    F.SETTL.DATE.CONTROL = ''
    CALL OPF("F.SC.SETTL.DATE.CONTROL",F.SETTL.DATE.CONTROL)

    F.SUB.ASSET.TYPE = ""
    CALL OPF("F.SUB.ASSET.TYPE",F.SUB.ASSET.TYPE)

    F.CUSTOMER.SECURITY = ''
    CALL OPF('F.CUSTOMER.SECURITY',F.CUSTOMER.SECURITY)

    F.STMT = '' ; F.CATEG = ''
    CALL OPF('F.STMT.ENTRY',F.STMT)
    CALL OPF('F.CATEG.ENTRY',F.CATEG)

    F.SEC.MASTER = ''
    CALL OPF("F.SECURITY.MASTER",F.SEC.MASTER)

    F.SEC.ACC.MSTR = ''
    CALL OPF('F.SEC.ACC.MASTER',F.SEC.ACC.MSTR)

* EN_10002037 S
    F.TXN.TAX.CODE = ''
    CALL OPF('F.TXN.TAX.CODE',F.TXN.TAX.CODE)
    F.TAX.TYPE.CONDITION = ''
    CALL OPF('F.TAX.TYPE.CONDITION',F.TAX.TYPE.CONDITION)
    F.CUSTOMER.CHARGE = ''
    CALL OPF('F.CUSTOMER.CHARGE',F.CUSTOMER.CHARGE)
* EN_10002037 E
    F.COUPON.TAX.CODE = ''
    CALL OPF('F.COUPON.TAX.CODE',F.COUPON.TAX.CODE)

    F.FT.COMMISSION.TYPE = ''
    CALL OPF ('F.FT.COMMISSION.TYPE', F.FT.COMMISSION.TYPE)

    F.SC.ORD.PROCESSING = ''
    CALL OPF('F.SC.ORD.PROCESSING',F.SC.ORD.PROCESSING)

    F.SC.RIGHTS = ''
    CALL OPF('F.SC.RIGHTS',F.SC.RIGHTS)

    F.ACCOUNT = ''
    CALL OPF('F.ACCOUNT',F.ACCOUNT)

    CALL OPF("F.VERSION",F.VERSION)     ;* GB9700359

    FN.SC.SETTLEMENT.NAU = 'F.SC.SETTLEMENT$NAU'  ;* GB0001990 S
    F.SC.SETTLEMENT.NAU = ''
    CALL OPF(FN.SC.SETTLEMENT.NAU,F.SC.SETTLEMENT.NAU)

    FN.SC.SETTLEMENT = 'F.SC.SETTLEMENT'
    F.SC.SETTLEMENT = ''
    CALL OPF(FN.SC.SETTLEMENT,F.SC.SETTLEMENT)    ;* GB0001990 E ; * GB9700921 E
*
* CI_10017752 S
    FN.SC.SETTLEMENT.HIS = 'F.SC.SETTLEMENT$HIS'
    F.SC.SETTLEMENT.HIS = ''
    CALL OPF(FN.SC.SETTLEMENT.HIS,F.SC.SETTLEMENT.HIS)
* CI_10017752 E

    FN.TAX = 'F.TAX'          ;* EN_10000177 S
    F.TAX = ''
    CALL OPF(FN.TAX,F.TAX)    ;* EN_10000177 E

    F.SEC.TRADE.ENTRIES = ''  ;* GB9700921 S
    CALL OPF('F.SEC.TRADE.ENTRIES', F.SEC.TRADE.ENTRIES)

    F.SEC.TRADE.ENTRIES.SAVE = ''
    CALL OPF('F.SEC.TRADE.ENTRIES.SAVE', F.SEC.TRADE.ENTRIES.SAVE)    ;* GB0001231   ; * GB9700921 E

    F.SC.SETT.ENTRIES = ""
    FN.SC.SETT.ENTRIES = "F.SC.SETT.ENTRIES"
    CALL OPF("F.SC.SETT.ENTRIES",F.SC.SETT.ENTRIES)

    F.SC.SETT.ENTRIES.ORG = ""
    FN.SC.SETT.ENTRIES.ORG = "F.SC.SETT.ENTRIES.ORG"
    CALL OPF("F.SC.SETT.ENTRIES.ORG",F.SC.SETT.ENTRIES.ORG)

    ST.GTSERROR.OLD = ''      ;* CI_10010409
* GB9701451
* EN10000360 - S
    FN.PORTFOLIO.CONSTRAINT = "F.PORTFOLIO.CONSTRAINT"      ;* BG_100010567
    F.PORTFOLIO.CONSTRAINT = ''         ;* BG_100010567
    CALL OPF(FN.PORTFOLIO.CONSTRAINT,F.PORTFOLIO.CONSTRAINT)          ;* BG_100010567

    CONSTRAINT.SEL.DONE = 0   ;* BG_100010567

* CI_10004614 S
    F.SEC.ACC.CUST = ''       ;* BG_100010567
    CALL OPF('F.SEC.ACC.CUST', F.SEC.ACC.CUST)    ;* BG_100010567
* CI_10004614 E
*
    GOSUB SETUP.VERSION       ;* GB9700572
*
    ER = '' ; R.STD.NEW.ISSUE = ''
    CALL CACHE.READ('F.SC.STD.NEW.ISSUE',ID.COMPANY,R.STD.NEW.ISSUE,ER)         ;* BG_100008063
    ER = '' ; R.STD.SEC.TRADE = ''
    CALL CACHE.READ('F.SC.STD.SEC.TRADE',ID.COMPANY,R.STD.SEC.TRADE,ER)         ;* BG_100008063
    IF ER THEN
        E = 'RECORD MISSING FROM "SC.STD.SEC.TRADE"'
        GOTO FATAL.ERR
    END
    FRE = R.STD.SEC.TRADE<SC.SST.FRE.CODE>
    DAP = R.STD.SEC.TRADE<SC.SST.DAP.CODE>
    TRANS.CODES = R.STD.SEC.TRADE<SC.SST.NO.COM.TRN.CDS>
    TRADE.TIME.FLAG = R.STD.SEC.TRADE<SC.SST.TRADE.TIME.FLAG>
    IF R.STD.SEC.TRADE<SC.SST.CONSOLIDATE.FX> = 'Y' THEN
        T(SC.SBS.CU.EX.RATE.ACC)<3> = 'NOINPUT'
    END ELSE
        N(SC.SBS.CONSOL.RATE) = '11..C'
        T(SC.SBS.CONSOL.RATE)<3> = 'NOINPUT'
        T(SC.SBS.CON.VAL.DATE)<3> = 'NOINPUT'
    END
*
    CALL CACHE.READ('F.SC.PARAMETER',ID.COMPANY,R.SC.PARAMETER,ER)    ;* BG_100008063
    IF ER NE '' THEN          ;* BG_100008063
        E = '& MISSING FROM F.SC.PARAMETER':@FM:ID.COMPANY
        GOTO FATAL.ERR
    END
* BG_100001231 S
    SETTLE.METHOD = R.SC.PARAMETER<SC.PARAM.SETTLE.METHOD>

    FN.SC.HOLD.POS = 'F.SC.HOLD.POS'
    F.SC.HOLD.POS = ''
    CALL OPF(FN.SC.HOLD.POS, F.SC.HOLD.POS)       ;* BG_100010567
* BG_100001231 E

    ACTUAL.SETTLEMENT = R.SC.PARAMETER<SC.PARAM.ACTUAL.SETTLEMENT>    ;* GLOBUS_EN_10000419 s/e
    SUP.ACT.FWD.ENT = R.SC.PARAMETER<SC.PARAM.SUP.ACT.FWD.ENT>
    ETEXT = ''
    REV.POSSIBLE = ''         ;* GB9801040

    R.VAULT.PARAMETER = ''
    CALL CACHE.READ('F.VAULT.PARAMETER',ID.COMPANY,R.VAULT.PARAMETER,ETEXT)     ;* BG_100008063

    R.SM.PARAMETER = ''
    CALL CACHE.READ('F.SM.PARAMETER','SYSTEM',R.SM.PARAMETER,'')      ;* BG_100002934 e BG_100008063

    PM.CALL = @FALSE
*---------------------------------------------------------*
* SET CALL PM IF REQUIRED
*---------------------------------------------------------*
    LOCATE 'PM' IN R.COMPANY(EB.COM.APPLICATIONS)<1,1> SETTING POSN THEN
        PM.PARAM.REC = ''
        ER = ''
        CALL CACHE.READ("F.PM.PARAMETER", "SYSTEM", PM.PARAM.REC, ER) ;* BG_100008063

        IF ER THEN
            TEXT = 'MISSING PM PARAMETER RECORD'
            CALL FATAL.ERROR('SEC.TRADE')
        END ELSE
            LOCATE 'SC' IN PM.PARAM.REC<PM.PP.APPLN.INC,1> SETTING POSN THEN
                PM.CALL = @TRUE
                CALL PM.SETUP.PARAM.SC
                R.HOLD.ENTRY = ''
            END ELSE
                PM.CALL = @FALSE
            END
        END
    END
*---------------------------------------------------------*
    CCY.MKT = R.SC.PARAMETER<SC.PARAM.DEFAULT.CCY.MARKET>
    STAMP.TAX.ROUTINE = R.SC.PARAMETER<SC.PARAM.TAX.SUBROUTINE>
    EXCHANGE.COUNTRIES = ''
    EXCHANGE.COUNTRIES<1> = 'AT':VM:'AU':VM:'BE':VM:'CA':VM:'CH':VM:'DE':VM:'DK':VM:'ES':VM:'FR':VM:'HK':VM:'IT':VM:'JP':VM:'LU':VM:'MX':VM:'NL':VM:'SG':VM:'US':VM:'ZA'
    MARKET.CODE = '' ; MARKET.DESC = ''
    MARKET.CODE<1> = 'S':VM:'F':VM:'N'
    MARKET.DESC<1> = 'SPOT':VM:'FORWARD':VM:'NORMAL'
    LCCY = R.COMPANY(EB.COM.LOCAL.CURRENCY)
    CPTY.TRANS = ''
    LOCAL.COUNTRY = R.COMPANY(EB.COM.LOCAL.COUNTRY)
    IF LOCAL.COUNTRY = "" THEN
        LOCAL.COUNTRY = R.COMPANY(EB.COM.LOCAL.REGION)[1,2]
    END
*
    V.FLAG = '' ; V.UPD.FLAG = ''
    BR.OR.CU = '' ; VBROKER.NO = ''
    INT.DEPT.CODE = '0001'
    RATE.INPUT.MKR = @FALSE
*
*----------------------------------------------------------
    CALL MATRIX.UPDATE
*----------------------------------------------------------
ID.INPUT:
*
* GB9700479 - Init Depository and Nominee input flags
*
    IF GTSERROR THEN          ;* CI_10010409 S/E
        RETURN
    END
    NOMINEE.INPUT = ''
    DEPOT.INPUT = ''
* GB9700707 - Clear Ret.Code field before input
    RET.CODE = ''
* GB9800915 - Clear this field
    SEC.ACC.NO = ''
*
* GB0100114 S
    COUPON.TAX.IDX = ''
* GB0100114 E

    MY.MULTI.STMT = ''
    CUST.COMMISSIONS = '' ; BROKER.COMMISSIONS = ''
    CUST.CHARGES = '' ; BROKER.CHARGES = ''
    NO.CU.INT = '' ; NO.BR.INT = ''
    CUSTOMER.ENTRY = '0'
    IF V.UPD.FLAG # 1 THEN
        CALL RECORDID.INPUT
    END
    IF MESSAGE = "RET" THEN
        RETURN
    END
* return to PGM.SELECTION
*----------------------------------------------------------
REM "CHECK FUNCTION:
    IF MESSAGE = "NEW FUNCTION" THEN
        IF V$FUNCTION = 'H' THEN
            E = 'NO FUNCTION FOR THIS APPLICATION ' ; V$FUNCTION = ''
            GOTO ID.ERROR
        END

        IF E THEN
            GOTO ID.ERROR
        END

        GOTO PROCEED
*
ID.ERROR: *=====
        CALL ERR; GOTO ID.INPUT
*-----------
PROCEED:  *=====
*-----------
*----------------------------------------------------------
        IF V$FUNCTION = "E" OR V$FUNCTION = "L" THEN
            CALL FUNCTION.DISPLAY ; V$FUNCTION = ""
        END
        GOTO ID.INPUT
    END


    IF V$FUNCTION = "V" THEN
        IF ID.NEW[1,2] = "BR" THEN
            BR.OR.CU = "BR"
            OLD.ID = "BR"
            ID.NEW = INPUT.BUFFER
        END ELSE
            IF BR.OR.CU = "" THEN
                BR.OR.CU = "BR"
                OLD.ID = "BR"
            END ELSE
                CALL EB.FORMAT.ID('SCTRSC')       ;* EN_10002576
                IF ID.NEW[12,5] = '00000' OR NOT(ID.NEW MATCHES "'SCTRSC'5N5X") THEN      ;* EN_10002576
                    E = 'INVALID REFERENCE NUMBER'
                    GOTO ID.ERROR
                END
            END
        END
*
        INPUT.BUFFER = ""
        IF ID.NEW THEN
            SINGLE.KEY = 1
        END ELSE
            SINGLE.KEY = 0
            CALL SC.VERIFY.DISPLAY(BR.OR.CU,VBROKER.NO)
            V.UPD.FLAG = ''
            IF BR.OR.CU <> 'EXIT' THEN
                V.FLAG = 1
            END ELSE
                V.FLAG = 0
            END
            GOTO ID.INPUT
        END
    END
*----------------------------------------------------------
REM "CHECK ID OR CHANGE STANDARD ID:
* this check MAY need to be removed when auto id generator is available!
* create unique reference no. with application id and julday
* check for numeric Sequence no and pad with leading 0's if necessary
*----------------------------------------------------------
    CALL EB.FORMAT.ID('SCTRSC')         ;* EN_10002576
* EN_10000696 - S
    PRO.POS = ''
    LOCATE 'MF' IN R.COMPANY(EB.COM.APPLICATIONS)<1,1> SETTING PRO.POS ELSE
        PRO.POS = ''          ;* BG_100001098
    END
    IF PRO.POS THEN
        T(SC.SBS.FUND.ID)<3> = ''
        CHECKFILE(SC.SBS.FUND.ID) = 'GM.FUND.MASTER':FM:GMFM.FUND.NAME:FM:'L..A'
    END
* EN_10000696 - E

    IF ID.NEW[12,5] = '00000' OR NOT(ID.NEW MATCHES "'SCTRSC'5N5X") THEN        ;* EN_10002576
        E = 'INVALID REFERENCE NUMBER'
        GOTO ID.ERROR
    END
*----------------------------------------------------------
    CALL RECORD.READ
    IF MESSAGE = "REPEAT" THEN
        GOTO ID.INPUT
    END
    HOL.ERROR = '0'
*
*     Do not allow authorization, input, reversal or deletion of the
*     record if it is still being processed by bulk order processing.
*
    R.SC.ORD.PROCESSING = ''
    CALL F.READ('F.SC.ORD.PROCESSING',ID.NEW,R.SC.ORD.PROCESSING,F.SC.ORD.PROCESSING,ETEXT)
    IF ETEXT THEN
        ETEXT = ''
    END ELSE
        IF INDEX('RAID',V$FUNCTION,1) THEN
            TEXT = "TRADE WAITING BULK ORDER PROCESSING"
            CALL REM
            GOTO ID.INPUT
        END
    END
*
* CI_10017752 S
* Check whether Settlement record exists during the reversal of Sec Trade.
* If not, block the reversal.
*
    IF V$FUNCTION = "R" THEN

        IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' OR R.NEW(SC.SBS.SEC.HOLD.SETTLE) = 'YES' THEN
            SETT.ERR = ''
            SETT.NAU.ERR = ''
            R.SETTLEMENT.REC = ''
            R.SETTLEMENT.NAU = ''

            CALL F.READ(FN.SC.SETTLEMENT,ID.NEW,R.SETTLEMENT.REC,F.SC.SETTLEMENT,SETT.ERR)

            IF SETT.ERR THEN
                CALL F.READ(FN.SC.SETTLEMENT.NAU,ID.NEW,R.SC.SETTLEMENT.NAU,F.SC.SETTLEMENT.NAU,SETT.NAU.ERR)
                IF SETT.NAU.ERR THEN
                    SETT.HIS.ID = ID.NEW
                    SETT.HIS.ERR = ''
                    R.SC.SETTLEMENT.HIS = ''
                    CALL F.READ.HISTORY(FN.SC.SETTLEMENT.HIS,SETT.HIS.ID,R.SC.SETTLEMENT.HIS,F.SC.SETTLEMENT.HIS,SETT.HIS.ERR)
                    IF SETT.HIS.ERR THEN
                        E = 'SC.ST.SETT.REC.MISSING.NO.REV'
                    END ELSE
                        E = 'SC.ST.SETT.MAT.NO.REV'
                    END
                    CALL ERR
                    GOTO ID.INPUT
                END

            END

        END
    END
* CI_10017752 E
*
    IF V$FUNCTION = "V" THEN
        IF NOT(ID.OLD) THEN
            TEXT = "TRADE NOT AUTHORISED , CANNOT CONFIRM"
            CALL REM
            GOTO ID.INPUT:
        END ELSE
            IF R.NEW(SC.SBS.RECORD.STATUS) THEN
                TEXT = "TRADE IN UNAUTHORISED STATUS CANNOT CONFIRM"
                CALL REM
                GOTO ID.INPUT:
            END ELSE
                IF SINGLE.KEY THEN
                    IF R.NEW(SC.SBS.BROKER.NO) THEN
                        NO.BKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                        NO.CONS = DCOUNT(R.NEW(SC.SBS.CONF.BY.BROKER),VM)
                        CONFIRM = 1
                        FOR P = 1 TO NO.BKRS
                            IF R.NEW(SC.SBS.CONF.BY.BROKER)<1,P> = '' THEN
                                CONFIRM = ''
                                P = NO.BKRS
                            END
                        NEXT P
                        IF CONFIRM THEN
                            TEXT = "TRADE HAS ALREADY BEEN CONFIRMED"
                            CALL REM
                            GOTO ID.INPUT:
                        END
                    END ELSE
                        TEXT = "THIS TRADE HAS NO BROKERS , CANNOT CONFIRM"
                        CALL REM
                        GOTO ID.INPUT:
                    END
                END
            END
        END
    END
*
    IF V$FUNCTION = 'C' THEN
        R.NEW(SC.SBS.STATEMENT.NOS) = ''
        R.NEW(SC.SBS.CU.DELIV.KEY) = ''
        R.NEW(SC.SBS.BR.DELIV.KEY) = ''
        R.NEW(SC.SBS.DEP.DELIV.KEY) = ''
        R.NEW(SC.SBS.CONF.BY.BROKER) = ''
        R.NEW(SC.SBS.CU.BEN.BANK.1) = '' ; R.NEW(SC.SBS.BR.BEN.BANK.1) = ''
        R.NEW(SC.SBS.CU.BEN.BANK.2) = '' ; R.NEW(SC.SBS.BR.BEN.BANK.2) = ''
        R.NEW(SC.SBS.CU.BEN.ADDR) = '' ; R.NEW(SC.SBS.BR.BEN.ADDR) = ''
        R.NEW(SC.SBS.CU.BEN.ACCT) = '' ; R.NEW(SC.SBS.BR.BEN.ACCT) = ''
        R.NEW(SC.SBS.CUST.REMARKS) = '' ; R.NEW(SC.SBS.CU.NARRATIVE) = ''
        R.NEW(SC.SBS.CU.ORDER.NOS) = ''
** CEDEL
        R.NEW(SC.SBS.BR.SEC.DEPOT.AC) = ''
        R.NEW(SC.SBS.BR.ORDER.NOS) = ''
* PIF GB9500017
* TRADE.TIME field is cleared in COPY function
        R.NEW(SC.SBS.TRADE.TIME) = ''
* CI_10002404 s
        R.NEW(SC.SBS.BR.TRD.TIME) = ''  ;* EN_10000316 BR.TRD.TIME is cleared in COPY function
* CI_10002404 e
        R.NEW(SC.SBS.CONSOL.RATE) = ''
*
* GB9701451
        R.NEW(SC.SBS.PORT.CONST.NO) = ''
* GB9801040
        R.NEW(SC.SBS.CPTY.LIMIT.REF) = ''
* GB9800993
        R.NEW(SC.SBS.CU.COUP.TAX.AMT) = ''
        R.NEW(SC.SBS.BR.COUP.TAX.AMT) = ''

        R.NEW(SC.SBS.CG.TRADE.TIME) = ''          ;* GB9900831
* EN_10001090 s
        R.NEW(SC.SBS.CGT.BAMT.CCY) = ""
        R.NEW(SC.SBS.CGT.BASE.AMT) = ""
        R.NEW(SC.SBS.CGT.CODE) = ""
        R.NEW(SC.SBS.CGT.TAX.RATE) = ""
        R.NEW(SC.SBS.CGT.TAX.LCL) = ""
        R.NEW(SC.SBS.CGT.TAX.AMT) = ""
        R.NEW(SC.SBS.CGT.PARAM.COND) = ""
        R.NEW(SC.SBS.CGT.SRC.LCL.TAX) = ""
        R.NEW(SC.SBS.ODD.RTS.CGT) = ""
* EN_10001090 e
* EN_10002037 S
        R.NEW(SC.SBS.CU.WHT.PERC) = ""
        R.NEW(SC.SBS.CU.WHT.TAX) = ""
        R.NEW(SC.SBS.WHT.TAX.CODE) = ""
* EN_10002037 E
* GB0101737/S
* The below fields should be re-initialized is Copy function is invoked.
        R.NEW(SC.SBS.CASH.HOLD.SETTLE) = ''
        T(SC.SBS.CASH.HOLD.SETTLE)<3> = ''
        R.NEW(SC.SBS.SEC.HOLD.SETTLE) = ''
        T(SC.SBS.SEC.HOLD.SETTLE)<3> = ''
        R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = ''
        T(SC.SBS.CUST.ACT.SUSP.CAT)<3> = ''
        R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = ''
        T(SC.SBS.BROK.ACT.SUSP.CAT)<3> = ''
        R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = ''
        T(SC.SBS.MISC.ACT.SUSP.CAT)<3> = ''
        R.NEW(SC.SBS.AUTO.CUST.SETT) = ''
        T(SC.SBS.AUTO.CUST.SETT)<3> = ''
* GB0101737/E
* BG_100000851 - Start
        R.NEW(SC.SBS.AUTO.BROK.SETT) = ''
        T(SC.SBS.AUTO.BROK.SETT)<3> = ''
* BG_100000851 - End

        R.NEW(SC.SBS.EXCH.RATE.SEC) = ''
        R.NEW(SC.SBS.EXCH.RATE.TRD) = ''
        R.NEW(SC.SBS.CU.EX.RATE.REF) = ''
        R.NEW(SC.SBS.CU.EX.RATE.ACC) = ''
        R.NEW(SC.SBS.BR.EX.RATE.ACC) = ''
    END
    IF V$FUNCTION = 'I' AND (R.NEW(SC.SBS.RECORD.STATUS)[2,3]) = 'HLD' THEN     ;* EN_10000836 S
        IF R.STD.SEC.TRADE<SC.SST.CONSOLIDATE.FX> = 'NO' THEN
            TRADE.CURR.COUNT = DCOUNT(R.NEW(SC.SBS.TRADE.CURR),VM)
            IF TRADE.CURR.COUNT GT 1 OR R.NEW(SC.SBS.TRADE.CURR) THEN
                R.CONSOL = ''
                FOR CNT = 1 TO TRADE.CURR.COUNT
                    DEL R.NEW(SC.SBS.TRADE.CURR)<1,CNT>
                    DEL R.NEW(SC.SBS.CONSOL.AMT)<1,CNT>
                    DEL R.NEW(SC.SBS.SETTLE.CURR)<1,CNT>
                    DEL R.NEW(SC.SBS.CONSOL.RATE)<1,CNT>
                    DEL R.NEW(SC.SBS.SETTLE.AMT)<1,CNT>
                    DEL R.NEW(SC.SBS.CON.VAL.DATE)<1,CNT>
                NEXT CNT
                R.NEW(SC.SBS.TRADE.CURR) = ''
                R.NEW(SC.SBS.CONSOL.AMT) = ''
                R.NEW(SC.SBS.SETTLE.CURR) = ''
                R.NEW(SC.SBS.CONSOL.RATE) = ''
                R.NEW(SC.SBS.SETTLE.AMT) = ''
                R.NEW(SC.SBS.CON.VAL.DATE) = ''
            END ELSE
                R.NEW(SC.SBS.TRADE.CURR) = ''
                R.NEW(SC.SBS.CONSOL.AMT) = ''
                R.NEW(SC.SBS.SETTLE.CURR) = ''
                R.NEW(SC.SBS.CONSOL.RATE) = ''
                R.NEW(SC.SBS.SETTLE.AMT) = ''
                R.NEW(SC.SBS.CON.VAL.DATE) = ''
            END
        END
* CI_10007969 S
        IF R.NEW(SC.SBS.EXCH.RATE.SEC) <> '' THEN
            Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            IF CCY1 <> CCY2 THEN
                GOSUB CALC.EXCHRATE
                R.NEW(SC.SBS.EXCH.RATE.SEC) = Y4
            END ELSE
                R.NEW(SC.SBS.EXCH.RATE.SEC) = '1'
            END
        END
        IF R.NEW(SC.SBS.EXCH.RATE.TRD) <> '' THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
            IF CCY1 <> CCY2 THEN
                GOSUB CALC.EXCHRATE
                R.NEW(SC.SBS.EXCH.RATE.TRD) = Y4
            END ELSE
                R.NEW(SC.SBS.EXCH.RATE.TRD) = '1'
            END
        END
* CI_10007969 E
    END   ;* EN_10000836 E
* GB0101625/S
* BG_100000851       IF ID.OLD THEN
    IF ID.OLD AND NOT(R.NEW(SC.SBS.SECURITY.CODE)) THEN     ;* BG_100000851 S and E
        IF V$FUNCTION = 'I' AND (R.NEW(SC.SBS.RECORD.STATUS) NE 'INAU' OR R.NEW(SC.SBS.RECORD.STATUS) NE 'IHLD') THEN
            T(SC.SBS.CASH.HOLD.SETTLE)<3> = 'NOINPUT'
            T(SC.SBS.SEC.HOLD.SETTLE)<3> = 'NOINPUT'
            T(SC.SBS.CUST.ACT.SUSP.CAT)<3> = 'NOINPUT'
            T(SC.SBS.BROK.ACT.SUSP.CAT)<3> = 'NOINPUT'
            T(SC.SBS.MISC.ACT.SUSP.CAT)<3> = 'NOINPUT'
            T(SC.SBS.AUTO.CUST.SETT)<3> = 'NOINPUT'
            T(SC.SBS.AUTO.BROK.SETT)<3> = 'NOINPUT'         ;* BG_100000851 S and E  and BG_100000854
        END
    END ELSE
        IF V$FUNCTION = 'I' AND (R.NEW(SC.SBS.RECORD.STATUS) EQ 'INAU' OR R.NEW(SC.SBS.RECORD.STATUS) EQ 'IHLD') THEN
            T(SC.SBS.CASH.HOLD.SETTLE)<3> = ''
            T(SC.SBS.SEC.HOLD.SETTLE)<3> = ''
            T(SC.SBS.CUST.ACT.SUSP.CAT)<3> = ''
            T(SC.SBS.BROK.ACT.SUSP.CAT)<3> = ''
            T(SC.SBS.MISC.ACT.SUSP.CAT)<3> = ''
            T(SC.SBS.AUTO.CUST.SETT)<3> = ''
            T(SC.SBS.AUTO.BROK.SETT)<3> = ''      ;* BG_100000851 - S and E
        END
    END
* GB0101625/E
* CI_10002404 s
* EN_10000316 S  If record is generated by SC.EXE.SEC.ORDERS and the TRADE.TIME in this record has been populated,
* then the BR.TRD.TIME fields in SEC.TRADE are made NOINPUT
    IF V$FUNCTION = 'I' AND R.NEW(SC.SBS.CU.ORDER.NOS) <> "" AND R.NEW(SC.SBS.BR.TRD.TIME) <> "" THEN
        T(SC.SBS.BR.TRD.TIME)<3> = 'NOINPUT'
* CI_10002404 e
    END
* EN_10000316 E
    IF V$FUNCTION = 'I' OR V$FUNCTION = 'C' OR V$FUNCTION = 'H' THEN
        R.NEW(SC.SBS.OVERRIDE) = ''
        TEXT = '' ; YCURR.NO = 0
        CALL STORE.OVERRIDE(YCURR.NO)
        IF V$FUNCTION = 'H' THEN
            R.NEW(SC.SBS.CONF.BY.BROKER) = ''
        END
    END
* GB0001938 STARTS
* Fields SEC.HOLD.SETTLE and CASH.HOLD.SETTLE becomes NOINPUT field
* and defaults to 'NO' if the field ACTUAL.SETTLEMENT in SC.PARAMETER
* has the value 'NO'.
    IF ACTUAL.SETTLEMENT NE 'YES' THEN
        T(SC.SBS.CASH.HOLD.SETTLE)<3> = 'NOINPUT'
        T(SC.SBS.SEC.HOLD.SETTLE)<3> = 'NOINPUT'
* BG_100001218 - START
        T(SC.SBS.CUST.ACT.SUSP.CAT)<3> = 'NOINPUT'
        T(SC.SBS.BROK.ACT.SUSP.CAT)<3> = 'NOINPUT'
        T(SC.SBS.MISC.ACT.SUSP.CAT)<3> = 'NOINPUT'
        T(SC.SBS.AUTO.CUST.SETT)<3> = 'NOINPUT'
        T(SC.SBS.AUTO.BROK.SETT)<3> = 'NOINPUT'
* BG_100001218 - END
    END
* GB0001938 ENDS
    CONSOL.RATE.NEEDED = @FALSE
    IF R.STD.SEC.TRADE<SC.SST.CONSOLIDATE.FX> = 'Y' THEN
        ACCOUNT.COUNT = DCOUNT(R.NEW(SC.SBS.CU.ACCOUNT.CCY),VM)
        FOR CNT = 1 TO ACCOUNT.COUNT
            IF R.NEW(SC.SBS.CUST.ACC.NO)<1,CNT> THEN
                IF (R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> NE R.NEW(SC.SBS.TRADE.CCY)) AND R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> THEN
                    CONSOL.RATE.NEEDED = @TRUE
                END
            END ELSE
                R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> = ''
            END
        NEXT CNT
    END
    IF CONSOL.RATE.NEEDED = @FALSE THEN
        N(SC.SBS.CONSOL.RATE) = '11..C'
        T(SC.SBS.CONSOL.RATE)<3> = 'NOINPUT'
        T(SC.SBS.CON.VAL.DATE)<3> = 'NOINPUT'
    END
*
    LINK.DATA = ''
    CUST.CLEARING.NAME = '' ; BROKER.CLEARING.NAME = ''
    R.SEC.MASTER = '' ; BOND.OR.SHARE = ''
    LOWER.RANGE = 0 ; UPPER.RANGE = 0
    TRADING.UNITS = 0
    IF R.NEW(SC.SBS.SECURITY.CODE) THEN
        ER = ''
        CALL F.READ('F.SECURITY.MASTER',R.NEW(SC.SBS.SECURITY.CODE),R.SEC.MASTER,F.SEC.MASTER,ER)
        IF ER THEN
            E = "SECURITY MASTER RECORD NOT FOUND"
* CI_10003620 S
            IF E AND GTSVAL THEN        ;* CI_10014817/S/E
                R.NEW(SC.SBS.SECURITY.CODE) = ''
            END ELSE
                GOTO ID.ERROR
            END
* CI_10003620 E
        END
        BOND.OR.SHARE = R.SEC.MASTER<SC.SCM.BOND.OR.SHARE>
        TRADING.UNITS = R.SEC.MASTER<SC.SCM.TRADING.UNITS>
        YEAR.DAYS = R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>
        NO.OF.PAYMENTS = R.SEC.MASTER<SC.SCM.NO.OF.PAYMENTS>
        SECURITY.DOMICILE = R.SEC.MASTER<SC.SCM.SECURITY.DOMICILE>
        SHARE.REG = R.SEC.MASTER<SC.SCM.SHARE.REGISTER>
        SUB.ASSET.TYPE = R.SEC.MASTER<SC.SCM.SUB.ASSET.TYPE>
        INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE>
        COUPON.DATE = R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE>
        ACCRUAL.START.DATE = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
**KO
        CALL CACHE.READ('F.SUB.ASSET.TYPE',SUB.ASSET.TYPE,R.SUB.ASSET.TYPE,'')  ;* BG_100008063 s
        KO.FLAG = R.SUB.ASSET.TYPE<SC.CSG.KASSENOBLIGATIONEN>
        VIB.FLAG = R.SUB.ASSET.TYPE<SC.CSG.VAR.INTEREST.BONDS>        ;* BG__100008063 e
        IF KO.FLAG = 'YES' AND ACCRUAL.START.DATE EQ '' THEN
            KO.PROCESSING = @TRUE       ;* Kassenobligationen
            IF V$FUNCTION EQ 'C' THEN   ;* Copy Function.
                R.NEW(SC.SBS.MATURITY.DATE) = ''
                R.NEW(SC.SBS.ISSUE.DATE) = ''
            END
            N(SC.SBS.MATURITY.DATE) = '11.1.C'
            T(SC.SBS.MATURITY.DATE)<3> = ''
            N(SC.SBS.ISSUE.DATE) = '011.1.C'
            T(SC.SBS.ISSUE.DATE)<1> = "D"
            T(SC.SBS.ISSUE.DATE)<3> = ""
        END ELSE
            KO.PROCESSING = @FALSE      ;* All other processing.
            N(SC.SBS.MATURITY.DATE) = '11'
            T(SC.SBS.MATURITY.DATE)<3> = 'NOINPUT'
            N(SC.SBS.ISSUE.DATE) = '011'
            T(SC.SBS.ISSUE.DATE)<3> = 'NOINPUT'
        END

        IF VIB.FLAG = 'YES' AND NOT(INTEREST.RATE) THEN
            N(SC.SBS.INTEREST.RATE) = '011.1'
            T(SC.SBS.INTEREST.RATE)<3> = ''
            IF V$FUNCTION EQ 'C' THEN   ;* Copy Function.
                R.NEW(SC.SBS.INTEREST.RATE) = ''
            END
        END ELSE
            N(SC.SBS.INTEREST.RATE) = '011'
            T(SC.SBS.INTEREST.RATE)<3> = 'NOINPUT'
        END
        IF BOND.OR.SHARE = 'S' THEN
            T(SC.SBS.CU.REALLOWANCE)<3> = 'NOINPUT'
        END ELSE
            T(SC.SBS.CU.REALLOWANCE)<3> = ''
        END
*
        R.COUPON.TAX.CODE = '' ; ER = ''
        CALL CACHE.READ('F.COUPON.TAX.CODE',R.SEC.MASTER<SC.SCM.COUPON.TAX.CODE>,R.COUPON.TAX.CODE,ER)
        IF ER THEN
            E = "COUPON TAX CODE RECORD NOT FOUND"
* CI_10003620 S
            IF E AND GTSVAL ELSE        ;* CI_10014817/S/E
                GOTO ID.ERROR
            END
* CI_10003620 E
        END
        TAX.RECOVERABLE = R.COUPON.TAX.CODE<SC.CPN.TAX.RECOVERABLE>
        WITH.TAX = R.COUPON.TAX.CODE<SC.CPN.TAX.TO.BE.PAID>
        IF R.NEW(SC.SBS.VALUE.DATE) < R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE> THEN
            UPPER.RANGE = '366' ; LOWER.RANGE = '-30'
        END ELSE
            UPPER.RANGE = '14' ; LOWER.RANGE = '0'
        END
        CALL MATRIX.ALTER
        NO.OF.FIELDS = DCOUNT(T.FIELDNO,FM)
        TRADE.CURR = R.NEW(SC.SBS.TRADE.CCY)
        FOR SS = 1 TO NO.OF.FIELDS
            FIELD.NO = FIELD(T.FIELDNO<SS>,'.',1)
            IF FIELD.NO = SC.SBS.PRICE.TYPE THEN
                ENRIX = ''
                CHECKFILE2 = "PRICE.TYPE":FM:SC.PRT.SHORT.DESCR:FM:"L..S"
                CALL DBR(CHECKFILE2,R.NEW(SC.SBS.PRICE.TYPE),ENRIX)
                T.ENRI<SS> = ENRIX
            END
            IF FIELD.NO = SC.SBS.CUST.PRICE OR FIELD.NO = SC.SBS.BR.PRICE THEN
                T.ENRI<SS> = T.ENRI<SC.SBS.PRICE.TYPE>
            END
            IF FIELD.NO = SC.SBS.MARKET.TYPE THEN
                TOT.MKT = DCOUNT(MARKET.CODE,VM)
                FOR Q = 1 TO TOT.MKT
                    IF R.NEW(SC.SBS.MARKET.TYPE) = MARKET.CODE<1,Q> THEN
                        T.ENRI<SS> = MARKET.DESC<1,Q>
                        Q = TOT.MKT
                    END
                NEXT Q
            END
            IF FIELD.NO = SC.SBS.CUST.ACC.NO THEN
                VAL = FIELD(T.FIELDNO<SS>,'.',2)
                ACC.NO = R.NEW(SC.SBS.CUST.ACC.NO)<1,VAL>
                CHECKFILE2 = 'ACCOUNT':FM:AC.SHORT.TITLE
                ACC.DESC = ''
                CALL DBR(CHECKFILE2,ACC.NO,ACC.DESC)
                IF ETEXT THEN
                    ETEXT = ''
                END
                T.ENRI<SS> = ACC.DESC
            END
            IF FIELD.NO = SC.SBS.BROKER.DEPO AND FIELD(T.FIELDNO<SS>,'.',3) = 1 THEN
                ETEXT = ''
                VAL = FIELD(T.FIELDNO<SS>,'.',2)
                COMI = R.NEW(SC.SBS.BROKER.DEPO)<1,VAL,1>
                CALL IN2CUS(35,'CUS')
                IF NOT(ETEXT) THEN
                    CUSTOMER.ENTRY = '1'
                    CUST.NAME = ''
                    CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,COMI,CUST.NAME)
                    T.ENRI<SS> = CUST.NAME
                END ELSE
                    CUSTOMER.ENTRY = '0'
                END
                ETEXT = ''
** CEDEL
                BROKER.CLEARING.NAME = ''
                CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,COMI,BROKER.CLEARING.NAME)
                IF ETEXT THEN
                    BROKER.CLEARING.NAME = 'OTHER'
                END
            END
            IF FIELD.NO = SC.SBS.DEPOSITORY THEN
                CUST.CLEARING.NAME = ''
                CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(FIELD.NO),CUST.CLEARING.NAME)
                IF ETEXT THEN
                    CUST.CLEARING.NAME = 'OTHER'
                END
            END
*
        NEXT SS
*GLOBUS_EN_10001066/S
*Enrich each marker on CUM.EX.IND with the description on DE.TRANSLATION.
        IF R.NEW(SC.SBS.CUM.EX.IND) THEN
            MARKERS = DCOUNT(R.NEW(SC.SBS.CUM.EX.IND), VM)
            FOR NO.MARKERS = 1 TO MARKERS
                MARKER = 'SW':R.NEW(SC.SBS.CUM.EX.IND)<1,NO.MARKERS>
                CALL DBR("DE.TRANSLATION":FM:DE.TRA.DESCRIPTION, MARKER, YENRI)
                YFLD.NO = SC.SBS.CUM.EX.IND:'.':NO.MARKERS
                LOCATE YFLD.NO IN T.FIELDNO<1> SETTING YPOS THEN
                    T.ENRI<YPOS> = YENRI
                END
            NEXT NO.MARKERS
        END
*GLOBUS_EN_10001066/E

        R.STOCK.EXCHANGE = '' ; YERR1 = ''
        IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
            CALL CACHE.READ('F.STOCK.EXCHANGE',R.NEW(SC.SBS.STOCK.EXCHANGE),R.STOCK.EXCHANGE,YERR1)
        END
    END
    CALL MATRIX.ALTER
*----------------------------------------------------------
REM "SPECIAL CHECKS OR CHANGE FIELDS AFTER READING RECORD(S):
*----------------------------------------------------------
FIELD.DISPLAY.OR.INPUT:       *=====
    JOURNAL.BYPASS = ''       ;* CI-10000443 S/E
    MY.MULTI.STMT = ''
    BEGIN CASE
    CASE SCREEN.MODE = "MULTI"
        IF FILE.TYPE = "I" THEN
            CALL FIELD.MULTI.INPUT
        END ELSE
            CALL FIELD.MULTI.DISPLAY
        END
    CASE FILE.TYPE = "I"
        CALL FIELD.INPUT
    CASE OTHERWISE ; CALL FIELD.DISPLAY
    END CASE
*
* CHECK FOR F6.
    IF COMI = C.W THEN
        E = 'INVALID INPUT, PLEASE RETYPE'
        CALL ERR
        COMI = ''
        V$FUNCTION = ''
        GOTO ID.INPUT
    END
*----------------------------------------------------------
HANDLE.MESSAGE:     *===== CHECK.FIELDS AND more
    BEGIN CASE
    CASE MESSAGE = ""
        RECALC.CUST.AM.DUE = '1'
        RECALC.BRKR.AM.DUE = '1'
*----------------------------------------------------------
REM "DEFINE SPECIAL FIELD CHECKS:
        ENRIX = ""
* GB9901282 S
        CGT.SAM.LIST = ''
        CGT.AMT.CHG.LIST = ''
* GB9901282 E
        BEGIN CASE
        CASE AF = SC.SBS.SECURITY.CODE
            E.SEC = COMI
* CI_10004843 S
            IF GTSVAL THEN    ;* CI_10014817/S/E
                E.SEC = R.NEW(AF)
            END
* CI_10004843 E
*
* CI_10008040 S
* The recalculation of all fields related to Security, must be done only
* when the Security code is input for the first time or if there is a
* change in the existing value. On entering the same value in the field
* then message 'CHARGES and COMMISSIONS ...' must not be raised.

            CALL SC.CHECK.NS.RESTRICTIONS
            IF E THEN
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END

            IF R.NEW(AF) = '' OR (R.NEW(AF) NE '' AND R.NEW(AF) NE COMI) THEN   ;* CI_10008040 E
                R.SEC.MASTER = '' ; ER = ''
                CALL F.READ('F.SECURITY.MASTER',E.SEC,R.SEC.MASTER,F.SEC.MASTER,ER)
                IF ER THEN
                    E = 'INVALID SECURITY CODE'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
* GB0000296  - begin - rigid blockage of security
                IF R.SEC.MASTER<SC.SCM.BLOCKING.DATE> AND R.SEC.MASTER<SC.SCM.BLOCKING.DATE> LE TODAY THEN
                    E = "SECURITY IS BLOCKED"
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
* GB0000296  - end - rigid blockage of security
                IF NOT(R.NEW(SC.SBS.TRADE.CCY)) THEN        ;* CI_10033997 S
                    R.NEW(SC.SBS.TRADE.CCY) = R.SEC.MASTER<SC.SCM.SECURITY.CURRENCY>
                END ;* CI_10033997 E
                BOND.OR.SHARE = R.SEC.MASTER<SC.SCM.BOND.OR.SHARE>
                TRADING.UNITS = R.SEC.MASTER<SC.SCM.TRADING.UNITS>
                SHARE.REG = R.SEC.MASTER<SC.SCM.SHARE.REGISTER>
                YEAR.DAYS = R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>
                NO.OF.PAYMENTS = R.SEC.MASTER<SC.SCM.NO.OF.PAYMENTS>
                SECURITY.DOMICILE = R.SEC.MASTER<SC.SCM.SECURITY.DOMICILE>
**KO
                SUB.ASSET.TYPE = R.SEC.MASTER<SC.SCM.SUB.ASSET.TYPE>
                INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE>
                COUPON.DATE = R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE>
                ACCRUAL.START.DATE = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                CALL CACHE.READ('F.SUB.ASSET.TYPE',SUB.ASSET.TYPE,R.SUB.ASSET.TYPE,'')    ;* BG_100008063 s
                KO.FLAG = R.SUB.ASSET.TYPE<SC.CSG.KASSENOBLIGATIONEN>
                VIB.FLAG = R.SUB.ASSET.TYPE<SC.CSG.VAR.INTEREST.BONDS>          ;* BG__100008063 e
                IF KO.FLAG = 'YES' AND ACCRUAL.START.DATE EQ '' THEN
                    KO.PROCESSING = @TRUE         ;* Kassenobligationen
                    IF V$FUNCTION EQ 'C' THEN
                        R.NEW(SC.SBS.MATURITY.DATE) = ''
                        R.NEW(SC.SBS.ISSUE.DATE) = ''
                    END
                    N(SC.SBS.MATURITY.DATE) = '11.1.C'
                    T(SC.SBS.MATURITY.DATE)<1> = "D"
                    T(SC.SBS.MATURITY.DATE)<3> = ''
                    N(SC.SBS.ISSUE.DATE) = '011.1.C'
                    T(SC.SBS.ISSUE.DATE)<1> = "D"
                    T(SC.SBS.ISSUE.DATE)<3> = ""
                END ELSE
                    KO.PROCESSING = @FALSE        ;* All other processing.
                    N(SC.SBS.MATURITY.DATE) = '11'
                    T(SC.SBS.MATURITY.DATE)<3> = 'NOINPUT'
                    N(SC.SBS.ISSUE.DATE) = '011'
                    T(SC.SBS.ISSUE.DATE)<3> = 'NOINPUT'
                END
                IF VIB.FLAG = 'YES' AND NOT(INTEREST.RATE) THEN
                    N(SC.SBS.INTEREST.RATE) = '011.1'
                    T(SC.SBS.INTEREST.RATE)<3> = ''
                    IF V$FUNCTION EQ 'C' THEN     ;* Copy Function.
                        R.NEW(SC.SBS.INTEREST.RATE) = ''
                    END
                END ELSE
                    N(SC.SBS.INTEREST.RATE) = '011'
                    T(SC.SBS.INTEREST.RATE)<3> = 'NOINPUT'
                END
                IF BOND.OR.SHARE = 'S' THEN
                    T(SC.SBS.CU.REALLOWANCE)<3> = 'NOINPUT'
                END ELSE
                    T(SC.SBS.CU.REALLOWANCE)<3> = ''
                END
*
* EN_10002037  S
* BG_100009867 S/E                     GOSUB CHECK.WHT.TAX.CODE
                NO.CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)       ;* BG_100008370 s
                FOR AV = 1 TO NO.CUSTS
* must do this per customer, as AV is used in the subroutines, but is '' here.
                    GOSUB CHECK.WHT.TAX.CODE      ;* BG_100009867 S/E
                    GOSUB CHECK.CUST.TAX          ;* BG_100005324 S
                    GOSUB CHECK.CUST.COMM         ;* BG_100005324 E
                NEXT AV
                AV = ''       ;* BG_100008370 e
* EN_10002037  E

                R.COUPON.TAX.CODE = '' ; ER = ''
                CALL CACHE.READ('F.COUPON.TAX.CODE',R.SEC.MASTER<SC.SCM.COUPON.TAX.CODE>,R.COUPON.TAX.CODE,ER)
                IF ER THEN
                    E = "COUPON TAX CODE RECORD NOT FOUND"
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
                TAX.RECOVERABLE = R.COUPON.TAX.CODE<SC.CPN.TAX.RECOVERABLE>
                WITH.TAX = R.COUPON.TAX.CODE<SC.CPN.TAX.TO.BE.PAID>
* CI_10002495 S
                R.STOCK.EXCHANGE = '' ; YERR1 = ''
                R.NEW(SC.SBS.STOCK.EXCHANGE) = R.SEC.MASTER<SC.SCM.STOCK.EXCHANGE>
                CALL CACHE.READ('F.STOCK.EXCHANGE',R.NEW(SC.SBS.STOCK.EXCHANGE),R.STOCK.EXCHANGE,YERR1)
                T.ENRI<SC.SBS.STOCK.EXCHANGE> = R.STOCK.EXCHANGE<SC.STE.SHORT.DESCR>
                CALL REBUILD.SCREEN

* CI_10002495 E
                R.NEW(SC.SBS.SECURITY.CURRENCY) = R.SEC.MASTER<SC.SCM.SECURITY.CURRENCY>
                R.NEW(SC.SBS.ISSUE.DATE) = R.SEC.MASTER<SC.SCM.ISSUE.DATE>
                R.NEW(SC.SBS.INTEREST.RATE) = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
**KO
                IF NOT(KO.PROCESSING) THEN
                    R.NEW(SC.SBS.MATURITY.DATE) = R.SEC.MASTER<SC.SCM.MATURITY.DATE>
                    R.NEW(SC.SBS.LAST.PAYMNT.DATE) = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                END
*
                CCY2 = LCCY
                CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
                IF CCY1 <> CCY2 THEN
                    Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ELSE
                    Y4 = '1'
                END
                R.NEW(SC.SBS.EXCH.RATE.SEC) = Y4
                CURRENCY.ID = R.NEW(SC.SBS.SECURITY.CURRENCY)         ;* BG_100010567
                GOSUB GET.CURRENCY.DETAILS        ;* BG_100010567
                T.ENRI<SC.SBS.SECURITY.CURRENCY> = CCY.NAME ;* BG_100010567
                R.NEW(SC.SBS.PRICE.TYPE) = R.SEC.MASTER<SC.SCM.PRICE.TYPE>
                LOCATE SC.SBS.PRICE.TYPE IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                ENRIX = ''
                CHECKFILE2 = "PRICE.TYPE":FM:SC.PRT.SHORT.DESCR:FM:"L..S"
                CALL DBR(CHECKFILE2,R.NEW(SC.SBS.PRICE.TYPE),ENRIX)
                IF POS ELSE
                    POS = SC.SBS.PRICE.TYPE
                END
                T.ENRI<POS> = ENRIX
                ENRIX = ''
                OLD.SEC.CODE = R.NEW(AF)
                R.NEW(AF) = E.SEC
                IF OLD.SEC.CODE THEN
                    IF R.SEC.MASTER<SC.SCM.DEFAULT.DEPOSITORY> THEN
                        IF NOT(R.NEW(SC.SBS.DEPOSITORY)) THEN         ;* CI_10005017 S/E
                            R.NEW(SC.SBS.DEPOSITORY) = R.SEC.MASTER<SC.SCM.DEFAULT.DEPOSITORY>
                        END   ;* CI_10005017 S/E
                    END
                    R.NEW(SC.SBS.STOCK.EXCHANGE) = R.SEC.MASTER<SC.SCM.STOCK.EXCHANGE>
                    LOCATE SC.SBS.SECURITY.CURRENCY IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.PRICE.TYPE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.DEPOSITORY IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.TRADE.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.VALUE.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.TRADE.CCY IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.STOCK.EXCHANGE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.NET.TRADE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.ISSUE.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.MATURITY.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.INTEREST.RATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
**KO
                    IF R.NEW(SC.SBS.VALUE.DATE) AND NOT(KO.PROCESSING) THEN
                        COMI5 = ''
                        GOSUB CALC.LAST.PAY.DATE  ;*==
                        AUTO.DISP = 1
                    END
                    LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    OLD.AV = AV
                    IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                        AFX = SC.SBS.CUST.NO.NOM
                        AFX1 = SC.SBS.CUST.PRICE
                        AFX4 = SC.SBS.CUST.TOT.NOM
                        CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                        GOSUB RESET.CHGS.COMM     ;* CI_10006386 S/E
                        TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                        SVE.COMI = COMI ;* GB9700572
                        CALL REM
                        COMI = SVE.COMI ;* GB9700572
                        FOR AV = 1 TO CUSTS
* CI_10008194 S
* When SAM id is not passed in OFS message then charges and
* commissions are not calculated.
*
                            IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = '' AND GTSVAL THEN      ;* CI_10014817/S/E
                                COMPANY.CUST = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                                GOSUB PICK.SAM
                                IF R.SEC.ACC.CUST = '' THEN
                                    ETEXT = 'INPUT MISSING'
                                END
* CI_10018894 E
* CI_10015686 E
                                IF ETEXT THEN
                                    ETEXT = 'CANNOT DEFAULT TO PORTFOLIO'
                                    CALL STORE.END.ERROR
                                END
* CI_10015686 S
                                R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = THIS.COMP.SAM.ID
* CI_10015686 E
                            END
* CI_10008194 E
                            GOSUB CALC.NOM.AMT    ;*==
                            GOSUB CALC.DISC.AMOUNT          ;*EN_10002646 S/E
                            IF E > "" THEN
                                AV = OLD.AV
                                T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                            R.NEW(AFX4)<1,AV> = TOT.NOM
                            R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                            R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            RECALC.FLAG = 'Y'
                            COMI6 = ''
                            GOSUB CALC.CUST.CHARGES         ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                        AFX = SC.SBS.BR.NO.NOM
                        AFX1 = SC.SBS.BR.PRICE
                        AFX4 = SC.SBS.BR.TOT.NOM
                        BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                        FOR AV = 1 TO BRKRS
                            GOSUB CALC.NOM.AMT    ;*==
                            IF E > "" THEN
                                AV = OLD.AV
                                T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                            R.NEW(AFX4)<1,AV> = TOT.NOM
                            R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                            R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            RECALC.FLAG = 'Y'
                            COMI6 = ''
                            GOSUB CALC.BROKER.CHARGES       ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    AV = OLD.AV
                END ELSE
                    BUFF.VAR = ''
                    LOCATE SC.SBS.SECURITY.CURRENCY IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.PRICE.TYPE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.INTEREST.RATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.EXCH.RATE.SEC IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.ISSUE.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.MATURITY.DATE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                END
            END     ;* CI_10008040
        CASE AF = SC.SBS.DEPOSITORY OR AF = SC.SBS.STOCK.EXCHANGE
            IF COMI = "" THEN
                ENRICH.NAME = ''
                IF AF = SC.SBS.DEPOSITORY THEN
* CI_10003620 S
                    SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                    SAM.NO = ''
                    SAM.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,1>          ;* CI_10004668 S/E
                    DEFAULT.DEPO = ''
                    DEFAULT.SUB.ACC = ''
                    IF NOT(SAM.NO) THEN ;* CI_10004668 S/E
* BG_100002230 S
                        CALL SC.CU.DEFAULT.DEPO(SECURITY.NO,SAM.NO,DEFAULT.DEPO,DEFAULT.SUB.ACC)    ;* CI_10008132 S/E
                        IF NOT(DEFAULT.DEPO) THEN
                            CALL DBR ("SECURITY.MASTER":FM:SC.SCM.DEFAULT.DEPOSITORY, SECURITY.NO,DEFAULT.DEPO)
                        END
* BG_100002230 E
                    END ELSE  ;* CI_10004668 S
                        CALL SC.DEFAULT.DEPO(SECURITY.NO,SAM.NO,DEFAULT.DEPO,DEFAULT.SUB.ACC)
                    END       ;* CI_10004668 E
                    ENRIX = DEFAULT.DEPO
* CI_10003620 E
                    X = "CUSTOMER":FM:EB.CUS.SHORT.NAME
                END
                IF AF = SC.SBS.STOCK.EXCHANGE THEN
                    ENRIX = R.SEC.MASTER<SC.SCM.STOCK.EXCHANGE>
                END
                COMI = ENRIX
                R.STOCK.EXCHANGE = '' ; YERR1 = ''
                CALL CACHE.READ('F.STOCK.EXCHANGE',ENRIX,R.STOCK.EXCHANGE,YERR1)
                COMI.ENRI = R.STOCK.EXCHANGE<SC.STE.SHORT.DESCR>
                IF AF = SC.SBS.STOCK.EXCHANGE THEN
                    OLD.STK.EXCH = R.NEW(AF)
                    R.NEW(AF) = COMI
                    IF OLD.STK.EXCH AND OLD.STK.EXCH # ENRIX THEN
                        RECALC.FLAG = 'Y'
                        OLD.AV = AV
                        IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                            CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                            GOSUB RESET.CHGS.COMM ;* CI_10006386 S/E
                            TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                            CALL REM
                            FOR AV = 1 TO CUSTS
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.CUST.CHARGES     ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                            BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                            FOR AV = 1 TO BRKRS
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.BROKER.CHARGES   ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        AV = OLD.AV
                    END
                END
            END ELSE
                IF AF = SC.SBS.DEPOSITORY THEN
                    CHECKFILE2 = "CUSTOMER.SECURITY":FM:SC.CSC.CUSTOMER.TYPE:FM:'.A'
                    CUST.TYPE = ''
                    CALL DBR(CHECKFILE2,COMI,CUST.TYPE)
                    IF ETEXT > "" THEN
                        E = ETEXT ; T.SEQU = "IFLD" ; CALL ERR
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                    LOCATE 'DEPOSITORY' IN CUST.TYPE<1,1> SETTING POS ELSE
                        E = 'INVALID DEPOSITORY' ; T.SEQU = 'IFLD' ; CALL ERR
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
* GB9700479 - A valid Depository has been input, flag it
                    DEPOT.INPUT = 1
                END
                IF AF = SC.SBS.STOCK.EXCHANGE THEN
                    STK.COUNTRY = ''
                    R.STOCK.EXCHANGE = '' ; YERR1 = ''
                    CALL CACHE.READ('F.STOCK.EXCHANGE',COMI,R.STOCK.EXCHANGE,YERR1)
                    STK.COUNTRY = R.STOCK.EXCHANGE<SC.STE.CALC.COUNTRY>
                    IF STK.COUNTRY NE '' AND STK.COUNTRY MATCHES EXCHANGE.COUNTRIES THEN
                        CHECKFILE2 = 'STK.EXC.':STK.COUNTRY:FM:1
                        CURR.DESC = ''
                        CALL DBR(CHECKFILE2,STK.COUNTRY,CURR.DESC)
                        CURRENCY.ID = CURR.DESC   ;* BG_100010567
                        GOSUB GET.CURRENCY.DETAILS          ;* BG_100010567
                        IF ER THEN
                            E = 'CURRENCY RECORD FOR & STOCK EXCHANGE MISSING':@FM:CURR.DESC
                            T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END
                    OLD.STK.EXCH = R.NEW(AF)
                    R.NEW(AF) = COMI
                    IF OLD.STK.EXCH AND OLD.STK.EXCH # COMI THEN
                        RECALC.FLAG = 'Y'
                        OLD.AV = AV
                        IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                            CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                            GOSUB RESET.CHGS.COMM ;* CI_10006386 S/E
                            TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                            CALL REM
                            FOR AV = 1 TO CUSTS
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.CUST.CHARGES     ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                            BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                            FOR AV = 1 TO BRKRS
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.BROKER.CHARGES   ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        AV = OLD.AV
                    END
                END
            END
* CEDEL
            IF AF = SC.SBS.DEPOSITORY THEN
                CUST.CLEARING.NAME = ''
                CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,COMI,CUST.CLEARING.NAME)
                IF ETEXT THEN
                    CUST.CLEARING.NAME = 'OTHER'
                END
            END
*
            IF AF = SC.SBS.STOCK.EXCHANGE THEN
                IF COMI THEN
                    IF R.NEW(SC.SBS.ODD.LOT.TRADE) = 'YES' THEN
                        IF R.SEC.MASTER<SC.SCM.ODD.LOT.EXCH> THEN
                            LOCATE COMI IN R.SEC.MASTER<SC.SCM.ODD.LOT.EXCH,1> SETTING ODD.POS ELSE
                                ODD.POS = ''
                            END
                            IF NOT(ODD.POS) THEN
                                E = 'Order not allowed for this stock exchange'
                                CALL ERR ; T.SEQU = 'IFLD'
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END
                    END
                END
            END

            IF AF = SC.SBS.DEPOSITORY THEN
                CALL SC.CHECK.NS.RESTRICTIONS
                IF E THEN
                    T.SEQU = 'IFLD' ; CALL ERR
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END

*EN10000184-E
        CASE AF = SC.SBS.TRADE.DATE
            IF COMI > R.DATES(EB.DAT.TODAY) THEN
                E = "INVALID - DATE > TODAY"
                T.SEQU = "IFLD" ; CALL ERR
                GOTO FIELD.DISPLAY.OR.INPUT
            END


            IF COMI = "" THEN
                COMI = R.DATES(EB.DAT.TODAY)
            END

            CALL SC.CHECK.NS.RESTRICTIONS

            IF E THEN
                T.SEQU = "IFLD" ; CALL ERR
                GOTO FIELD.DISPLAY.OR.INPUT
            END
            ARCH.ERR = ''     ;* EN_10002638 S
            CALL SC.ARCH.DATE.CHECK(COMI,ARCH.ERR)
            IF ARCH.ERR THEN
                E =  ARCH.ERR
                T.SEQU = "IFLD" ; CALL ERR
                GOTO FIELD.DISPLAY.OR.INPUT
            END     ;* EN_10002638 E
            OLD.TRADE.DATE = R.NEW(AF)
            R.NEW(AF) = COMI
            IF OLD.TRADE.DATE AND OLD.TRADE.DATE # COMI THEN
                IF BOND.OR.SHARE = 'B' THEN
                    IF YEAR.DAYS[1,1] = 'O' THEN
                        GOSUB CALC.INT.DAYS       ;*==
                    END
                    OLD.TRADE.DATE = COMI
                END
            END
*
* EN_10000316 S - If the first SV of BR.TRD.TIME is present- then default to this field
        CASE AF = SC.SBS.TRADE.TIME
            IF TRADE.TIME.FLAG = 'Y' THEN
                IF R.NEW(AF) = "" THEN
                    IF COMI ELSE
* CI_10002404 s
                        IF R.NEW(SC.SBS.BR.TRD.TIME)<1,1,1> # "" THEN
                            COMI = R.NEW(SC.SBS.BR.TRD.TIME)<1,1,1>
* CI_10002404 e
                        END ELSE
                            COMI = OCONV(TIME(),'MTS')
                        END
                    END
                END ELSE
                    IF COMI ELSE
                        COMI = R.NEW(AF)
                    END
                END
            END ELSE
                IF COMI ELSE
* CI_10002404 s
                    COMI = R.NEW(SC.SBS.BR.TRD.TIME)<1,1,1>
* CI_10002404 e
                END
            END
            R.NEW(SC.SBS.CG.TRADE.TIME) = COMI[1,5]         ;* EN_10000316E Time should be shown in HH:MM format
            CALL REBUILD.SCREEN
*
* EN_10000316S  Check fields routine for new field
* CI_10002404 s
        CASE AF = SC.SBS.BR.TRD.TIME
            IF TRADE.TIME.FLAG = 'Y' THEN
                IF R.NEW(AF)<1,AV,AS> = "" THEN
                    IF COMI ELSE
                        COMI = OCONV(TIME(),'MTS')
                    END
                END ELSE
                    IF COMI ELSE
                        COMI = R.NEW(AF)<1,AV,AS>
                    END
                END
            END ELSE
                IF COMI ELSE
                    COMI = R.NEW(AF)<1,AV,AS>
                END
            END
            IF COMI THEN
                R.NEW(SC.SBS.BR.TRD.TIME)<1,AV,AS> = COMI
                R.NEW(SC.SBS.TRADE.TIME) = COMI
                R.NEW(SC.SBS.CG.TRADE.TIME) = COMI[1,5]
            END
            CALL REBUILD.SCREEN
* CI_10002404 e
* EN_10000316E

        CASE AF = SC.SBS.VALUE.DATE
            IF R.OLD(SC.SBS.VALUE.DATE) THEN
                IF R.NEW(SC.SBS.STATEMENT.NOS) # '' THEN
                    E = 'INVALID INPUT - ACCOUNTING UPDATED'
                    T.SEQU = "IFLD" ; CALL ERR
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END ELSE
                IF COMI = "" THEN
                    IF R.NEW(SC.SBS.STOCK.EXCHANGE) # "" THEN
                        RET.TEXT = ''
                        CALL SC.CALC.VALUE.DATE(R.NEW(SC.SBS.TRADE.DATE),COMI,R.NEW(SC.SBS.STOCK.EXCHANGE),R.NEW(SC.SBS.SECURITY.CODE),R.NEW(SC.SBS.ISSUE.DATE),RET.TEXT)
                    END ELSE
                        COMI = R.NEW(SC.SBS.TRADE.DATE)
                    END
                END
                IF COMI < R.NEW(SC.SBS.TRADE.DATE) THEN
                    E = "INVALID - VALUE DATE < TRADE DATE"
                    T.SEQU = "IFLD" ; CALL ERR
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
*
                OLD.VALUE.DATE = R.NEW(AF)
                R.NEW(AF) = COMI
                IF OLD.VALUE.DATE = '' AND NOT(KO.PROCESSING) THEN
                    COMI5 = ''
                    GOSUB CALC.LAST.PAY.DATE      ;*==
                END
                IF OLD.VALUE.DATE AND OLD.VALUE.DATE # COMI THEN
                    COMI5 = ''
                    GOSUB CALC.LAST.PAY.DATE      ;*==
                    LOCATE SC.SBS.NET.TRADE IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                        RECALC.FLAG = 'Y'
                        OLD.AV = AV
                        CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRICE.TYPE,'')    ;* BG_10008063 s
                        CALC.METHOD = R.PRICE.TYPE<SC.PRT.CALCULATION.METHOD>
                        DISC.INSTR = R.PRICE.TYPE<SC.PRT.DISC.INSTRUMENT>       ;* BG_100008063 e
                        IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                            CUSTS = COUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)+1
                            GOSUB RESET.CHGS.COMM ;* CI_10006386 S/E
                            TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                            CALL REM
                            FOR AV = 1 TO CUSTS
*** DISCO
*** IF VALUE.DATE CHANGED THEN GROSS.AMT MUST BE RECALCULATED
                                IF CALC.METHOD[1,1] = 'Y' OR CALC.METHOD[1,1] = 'D' OR CALC.METHOD[1,1] = 'T' THEN
                                    AFX = SC.SBS.CUST.NO.NOM
                                    AFX1 = SC.SBS.CUST.PRICE
                                    AFX4 = SC.SBS.CUST.TOT.NOM
                                    GOSUB CALC.NOM.AMT      ;*==
                                    GOSUB CALC.DISC.AMOUNT  ;*EN_10002646 S/E
                                    R.NEW(AFX4)<1,AV> = TOT.NOM
                                    R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                                    R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                                    LOCATE SC.SBS.CU.GROSS.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
                                    LOCATE SC.SBS.CU.GROSS.AM.SEC:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
                                END
*
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.CUST.CHARGES     ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                            BRKRS = COUNT(R.NEW(SC.SBS.BROKER.NO),VM)+1
                            FOR AV = 1 TO BRKRS
*** DISCOUNTS
***IF VALUE.DATE CHANGED THEN GROSS.AMT MUST BE RECALCULATED
                                IF CALC.METHOD[1,1] = 'Y' OR CALC.METHOD[1,1] = 'D' OR CALC.METHOD[1,1] = 'T' THEN
                                    AFX = SC.SBS.BR.NO.NOM
                                    AFX1 = SC.SBS.BR.PRICE
                                    AFX4 = SC.SBS.BR.TOT.NOM
                                    GOSUB CALC.NOM.AMT      ;*==
                                    R.NEW(AFX4)<1,AV> = TOT.NOM
                                    R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                                    R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                                    LOCATE SC.SBS.BR.GROSS.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
                                    LOCATE SC.SBS.BR.GROSS.AM.SEC:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
                                END
***
                                GOSUB SET.DETS.FOR.CHGS     ;*==
                                COMI6 = ''
                                GOSUB CALC.BROKER.CHARGES   ;*==
                                TEXT = '' ; LOCAL4 = ''
                            NEXT AV
                        END
                        AV = OLD.AV
                    END
                    LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING SS ELSE
                        SS = 0
                    END
                    LOCATE SC.SBS.INTEREST.RATE IN T.FIELDNO<1> SETTING PP ELSE
                        PP = 0
                    END
                    BEGIN CASE
                    CASE SS AND PP
                        T.SEQU<-1> = "D":SS:FM:"D":PP
                    CASE SS OR PP
                        IF SS THEN
                            BUFF.VAR = "D":SS
                        END ELSE
                            BUFF.VAR = "D":PP
                        END
                        T.SEQU<-1> = BUFF.VAR
                    END CASE
                END
            END

        CASE AF = SC.SBS.TRADE.CCY
            IF COMI = "" THEN
* GB9900532
                COMI = R.SEC.MASTER<SC.SCM.SECURITY.CURRENCY>
* GB9900532
                CURRENCY.ID = COMI      ;* BG_100010567
                GOSUB GET.CURRENCY.DETAILS        ;* BG_100010567
                COMI.ENRI = CCY.NAME    ;* BG_100010567
            END
            OLD.TRADE.CCY = R.NEW(AF)
            R.NEW(AF) = COMI
            IF OLD.TRADE.CCY AND OLD.TRADE.CCY # COMI THEN
* CI_10016535 S
                R.NEW(SC.SBS.BR.ACC.NO) = ''
                T.ENRI<SC.SBS.BR.ACC.NO> = ''
* CI_10016535 E
                Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
                CCY1 = COMI
                IF CCY1 <> CCY2 THEN
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ELSE Y4 = '1'
                R.NEW(SC.SBS.EXCH.RATE.TRD) = Y4
                LOCATE SC.SBS.NET.TRADE IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                LOCATE SC.SBS.EXCH.RATE.TRD IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                OLD.AV = AV
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                    RECALC.FLAG = 'Y'
                    IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                        AFX = SC.SBS.CUST.NO.NOM
                        AFX1 = SC.SBS.CUST.PRICE
                        AFX4 = SC.SBS.CUST.TOT.NOM
                        CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                        GOSUB RESET.CHGS.COMM     ;* CI_10006386 S/E
                        TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                        CALL REM
                        FOR AV = 1 TO CUSTS
                            LOCATE SC.SBS.CUST.ACC.NO:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> = ''
                                R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ''
                            END
                            GOSUB CALC.NOM.AMT    ;*==
                            GOSUB CALC.DISC.AMOUNT          ;*EN_10002646 S/E
                            IF E > "" THEN
                                AV = OLD.AV
                                T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                            R.NEW(AFX4)<1,AV> = TOT.NOM
                            R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                            R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.CUST.CHARGES         ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                        AFX = SC.SBS.BR.NO.NOM
                        AFX1 = SC.SBS.BR.PRICE
                        AFX4 = SC.SBS.BR.TOT.NOM
                        BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                        FOR AV = 1 TO BRKRS
                            LOCATE SC.SBS.BR.ACC.NO:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                R.NEW(SC.SBS.BR.ACC.NO)<1,AV> = ''
                                R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV> = ''
                            END
                            GOSUB CALC.NOM.AMT    ;*==
                            IF E > "" THEN
                                AV = OLD.AV
                                T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                            R.NEW(AFX4)<1,AV> = TOT.NOM
                            R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                            R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.BROKER.CHARGES       ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                END
                AV = OLD.AV
            END
            LOCAL8 = COMI
        CASE AF = SC.SBS.NET.TRADE
            IF R.NEW(AF) AND COMI EQ '' THEN      ;*GB0002849 - s
                COMI = R.NEW(AF)
            END ELSE          ;*GB0002849 - e
                IF COMI = "" THEN
                    COMI = "NO"
                END
            END     ;*GB0002849 - s/e
            OLD.NET.TRADE = R.NEW(AF)
            R.NEW(AF) = COMI
            IF OLD.NET.TRADE AND OLD.NET.TRADE # COMI THEN
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                    RECALC.FLAG = 'Y'
                    OLD.AV = AV
                    IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                        CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                        GOSUB RESET.CHGS.COMM     ;* CI_10006386 S/E
                        TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                        CALL REM
                        FOR AV = 1 TO CUSTS
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.CUST.CHARGES         ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                        BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                        FOR AV = 1 TO BRKRS
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.BROKER.CHARGES       ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    AV = OLD.AV
                END
            END
            LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS.INT ELSE
                POS.INT = 0
            END
            IF POS.INT THEN
                INPUT.BUFFER = R.NEW(SC.SBS.INTEREST.DAYS)
            END
            LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            BUFF.VAR = ''
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            LOCATE SC.SBS.INTEREST.RATE IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            IF NOT(POS.INT) THEN
                LOCATE SC.SBS.EXCH.RATE.SEC IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
        CASE AF = SC.SBS.INTEREST.DAYS
            IF COMI = '' THEN
                COMI = R.NEW(AF)
            END
            OLD.INT.DAYS = R.NEW(AF)
            R.NEW(AF) = COMI
            IF OLD.INT.DAYS # '' AND OLD.INT.DAYS # COMI THEN
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                    RECALC.FLAG = 'Y'
                    OLD.AV = AV
                    IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                        CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                        GOSUB RESET.CHGS.COMM     ;* CI_10006386 S/E
                        TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                        CALL REM
                        FOR AV = 1 TO CUSTS
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.CUST.CHARGES         ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                        BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                        FOR AV = 1 TO BRKRS
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            COMI6 = ''
                            GOSUB CALC.BROKER.CHARGES       ;*==
                            TEXT = '' ; LOCAL4 = ''
                        NEXT AV
                    END
                    AV = OLD.AV
                END
            END
            LOCATE SC.SBS.EXCH.RATE.SEC IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END

        CASE AF = SC.SBS.MARKET.TYPE
            IF COMI = '' THEN
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) = 'HBO' OR R.NEW(SC.SBS.STOCK.EXCHANGE) = '990' THEN
                    COMI = 'N'
                END ELSE
                    COMI = 'S'
                END
            END ELSE
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) = 'HBO' OR R.NEW(SC.SBS.STOCK.EXCHANGE) = '990' THEN
                    IF COMI # 'N' THEN
                        E = 'INVALID INPUT FOR STOCK.EXCHANGE' ; CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ELSE
                    IF COMI = 'N' THEN
                        E = 'INVALID INPUT FOR STOCK.EXCHANGE' ; CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END
* CI_10010156 E
            TOT.MKT = DCOUNT(MARKET.CODE,VM)
            FOR Q = 1 TO TOT.MKT
                IF COMI = MARKET.CODE<1,Q> THEN
                    COMI.ENRI = MARKET.DESC<1,Q>
                    Q = TOT.MKT
                END
            NEXT Q
        CASE AF = SC.SBS.CU.EX.RATE.REF
            CCY1 = R.NEW(SC.SBS.CU.REF.CCY)<1,AV>
            Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
            IF CCY1 <> CCY2 THEN
                IF COMI = "" THEN
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                    COMI = Y4
                END ELSE
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END ELSE
                IF COMI <> 1 THEN
                    COMI = "1"
                END
            END
            IF COMI = '' THEN
                COMI = 1
            END

        CASE AF = SC.SBS.BR.EBV.FEES
            RECALC.BRKR.AM.DUE = 0
            COMI2 = "" ; ENRIX = ""
            R.NEW(AF)<1,AV> = COMI
*
*  If the DEF.CUST.PRICE is 'Y' AND CUST.PRICE is blank, set CUST.PRICE
*  to be LAST.PRICE from SECURITY.MASTER (PIF GB9400941)
*
        CASE AF = SC.SBS.CUST.PRICE OR AF = SC.SBS.BR.PRICE
* CI_10015660
            IF AF = SC.SBS.CUST.PRICE THEN
                IF COMI NE R.NEW(SC.SBS.CUST.PRICE)<1,AV,AS> AND COMI THEN
                    R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = ''
                    R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = ''
                    R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> = ''
                    R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> = ''
                    R.NEW(SC.SBS.CU.WHT.TAX)<1,AV> = ''
                    CALL REBUILD.SCREEN
                END
            END ELSE
                IF AF = SC.SBS.BR.PRICE THEN
                    IF COMI NE R.NEW(SC.SBS.BR.PRICE)<1,AV,AS> AND COMI THEN
                        R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = ''
                        R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> = ''
                        R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> = ''
                        CALL REBUILD.SCREEN
                    END
                END
            END
* CI_10015660
            IF R.STD.SEC.TRADE<SC.SST.DEF.CUST.PRICE> = "Y" THEN
                IF COMI = "" THEN
                    GOSUB CUST.BRO.DEF.PRICE      ;* CI_10021922 S
                    IF DEF.PRICE THEN   ;* CI_10021922 E
                        COMI = DEF.PRICE
                    END
                END
            END
*
* Dealer Book Price Default Code
*
            CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
            IF R.NEW(SC.SBS.CUST.PRICE)<1,1> = '' AND R.NEW(SC.SBS.CUSTOMER.NO)<1,1> # '' AND AF = SC.SBS.BR.PRICE AND AV = 1 AND AS = 1 AND CUSTS = 1 THEN
                R.NEW(SC.SBS.CUST.PRICE)<1,1> = COMI
                R.NEW(SC.SBS.CUST.NO.NOM)<1,1> = R.NEW(SC.SBS.BR.NO.NOM)<1,1>
                AFX = SC.SBS.CUST.NO.NOM
                AFX1 = SC.SBS.CUST.PRICE
                AFX4 = SC.SBS.CUST.TOT.NOM
                CUSTS = COUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)+1
                GOSUB CALC.NOM.AMT      ;*==
                GOSUB CALC.DISC.AMOUNT  ;*EN_10002646 S/E
                IF E > "" THEN
                    T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                END
                R.NEW(AFX4)<1,AV> = TOT.NOM
                R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                R.NEW(AFX4+2)<1,AV> = GROSS.AMT
            END
            LOCATE COMI IN R.NEW(AF)<1,AV,1> SETTING POS ELSE
                POS = 0
            END
            IF INDEX(PGM.VERSION,'CD',1) ELSE
                IF POS AND POS # AS THEN
                    E = 'NO DUPLICATES ALLOWED'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
            COMI.ENRI = T.ENRI<SC.SBS.PRICE.TYPE>
            R.NEW(AF)<1,AV,AS> = COMI
* GB9800700 s
            GOSUB CHECK.IF.EXPANDABLE   ;* GB9700359
            IF EXPANDABLE THEN
* GB9801239
                FOUND = 1
                IF NOT(FOUND) THEN
                    COMI = ""
                    AS += 1
                    INS "" BEFORE R.NEW(AF -1)<1,AV,AS>
                    INS "" BEFORE R.NEW(AF)<1,AV,AS>
                    CALL REBUILD.SCREEN
                END ELSE
                    IF AF = SC.SBS.CUST.PRICE THEN
                        AFX = SC.SBS.CUST.NO.NOM
                        AFX1 = SC.SBS.CUST.PRICE
                        AFX4 = SC.SBS.CUST.TOT.NOM
                    END ELSE
                        AFX = SC.SBS.BR.NO.NOM
                        AFX1 = SC.SBS.BR.PRICE
                        AFX4 = SC.SBS.BR.TOT.NOM
                    END
                    GOSUB CALC.NOM.AMT  ;*==
                    GOSUB CALC.DISC.AMOUNT        ;*EN_10002646 S/E
                    IF E > "" THEN
                        T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                    R.NEW(AFX4)<1,AV> = TOT.NOM
                    LOCATE AFX4:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                    LOCATE AFX4+1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                    R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                    LOCATE AFX4+2:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                END
* GB9801239 e
            END
* GB9800700 e
* EN_10000784 S  For part-paid bonds/shares price can not be < price amount unpaid.
            Y.UNPAID.AMOUNT = ''
            Y.UNPAID.AMOUNT.EXRATE = ''
            IF R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT> AND COMI THEN
                CCY1 = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                IF CCY1 NE CCY2 THEN
                    Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                    Y1 = R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT>
                    GOSUB CALC.EXCHRATE
                    Y.UNPAID.AMOUNT.EXRATE = Y4
                    GOSUB CALC.EXCHPRICE
                    Y.UNPAID.AMOUNT = Y2
                    CALL EB.ROUND.AMOUNT(CCY2,Y.UNPAID.AMOUNT,'2','')
                END ELSE
                    Y.UNPAID.AMOUNT = R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT>
                END

                IF COMI < Y.UNPAID.AMOUNT THEN
                    E = "CAN NOT BE < UNPAID AMOUNT ON SECURITY MASTER"
                    CALL ERR ; T.SEQU = "IFLD"
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
* EN_10000784 E
            IF COMI NE '' AND AF = SC.SBS.CUST.PRICE THEN   ;* EN_10002391 S
                GOSUB FETCH.CU.TAX
            END     ;* EN_10002391 E
        CASE AF = SC.SBS.INT.CTR
            IF COMI THEN
                IF BOND.OR.SHARE = 'S' THEN
                    NO.CU.INT.CTR = DCOUNT(R.NEW(SC.SBS.CUST.SEC.ACC),VM)
                    FOR CU.COUNT = 1 TO NO.CU.INT.CTR
                        IF NOT(R.NEW(SC.SBS.CU.INT.CTR)<1,CU.COUNT>) THEN
                            R.NEW(SC.SBS.CU.INT.CTR)<1,CU.COUNT> = COMI
                        END
                    NEXT CU.COUNT
                END ELSE
                    E = "INPUT ONLY ALLOWED FOR SHARES"
                    CALL ERR ; T.SEQU = "IFLD"
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
        CASE AF = SC.SBS.BROKER.TYPE
            CUST.TYPE = ''
            CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.CUSTOMER.TYPE:FM:'.A',R.NEW(SC.SBS.BROKER.NO)<1,AV>,CUST.TYPE)
            IF COMI = '' THEN
                BEGIN CASE
                CASE 'BROKER' MATCHES CUST.TYPE
                    COMI = 'BROKER'
                CASE 'COUNTERPARTY' MATCHES CUST.TYPE
                    COMI = 'COUNTERPARTY'
                CASE 'CLIENT' MATCHES CUST.TYPE
                    COMI = 'CLIENT'
                CASE 1
                    E = 'INVALID BROKER TYPE' ; CALL ERR
                    T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END CASE
            END ELSE
                LOCATE COMI IN CUST.TYPE<1,1> SETTING POS ELSE
                    E = 'INVALID BROKER TYPE' ; CALL ERR
                    T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
        CASE AF = SC.SBS.BR.TRANS.CODE OR AF = SC.SBS.CUST.TRANS.CODE
* BG_100000854 - S
            IF AF = SC.SBS.BR.TRANS.CODE THEN
                BROK.VALUE = ''
                R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = COMI    ;* BG_100001640 S/E
                BROK.VALUE = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                CALL SC.DEFAULT.SETT.INSTR(BROK.VALUE, 'SEC.TRADE')   ;* BG_100005060 S-E
                CALL REBUILD.SCREEN
            END
* BG_100000854 - E
*
* Customer Transaction Code is defaulted to be the opposite of the
* Broker transaction code if broker details are entered first.
* For example, if Broker transaction code = 'SSL' then customer
* transaction code is defaulted to 'SPR'
*
            IF COMI = "" AND AF = SC.SBS.CUST.TRANS.CODE AND R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> <> '' THEN
                SC.TRA.CODE.ID = R.NEW(SC.SBS.BR.TRANS.CODE)<1,1>     ;* BG_100010567
                GOSUB GET.SC.TRANSACTION.DETAILS  ;* BG_100010567
                IF ER THEN
                    ER = ''
                END ELSE
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> = R.SC.TRANS.TYPE<SC.TRN.SECURITY.DR.CODE> THEN
                        COMI = R.SC.TRANS.TYPE<SC.TRN.SECURITY.CR.CODE>
                    END
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> = R.SC.TRANS.TYPE<SC.TRN.SECURITY.CR.CODE> THEN
                        COMI = R.SC.TRANS.TYPE<SC.TRN.SECURITY.DR.CODE>
                    END
                END
            END
*
            IF COMI = "" THEN
                E = 'INPUT MISSING' ; CALL ERR
                T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
            END ELSE
                COMI4 = COMI
                GOSUB CHECK.TRANS       ;*==
                IF AF = SC.SBS.CUST.TRANS.CODE THEN
                    IF COMI = CR.CODE THEN
                        R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = ''
                        T.ENRI<SC.SBS.CU.BEN.BANK.1,AV> = ''
                    END
                END ELSE
                    IF COMI = CR.CODE THEN
                        IF NOT(GTSVAL) THEN       ;* CI_10014817/S/E
                            R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = ''
                            T.ENRI<SC.SBS.BR.BEN.BANK.1,AV> = ''
                        END   ;* CI_10012868
                    END
                END
            END
*EN10000184-S
**OLC-S
            IF AF = SC.SBS.CUST.TRANS.CODE THEN
                DR.CODE = '' ; CR.CODE = '' ; TRANS.KEY = ''
                IF R.NEW(SC.SBS.ODD.LOT.TRADE) = 'YES' THEN
                    SC.TRA.CODE.ID = COMI         ;* BG_100010567
                    GOSUB GET.SC.TRANSACTION.DETAILS        ;* BG_100010567
                    IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = '' THEN
                        E = 'Order lot not allowed for this security'
                        CALL ERR ; T.SEQU = 'IFLD'
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END ELSE
                        IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = 'BUY' THEN
                            IF COMI = DR.CODE THEN
                                E = 'Only buy is allowed for this security'
                                CALL ERR ; T.SEQU = 'IFLD'
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END ELSE
                            IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = 'SELL' THEN
                                IF COMI = CR.CODE THEN
                                    E = 'Only sell lot order allowed for this security'
                                    CALL ERR ; T.SEQU = 'IFLD'
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                            END
                        END
                    END
                END
            END

**OLC-E

*EN10000184-E
        CASE AF = SC.SBS.CUSTOMER.NO OR AF = SC.SBS.BROKER.NO
*
            IF COMI = "" THEN
                IF AF = SC.SBS.BROKER.NO AND R.NEW(AF) = '' THEN
                    T.SEQU = 'IFLD'
                END ELSE
                    IF R.NEW(AF) = '' OR COUNT(R.NEW(AF),VM)+1 = 1 THEN
                        T.SEQU = 'IFLD'
                    END
                END
            END ELSE
                ENRIX = ""
                CALL DBR("CUSTOMER.SECURITY":FM:SC.CSC.CUSTOMER.TYPE:FM:"..S",COMI,ENRIX)
                IF ETEXT > "" THEN
                    E = ETEXT ; CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
                OK = 0
                ENRIX.COUNT = DCOUNT(ENRIX,VM)
                FOR YDUMMY = 1 TO ENRIX.COUNT
                    IF ENRIX<1,YDUMMY> = "CUSTOMER" AND AF = SC.SBS.CUSTOMER.NO THEN
                        OK = 1
                    END
                    IF ENRIX<1,YDUMMY> = "BROKER" AND AF = SC.SBS.BROKER.NO THEN
                        OK = 1
                    END
                    IF ENRIX<1,YDUMMY> = "COUNTERPARTY" AND AF = SC.SBS.BROKER.NO THEN
                        OK = 1
                    END
                    IF ENRIX<1,YDUMMY> = "CLIENT" AND AF = SC.SBS.BROKER.NO THEN
                        OK = 1
                    END
                NEXT YDUMMY
                IF NOT(OK) THEN
                    IF AF = SC.SBS.CUSTOMER.NO THEN
                        E = "NOT A CUSTOMER"
                    END
                    IF AF = SC.SBS.BROKER.NO THEN
                        E = "NOT A BROKER"
                    END
                    CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
*
                IF AF = SC.SBS.CUSTOMER.NO THEN
* CI_10022138 S
                    IF R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> NE COMI AND COMI THEN
                        R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = ''
                        R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = ''
                        R.NEW(SC.SBS.CU.TAX.CODE) = ''      ;* EN_10002391 S
                        R.NEW(SC.SBS.CU.TAX.TYPE) = ''
                        R.NEW(SC.SBS.CU.TAX.TCY) = ''
                        R.NEW(SC.SBS.CU.TAX.LCY) = ''       ;* EN_10002391 E
                        R.NEW(SC.SBS.CU.MANTAXTCY) = 0      ;* EN_10002717 S
                        R.NEW(SC.SBS.CU.MANTAXLCY) = 0      ;* EN_10002717 E
                        CALL REBUILD.SCREEN
                    END
* CI_10022138 E
* CI_10035682 - Removed the LOCATE statement
                    IF R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> # COMI THEN
                        R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = ''
* GB9801256
* clear out portfolio.constraint no. when customer no. changed
*
                        IF AV EQ 1 THEN
                            R.NEW(SC.SBS.PORT.CONST.NO) = ''
                        END
* CI_10035682 - Removed the LOCATE statement
                        R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> = ''
                        R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ''
                    END
* CI_10004614 S
* Get any of the portfolio number of the Customer from the file
* SEC.ACC.CUST and pass it to SC.SUB.ACC.DEFAULT

* CI_10015686 S
* CI_10018894 S
                    COMPANY.CUST = COMI
                    GOSUB PICK.SAM
                    IF R.SEC.ACC.CUST = '' THEN
                        ETEXT = 'INPUT MISSING'
                    END
* CI_10018894 E
* CI_10015686 E
                    IF ETEXT ELSE
* CI_10015686 S
                        IF R.SEC.ACC.CUST THEN
                            PORTFOLIO.NO = THIS.COMP.SAM.ID
* CI_10015686 E
                            SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                            DEPOSITORY = R.NEW(SC.SBS.DEPOSITORY)
                            SUB.ACCOUNT = ''
                            CALL SC.SUB.ACC.DEFAULT (PORTFOLIO.NO,SECURITY.NO,DEPOSITORY,SUB.ACCOUNT)
* Check if Depo routing is present.
* If present,depo Routing takes precedence.

                            TRANS.DEPO = ''
                            TRANS.DELIV = ''
                            CALL SC.DEPOT.DEFAULT(PORTFOLIO.NO,SECURITY.NO,DEPOSITORY,TRANS.DEPO,TRANS.DELIV)
                            IF TRANS.DEPO NE '' THEN
                                R.NEW(SC.SBS.SUB.ACCOUNT)<1,AV> = ''
                            END ELSE
                                R.NEW(SC.SBS.SUB.ACCOUNT)<1,AV> = SUB.ACCOUNT
                            END
                        END
                    END
                    CALL REBUILD.SCREEN
* CI_10004614 E
                END ELSE
                    LOCATE SC.SBS.BR.ACC.NO:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF COMI # R.NEW(SC.SBS.BROKER.NO)<1,AV> OR POS = 0 THEN
                        R.NEW(SC.SBS.BR.ACC.NO)<1,AV> = ''
                        R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV> = ''
                        IF POS THEN
                            T.ENRI<POS> = ''
                        END
                    END
                END
*
            END
*EN10000184-S
            IF AF = SC.SBS.BROKER.NO THEN

                IF COMI THEN
                    IF R.NEW(SC.SBS.ODD.LOT.TRADE) = 'YES' THEN
                        IF R.SEC.MASTER<SC.SCM.ODD.LOT.BROKER> THEN
                            LOCATE COMI IN R.SEC.MASTER<SC.SCM.ODD.LOT.BROKER,1> SETTING ODD.POS ELSE
                                ODD.POS = ''
                            END
                            IF NOT(ODD.POS) THEN
                                E = 'Order not allowed for this broker'
                                CALL ERR ; T.SEQU = 'IFLD'
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END
                    END
                END
            END
*EN10000184-E

        CASE AF = SC.SBS.CUST.ACC.NO OR AF = SC.SBS.BR.ACC.NO
            COMI2 = "" ; COMI3 = "" ; COMI4 = "" ; COMI7 = ""
            IF AF = SC.SBS.CUST.ACC.NO THEN
                ACCOUNT.CURRENCY = ''   ;* CI_10008023 S/E
                SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                CALL F.READ('F.SEC.ACC.MASTER',SEC.ACC.NO,R.SEC.ACC.MASTER,F.SEC.ACC.MASTER,'')     ;* BG_100008063 s
                DEAL.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
                MEMO.ACC = R.SEC.ACC.MASTER<SC.SAM.MEMO.ACCOUNT>      ;* BG_100008063 e
                T.ENRI<SC.SBS.CU.ACCOUNT.CCY> = ''          ;* CI_10005556 S/E
*
                IF DEAL.BOOK AND COMI THEN
                    COMI = ''
                END
                IF COMI = "" THEN
                    IF DEAL.BOOK = '' THEN
                        IF MEMO.ACC = 'NO' THEN
                            COMI3 = R.NEW(SC.SBS.TRADE.CCY)
                            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                            IF COMI3 > "" AND COMI4 > "" THEN
                                APPLN = "SC-":COMI4
                                IF R.NEW(SC.SBS.CU.ORDER.NOS)<1,AV> THEN
                                    IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> THEN
                                        COMI3 = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
                                    END
                                END
                                CUST.NO = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                                PORTFOLIO.NO = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',2)
                                CALL GET.SETTLEMENT.DEFAULTS(CUST.NO,COMI3,'1',APPLN,PORTFOLIO.NO,'P',COMI2,'','','')
                                COMI = COMI2
                            END ELSE
                                E = 'NO ACCOUNT FOR CUSTOMER IN TRADE CCY' ; CALL ERR ; T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END ELSE
                            E = 'INPUT MANDATORY FOR MEMO.ACCOUNTS' ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END ELSE
                        ASSET.CATEG = ''
                        CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.ASSET.CAT
                        CALL DBR(CHECKFILE2,SEC.ACC.NO,ASSET.CATEG)
                        ACCOUNT.CURRENCY = R.NEW(SC.SBS.SECURITY.CURRENCY)
                        R.NEW(SC.SBS.TRADE.CCY) = R.NEW(SC.SBS.SECURITY.CURRENCY)         ;* GB9900532 S/E
                        COMI = ACCOUNT.CURRENCY:ASSET.CATEG:INT.DEPT.CODE
                    END
                    IF COMI = '' THEN
                        E = 'NO ACCOUNT FOR CUSTOMER IN TRADE CCY' ; CALL ERR ; T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ELSE
                    IF DEAL.BOOK = '' THEN
*CI-10002117 S
* CI-10001191 S
* Presently CUST.ACC.NO accepts any number which is not validated
* against ACCOUNT file. It is validated here
                        IF AF = SC.SBS.CUST.ACC.NO THEN     ;* CI-10001191 S
                            VALID.ACCT = '' ; ETEXT = ''
                            CALL DBR('ACCOUNT':FM:AC.CATEGORY, COMI, VALID.ACCT)          ;* BG_100002521 S/E
                            IF VALID.ACCT EQ '' THEN
                                AF = SC.SBS.CUST.ACC.NO
                                E = 'ACCOUNT NO. MISSING' ; CALL ERR ; T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END
* CI-10001191 E
*CI-10002117 E
                        IF MEMO.ACC = 'NO' THEN
* EN_10001090 removed comments
                        END ELSE
*
                            E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
                            CALL SC.CALC.NOSTRO(R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,SEC.ACC.NO,COMI,R.NEW(SC.SBS.TRADE.CCY),'C',OUT.ACC.NO,O.CUST)
*
                            IF E THEN
* GB9901283 S
                                E = ''
* GB9901283 E
                            END ELSE
                                COMI = OUT.ACC.NO
                                R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = ''
                                T.ENRI<SC.SBS.CU.BEN.BANK.1,AV> = ''
                                IF O.CUST THEN
                                    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                                    GOSUB CHECK.TRANS       ;*==
                                    IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = DR.CODE THEN
                                        R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = O.CUST
                                    END
                                END
                            END
                        END
                    END ELSE
* CI_10004843 S
                        IF NOT(GTSVAL) THEN       ;* CI_10014817/S/E
                            E = 'INVALID FOR DEALER.BOOK - ENTER <CR>'
                            CALL ERR ; T.SEQU = 'IFLD'
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END   ;* CI_10004843 S/E
                    END
*
                END
                IF NOT(DEAL.BOOK) THEN
                    ACCOUNT.CURRENCY = ""
                    CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                    CALL DBR(CHECKFILE2, COMI,ACCOUNT.CURRENCY)
                END

                CHECKFILE2 = "ACCOUNT":FM:AC.SHORT.TITLE:FM:'..S'
                ACCOUNT.DESC = ''
                CALL DBR(CHECKFILE2, COMI,ACCOUNT.DESC)
                COMI.ENRI = ACCOUNT.DESC
                REF.CURRENCY = ""
                CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.REFERENCE.CURRENCY
                CALL DBR(CHECKFILE2, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,REF.CURRENCY)
                IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> # ACCOUNT.CURRENCY THEN
                    IF CONSOL.RATE.INPUT NE 1 THEN          ;* EN_10001019 S/E
                        IF NOT(GTSVAL) THEN       ;* CI_10014817/S/E
                            R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = ''
                        END ELSE        ;* CI_10005017 S
                            IF NOT(R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV>) THEN
                                R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = ''
                            END
                        END   ;* CI_10005017 E
                    END       ;* EN_10001019 S/E
                END
                IF ACCOUNT.CURRENCY THEN          ;* CI_10008023 S/E
                    R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                END ;* CI_10008023 S/E
                R.NEW(SC.SBS.CU.REF.CCY)<1,AV> = REF.CURRENCY
                CURRENCY.ID = REF.CURRENCY        ;* BG_100010567
                GOSUB GET.CURRENCY.DETAILS        ;* BG_100010567
                YFLD.NO = SC.SBS.CU.REF.CCY:'.':AV
                LOCATE YFLD.NO IN T.FIELDNO<1> SETTING YPOS THEN
                    T.ENRI<YPOS> = CCY.NAME       ;* BG_100010567
                END ;* CI_1007957 E

* GB9700195 (1) - removed premature gosub CALC.CUST.NET
            END ELSE          ;* VALIDATING BROKER ACC
* CI_10011894 S
                BROK.VALUE = ''
                BROK.VALUE = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                CALL SC.DEFAULT.SETT.INSTR(BROK.VALUE, 'SEC.TRADE')   ;* BG_100005060 S-E
* CI_10011894 E

* CI_10002012 - S
                IF COMI = '' THEN
* CI_10016535 S
                    IF R.NEW(SC.SBS.TRADE.CCY) NE R.NEW.LAST(SC.SBS.TRADE.CCY) THEN
                        BROK.VALUE = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                        CALL SC.DEFAULT.SETT.INSTR(BROK.VALUE, 'SEC.TRADE')     ;* BG_100006101 SE
* CI_10016535 E
                        COMI = R.NEW(SC.SBS.BR.ACC.NO)<1,AV>
* CI_10016535 S
                        ACC.DESC = ''
                        CHECKFILE2 = 'ACCOUNT':FM:AC.SHORT.TITLE
                        CALL DBR(CHECKFILE2,COMI,ACC.DESC)
                        COMI.ENRI = ACC.DESC
                    END
* CI_10016535 E
                END
* CI_10002012 - E
*
* CI_10003556 S
* Check if the account is present in CUSTOMER.SECURITY and then
* default from NOSTRO.ACCOUNT.
                MY.BROK = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                TRD.CCY = R.NEW(SC.SBS.TRADE.CCY)
                E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
                ST.DEF.ACC = '' ; TOT.ACCOUNT = ''
                CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.BR.SET.ACC,MY.BROK,ST.DEF.ACC)
                TOT.ACCOUNT = DCOUNT(ST.DEF.ACC,VM)
                ACC.CHK = 1
                LOOP
                WHILE ACC.CHK <= TOT.ACCOUNT
                    ACC.CCY = ''
                    CALL DBR('ACCOUNT':FM:AC.CURRENCY,ST.DEF.ACC<1,ACC.CHK>,ACC.CCY)
                    IF TRD.CCY EQ ACC.CCY THEN
                        OUT.ACC.NO = ST.DEF.ACC<1,ACC.CHK>
                    END
                    ACC.CHK += 1
                REPEAT
                IF NOT(OUT.ACC.NO) THEN
* CI_10003556 E
                    E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
                    CALL SC.CALC.NOSTRO(R.NEW(SC.SBS.BROKER.NO)<1,AV>,'',COMI,R.NEW(SC.SBS.TRADE.CCY),'B',OUT.ACC.NO,O.CUST)
                END ;* CI_10003556 S/E
*
                IF E THEN
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END ELSE
                    ACCOUNT.CURRENCY = ""
                    CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                    IF R.NEW(SC.SBS.BR.ACC.NO)<1,AV> = '' THEN        ;* BG_100000854 S/E
                        COMI = OUT.ACC.NO
                        CALL DBR(CHECKFILE2, COMI,ACCOUNT.CURRENCY)
                        R.NEW(SC.SBS.BR.ACC.NO)<1,AV> = OUT.ACC.NO
                    END       ;* BG_100000854 S/E
*EN_10000622 S
                    IF ACCOUNT.CURRENCY = "" THEN
                        CALL DBR(CHECKFILE2, COMI,ACCOUNT.CURRENCY)   ;* BG_100003439
                    END
*EN_10000622 E
                    R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                    CHECKFILE2 = 'ACCOUNT':FM:AC.SHORT.TITLE
                    ACC.DESC = ''
                    CALL DBR(CHECKFILE2,COMI,ACC.DESC)
                    COMI.ENRI = ACC.DESC
                    IF NOT(GTSVAL) THEN ;* CI_10014817/S/E
                        R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = ''
                        T.ENRI<SC.SBS.BR.BEN.BANK.1,AV> = ''
                    END       ;* CI_10012868
* BG_100002230 S
                    TO.BE.RECD.FLAG = '' ; PAY.FLAG = ''
                    DEL.INSTR = R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>
                    IF DEL.INSTR THEN
                        CALL F.READ('F.SC.DEL.INSTR',DEL.INSTR,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')    ;* BG_100008063 s
                        TO.BE.RECD.FLAG = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>
                        PAY.FLAG = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>     ;* BG_100008063 e
                    END
                    IF TO.BE.RECD.FLAG <> 'Y' OR PAY.FLAG <> 'Y' THEN
* BG_100002230 E
                        BROK.RET = ''
                        CALL DBR('ACCOUNT':FM:AC.CUSTOMER,COMI,BROK.RET)
                        IF BROK.RET # R.NEW(SC.SBS.BROKER.NO)<1,AV> THEN
                            IF O.CUST THEN
                                COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                                GOSUB CHECK.TRANS ;*==
                                IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = DR.CODE THEN
                                    IF NOT(GTSVAL) OR NOT(R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>) THEN   ;* CI_10014817/S/E
                                        R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = O.CUST
                                    END ;* CI_10012868
* GB9700915
* Display Ben.Bank.1 on the Screen
                                    CUST.NAME = ''
                                    CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>,CUST.NAME)
                                    LOCATE SC.SBS.BR.BEN.BANK.1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.ENRI<POS> = CUST.NAME
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
*
* BR.BEN.BANK.2 defaulting
* CI_10006050 S
                                    IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> THEN
* CI_10017599 S
* To populate the field BR.BEN.ACCT field like BR.BEN.BANK.1
* and BR.BEN.BANK.2
                                        IN.CUSTOMER = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                                        RET.AGENT.CODE = ""
                                        OUT.CUSTOMER = ""
                                        OUT.INTER.CUST = ""
                                        OUT.INTER.ACCOUNT = ""
                                        OUT.ACCOUNT.NUMBER = ""
                                        IN.APPLICATION = 'SC'
                                        IN.AGENT = ""
*----------------------------------------------------
                                        CALL GET.AGENT(IN.CUSTOMER,R.NEW(SC.SBS.TRADE.CCY),IN.APPLICATION,IN.AGENT,"","","","","","","",OUT.CUSTOMER,OUT.ACCOUNT.NUMBER,"","",OUT.INTER.CUST,OUT.INTER.ACCOUNT,RET.AGENT.CODE)
*----------------------------------------------------
                                        IF OUT.ACCOUNT.NUMBER THEN
                                            R.NEW(SC.SBS.BR.BEN.ACCT)<1,AV> = OUT.ACCOUNT.NUMBER
                                        END
                                        CALL REBUILD.SCREEN
* CI_10017599 E

                                        IN.CUSTOMER = R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>
                                        RET.AGENT.CODE = ""
                                        OUT.CUSTOMER = ""
                                        OUT.INTER.CUST = ""
                                        OUT.INTER.ACCOUNT = ""
                                        OUT.ACCOUNT.NUMBER = ""
                                        IN.APPLICATION = 'SC'
                                        IN.AGENT = ""
                                        CALL GET.AGENT(IN.CUSTOMER,R.NEW(SC.SBS.TRADE.CCY),IN.APPLICATION,IN.AGENT,"","","","","","","",OUT.CUSTOMER,OUT.ACCOUNT.NUMBER,"","",OUT.INTER.CUST,OUT.INTER.ACCOUNT,RET.AGENT.CODE)
                                        IF OUT.CUSTOMER THEN
                                            IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> NE OUT.CUSTOMER THEN         ;* CI_10018436 S/E
                                                R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = OUT.CUSTOMER
                                            END ELSE        ;* CI_10018436 S
                                                R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = ''
                                            END   ;* CI_10018436 E
                                            CUST.NAME = ''
                                            CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV>,CUST.NAME)
                                            LOCATE SC.SBS.BR.BEN.BANK.2:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                                POS = 0
                                            END
                                            IF POS THEN
                                                T.ENRI<POS> = CUST.NAME
                                            END
                                            IF POS THEN
                                                T.SEQU<-1> = "D":POS
                                            END
                                        END
                                    END
* CI_10006050 E
                                END
                            END
                        END
                    END       ;* BG_100002230 S/E
                END
            END
        CASE AF = SC.SBS.CUST.NOMINEE
* GB9700479 - Nominee Code has been input, flag it
            IF COMI THEN
                NOMINEE.INPUT<AV> = COMI
            END ELSE
                LOCATE R.NEW(SC.SBS.DEPOSITORY) IN R.VAULT.PARAMETER<SC.VPR.DEPOSITORY,1> SETTING POSN THEN
                    IF R.VAULT.PARAMETER<SC.VPR.NOMINEE,POSN> = 'YES' THEN
                        COMI = R.VAULT.PARAMETER<SC.VPR.NOMINEE.CODE,POSN>
                    END
                END
            END
*GB0100224S
* if sub account is entered, check if it is defined as a sub account in SUB.ACCOUNT field
* of CUSTOMER.SECURITY record keyed on depository
* end else
* call SC.SUB.ACC.DEFAULT routine to have defaulted sub account
*
        CASE AF = SC.SBS.SUB.ACCOUNT
            IF COMI THEN
                CHECKFILE2 = "CUSTOMER.SECURITY":FM:SC.CSC.SUB.ACCOUNT
                SUB.ACC = ''
                CALL DBR(CHECKFILE2,R.NEW(SC.SBS.DEPOSITORY),SUB.ACC)
                LOCATE COMI IN SUB.ACC<1,1> SETTING POS ELSE
                    POS = 0
                END
                IF POS = 0 THEN
                    E = "INVALID SUB.ACCOUNT FOR DEPOSITORY"
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END ELSE
* GB0101422 - S
                IF R.NEW(AF)<1,AV> AND COMI = '' THEN
                    COMI = ''
                END ELSE
* GB0101422 - E
                    PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                    SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                    DEPOSITORY = R.NEW(SC.SBS.DEPOSITORY)
                    CALL SC.SUB.ACC.DEFAULT (PORTFOLIO,SECURITY.NO,DEPOSITORY,SUB.ACCOUNT)
* SUB.ACCOUNT VALIDATION- GB0101650
                    TRANS.DEPO = ''
                    TRANS.DELIV = ''
                    CALL SC.DEPOT.DEFAULT(PORTFOLIO,SECURITY.NO,DEPOSITORY,TRANS.DEPO,TRANS.DELIV)
                    IF TRANS.DEPO NE '' THEN
                        COMI = ''
                    END ELSE
                        COMI = SUB.ACCOUNT
                    END
                END
            END

*GB0100224E
        CASE AF = SC.SBS.BROKER.DEPO
** CEDEL
            BROKER.CLEARING.NAME = ''
            CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,COMI,BROKER.CLEARING.NAME)
            IF ETEXT THEN
                BROKER.CLEARING.NAME = 'OTHER'
            END
*
            IF AS = 1 THEN
                IF COMI = '' THEN
                    COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                    GOSUB CHECK.TRANS   ;*==
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = CR.CODE AND R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' THEN
                        E = 'INPUT MANDATORY FOR PURCHASE' ; CALL ERR
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
** CEDEL
                    IF CUST.CLEARING.NAME MATCHES 'SEGA':@VM:'CEDEL':VM:'EUROCLEAR' THEN
                        E = 'INPUT MANDATORY FOR & CLEARING':@FM:CUST.CLEARING.NAME ; CALL ERR
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
*
                    CUSTOMER.ENTRY = 0
                END ELSE
                    ETEXT = ''
                    T.ENRI<AF> = ''
                    CALL IN2CUS(35,'CUS')
                    IF NOT(ETEXT) THEN
                        CUSTOMER.ENTRY = '1'
                        CUST.NAME = ''
                        CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,COMI,CUST.NAME)
                        T.ENRI<AF> = CUST.NAME
                        COMI.ENRI = CUST.NAME
                    END ELSE
                        CUSTOMER.ENTRY = '0'
                    END
                END
            END
            IF CUSTOMER.ENTRY THEN
                IF AS > 1 THEN
                    IF COMI = '' THEN
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END ELSE
                        E = 'INVALID INPUT'
                        T.SEQU = 'IFLD' ; CALL ERR
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END ELSE
                IF AS > 4 THEN
                    IF COMI = '' THEN
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END ELSE
                        E = 'INVALID-ENTER 4 LINES ONLY'
                        T.SEQU = 'IFLD' ; CALL ERR
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ELSE
                    IF COMI = '' THEN
                        IF AS > 1 THEN
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END
                END
            END
* BG_100005060 S
* Defaulting of BR.SEC.DEPOT.AC is not done when BROKER.DEPO is changed
* in GUI.
            IF COMI AND (COMI NE R.NEW(AF)<1,AV>) THEN
                R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV> = ''
                REFRESH.FIELD.NO = SC.SBS.BR.SEC.DEPOT.AC:'.':AV
                CALL REFRESH.FIELD(REFRESH.FIELD.NO, '')
            END
* BG_100005060 E

        CASE AF = SC.SBS.BR.SEC.DEPOT.AC          ;* CEDEL
            BROKER.CLEARING.NAME = ''
            CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(SC.SBS.BROKER.DEPO)<1,AV>,BROKER.CLEARING.NAME)
            IF ETEXT THEN
                BROKER.CLEARING.NAME = 'OTHER'
            END
*
            IF CUST.CLEARING.NAME MATCHES 'SEGA':@VM:'CEDEL':VM:'EUROCLEAR' THEN
                IF COMI = '' THEN
                    BR.SEC.ACC = ''
                    BEGIN CASE
                    CASE BROKER.CLEARING.NAME = 'SEGA'
                        CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.SEGA.NO,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                        BR.SEC.ACC = BR.SEC.ACC<1,1>
                    CASE BROKER.CLEARING.NAME = 'CEDEL'
                        CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.CEDEL.CODE,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                        BR.SEC.ACC = BR.SEC.ACC<1,1>
                    CASE BROKER.CLEARING.NAME = 'EUROCLEAR'
                        CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.EUROCLEAR.CODE,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                        BR.SEC.ACC = BR.SEC.ACC<1,1>
                    CASE BROKER.CLEARING.NAME = 'OTHER'
                    CASE 1
                        IF CUST.CLEARING.NAME = 'CEDEL' THEN
                            CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.CEDEL.CODE,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                            BR.SEC.ACC = BR.SEC.ACC<1,1>
                        END ELSE
                            CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.EUROCLEAR.CODE,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                            BR.SEC.ACC = BR.SEC.ACC<1,1>
                        END
                    END CASE
                    COMI = BR.SEC.ACC
                    R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV> = COMI
                    LOCATE SC.SBS.BR.SEC.DEPOT.AC:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
                END ELSE      ;* INPUT BY USER - CHECK ACCOUNT NOT FOR OTHER CPTY
                    BEGIN CASE
                    CASE BROKER.CLEARING.NAME = 'CEDEL'
                        BR.NO = ''
                        CALL DBR('SC.CEDEL.ACC.CON':FM:1,COMI,BR.NO)
                        IF BR.NO AND R.NEW(SC.SBS.BROKER.NO)<1,AV> # BR.NO THEN
                            E = 'DEPOT ACC BELONGS TO CPTY ':BR.NO ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                        IF LEN(COMI) # 5 THEN
                            E = 'CEDEL DEPO ACC MUST BE 5 CHARACTERS' ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    CASE BROKER.CLEARING.NAME = 'EUROCLEAR'
                        BR.NO = ''
                        CALL DBR('SC.EUROCLEAR.ACC.CON':FM:1,COMI,BR.NO)
                        IF BR.NO AND R.NEW(SC.SBS.BROKER.NO)<1,AV> # BR.NO THEN
                            E = 'DEPOT ACC BELONGS TO CPTY ':BR.NO ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                        IF LEN(COMI) # 5 THEN
                            E = 'EUROCLEAR DEPO ACC MUST BE 5 CHARACTERS' ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END CASE
                END
            END
            IF CUST.CLEARING.NAME MATCHES 'CEDEL':VM:'EUROCLEAR' AND BROKER.CLEARING.NAME # 'OTHER' THEN
                DIRECT.LINK = ''
                CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.DIRECT.LINK,R.NEW(SC.SBS.BROKER.DEPO)<1,AV>,DIRECT.LINK)
                IF DIRECT.LINK = 'Y' THEN
                    IF COMI = '' THEN
                        IF CUST.CLEARING.NAME = 'CEDEL' THEN
                            E = 'INPUT MANDATORY FOR CEDEL CLEARING' ; CALL ERR
                        END ELSE
                            E = 'INPUT MANDATORY FOR EUROCLEAR CLEARING' ; CALL ERR
                        END
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END
** BNB
            IF CUST.CLEARING.NAME = 'BNB' THEN
                IF COMI = '' THEN
                    BR.SEC.ACC = ''
                    CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.BNB.CODE,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.SEC.ACC)
                    IF BR.SEC.ACC THEN
                        R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV> = BR.SEC.ACC
                        COMI = BR.SEC.ACC
                        LOCATE SC.SBS.BR.SEC.DEPOT.AC:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
                        IF POS THEN T.SEQU<-1> = "D":POS
                    END ELSE
                        E = 'INPUT MANDATORY FOR BNB CLEARING' ; CALL ERR
                        T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END
*
        CASE AF = SC.SBS.CUST.NO.NOM OR AF = SC.SBS.BR.NO.NOM
* CI_10010409/CI_10015512 S
* Stamp tax and Ebv fees to default as soon as nominal is changed
* or it should get defaulted on crossval
*
            IF AF = SC.SBS.CUST.NO.NOM THEN
                IF COMI NE R.NEW(SC.SBS.CUST.NO.NOM)<1,AV,AS> AND COMI THEN
                    R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = ''
                    R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = ''
                    R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> = ''
                    R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> = ''
                    R.NEW(SC.SBS.CU.WHT.TAX)<1,AV> = ''     ;* BG_100005324 / CI_10015660 S/E
                END
            END ELSE
                IF AF = SC.SBS.BR.NO.NOM THEN
                    IF COMI NE R.NEW(SC.SBS.BR.NO.NOM)<1,AV,AS> AND COMI THEN
                        R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = ''
                        R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> = ''
                        R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> = ''
                    END
                END
            END
* CI_10010409 / CI_10015512 E
            IF COMI = "" THEN
                NO.SUBV = COUNT(R.NEW(AF)<1,AV>,SM)+1
                IF NO.SUBV = 1 THEN
                    E = 'INPUT MISSING'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END ELSE
                    DEL R.NEW(AF)<1,AV,AS>
                    DEL R.NEW(AF + 1)<1,AV,AS>
                    AS -= 1
                    COMI = R.NEW(AF)<1,AV,AS>
                END
                T.SEQU = "IFLD"
                IF AF = SC.SBS.CUST.NO.NOM THEN
                    AFX = SC.SBS.CUST.NO.NOM
                    AFX1 = SC.SBS.CUST.PRICE
                    AFX4 = SC.SBS.CUST.TOT.NOM
                END ELSE
                    AFX = SC.SBS.BR.NO.NOM
                    AFX1 = SC.SBS.BR.PRICE
                    AFX4 = SC.SBS.BR.TOT.NOM
                END
                GOSUB CALC.NOM.AMT      ;*==
                GOSUB CALC.DISC.AMOUNT  ;*EN_10002646 S/E
                IF E > "" THEN
                    T.SEQU = "IFLD" ; CALL ERR ; GOTO FIELD.DISPLAY.OR.INPUT
                END
                R.NEW(AFX4)<1,AV> = TOT.NOM
                R.NEW(AFX4+1)<1,AV> = SEC.GROSS.AMT
                R.NEW(AFX4+2)<1,AV> = GROSS.AMT
                IF AF = SC.SBS.CUST.NO.NOM THEN
                    R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = ''  ;* CI_10001488 S/E
                    LOCATE SC.SBS.CUST.INTR.AMT:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        LOCATE SC.SBS.CU.REALLOWANCE:'.':AV IN T.FIELDNO<1> SETTING PP ELSE
                            OLD.BUFFER = "-"
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            RECALC.FLAG = 'N'
                            COMI6 = ''
                            INPUT.BUFFER3 = ''
                            GOSUB CALC.CUST.CHARGES         ;*==
                            IF AS > 1 THEN        ;* GB5601777
                                DEL R.NEW(AF)<1,AV,AS>
                                DEL R.NEW(AF + 1)<1,AV,AS>
                                AS -= 1
                                COMI = R.NEW(AF)<1,AV,AS>
                            END         ;* GB9601775
* GB9900576 don't append to INPUT.BUFFER, re set it.
                            IF INPUT.BUFFER3 # '' THEN
                                INPUT.BUFFER = ' ':TRIMF(INPUT.BUFFER3)
                            END
                            TEXT = '' ; LOCAL4 = ''
                            LOCATE SC.SBS.CU.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                POS = 0
                            END
                            IF POS THEN
                                T.SEQU<-1> = "D":POS
                            END
* GB9601606
                            IF INPUT.BUFFER AND INDEX(TTYPE,"GUI",1) THEN
                                GOSUB GUI.FIELD.SKIP
                            END
* GB9601606
                        END
                    END
                END ELSE
                    IF NOT(GTSVAL) THEN ;* CI_10014817/S/E
                        R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = ''       ;* CI_10001078 S/E
                    END       ;* CI_10005017 S/E
                    LOCATE SC.SBS.BR.INTR.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        LOCATE SC.SBS.BR.REALLOWANCE:'.':AV IN T.FIELDNO<1> SETTING PP ELSE
                            OLD.BUFFER = "-"
                            GOSUB SET.DETS.FOR.CHGS         ;*==
                            RECALC.FLAG = 'N'
                            COMI6 = ''
                            INPUT.BUFFER3 = ''
                            GOSUB CALC.BROKER.CHARGES       ;*==
                            IF AS > 1 THEN        ;* GB9601775
                                DEL R.NEW(AF)<1,AV,AS>
                                DEL R.NEW(AF + 1)<1,AV,AS>
                                AS -= 1
                                COMI = R.NEW(AF)<1,AV,AS>
                            END         ;* GB9601775
* GB9900576 don't append to INPUT.BUFFER, re set it.
                            IF INPUT.BUFFER3 # '' THEN
                                INPUT.BUFFER = ' ':TRIMF(INPUT.BUFFER3)
                            END
                            TEXT = '' ; LOCAL4 = ''
                            LOCATE SC.SBS.BR.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                POS = 0
                            END
                            IF POS THEN
                                T.SEQU<-1> = "D":POS
                            END
* GB9601606
                            IF INPUT.BUFFER AND INDEX(TTYPE,"GUI",1) THEN
                                GOSUB GUI.FIELD.SKIP
                            END
* GB9601606
                        END
                    END
                END
                IF INDEX(TTYPE,"GUI",1) THEN
                    I = 0
                    A += 1
                    LOOP
                    UNTIL I = 1
                        FN = FIELD(T.FIELDNO<A>,".",1)
                        IF T(FN)<3> = 'NOINPUT' THEN
                            A += 1
                        END ELSE
                            LOCATE FN IN VERSION.FIELDS<1> SETTING POS ELSE
                                POS = 0
                            END
                            IF POS THEN
                                I = 1
                            END ELSE
                                A += 1
                            END
                        END
                    REPEAT
                    A -= 1
                END
            END ELSE
* CI_10001078 Starts
                IF NOT(GTSVAL) THEN     ;* CI_10014817/S/E
                    IF AF = SC.SBS.CUST.NO.NOM THEN
                        R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = ''
                    END ELSE
                        R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = ''
                    END
                END ;* CI_10005017 S/E
* CI_10001078 Ends
                IF R.SC.PARAMETER<SC.PARAM.OVER.TRADE.UNIT> = "YES" AND AF = SC.SBS.CUST.NO.NOM ELSE
* GB0000217 S
                END
            END
            CALL REBUILD.SCREEN
* GB0000217 E
*EN10000184-S
            IF AF = SC.SBS.CUST.NO.NOM THEN
                IF COMI THEN
                    TRADING.UNITS = 0
                    IF R.NEW(SC.SBS.SECURITY.CODE) THEN
                        TRADING.UNITS = R.SEC.MASTER<SC.SCM.TRADING.UNITS>
                        ODD.LOT.UNIT.CHECK = ''
                        IF R.NEW(SC.SBS.ODD.LOT.TRADE) = 'YES' THEN
                            IF R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS> OR R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS> = 0 THEN        ;* CI_10003743 S/E
                                TRADING.UNITS = R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS>
                                ODD.LOT.UNIT.CHECK = '1'
                            END
                        END
                    END
                    IF R.SC.PARAMETER<SC.PARAM.OVER.TRADE.UNIT> = "YES" ELSE
                        IF TRADING.UNITS THEN
                            RATIO.OF.TU = COMI / TRADING.UNITS
                            IF COMI < TRADING.UNITS OR FIELD(RATIO.OF.TU,'.',2) THEN
                                IF ODD.LOT.UNIT.CHECK THEN
                                    E = 'INVALID - NOMINAL < ODD LOT UNITS'
                                END ELSE
                                    E = 'INVALID - NOMINAL < TRADING UNITS'
                                    CALL ERR ; T.SEQU = 'IFLD'
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                            END
                        END
                    END
                END
            END
*EN10000184-E

        CASE AF = SC.SBS.CU.REALLOWANCE OR AF = SC.SBS.BR.REALLOWANCE
            IF COMI THEN
                IF AF = SC.SBS.CU.REALLOWANCE THEN
                    REALLOW.AMT = (COMI*R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>)/100
                END ELSE
                    REALLOW.AMT = (COMI*R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>)/100
                END
                IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                    CALL SC.CHF.ROUNDING(REALLOW.AMT)
                END
                R.NEW(AF+1)<1,AV> = REALLOW.AMT
            END ELSE
                R.NEW(AF+1)<1,AV> = ''
            END
            LOCATE AF+1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            IF AF = SC.SBS.CU.REALLOWANCE THEN
                LOCATE SC.SBS.CUST.INTR.AMT:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    GOSUB SET.DETS.FOR.CHGS       ;*==
                    RECALC.FLAG = 'N'
                    COMI6 = ''
                    INPUT.BUFFER3 = ''
                    GOSUB CALC.CUST.CHARGES       ;*==
                    IF INPUT.BUFFER3 # '' THEN
                        INPUT.BUFFER = TRIMF(INPUT.BUFFER3)
                    END
                    TEXT = '' ; LOCAL4 = ''
                    LOCATE SC.SBS.CU.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
* GB9601606
                    IF INPUT.BUFFER AND INDEX(TTYPE,"GUI",1) THEN
                        GOSUB GUI.FIELD.SKIP
                    END
* GB9601606
                END
            END ELSE
                LOCATE SC.SBS.BR.INTR.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    GOSUB SET.DETS.FOR.CHGS       ;*==
                    RECALC.FLAG = 'N'
                    COMI6 = ''
                    INPUT.BUFFER3 = ''
                    GOSUB CALC.BROKER.CHARGES     ;*==
                    IF INPUT.BUFFER3 # '' THEN
                        INPUT.BUFFER = TRIMF(INPUT.BUFFER3)
                    END
                    TEXT = '' ; LOCAL4 = ''
                    LOCATE SC.SBS.BR.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                    IF POS THEN
                        T.SEQU<-1> = "D":POS
                    END
* GB9601606
                    IF INPUT.BUFFER AND INDEX(TTYPE,"GUI",1) THEN
                        GOSUB GUI.FIELD.SKIP
                    END
* GB9601606
                END
            END
*
        CASE AF = SC.SBS.CU.REALLOW.AMT OR AF = SC.SBS.BR.REALLOW.AMT
            IF COMI = '' THEN
                IF AF = SC.SBS.CU.REALLOW.AMT AND R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV> THEN
                    REALLOW.AMT = (R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV>*R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>)/100
                    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                        CALL SC.CHF.ROUNDING(REALLOW.AMT)
                    END
                    COMI = REALLOW.AMT
                    T.SEQU<-1> = 'DFLD'
                END
                IF AF = SC.SBS.BR.REALLOW.AMT AND R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV> THEN
                    REALLOW.AMT = (R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV>*R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>)/100
                    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                        CALL SC.CHF.ROUNDING(REALLOW.AMT)
                    END
                    COMI = REALLOW.AMT
                    T.SEQU<-1> = 'DFLD'
                END
            END ELSE
                POS = 0
                IF AF = SC.SBS.CU.REALLOW.AMT AND R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV> AND COMI # R.NEW(AF) THEN
                    R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV> = ''
                    LOCATE AF-1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                END
                IF AF = SC.SBS.BR.REALLOW.AMT AND R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV> AND COMI # R.NEW(AF) THEN
                    R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV> = ''
                    LOCATE AF-1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                        POS = 0
                    END
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
*
        CASE AF = SC.SBS.CUST.INTR.AMT OR AF = SC.SBS.BR.INTR.AM.TRD
            GOSUB SET.DETS.FOR.CHGS     ;*==
            RECALC.FLAG = 'N'
            COMI6 = COMI
            IF COMI6 THEN     ;* CI_10033466 S/E
                POPULATE.FLD.VAL = 1
            END
            INPUT.BUFFER3 = ''
            IF COMI = '' THEN
                R.NEW(AF)<1,AV> = ''    ;* CI_10006386 S/E
            END
            IF AF = SC.SBS.CUST.INTR.AMT THEN
                IF COMI6 = '' THEN
                    NO.CU.INT = ''
                END ELSE
                    NO.CU.INT = 1
                END
*
* CI_10006386 S/E
                GOSUB CALC.CUST.CHARGES ;*==
                IF (R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> NE '' AND R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> NE '' AND R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> NE '' AND R.NEW(SC.SBS.CU.COMMISSION)<1,AV> NE '' AND R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> NE '' AND R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> NE '' AND R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> NE '' ) THEN
                    INPUT.BUFFER3 = ''
* BG_100003967 S
                    FOR YFIELD = SC.SBS.CU.BRKR.COMM TO SC.SBS.CU.EBV.FEES
                        IF YFIELD NE SC.SBS.CU.STAMP.TAX THEN
                            IF INPUT.BUFFER3 NE '' THEN
                                INPUT.BUFFER3 := " ":R.NEW(YFIELD)<1,AV>
                            END ELSE
                                INPUT.BUFFER3 = R.NEW(YFIELD)<1,AV>
                            END
                        END
                    NEXT YFIELD
* BG_100003967 E
                END ;* CI_10006386 S/E
                COMI6 = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                LOCATE SC.SBS.CU.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END ELSE
                IF COMI6 = '' THEN
                    NO.BR.INT = ''
                END ELSE
                    NO.BR.INT = 1
                END
*
* CI_10006386 S
                GOSUB CALC.BROKER.CHARGES         ;*==
                IF (R.NEW(SC.SBS.BR.GROSS.ACCR)<1,AV> NE '' AND R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> NE '' AND R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> NE '' AND R.NEW(SC.SBS.CL.COMMISSION)<1,AV> NE '' AND R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> NE '' AND R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> NE '' ) THEN
                    INPUT.BUFFER3 = ''
* BG_100003967 S
                    FOR YFIELD = SC.SBS.BR.BROKER.COMM TO SC.SBS.BR.EBV.FEES
                        IF INPUT.BUFFER3 NE '' THEN
                            INPUT.BUFFER3 := " ":R.NEW(YFIELD)<1,AV>
                        END ELSE
                            INPUT.BUFFER3 = R.NEW(YFIELD)<1,AV>
                        END
                    NEXT YFIELD
* BG_100003967 E
                END ;* CI_10006386 S/E
                COMI6 = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
                LOCATE SC.SBS.BR.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
            COMI = COMI6
            IF INPUT.BUFFER3 # '' THEN
                INPUT.BUFFER = TRIMF(INPUT.BUFFER3)
            END
* CI_10006698 S

            IF R.NEW(SC.SBS.NET.TRADE)[1,1] EQ 'P' THEN     ;* BG_100003967 S/E
                PRORATA = @TRUE
                GOSUB PRORATA.COMM
            END     ;* BG_100003967 S/E

* CI_10006698 E
* GB961606
            IF INPUT.BUFFER AND INDEX(TTYPE,"GUI",1) THEN
                GOSUB GUI.FIELD.SKIP
            END
* GB961606
            TEXT = '' ; LOCAL4 = ''
            IF NOT(GTSVAL) THEN         ;* CI_10014817/S/E
                CALL REBUILD.SCREEN
            END

        CASE AF = SC.SBS.CUST.SEC.ACC
            IF COMI = "" THEN
                COMPANY.CUST = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                GOSUB PICK.SAM
                IF R.SEC.ACC.CUST ='' THEN
                    ETEXT ='INPUT MISSING'
                END
                IF ETEXT > "" THEN
                    E = ETEXT
                    T.SEQU = "IFLD" ; CALL ERR
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
                COMI = THIS.COMP.SAM.ID
                SEC.ACC.DESC = ''
                CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.ACCOUNT.NAME:FM:'..S'
                CALL DBR(CHECKFILE2,COMI,SEC.ACC.DESC)
                COMI.ENRI = SEC.ACC.DESC
            END ELSE
                CUST.NO = ''
                CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.CUSTOMER.NUMBER:FM:"..S",COMI,CUST.NO)
                IF ETEXT > "" THEN
                    E = ETEXT ; CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
                IF CUST.NO <> R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> THEN
                    E = "A/C NOT FOR THIS CUST"
                    CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
            LOCATE SC.SBS.CUST.ACC.NO:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> # COMI THEN
                    R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> = ''
                    R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ''
                END
            END
            IF R.NEW(AF) THEN
                PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                DEPOSITORY = R.NEW(SC.SBS.DEPOSITORY)
                TRANS.DEPO = ''
                TRANS.DELIV = ''
                CALL SC.DEPOT.DEFAULT(PORTFOLIO,SECURITY.NO,DEPOSITORY,TRANS.DEPO,TRANS.DELIV)
                CALL SC.SUB.ACC.DEFAULT (PORTFOLIO,SECURITY.NO,DEPOSITORY,SUB.ACCOUNT)
                IF TRANS.DEPO = '' THEN
                    IF SUB.ACCOUNT THEN
                        R.NEW(SC.SBS.SUB.ACCOUNT)<1,AV> = SUB.ACCOUNT
                    END
                END
            END
            GOSUB CHECK.DEFAULT.DEPOSITORY
            IF BOND.OR.SHARE EQ 'B' THEN
                SAM.CTAX.ID = COMI
                GOSUB CHECK.FOR.NET.TAX
                IF NOT(SAVE.CTAX.STATUS) THEN
                    SAVE.CTAX.STATUS = CTAX.STATUS
                END ELSE
                    IF CTAX.STATUS NE SAVE.CTAX.STATUS THEN
                        E = "GROUPING OF PORTFOLIO'S CAN BE EXEMPT OR NON.EXEMPT"
                        CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
            END

        CASE AF = SC.SBS.CU.DISC.PCENT
            IF COMI = '' THEN
                IF R.NEW(AF)<1,AV> OR R.NEW(AF)<1,AV> = 0 THEN
                    COMI = R.NEW(AF)<1,AV>
                END ELSE
                    CHG.CALC = ''
                    DATA.REC = ''
                    DATA.REC<1> = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                    DATA.REC<2> = R.NEW(SC.SBS.SECURITY.CODE)
                    IF R.STD.SEC.TRADE<SC.SST.COMM.PRIN.INT> = "PRINCIPAL" THEN
                        DATA.REC<3> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                    END ELSE
                        DATA.REC<3> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                    END
                    DATA.REC<4> = R.NEW(SC.SBS.TRADE.CCY)
                    DATA.REC<5> = R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>
                    DATA.REC<6> = 'TRADE'
                    TRANS.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                    CALL SC.CALC.TRADE.CHG(DATA.REC,CHG.CALC,'SEC.TRADE',TRANS.CODE)
                    COMI = CHG.CALC<8>
                END
            END
*
            DISC.AMT = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> * COMI / 100
            YAMT = DISC.AMT
            YCCY = R.NEW(SC.SBS.TRADE.CCY)
            CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
            DISC.AMT = YAMT
            R.NEW(AF)<1,AV> = COMI
            R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> = DISC.AMT
            RECALC.CUST.AM.DUE = '1'
            GOSUB CALC.CUST.NET         ;*==
*
        CASE AF = SC.SBS.CU.FEES.MISC OR AF = SC.SBS.BR.FEES.MISC
            COMI2 = "" ; ENRIX = ""
            IF COMI = '' THEN
                COMI = 0
            END
            COMI7 = COMI
            IF AF = SC.SBS.CU.FEES.MISC THEN
* EN_10000836 S/E
CONSOL.RATE.PARA:
                RECALC.CUST.AM.DUE = '1'
                GOSUB CALC.CUST.NET     ;*==
* CI_10006371 S
* Check added since CU.EX.RATE.ACC gets overwritten with
* CU.FEES.MISC when call is made to CONSOL.RATE.PARA
*
                IF AF = SC.SBS.CU.FEES.MISC THEN
                    COMI = COMI7
                END
* CI_10006371 E
                LOCATE SC.SBS.CU.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                T.ENRI<POS> = R.NEW(SC.SBS.TRADE.CCY)
                LOCATE SC.SBS.CU.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                RECALC.CUST.AM.DUE = 0
                IF CONSOL.RATE.INPUT THEN
                    RETURN    ;* EN_10000836 S/E
                END
            END ELSE
                RECALC.BRKR.AM.DUE = '1'
                GOSUB CALC.BRKR.NET     ;*==
                COMI = COMI7
                LOCATE SC.SBS.BR.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                T.ENRI<POS> = R.NEW(SC.SBS.TRADE.CCY)
                LOCATE SC.SBS.BR.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                RECALC.BRKR.AM.DUE = 0
            END
        CASE AF = SC.SBS.EXCH.RATE.TRD
            Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            IF CCY1 <> CCY2 THEN
                IF COMI = "" THEN
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        CALL ERR
                        T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                    COMI = Y4
                END ELSE
                    Y4 = COMI
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        TEXT = E
                        CALL REM
                        E = ''
                    END
                    COMI = Y4
                END
            END ELSE
                IF COMI <> 1 THEN
                    COMI = "1"
                END
            END
        CASE AF = SC.SBS.CU.EX.RATE.ACC
            CONSOL.RATE.INPUT = 1       ;* EN_10000836 S
            COMI7 = R.NEW(SC.SBS.CU.FEES.MISC)<1,AV>
            R.NEW(AF)<1,AV> = COMI
            GOSUB CONSOL.RATE.PARA
            IF R.NEW(AF)<1,AV> THEN
                COMI = R.NEW(AF)<1,AV>  ;* CI_10005017 S/E
            END
            CONSOL.RATE.INPUT = 0       ;* EN_10001019 E
            OLD.RATE = R.NEW(AF)<1,AV>
            RATE.INPUT.MKR = @FALSE
            IF GTSVAL AND R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = '' THEN          ;* CI_10014817/S/E
                IF NOT(DEAL.BOOK) THEN
                    ACCOUNT.CURRENCY = ""
                    CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                    CALL DBR(CHECKFILE2, R.NEW(SC.SBS.CUST.ACC.NO),ACCOUNT.CURRENCY)
                    R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                END
            END     ;* CI_10005017 E
            CCY1 = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
            CCY2 = R.NEW(SC.SBS.TRADE.CCY) ;
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = ""
            Y6 = "" ; RET.CODE = "" ;
            IF CCY1 = "" OR CCY2 = "" THEN
                ETEXT = 'TRADE OR ACCOUNT CCY MISSING'
            END ELSE
* GB9700195 (2)
                IF COMI THEN
                    RATE.INPUT.MKR = @TRUE
                END ELSE
                    COMI = ""
                    R.NEW(AF)<1,AV> = ""
                    IF CCY1 # CCY2 THEN
                        GOSUB CALC.CUST.NET
                        COMI = CUST.RATE
                    END ELSE
                        GOSUB CALC.CUST.AM.DUE
* GB9700290
                        COMI = R.NEW(AF)<1,AV>
                    END
                END
                R.NEW(AF)<1,AV> = COMI
            END
            IF ETEXT THEN
                E = ETEXT
                R.NEW(AF)<1,AV> = OLD.RATE
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END
            COMI = R.NEW(AF)<1,AV>
            BUFF.VAR = ''
            LOCATE SC.SBS.CU.ACCOUNT.CCY:'.':AV IN T.FIELDNO<1> SETTING PP ELSE
                PP = 0
            END
            IF PP THEN
                T.SEQU<-1> = "D":PP
            END
            LOCATE SC.SBS.CU.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING PP ELSE
                PP = 0
            END
            IF PP THEN
                T.SEQU<-1> = "D":PP
            END
            T.ENRI<PP> = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
            LOCATE SC.SBS.CU.REF.CCY:'.':AV IN T.FIELDNO<1> SETTING PP ELSE
                PP = 0
            END
            IF PP THEN
                T.SEQU<-1> = "D":PP
            END
*CI_10006641 - S
            CALL REBUILD.SCREEN
            INPUT.BUFFER = ""
*CI_10006641 - E
        CASE AF = SC.SBS.CU.TAX.CODE    ;* EN_10002391 S
            IF COMI NE '' THEN
                R.EU.TXN.TAX.CODE = ''
                SC.CU.TAX.ERR = ''
                CALL F.READ('F.TXN.TAX.CODE',COMI,R.CU.TXN.TAX.CODE,F.TXN.TAX.CODE,SC.CU.TAX.ERR)
                IF SC.CU.TAX.ERR THEN
                    E = SC.CU.TAX.ERR
                    CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
                TAXPOS = AS
                CU.TAX.CODE = COMI
                GOSUB CU.TAX.CODE.CALC
                IF CU.TAX.ERROR <> '' THEN
                    E = CU.TAX.ERROR
                    CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
            END ELSE
                R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV,AS> = ''
                R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,AS> = ''
                R.NEW(SC.SBS.CU.TAX.LCY)<1,AV,AS> = ''
                R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV,AS> = 0     ;* EN_10002717 S
                R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV,AS> = 0     ;* EN_10002717 E
                CALL REBUILD.SCREEN

            END
        CASE AF = SC.SBS.CU.TAX.TYPE
            IF R.NEW(SC.SBS.CU.TAX.CODE)<1,AV,AS> = '' AND COMI <> '' THEN
                BS.TAX =  COMI
                R.CU.TAX.TYPE = ''
                ERR = ''
                IF BS.TAX[1,1] = '*' THEN
                    CALL CACHE.READ('F.TAX.TYPE',BS.TAX[2,99],R.CU.TAX.TYPE,ERR)
                    IF ERR THEN
                        E = "INVALID TAX.TYPE"
                        CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END ELSE
                        BS.TAX =  COMI
                    END
                END
                TAXPOS = AS
                GOSUB CU.TAX.TYPE.CALC
            END     ;* EN_10002391 E
        CASE AF = SC.SBS.CU.INT.CTR     ;* BG_100008102 S
            IF R.NEW(SC.SBS.CU.TAX.CODE)<1,AV,AS> = '' AND COMI <> '' THEN
                GOSUB FETCH.CU.TAX
            END     ;* BG_100008102 E

        CASE AF = SC.SBS.CU.MANTAXTCY   ;* EN_10002717 S
            IF R.NEW(SC.SBS.CU.TAX.CODE) AND R.NEW(SC.SBS.CU.TAX.TYPE) THEN
                IF ID.OLD THEN          ;* CI_10037830 S
                    IF R.OLD(SC.SBS.CU.MANTAXTCY)<1,AV,AS> ELSE
                        E = 'NEW ENTRY NOT ALLOWED FOR AUTHORISED RECORD'
                        CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ;* CI_10037830 E
                IF COMI THEN
                    MAN.TAX.TCY = COMI ; MAN.TAX.LCY = '' ; TRADE.CCY = R.NEW(SC.SBS.TRADE.CCY)
                    IF TRADE.CCY <> LCCY THEN
                        CALL EXCHRATE("1",TRADE.CCY,MAN.TAX.TCY,LCCY,MAN.TAX.LCY,'','','','','')
                        R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV,AS> = MAN.TAX.LCY
                    END ELSE
                        R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV,AS> = MAN.TAX.TCY
                    END
                END ELSE
                    R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV,AS> = 0
                END
            END ELSE
                IF COMI THEN
                    E = 'INPUT NOT ALLOWED IF TAX.CODE IS EMPTY'
                    CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
                END
            END     ;* EN_10002717 E

        CASE AF = SC.SBS.CU.DELIV.INSTR OR AF = SC.SBS.BR.DELIV.INSTR
            IF COMI = '' THEN
                IF AF = SC.SBS.CU.DELIV.INSTR THEN
                    MEMO.ACC = ''
                    CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.MEMO.ACCOUNT,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,MEMO.ACC)
                    IF MEMO.ACC[1,1] = 'Y' THEN
                        COMI = FRE
                    END ELSE
                        COMI = DAP
                    END
                    IF COMI = DAP AND R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> THEN
                        R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = ''
                        T.ENRI<SC.SBS.CU.BEN.BANK.1,AV> = ''
                    END
                END ELSE
                    NOST.ACCT = ''
                    INPUT.BUFFER = ''   ;* CI_10000310 S/E
                    CHECKFILE2 = "ACCOUNT":FM:AC.LIMIT.REF
                    CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,NOST.ACCT)
                    IF NOST.ACCT = 'NOSTRO' THEN
                        COMI = DAP
                    END ELSE
                        COMI = FRE
                    END
                    IF NOT(GTSVAL) THEN ;* CI_10014817/S/E
                        R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = ''
                        T.ENRI<SC.SBS.BR.BEN.BANK.1,AV> = ''
                    END       ;* CI_10012868
                END
                DEL.DESC = ''
                CHECKFILE2 = "SC.DEL.INSTR":FM:SC.DLI.SHORT.DESCR:FM:'L..S'
                CALL DBR(CHECKFILE2,COMI,DEL.DESC)
                COMI.ENRI = DEL.DESC
            END ELSE
                IF AF = SC.SBS.CU.DELIV.INSTR THEN
                    SAM.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>         ;* BG_100008063 s
                    CALL F.READ('F.SEC.ACC.MASTER',SAM.NO,R.SEC.ACC.MASTER,F.SEC.ACC.MASTER,'')
                    DEAL.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
                    MEMO.ACC = R.SEC.ACC.MASTER<SC.SAM.MEMO.ACCOUNT>  ;* BG_100008063 e
                    IF NOT(DEAL.BOOK) THEN
                        IF (MEMO.ACC[1,1] = 'Y' AND COMI = FRE) OR (MEMO.ACC[1,1] = 'N' AND COMI = DAP) THEN
                            IF COMI = DAP AND R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> THEN
                                R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = ''
                                T.ENRI<SC.SBS.CU.BEN.BANK.1,AV> = ''
                            END
                        END ELSE
                            E = 'INVALID DELIVERY INSTRUCTIONS' ; CALL ERR
                            T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END
                END ELSE
                    INPUT.BUFFER = ''   ;* CI_10000310 S/E
                    CALL F.READ('F.SC.DEL.INSTR',COMI,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')   ;* BG_100008063 s
                    PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>
                    DELIVER.CODE = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>     ;* BG_100008063 e
                    IF PAY.CODE = DELIVER.CODE AND PAY.CODE = "Y" THEN
* CI_10018686 S/E
                        CALL REBUILD.SCREEN
* CI_10018686 S/E
                        NOST.ACCT = ''
                        CHECKFILE2 = "ACCOUNT":FM:AC.LIMIT.REF
                        CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,NOST.ACCT)
                        IF NOST.ACCT = 'NOSTRO' THEN
                            CUST.NUM = ''
                            CHECKFILE2 = "ACCOUNT":FM:AC.CUSTOMER
                            CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,CUST.NUM)
                            IF CUST.NUM # R.NEW(SC.SBS.DEPOSITORY) THEN
* CI_10001387 Starts
                                CALL DBR("ACCOUNT":FM:AC.JOINT.HOLDER,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,JOINT.HOLDER)
                                LOCATE R.NEW(SC.SBS.DEPOSITORY) IN JOINT.HOLDER<1,1> SETTING JOINT.CUS ELSE
                                    JOINT.CUS = ''
                                END
                                IF JOINT.CUS ELSE
* CI_10001387 Ends
                                    CUST.CLEARING.NAME = ''
                                    CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(SC.SBS.DEPOSITORY),CUST.CLEARING.NAME)
* CI_10002125/S
* CI_10002125/E
                                END
                            END         ;* CI_10001387 S/E
                        END ELSE
                            IF NUM(COMI[1,3]) THEN
                                E = 'INVALID INSTR, ACCOUNT NOT A NOSTRO' ; CALL ERR
                                T.SEQU = 'IFLD' ; GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END
                    END
                END
            END
** CEDEL
            IF AF = SC.SBS.BR.DELIV.INSTR AND CUST.CLEARING.NAME = 'CEDEL' THEN
                CALL F.READ('F.SC.DEL.INSTR',COMI,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')       ;* BG_100008063 s
                PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>
                RECD.DEL = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>   ;* BG_100008063 e
                IF PAY.CODE = 'Y' AND RECD.DEL = 'Y' THEN   ;*CI_10001782 - E
                    COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                    GOSUB CHECK.TRANS   ;*==
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = DR.CODE THEN
                        IF NOT(GTSVAL) OR NOT(R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>) THEN     ;* CI_10014817/S/E
                            R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = R.NEW(SC.SBS.BROKER.DEPO)<1,AV>
                        END   ;* CI_10012868
                        CUST.NAME = ''
                        CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>,CUST.NAME)
                        R.NEW(SC.SBS.BR.BEN.ACCT)<1,AV> = R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV>
                        LOCATE SC.SBS.BR.BEN.BANK.1:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                            POS = 0
                        END
                        IF POS THEN
                            T.ENRI<POS> = CUST.NAME
                        END
                        IF POS THEN
                            T.SEQU<-1> = "D":POS
                        END
                        LOCATE SC.SBS.BR.BEN.ACCT:'.':AV:".1" IN T.FIELDNO<1> SETTING POS ELSE
                            POS = 0
                        END
                        IF POS THEN
                            T.SEQU<-1> = "D":POS
                        END
                    END
                END
            END
*
* CI_10002506 - S
        CASE AF = SC.SBS.BR.BEN.ACCT
            IF COMI = '' THEN R.NEW(SC.SBS.BR.BEN.ACCT)<1,AV> = ''    ;* CI_10018686 S/E

* CI_10002506 - E
*
        CASE AF = SC.SBS.BR.EX.RATE.ACC
            OLD.RATE = R.NEW(AF)<1,AV>
            R.NEW(AF)<1,AV> = COMI
            IF R.NEW(SC.SBS.TRADE.CCY) = '' OR R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV> = '' THEN
                ETEXT = 'TRADE OR ACCOUNT CCY MISSING'
            END ELSE
                GOSUB CALC.BRKR.AM.DUE  ;*==
            END
            IF ETEXT THEN
                E = ETEXT
                R.NEW(AF)<1,AV> = OLD.RATE
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END
            COMI = R.NEW(AF)<1,AV>
            LOCATE SC.SBS.BR.ACCOUNT.CCY:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            LOCATE SC.SBS.BR.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            T.ENRI<POS> = R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV>

        CASE AF = SC.SBS.CU.BEN.ADDR OR AF = SC.SBS.BR.BEN.ADDR
* CI_10018686 S/E - Removed changes done for CI_10017599
            IF COUNT(R.NEW(AF)<1,AV>,SM) + 1 GT 4 THEN
                E = 'MAX 4 LINES ALLOWED'
                CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
            END
        CASE AF = SC.SBS.CU.NARRATIVE OR AF = SC.SBS.BR.NARRATIVE
            IF COUNT(R.NEW(AF)<1,AV>,SM) + 1 GT 4 THEN
                E = 'MAX 4 LINES ALLOWED'
                CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
            END
        CASE AF = SC.SBS.CUST.REMARKS
            IF COUNT(R.NEW(AF)<1,AV>,SM) + 1 GT 6 THEN
                E = 'MAX 6 LINES ALLOWED'
                CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
            END
        CASE AF = SC.SBS.CU.COMMISSION
            TRN.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
            SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
            DEAL.BOOK = ''
            CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
            IF DEAL.BOOK THEN
                COMI = 0
            END ELSE
                IF TRN.CODE THEN
                    LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
                        IF R.STD.SEC.TRADE<SC.SST.COMM.PRIN.INT> = "PRINCIPAL" THEN
                            CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                        END ELSE
                            CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                        END
                        IF COMI = '' THEN
                            COMI = 0
                            R.NEW(AF)<1,AV> = ''  ;* CI_10006386 S/E
                            GOSUB CHECK.WHT.TAX.CODE        ;* EN_10002037 S/E
                            GOSUB CHECK.CUST.TAX  ;* EN_10002037 S/E
                            GOSUB CHECK.CUST.COMM ;*==
                            COMI = CUSTOMER.COMM<1>
* CI_10006050 S
                            R.NEW(SC.SBS.COMM.CODE)<1,AV> =CUSTOMER.COMM<3>
                            R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = CUSTOMER.COMM<2>
                            R.NEW(SC.SBS.COMM.PERCENT)<1,AV> = CUSTOMER.COMM<7>
                            R.NEW(SC.SBS.COM.TAX.CODE)<1,AV> = CUSTOMER.COMM<5>
                            R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = CUSTOMER.COMM<6>
                            R.NEW(SC.SBS.COM.TAX.XRTE)<1,AV> = CUSTOMER.COMM<4>
                            CALL REBUILD.SCREEN
* CI_10006050 E
                            R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = CUSTOMER.COMM<6>
                            LOCATE SC.SBS.COM.TAX.BCUR IN T.FIELDNO<1> SETTING POS THEN
                                T.SEQU<-1> = 'D':POS
                            END
                        END ELSE
                            CU.GROSS.ACCR = COMI
                            CU.COMM.TYPE = R.NEW(SC.SBS.COM.TAX.CODE)<1,AV,1>
                            CU.COMM.TYPE<2> = "TAX"
                            CUST.COND = ''
                            CUST.COND<3> = CU.GROSS.ACCR
* CI_10018362/S
                            IF GTSVAL THEN
                                IF R.NEW.LAST(SC.SBS.CU.COMMISSION)<1,AV> THEN
                                    R.NEW(AF)<1,AV> = R.NEW.LAST(SC.SBS.CU.COMMISSION)<1,AV>
                                END ELSE
                                    IF R.OLD(SC.SBS.CU.COMMISSION)<1,AV> THEN
                                        R.NEW(AF)<1,AV> = R.OLD(SC.SBS.CU.COMMISSION)<1,AV>
                                    END
                                END
* While building SEC.TRADE, passing CU.COMMISSION does not calculate
* CU.COMM.TAX as the COMI and R.NEW are equal.
                                IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> AND NOT(R.NEW(SC.SBS.CU.COMM.TAX)<1,AV>) THEN      ;* CI_10018620/S
                                    R.NEW(SC.SBS.CU.COMMISSION)<1,AV> =''
                                END     ;* CI_10018620/E
                            END
* CI_10018362/E
                            IF COMI NE R.NEW(AF)<1,AV> THEN
                                GOSUB CALC.COMM.TAX.AMT     ;*==
                            END
                        END
                        LOCATE SC.SBS.CU.COMM.TAX:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                            POS = 0
                        END
                        IF COMI AND CUSTOMER.COMM = '' ELSE ;* CI_10018620 S/E
                            R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = CUSTOMER.COMM<2>
                        END   ;* CI_10018620 S/E
                        IF POS THEN
                            T.SEQU<-1> = "D":POS
                        END
                    END
                END
            END
        CASE AF = SC.SBS.BR.BROKER.COMM
            IF COMI = '' THEN
                BROKER.COMM = 0
                COMI = BROKER.COMM
            END
* CI_10011249 S
            IF R.NEW(SC.SBS.NET.TRADE)[1,1] EQ 'P' THEN
                PRORATA = @TRUE
                R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = COMI
                GOSUB PRORATA.COMM
                IF NOT(GTSVAL) THEN
                    CALL REBUILD.SCREEN ;* CI_10014817/S/E
                END
            END
* CI_10011249 E
        CASE AF = SC.SBS.BR.FOREIGN.FEE
            IF COMI = '' THEN
                COMI = 0
                R.NEW(AF)<1,AV> = 0
            END ELSE
                R.NEW(AF)<1,AV> = COMI
            END
            LOCATE SC.SBS.BR.BROKER.COMM:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                POS = 0
            END
            IF POS THEN T.SEQU<-1> = "D":POS
        CASE AF = SC.SBS.CU.FOREIGN.FEE
            IF COMI = '' THEN
                COMI = 0
                R.NEW(AF)<1,AV> = 0
            END ELSE
                R.NEW(AF)<1,AV> = COMI
            END
        CASE AF = SC.SBS.CU.BRKR.COMM OR AF = SC.SBS.CU.STAMP.TAX OR AF = SC.SBS.CU.EBV.FEES
* BG_100003967 S
            IF AF = SC.SBS.CU.STAMP.TAX AND INPUT.BUFFER NE '' THEN
                COMI = R.NEW(AF)<1,AV>
            END
* BG_100003967 E
            HOLD.COMI = COMI
            IF COMI = '' THEN
                COMI = 0
            END
            IF AF = SC.SBS.CU.EBV.FEES AND COMI THEN
                IF NOT(R.STD.SEC.TRADE<SC.SST.EBV.FEES.CAT>) OR NOT(R.STD.SEC.TRADE<SC.SST.EF.CR.TRANS.CODE>) OR NOT(R.STD.SEC.TRADE<SC.SST.EF.DB.TRANS.CODE>) THEN
                    E = 'DEFAULT EBV FEES CATEGORY NOT SET UP'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
            IF AF = SC.SBS.CU.STAMP.TAX AND COMI THEN
                IF NOT(R.STD.SEC.TRADE<SC.SST.STAMP.TAX.CAT>) OR NOT(R.STD.SEC.TRADE<SC.SST.STAMP.CR.TRANS.CDE>) OR NOT(R.STD.SEC.TRADE<SC.SST.STAMP.DB.TRANS.CDE>) THEN
                    E = 'DEFAULT STAMP TAX CATEGORY NOT SET UP'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
            IF AF = SC.SBS.CU.BRKR.COMM THEN
                IF R.NEW(SC.SBS.NET.TRADE)[1,1] EQ 'P' THEN
                    IF NOT(HOLD.COMI) THEN HOLD.COMI = ''   ;* CI_10011249
                    LOCATE R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> IN LINK.DATA<1> SETTING GIBBON THEN
                        IF HOLD.COMI = 0 AND INPUT.BUFFER = '' THEN
                            LINK.DATA<-1> = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                        END ELSE
                            DEL LINK.DATA<GIBBON>
                        END
                    END ELSE
                        IF HOLD.COMI = 0 AND INPUT.BUFFER = '' THEN
                            LINK.DATA<-1> = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                        END
                    END
                    R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> = HOLD.COMI
                    PRORATA = @TRUE
                    GOSUB PRORATA.COMM  ;*==
                    COMI = R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV>
                END
            END
        CASE AF = SC.SBS.BR.STAMP.TAX OR AF = SC.SBS.BR.EBV.FEES
            IF COMI = '' THEN
                COMI = 0
            END
            IF AF = SC.SBS.BR.STAMP.TAX AND COMI THEN
                IF NOT(R.STD.SEC.TRADE<SC.SST.STAMP.TAX.CAT>) OR NOT(R.STD.SEC.TRADE<SC.SST.STAMP.CR.TRANS.CDE>) OR NOT(R.STD.SEC.TRADE<SC.SST.STAMP.DB.TRANS.CDE>) THEN
                    E = 'DEFAULT STAMP TAX CATEGORY NOT SET UP'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
**KO
        CASE AF = SC.SBS.MATURITY.DATE
            IF COMI LT R.NEW(SC.SBS.VALUE.DATE) THEN
                E = 'SECURITY MATURED'
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END
            THIS.YEAR = R.NEW(SC.SBS.VALUE.DATE)[1,4]
            COMI2 = THIS.YEAR:COMI[5,4]
            IF COMI2 GT TODAY THEN
                COMI2 -= 10000
            END
            R.NEW(SC.SBS.LAST.PAYMNT.DATE) = COMI2
            IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) LT R.NEW(SC.SBS.ISSUE.DATE) THEN
                COMI2 = R.NEW(SC.SBS.ISSUE.DATE)
                R.NEW(SC.SBS.LAST.PAYMNT.DATE) = COMI2
            END
*
            INTEREST.DAYS = '' ; INTEREST.AMT = '' ; MONTH.DAYS = '' ; NYEAR.DAYS = ''
            YEAR.DAYS = R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>
            SEC.TOT.NOM = 0
            CUM.EX.DIV = 'EX.DIV'
            INTEREST.RATE = R.NEW(SC.SBS.INTEREST.RATE)
* GB9800993
            GROSS.INT.AMT = ''

* GB9801068
            SECURITY.PRICE = ""
            CAP.RATE = ""
            CAP.AMT = ""
            CALL SC.CALC.INT.AMT(SEC.TOT.NOM,COMI2,R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),INTEREST.RATE,YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)        ;* GB9800993
            R.NEW(SC.SBS.INTEREST.DAYS) = INTEREST.DAYS
            R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID          ;* EN_1000793 S/E
            LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING POS THEN
                T.SEQU<-1> = 'D':POS
            END
            LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS THEN
                T.SEQU<-1> = 'D':POS
            END
*
        CASE AF = SC.SBS.CONF.BY.BROKER
            IF COMI NE 'ONESIDED' AND COMI NE '' THEN
                E = "Only 'ONESIDED' allowed"
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END
*
        CASE AF = SC.SBS.CL.COMMISSION
            IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = 'CLIENT' THEN
                IF COMI = '' THEN
                    TRN.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                    COMI = 0
                    IF TRN.CODE THEN
                        LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
                            GOSUB CHECK.BROK.COMM ;*==
                            COMI = BROKER.COMM
                        END
                    END
                END
            END ELSE
                IF COMI THEN
                    E = 'INVALID INPUT FOR BROKER TYPE '
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
*
        CASE AF = SC.SBS.CONSOL.RATE
            IF COMI THEN
                CONSOL.RATE.INPUT = 1   ;* BG_100001905 S/E
                T(SC.SBS.CU.EX.RATE.ACC)<3> = ''  ;* EN_10000836 S/E
                Y4 = COMI
                COMI7 = R.NEW(SC.SBS.CU.FEES.MISC)<1,AV>    ;* BG_100010567
* CI_10002477 - START
* CONSOL.AMT should be populated before populating SETTLE.AMT
                GOSUB CALC.CUST.NET
                COMI = Y4
* CI_10002477 - END
                Y1 = R.NEW(SC.SBS.CONSOL.AMT)<1,AV>
                CCY1 = R.NEW(SC.SBS.TRADE.CURR)<1,AV>
                CCY2 = R.NEW(SC.SBS.SETTLE.CURR)<1,AV>
                Y2 = "" ; Y3 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                GOSUB CALC.EXCHRATE     ;*==
                IF R.NEW(SC.SBS.SETTLE.CURR)<1,AV> = 'CHF' THEN
                    CALL SC.CHF.ROUNDING(Y2)
                END
                R.NEW(SC.SBS.SETTLE.AMT)<1,AV> = Y2
                LOCATE.NO = SC.SBS.SETTLE.AMT:".":AV
                LOCATE LOCATE.NO IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                GOSUB UPDATE.CUST.ACC.AMT         ;*==
            END
        CASE AF = SC.SBS.CON.VAL.DATE
            IF COMI = '' THEN
                COMI = R.NEW(SC.SBS.VALUE.DATE)
            END
* GB9701059 +
        CASE AF = SC.SBS.CUM.EX.IND
*GLOBUS_EN_10001066/S
*Call SC.CHECK.MARKERS to check the marker input if price qual format is SWIFT.
            MARKER.FORMAT = R.SM.PARAMETER<SM.PARAM.PRICE.QUAL.FORMAT>          ;* BG_100002934 s
            IF COMI THEN
                IF MARKER.FORMAT = "SWIFT" THEN
                    ST.MARKERS = R.NEW(AF)
                    CALL SC.CHECK.MARKER(ST.MARKERS)
                END ELSE
                    ENRICH.NAME = ''
                    VALIDATION = 'DE.TRANSLATION':FM:DE.TRA.DESCRIPTION:FM:'L'
                    CALL DBR(VALIDATION,'SW':COMI,ENRICH.NAME)
                    IF NOT(ETEXT) THEN
                        COMI.ENRI = ENRICH.NAME
                    END
                END
            END     ;* BG_100002934 e
            IF ETEXT THEN
                E = ETEXT
                CALL ERR ; T.SEQU = 'IFLD'
                GOTO FIELD.DISPLAY.OR.INPUT
            END
*GLOBUS_EN_10001066/E
* GB9701059 -

* GB9701451
* The foll lines are commented as portfolio constraint can now
* be applied to more than one customer SEC TRADE.
* GB9901282 S
* GB0000350 S
        CASE AF = SC.SBS.PORT.CONST.NO
            IF COMI AND (COMI NE ID.COMPANY) THEN ;*CI_10037228 S/E
* CI_100037724 -  the loop was removed as
* the check was only related to COMI value.
                PORTFOLIO.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                PC.ID = FIELD(COMI,'.',1)
                IF PC.ID NE PORTFOLIO.NO THEN
                    E = 'INVALID CONSTRAINT NO'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
* EN10000360 - E
        CASE AF = SC.SBS.PAYMENT.REQD
            IF COMI = '' THEN
                COMI = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>        ;* BG_100008063
                LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
*
        CASE AF = SC.SBS.BROKER.ADVICE.REQD
            IF NOT(COMI) THEN
                COMI = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>        ;* BG_100008063
                LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
*
        CASE AF = SC.SBS.DEPOT.ADVICE.REQD
            IF NOT(COMI) THEN
                LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE
                    POS = 0
                END
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
                COMI = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>        ;* BG_100008063
            END
*
* GB0000350 E
        CASE AF = SC.SBS.CGT.BASE.AMT
            IF NOT(COMI = '' AND R.NEW(AF)<1,AV> = '') THEN
                LOCATE R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> IN CGT.SAM.LIST<1> SETTING CGT.SAM.POS ELSE
                    INS R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> BEFORE CGT.SAM.LIST<CGT.SAM.POS>
                    INS 'Y' BEFORE CGT.AMT.CHG.LIST<CGT.SAM.POS>
                END
            END
            IF COMI THEN
                R.NEW(SC.SBS.CGT.BAMT.CCY)<1,AV> = R.NEW(SC.SBS.SECURITY.CURRENCY)
            END
* EN_10000177 s
        CASE AF = SC.SBS.CGT.CODE
            BEGIN CASE
            CASE AS > 1
                E = "MUST USE SUB-VALUE 1 ONLY"
                CALL ERR
                T.SEQU = "IFLD"
            CASE AS = 1 AND DCOUNT(R.NEW(AF)<1,AV>,SM) > 1
                E = "MUST DELETE ADDITION SUB-VALUES FIRST"
                CALL ERR
                T.SEQU = "IFLD"
            CASE 1
                LINK.ERROR = ""
                IF COMI <> "" THEN
                    CUST.CONDITION = ""
                    CUST.CONDITION<6> = "T"
                    T.DATA = COMI
                    T.DATA<2> = "TAX"
                    CCY.MKT = 1
                    CHARGE.AMT = R.NEW(SC.SBS.CGT.BASE.AMT)<1,AV>
                    SEC.CCY = R.NEW(SC.SBS.SECURITY.CURRENCY)
                    CALL CALCULATE.CHARGE("",CHARGE.AMT,SEC.CCY,CCY.MKT,"","",SEC.CCY,T.DATA,CUST.CONDITION,"","")
* lower required as CALCULATE.CHARGE returns a multi-valued list
                    R.NEW(SC.SBS.CGT.CODE)<1,AV> = LOWER(FIELDS(T.DATA<1>,'.',1))
                    CALL REFRESH.FIELD(AF:'.':AV,'')        ;* CI_10018453 E
                    IF LINK.ERROR = "" THEN
                        IF NOT(COMI = '' AND R.NEW(AF)<1,AV> = '') THEN
                            LOCATE R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> IN CGT.SAM.LIST<1> SETTING CGT.SAM.POS ELSE
                                INS R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> BEFORE CGT.SAM.LIST<CGT.SAM.POS>
                                INS 'Y' BEFORE CGT.AMT.CHG.LIST<CGT.SAM.POS>
                            END
                        END
                    END
                    IF COMI THEN
                        R.NEW(SC.SBS.CGT.BAMT.CCY)<1,AV> = R.NEW(SC.SBS.SECURITY.CURRENCY)
                    END
* GB9901282 E
                END
            END CASE
* EN_10000177 e
* GB9901282 E

* BG_100000851 - Repetition in code - commenting the same
* GB0101625
* Defaulting the Suspense Categories from SC.PARAMETER if
* CASH.HOLD.SETTLE = 'YES'

        CASE AF = SC.SBS.CASH.HOLD.SETTLE
* GLOBUS_EN_10000419 s
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF COMI EQ '' THEN
                COMI = 'NO'
            END
* BG_100001183
            IF COMI = 'YES' THEN        ;* Uncommented EN_10000419 in BG_100001183
                IF R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = '' THEN          ;* BG_100008063 s
                    R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.CUST.ACT.SUSP.CAT>
                END
                IF R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = '' THEN
                    R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.BROK.ACT.SUSP.CAT>
                END
                IF R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = '' THEN
                    R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.MISC.ACT.SUSP.CAT>
                END ;* BG_100008063 e
                CALL REBUILD.SCREEN
            END ELSE
                R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = ''
                R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = ''
                R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = ''
                R.NEW(SC.SBS.AUTO.CUST.SETT) = ''
                R.NEW(SC.SBS.AUTO.BROK.SETT) = '' ;* BG_100000851 - S and E
                CALL REBUILD.SCREEN
            END
* GB0101625/E
* BG_100000851 - Start
        CASE AF = SC.SBS.SEC.HOLD.SETTLE
            IF NOT(COMI) THEN
                COMI = 'NO'
            END
* BG_100000851 - End
*
        CASE AF = SC.SBS.CUST.ACT.SUSP.CAT
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN ;* Uncommented EN_10000419 in BG_100001183
* BG_100001183
                IF COMI = '' THEN
                    COMI = R.SC.PARAMETER<SC.PARAM.CUST.ACT.SUSP.CAT>
                END

                IF COMI < 10000 OR COMI > 19999 THEN
                    E = 'Suspense category must be between 10,000 and 19,999'
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
* BG_100001218
* BG_100001218 - START
            END ELSE
                IF COMI THEN
                    E = "Input allowed only if CASH.HOLD.SETTLE is YES"
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
            END
* BG_100001218 - END
*
        CASE AF = SC.SBS.BROK.ACT.SUSP.CAT
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
* BG_100001183
                IF COMI = '' THEN
                    COMI = R.SC.PARAMETER<SC.PARAM.BROK.ACT.SUSP.CAT>
                END

                IF COMI < 10000 OR COMI > 19999 THEN
                    E = 'Suspense category must be between 10,000 and 19,999'
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
* BG_100001218 - START
            END ELSE
                IF COMI THEN
                    E = "Input allowed only if CASH.HOLD.SETTLE is YES"
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
            END
* BG_100001218 - END
*

        CASE AF = SC.SBS.MISC.ACT.SUSP.CAT
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
* BG_100001183
                IF COMI = '' THEN
                    COMI = R.SC.PARAMETER<SC.PARAM.MISC.ACT.SUSP.CAT>
                END

                IF COMI < 10000 OR COMI > 19999 THEN
                    E = 'Suspense category must be between 10,000 and 19,999'
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
* BG_100001218 - START
            END ELSE
                IF COMI THEN
                    E = "Input allowed only if CASH.HOLD.SETTLE is YES"
                    CALL ERR
                    T.SEQU = 'IFLD'
                END
            END
* BG_100001218 - END
*

        CASE AF = SC.SBS.AUTO.CUST.SETT
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' THEN         ;* BG_100001218
* EN_10000753 - START
                MY.PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                DEAL.CHK = ''
                CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,MY.PORTFOLIO,DEAL.CHK)
* EN_10000753 - END
                IF COMI = '' THEN
* EN_10000753 - START
                    IF DEAL.CHK THEN
                        COMI = 'YES'
                    END
                    IF NOT(DEAL.CHK) THEN
* EN_10000753 - END
                        CUS.AV = AV
                        CUSTOMER = R.NEW(SC.SBS.CUSTOMER.NO)<1,CUS.AV>
                        CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.AUTO.CUST.SETT,CUSTOMER,AUTO.SETT.Y.N)
                        COMI = AUTO.SETT.Y.N
                    END
                END ELSE
* EN_10000753 - START
                    IF COMI = 'NO' THEN
                        IF DEAL.CHK THEN
                            E = "Dealer Book - Only Auto Settlement allowed"
                            CALL ERR
                            T.SEQU = 'IFLD'
                        END
                    END
                END
* BG_100001218 - START
            END
* BG_100001218 - END
* EN_10000753 - END
*
*EN10000184-S

* CI_10001546 S
        CASE AF = SC.SBS.BR.NO.NOM
            NO.OF.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
            FOR AV = 1 TO NO.OF.BROKERS
                IF R.NEW(SC.SBS.BROKER.NO)<1,AV> <> '' THEN
                    NO.OF.BR.NO.NOM = ''
                    NO.OF.BR.NO.NOM = COUNT(R.NEW(SC.SBS.BR.NO.NOM)<1,AV>,VM) + 1
                    FOR AS = 1 TO NO.OF.BR.NO.NOM
                        IF R.NEW(AF)<1,AV,AS> = '' THEN
                            ETEXT = 'INPUT MISSING'
                            CALL STORE.END.ERROR
                        END
                    NEXT AS
                END
            NEXT AV
* CI_10001546 E
* GLOBUS_EN_10000419 s
        CASE AF = SC.SBS.AUTO.BROK.SETT
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
* BG_100001183
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' THEN         ;* BG_100001183 ; * BG_100001218 - added SEC.HOLD.SETTLE
                IF COMI = '' THEN
                    BR.AV = AV
                    BROKER = R.NEW(SC.SBS.BROKER.NO)<1,BR.AV>
                    CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.AUTO.BROK.SETT,BROKER,BR.AUTO.SETT)
                    COMI = BR.AUTO.SETT
                END
* BG_100001218 - START
            END
* BG_100001218 - END
*
* GLOBUS_EN_10000419 e
        CASE AF = SC.SBS.ODD.LOT.TRADE
            IF COMI = 'YES' THEN
                IF R.NEW(SC.SBS.CUST.TRANS.CODE) THEN
                    SC.TRA.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)       ;* BG_100010567
                    GOSUB GET.SC.TRANSACTION.DETAILS        ;* BG_100010567
                    IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = '' THEN
                        E = 'Order lot not allowed for this security'
                        CALL ERR ; T.SEQU = 'IFLD'
                    END ELSE
                        IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = 'BUY' THEN
                            IF R.NEW(SC.SBS.CUST.TRANS.CODE) = DR.CODE THEN
                                E = 'Only buy is allowed for this security'
                                CALL ERR ; T.SEQU = 'IFLD'
                            END
                        END ELSE
                            IF R.SEC.MASTER<SC.SCM.ODD.LOT.TRADE> = 'SELL' THEN
                                IF R.NEW(SC.SBS.CUST.TRANS.CODE) = CR.CODE THEN
                                    E = 'Only sell lot order allowed for this security'
                                    CALL ERR ; T.SEQU = 'IFLD'
                                END
                            END
                        END
                    END
                END
**
                IF R.NEW(SC.SBS.BROKER.NO) THEN
                    IF R.SEC.MASTER<SC.SCM.ODD.LOT.BROKER> THEN
                        LOCATE R.NEW(SC.SBS.BROKER.NO) IN R.SEC.MASTER<SC.SCM.ODD.LOT.BROKER,1> SETTING ODD.POS ELSE ODD.POS = ''
                        IF NOT(ODD.POS) THEN
                            E = 'Order not allowed for this broker'
                            CALL ERR ; T.SEQU = 'IFLD'
                        END
                    END
                END
**
                IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                    IF R.SEC.MASTER<SC.SCM.ODD.LOT.EXCH> NE '' THEN
                        LOCATE R.NEW(SC.SBS.STOCK.EXCHANGE) IN R.SEC.MASTER<SC.SCM.ODD.LOT.EXCH,1> SETTING ODD.POS ELSE ODD.POS = ''
                        IF NOT(ODD.POS) THEN
                            E = 'Order not allowed for this stock exchange'
                            CALL ERR ; T.SEQU = 'IFLD'
                        END
                    END
                END

                TRADING.UNITS = 0
                IF R.NEW(SC.SBS.SECURITY.CODE) THEN
                    TRADING.UNITS = R.SEC.MASTER<SC.SCM.TRADING.UNITS>
                    ODD.LOT.UNIT.CHECK = ''
                    IF COMI = 'YES' THEN
                        IF R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS> OR R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS> = 0 THEN  ;* CI_10003743 S/E
                            TRADING.UNITS = R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS>
                            ODD.LOT.UNIT.CHECK = '1'
                        END
                    END
                END
                IF R.SC.PARAMETER<SC.PARAM.OVER.TRADE.UNIT> = "YES" ELSE
                    IF TRADING.UNITS THEN
                        CT.NO = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                        FOR CN = 1 TO CT.NO
                            CT.NO.NOM = DCOUNT(R.NEW(SC.SBS.CUST.NO.NOM)<1,CN>,SM)
                            FOR CNN = 1 TO CT.NO.NOM
                                RATIO.OF.TU = R.NEW(SC.SBS.CUST.NO.NOM)<1,CN,CNN> / TRADING.UNITS
                                IF R.NEW(SC.SBS.CUST.NO.NOM)<1,CN,CNN> < TRADING.UNITS OR FIELD(RATIO.OF.TU,'.',2) THEN
                                    IF ODD.LOT.UNIT.CHECK THEN
                                        E = 'INVALID - NOMINAL < ODD LOT UNITS'
                                    END ELSE
                                        E = 'INVALID - NOMINAL < TRADING UNITS'
                                    END
                                    CALL ERR ; T.SEQU = 'IFLD'
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                            NEXT CNN
                        NEXT CN
                    END
                END
            END
* EN_10000316 S New Check Fields routine for CG.TRADE.TIME
        CASE AF = SC.SBS.CG.TRADE.TIME
            IF COMI = "" THEN
                COMI = R.NEW(SC.SBS.TRADE.TIME)[1,5]
            END ELSE
                R.NEW(AF) = COMI
            END
* EN_10000316 E
*EN10000184-E
*
* EN_10001823 S
        CASE AF = SC.SBS.TO.CONTRA.REF
            IF COMI OR R.NEW(AF) THEN
                T(SC.SBS.EXCH.RATE.SEC)<3> = ''
            END ELSE
                T(SC.SBS.EXCH.RATE.SEC)<3> = 'NOINPUT'
            END
            IF COMI THEN
                SEC.CODE = ''
                CALL DBR('SEC.TRADE':FM:SC.SBS.SECURITY.CODE,COMI,SEC.CODE)
                IF ETEXT THEN
                    E = 'INVALID SEC.TRADE ID'
                    CALL ERR ; T.SEQU = 'IFLD'
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END

* EN_10001823 E
* EN_10001841 S
        CASE AF = SC.SBS.BULK.PROCESSING
            IF COMI = '' THEN
                GOSUB BULK.PROCESSING.REQUIRED
                IF BULK.PROCESSING = @TRUE THEN
                    COMI = 'YES'
                END ELSE
                    COMI = 'NO'
                END
            END
* EN_10001841 -E
* CI_10006050 S
* BR.BEN.BANK.2 DEFAULTING
        CASE AF = SC.SBS.BR.BEN.BANK.2

            IF COMI = '' THEN
                R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = ''      ;* CI_10018686 S/E
            END

            IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = COMI AND COMI THEN
                E = 'INPUT MUST BE DIFFERENT FROM BR.BEN.BANK.1'
                CALL ERR ; T.SEQU = "IFLD"
            END
            IF COMI THEN
                CUST.NAME = ''
                CALL DBR('CUSTOMER':FM:EB.CUS.SHORT.NAME,COMI,CUST.NAME)
                COMI.ENRI = CUST.NAME
            END

* Only 10 multivalues allowed for BR.AGENT and BR.AGENT.AC
        CASE AF = SC.SBS.BR.AGENT
            Y = DCOUNT(R.NEW(AF)<1,AV>,SM)
            IF Y GT 10 THEN
                E = 'TOO MANY OCCURRENCES'
                T.SEQU = "IFLD" ; CALL ERR
            END

        CASE AF = SC.SBS.BR.AGENT.AC
            Y = DCOUNT(R.NEW(AF)<1,AV>,SM)
            IF Y GT 10 THEN
                E = 'TOO MANY OCCURRENCES'
                CALL ERR ; T.SEQU = "IFLD"
            END

* CI_10006050 E
        END CASE    ;*==end of CHECK.FIELDS

        IF GTSVAL THEN        ;* CI_10014817/S/E
            INPUT.BUFFER = "" ;*EN_10000622
            RETURN
        END         ;* CI-10001481 E
*----------------------------------------------------------
        IF T.SEQU <> "" THEN
            T.SEQU <-1> = A+1
        END
        GOTO FIELD.DISPLAY.OR.INPUT
*------------------------------------------------------
    CASE MESSAGE = "VER"
        GOSUB HANDLE.VERIFY.RECORD:     ;*==
*
    CASE MESSAGE = "VAL"
* EN_10001090 s
        CGT$STMT.ENTRY.ARRAY = ''
        CGT$PORTFOLIO.GROUPING.OVERRIDE = ""
        CGT$PORTFOLIO.GROUPING.ERROR = ""
* EN_10001090 e
        MESSAGE = ""
        CHANGED.ENTRIES = @TRUE
        JOURNAL.BYPASS = 1
*
* GB9700921s
* Tidy up SEC.TRADE.ENTRIES and SEC.TRADE.ENTRIES.SAVE
*
        R.SEC.TRADE.ENTRIES.SAVE = ''
        ER = ''     ;* CI_10009057/S/E
        CALL F.READ("F.SEC.TRADE.ENTRIES.SAVE", ID.NEW, R.SEC.TRADE.ENTRIES.SAVE, F.SEC.TRADE.ENTRIES.SAVE, ER)
        IF NOT(ER) THEN
            WRITE.SEC.TRD.ENT.SAVE = 1
        END ELSE
            WRITE.SEC.TRD.ENT.SAVE = 0  ;*CI_10009057/S/E
        END
*
* save a copy of live record
*
        R.SEC.TRADE.ENTRIES = ''
        ER = ''     ;* CI_10009057/S/E
        CALL F.READ("F.SEC.TRADE.ENTRIES", ID.NEW, R.SEC.TRADE.ENTRIES, F.SEC.TRADE.ENTRIES, ER)
        IF NOT(ER) THEN
            WRITE.SEC.TRD.ENT = 1
        END ELSE
            WRITE.SEC.TRD.ENT = 0       ;* CI_10009057/S/E
        END
        IF WRITE.SEC.TRD.ENT AND ID.OLD AND NOT(WRITE.SEC.TRD.ENT.SAVE) THEN    ;* CI_10009057/S/E
            CALL F.WRITE("F.SEC.TRADE.ENTRIES.SAVE", ID.NEW, R.SEC.TRADE.ENTRIES)
            R.SEC.TRADE.ENTRIES.SAVE = R.SEC.TRADE.ENTRIES
        END
*
        CALL F.WRITE("F.SEC.TRADE.ENTRIES", ID.NEW, R.SEC.TRADE.ENTRIES.SAVE)

        IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' AND SETTLE.METHOD = 'US' THEN
            CHECK.LIV.FWD.ENTRIES = 1
        END ELSE
            CHECK.LIV.FWD.ENTRIES = 0
        END
        MY.MULTI.FWD.STMT = '' ; MY.MULTI.LIV.STMT = '' ; R.SC.SETT.ENTRIES = ''

*
* GB9700921e
*
* EN_10001271 -  starts
! WRITE the SEC.TRANS.INFO details
        GOSUB WRITE.SEC.INFO
* EN_10001271 - ends
*
        IF V$FUNCTION = "D" OR V$FUNCTION = "R" THEN
            NO.OF.CUSTOMERS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
            NO.OF.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
*----------------------------------------------------------
REM "HANDLING REVERSAL: ;*==
*----------------------------------------------------------
            IF V$FUNCTION = 'D' THEN
                IF R.NEW(SC.SBS.RECORD.STATUS) = 'IHLD' THEN
                    TRANS.REF = ID.NEW
                    R.RECORD = '' ; YMODE = ''
                    CALL SC.POST.FILLED.ORDERS(TRANS.REF,R.RECORD,YMODE)

* BG_100002657 S
                    IF R.NEW(SC.SBS.CU.ORDER.NOS) THEN
                        FN.SECURITY.POSITION = 'F.SECURITY.POSITION'
                        FOR NO.CUST = 1 TO NO.OF.CUSTOMERS
                            SEC.POS.KEY = R.NEW(SC.SBS.CUST.SEC.ACC)<1,NO.CUST>:".":R.NEW(SC.SBS.SECURITY.CODE):"."
                            IF KO.PROCESSING THEN
                                INT.RATE = R.NEW(SC.SBS.INTEREST.RATE) ; CONVERT '.' TO '' IN INT.RATE
                                IF NOT(INT.RATE) THEN
                                    INT.RATE = ''
                                END
                                SEC.POS.KEY := R.NEW(SC.SBS.DEPOSITORY):".":R.NEW(SC.SBS.CUST.NOMINEE)<1,NO.CUST>:'.':R.NEW(SC.SBS.MATURITY.DATE):'.':INT.RATE
                            END ELSE
                                SEC.POS.KEY := R.NEW(SC.SBS.DEPOSITORY):".":R.NEW(SC.SBS.CUST.NOMINEE)<1,NO.CUST>:".."
                            END
                            SEC.POS.KEY := '.':R.NEW(SC.SBS.SUB.ACCOUNT)<1,NO.CUST>
                            NET.OPEN = ''
                            POS.ER = ''
                            RETRY = ''

                            SP.ID = SEC.POS.KEY
                            LOCK.RECORD = 1
                            PROCESS.MAIN.SP = 0
                            GOSUB READ.SEC.POSITION
                            R.SEC.POS = SP.RECORD
                            POS.ER = READ.ERROR

                            IF NOT(POS.ER) THEN
                                CALL UPDATE.NET.OPEN.IN.SEC.POS(NO.CUST,SEC.POS.KEY,NET.OPEN)
                                R.SEC.POS<SC.SCP.NET.OPEN.ORD.POS> = NET.OPEN

                                SP.ID = SEC.POS.KEY
                                SP.RECORD = R.SEC.POS
                                LOCK.AND.READ = 1
                                GOSUB WRITE.SEC.POSITION

                            END
                        NEXT NO.CUST
                    END
* BG_100002657 E
                END
                MY.MESS = 'DEL'
*
* GB9700921s
*
                CALL F.READ("F.SEC.TRADE.ENTRIES.SAVE", ID.NEW, R.SEC.TRADE.ENTRIES.SAVE, F.SEC.TRADE.ENTRIES.SAVE, ER)
                IF R.SEC.TRADE.ENTRIES.SAVE THEN
                    CALL F.WRITE("F.SEC.TRADE.ENTRIES", ID.NEW, R.SEC.TRADE.ENTRIES.SAVE)
                    CALL F.DELETE("F.SEC.TRADE.ENTRIES.SAVE",ID.NEW)
                END
                IF R.NEW(SC.SBS.RECORD.STATUS) = 'INAU' AND NOT(ID.OLD) AND NOT(END.ERROR) THEN     ;* CI_10007133 S/E
                    CALL F.DELETE("F.SC.CONSOL.ENTRIES", ID.NEW)      ;* CI_10005244 S/E
* GB9700921e
*
* CI_10013406 S
* Restoration of SC.CONSOL.ENTRIES during deletion of INAU record
                END ELSE
                    IF R.NEW(SC.SBS.RECORD.STATUS) = 'INAU' AND ID.OLD AND NOT(END.ERROR) THEN
                        CT = 1
                        LOOP
                            REF.KEY = ID.NEW:';':CT
                            CALL F.READ('F.SC.CONSOL.ENTRIES',REF.KEY,R.SC.CONSOL.ENTRIES,F.SC.CONSOL.ENTRIES,ETEXT)
                        UNTIL ETEXT DO
                            CT += 1
                            ETEXT = ''
                        REPEAT
                        IF CT GT 1 THEN
                            CT -= 1
                            REF.KEY = ID.NEW:';':CT
                            CALL F.READ('F.SC.CONSOL.ENTRIES',REF.KEY,R.SC.CONSOL.ENTRIES,F.SC.CONSOL.ENTRIES,ETEXT)
                            CALL F.DELETE('F.SC.CONSOL.ENTRIES',REF.KEY)
                            CALL F.DELETE('F.SC.CONSOL.ENTRIES',ID.NEW)
                            CALL F.WRITE('F.SC.CONSOL.ENTRIES',ID.NEW,R.SC.CONSOL.ENTRIES)
                        END
                    END
                END
* CI_10013406 E

            END ELSE
                MY.MESS = 'REV'
                TEXT = '' ; YCURR.NO = 0
                CALL STORE.OVERRIDE(YCURR.NO)
                IF NO.OF.BROKERS THEN
                    GOSUB CHECK.OUTST.DEL         ;*==
                    IF NOT(REV.POSSIBLE) THEN
                        JOURNAL.BYPASS = ''
                        GOTO ID.INPUT
                    END
                END
                VALUE.DATE = R.NEW(SC.SBS.VALUE.DATE)
                BROKER.COUNT = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                AF = SC.SBS.BR.DELIV.INSTR
                FOR AV = 1 TO BROKER.COUNT
                    SDI.ID = R.NEW(AF)<1,AV>      ;* BG_100008063 s
                    CALL F.READ('F.SC.DEL.INSTR',SDI.ID,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')
                    PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>
                    DELIVER.CODE = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>     ;* BG_100008063 e
                    IF PAY.CODE NE DELIVER.CODE THEN
                        CALL F.READ('F.ACCOUNT',R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,R.BR.ACCOUNT,F.ACCOUNT,ETEXT)
                        IF ETEXT THEN
                            ETEXT = 'BROKER ACCOUNT NOT ON FILE'      ;*GB9900350 S
                            AF = SC.SBS.BR.ACC.NO
                            CALL STORE.END.ERROR  ;*GB9900350 E
                        END ELSE
                            COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                            GOSUB CHECK.TRANS     ;*==
                            IF R.BR.ACCOUNT<AC.LIMIT.REF> = 'NOSTRO' AND R.BR.ACCOUNT<AC.CUSTOMER> NE R.NEW(SC.SBS.BROKER.NO)<1,AV> AND COMI4 = 'DEBIT' THEN
                                RET.CODE = ''
                                BROKER.NO = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                                BROKER.ACCT = R.NEW(SC.SBS.BR.ACC.NO)<1,AV>     ;* pass broker account GB9801051
                                CALL SC.REV.DELIV.CONTROL(BROKER.NO,BROKER.ACCT,VALUE.DATE,RET.CODE)
                                IF RET.CODE THEN
                                    TEXT = 'PAYMENT INST ALREADY SENT CONTINUE<Y/N> : '
                                    CALL STORE.OVERRIDE(YCURR.NO)
                                    IF TEXT = 'NO' THEN
                                        TEXT = ''
                                        GOTO ID.INPUT
                                    END
                                END
                            END
                        END
                    END
                NEXT AV
* CI_10002023 S
                AF = SC.SBS.CUST.ACC.NO
                ACCOUNT.CURRENCY = ""
                NO.OF.ACCS = DCOUNT(R.NEW(AF),VM)
                FOR AV = 1 TO NO.OF.ACCS
* CI_10003556 S
                    IF R.NEW(AF)<1,AV> AND R.NEW(AF)<1,AV>[4,3] # "CRF" THEN    ;* CI_10003556 E
                        CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                        CALL DBR(CHECKFILE2, R.NEW(AF)<1,AV>,ACCOUNT.CURRENCY)
                        IF ACCOUNT.CURRENCY NE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> THEN
* CI_10002303 S
                            E = 'CU ':R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>:' A/C ':R.NEW(AF)<1,AV>:' CLOSED'
* CI _10002303 E
                            CALL ERR
                            T.SEQU = "IFLD"
                            GOTO FIELD.DISPLAY.OR.INPUT
                            CALL STORE.END.ERROR
                        END
                    END
                NEXT AV

* CI_10002023 E
            END
* EN_10001090 s
            GOSUB GET.CGT.PROCESS.FLAG
            IF CGT.FLAG AND V$FUNCTION = "R" THEN
                GOSUB CGT.REVERSAL.PROCESSING
            END
* EN_10001090 e
            IF R.NEW(SC.SBS.STATEMENT.NOS) # '' THEN
                IF MY.MESS = 'REV' THEN
*
* GB9700921s
* Tidy up code. Duplicate code and call EB.ACCOUNTING with type = "VAL"
*
                    R.ACCT.PASSED = ''
                    STORE.CONSOL.ENTS = 0
                    CALL SEC.TRADE.AUTH.CHANGE(R.ACCT.PASSED, STORE.CONSOL.ENTS)
* EN_10001090 s
                    IF CGT$STMT.ENTRY.ARRAY NE "" THEN
                        R.ACCT.PASSED<-1> = CGT$STMT.ENTRY.ARRAY
                        CGT$STMT.ENTRY.ARRAY = ''
                    END
* EN_10001090 e
* CI_10002582 S
                    IF R.ACCT.PASSED THEN
                        CALL EB.ACCOUNTING('SC',"VAL",R.ACCT.PASSED,'')
                    END ELSE
                        CALL EB.ACCOUNTING('SC',MY.MESS,'','')
* CI_10002582 E
                    END       ;* CI-10001651 S/E
* GB9700921e
*

* EN_10002167/S/E                    END       ;* EN_100000088 S/E
                END ELSE      ;* Deletion
                    IF R.NEW(SC.SBS.CU.NET.AM.TRD) NE 0 THEN          ;* CI-10001651 S/E
                        CALL EB.ACCOUNTING('SC',MY.MESS,'','')
                    END       ;* CI-10001651 S/E
                END
                IF TEXT = 'NO' THEN
                    JOURNAL.BYPASS = ''
                    CALL TRANSACTION.ABORT
                    TEXT = ''
                    GOTO ID.INPUT
                END
* CI_10026006 S
            END ELSE
                IF V$FUNCTION = 'D' AND R.NEW(SC.SBS.CU.NET.AM.TRD) NE 0 THEN
                    CALL EB.ACCOUNTING('SC','DEL','','1')
                END
* CI_10026006 E
            END     ;* EN_10002167/S/E
** GB9500166 - Supress Currency Position
** RB
* GB0001990 starts
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) = 'YES' OR R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' THEN ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
* BG_100001183
                IF V$FUNCTION = 'R' THEN
                    CALL F.READ(FN.SC.SETTLEMENT,ID.NEW,R.SETTLEMENT,F.SC.SETTLEMENT,ETEXT)
* GB0100072 S
                    IF ETEXT EQ '' THEN
                        TEXT = 'SETTLEMENT HAS ALREADY TAKEN PLACE'
                    END ELSE
                        CALL F.READ(FN.SC.SETTLEMENT.NAU,ID.NEW,R.SETTLEMENT,F.SC.SETTLEMENT.NAU,ETEXT)
                        IF ETEXT EQ '' THEN
                            TEXT = 'SC.SETTLEMENT RECORD EXISTS IN NAU'
                        END
                    END
* GB0100072 E
                    IF TEXT THEN
                        CALL STORE.OVERRIDE(YCURR.NO)
                        IF TEXT = 'NO' THEN
                            JOURNAL.BYPASS = ""
                            CALL TRANSACTION.ABORT
                            GOTO ID.INPUT
                        END
                    END
                END
            END
* GB0001990 ends
        END ELSE
*----------------------------------------------------------
REM "HANDLING 'VAL'-CHECKS:
            IF R.NEW(SC.SBS.SECURITY.CODE) THEN   ;* GB9800274
                IF NOT(R.NEW(SC.SBS.SECURITY.CURRENCY)) THEN
                    R.NEW(SC.SBS.SECURITY.CURRENCY) = R.SEC.MASTER<SC.SCM.SECURITY.CURRENCY>
                END
                IF NOT(R.NEW(SC.SBS.PRICE.TYPE)) THEN
                    R.NEW(SC.SBS.PRICE.TYPE) = R.SEC.MASTER<SC.SCM.PRICE.TYPE>
                END
                IF NOT(R.NEW(SC.SBS.TRADE.CCY)) THEN
                    R.NEW(SC.SBS.TRADE.CCY) = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                END
                IF NOT(R.NEW(SC.SBS.ISSUE.DATE)) THEN
                    R.NEW(SC.SBS.ISSUE.DATE) = R.SEC.MASTER<SC.SCM.ISSUE.DATE>
                END
                IF NOT(R.NEW(SC.SBS.INTEREST.RATE)) THEN
                    R.NEW(SC.SBS.INTEREST.RATE) = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
                END
                IF NOT(KO.PROCESSING) THEN
                    IF NOT(R.NEW(SC.SBS.MATURITY.DATE)) THEN
                        R.NEW(SC.SBS.MATURITY.DATE) = R.SEC.MASTER<SC.SCM.MATURITY.DATE>
                    END
                    IF NOT(R.NEW(SC.SBS.LAST.PAYMNT.DATE)) THEN
                        R.NEW(SC.SBS.LAST.PAYMNT.DATE) = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                    END
                END
            END
            IF V$FUNCTION = 'I' OR V$FUNCTION = 'C' OR V$FUNCTION = 'H' THEN
                R.NEW(SC.SBS.OVERRIDE) = ''
                TEXT = '' ; YCURR.NO = 0
                CALL STORE.OVERRIDE(YCURR.NO)
                IF V$FUNCTION = 'H' THEN
                    R.NEW(SC.SBS.CONF.BY.BROKER) = ''
                END
            END

* move the price type read to here to prevent unassigned variables
            CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRICE.TYPE,'')      ;* BG_100008370 s
            DISC.INSTR = R.PRICE.TYPE<SC.PRT.DISC.INSTRUMENT>
            CALC.METHOD = R.PRICE.TYPE<SC.PRT.CALCULATION.METHOD>     ;* BG_100008370 e
            IF ID.OLD THEN
                CHANGED = @FALSE
                CHANGED.ENTRIES = @FALSE
* Moved the Below code to GET.CHANGED.ENTRIES para
                GOSUB GET.CHANGED.ENTRIES         ;* CI_10024936/S/E
                IF CHANGED ELSE
                    ETEXT = 'RECORD NOT CHANGED'
                    AF = SC.SBS.CUSTOMER.NO
                    AV = 1
                    CALL STORE.END.ERROR
                END
                IF NOT(CHANGED.ENTRIES) THEN
                    REC.STATUS = "UNAUTH"
                    GOSUB UPDATE.SECS.UNAUTH
                END
            END

* GB0100524 S
* Block a trade where the customer side or the
* broker side has a mix of transactions codes

* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
            IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN         ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183 ; * BG_100001272 ; * BG_100001218 - Removed SETT.METHOD check
* BG_100001183
                DIFF.TRANS.FLAG = 0
                CUST.COUNT = DCOUNT(R.NEW(SC.SBS.CUST.TRANS.CODE),VM)
                IF CUST.COUNT > 1 THEN

                    TRANS.COMPARE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,1>
                    FOR CC = 2 TO CUST.COUNT
                        IF TRANS.COMPARE NE R.NEW(SC.SBS.CUST.TRANS.CODE)<1,CC> THEN
                            DIFF.TRANS.FLAG = 1
                            EXIT
                        END
                    NEXT CC

                    IF DIFF.TRANS.FLAG THEN
                        AF = SC.SBS.CUST.TRANS.CODE
                        AV = CC
* BG_100001272 S
* BG_100001218 - START
* BG_100001272 E
* BG_100001218 - END
                        ETEXT = 'Txn code has to be same if actual settlement'
* BG_100001218
                        CALL STORE.END.ERROR
                    END
                END

                DIFF.TRANS.FLAG = 0
                BROK.COUNT = DCOUNT(R.NEW(SC.SBS.BR.TRANS.CODE),VM)
                IF BROK.COUNT > 1 THEN

                    TRANS.COMPARE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,1>
                    FOR BC = 2 TO BROK.COUNT
                        IF TRANS.COMPARE NE R.NEW(SC.SBS.BR.TRANS.CODE)<1,BC> THEN
                            DIFF.TRANS.FLAG = 1
                            EXIT
                        END
                    NEXT BC

                    IF DIFF.TRANS.FLAG THEN
                        AF = SC.SBS.CUST.TRANS.CODE
                        AV = CC
                        ETEXT = 'Txn code has to be same if actual settlement'
                        CALL STORE.END.ERROR
                    END
                END
            END

* GB0100524 E

            IF CHANGED.ENTRIES THEN
                MY.MULTI.STMT = ''
                IF ID.OLD AND CHANGED.ENTRIES THEN
* GB9700921s
* New parameter STORE.CONSOL.ENTS
*
                    STORE.CONSOL.ENTS = 1
                    CALL SEC.TRADE.AUTH.CHANGE(MY.MULTI.STMT, STORE.CONSOL.ENTS)
* GB9700921e
* EN_100001090 s
                    IF CGT$STMT.ENTRY.ARRAY NE "" THEN
                        MY.MULTI.STMT<-1> = CGT$STMT.ENTRY.ARRAY
                        CGT$STMT.ENTRY.ARRAY = ''
                    END
* EN_10001090 e
* GB9601417
* This routine forced the next gosub to set End.Error
                    ETEXT = ''
                END
* GB0000296  - begin - rigid blockage of security
                IF NOT(END.ERROR) THEN
                    CALL F.DELETE('F.SC.CONSOL.ENTRIES',ID.NEW)       ;* CI_10030578
                END
* CI_10011894 S

* Defaulting Sec.acc.number

                CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                AF = SC.SBS.CUST.SEC.ACC          ;* CI_10018118 S/E
                FOR AV = 1 TO CUSTS
                    IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = '' THEN
* CI_10015686 S
* CI_10018894 S
                        COMPANY.CUST = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                        GOSUB PICK.SAM
                        IF R.SEC.ACC.CUST = '' THEN ETEXT = 'INPUT MISSING'
* CI_10018894 E
* CI_10015686 E
                        IF ETEXT THEN
                            ETEXT = 'CANNOT DEFAULT TO PORTFOLIO'
                            CALL STORE.END.ERROR
                        END
* CI_10015686 S
                        R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = THIS.COMP.SAM.ID
* CI_10015686 E
                    END
                NEXT AV

* Defaulting Depository
                AF = SC.SBS.DEPOSITORY
                IF R.NEW(SC.SBS.DEPOSITORY) = '' THEN
                    SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                    SAM.NO = ''
                    SAM.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,1>
                    DEFAULT.DEPO = ''
                    DEFAULT.SUB.ACC = ''
                    IF NOT(SAM.NO) THEN
                        CALL SC.CU.DEFAULT.DEPO(SECURITY.NO,SAM.NO,DEFAULT.DEPO,DEFAULT.SUB.ACC)
                        IF NOT(DEFAULT.DEPO) THEN
                            CALL DBR ("SECURITY.MASTER":FM:SC.SCM.DEFAULT.DEPOSITORY, SECURITY.NO,DEFAULT.DEPO)
                        END
                    END ELSE
                        CALL SC.DEFAULT.DEPO(SECURITY.NO,SAM.NO,DEFAULT.DEPO,DEFAULT.SUB.ACC)
                    END
                    IF DEFAULT.DEPO = '' THEN
                        ETEXT = 'DEPOSITORY MISSING'
                    END ELSE
                        R.NEW(SC.SBS.DEPOSITORY) = DEFAULT.DEPO
                    END
                END ELSE
                    CHECKFILE2 = "CUSTOMER.SECURITY":FM:SC.CSC.CUSTOMER.TYPE:FM:'.A'
                    CUST.TYPE = ''
                    CALL DBR(CHECKFILE2,R.NEW(SC.SBS.DEPOSITORY),CUST.TYPE)
                    IF CUST.TYPE THEN
                        LOCATE 'DEPOSITORY' IN CUST.TYPE<1,1> SETTING POS ELSE
                            ETEXT = 'INVALID DEPOSITORY'
                        END
                    END ELSE
                        ETEXT = 'INVALID DEPOSITORY ':R.NEW(SC.SBS.DEPOSITORY)
                    END
                END

                COMI.SAVE = COMI
                COMI = R.NEW(AF)
                CALL SC.CHECK.NS.RESTRICTIONS
                COMI = COMI.SAVE
                IF E THEN
                    ETEXT = E
                END

                IF ETEXT THEN
                    CALL STORE.END.ERROR
                END
* CI_10011894 E

* BG_100000854 - S
* BG_100002230 S
                COUNT.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                FOR AV = 1 TO COUNT.BROKERS
* BG_100002230 E
                    BROK.VALUE = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                    CALL SC.DEFAULT.SETT.INSTR(BROK.VALUE, 'SEC.TRADE')         ;* BG_100005060 S-E
                NEXT AV       ;* BG_100002230 S/E
* BG_100000854 - E
                AF=SC.SBS.SECURITY.CODE
                COMI.SAVE = COMI
                COMI = R.NEW(AF)
                CALL SC.CHECK.NS.RESTRICTIONS
                IF E THEN
                    ETEXT = E
                    CALL STORE.END.ERROR
                END
                COMI = COMI.SAVE
                IF R.NEW(AF) THEN
                    SECURITY.MASTER.BLOCKING.DATE = ''
                    CALL DBR("SECURITY.MASTER":FM:SC.SCM.BLOCKING.DATE,R.NEW(AF),SECURITY.MASTER.BLOCKING.DATE)
                    IF SECURITY.MASTER.BLOCKING.DATE AND SECURITY.MASTER.BLOCKING.DATE LE TODAY THEN
                        ETEXT = "SECURITY IS BLOCKED"
                        CALL STORE.END.ERROR
                    END
                END
* GB0000296  - end - rigid blockage of security
                ETEXT = "INPUT MISSING"
                IF R.NEW(SC.SBS.CUSTOMER.NO) = '' AND R.NEW(SC.SBS.BROKER.NO) = '' THEN
                    AF = SC.SBS.CUSTOMER.NO ; AV = 1        ;* CI_10011225
                    CALL STORE.END.ERROR
                    AF = SC.SBS.BROKER.NO ; AV = 1          ;* CI_10011225 S/E
                    CALL STORE.END.ERROR
                END
                COUNT.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                FOR REC.NO = 1 TO COUNT.BROKERS
                    IF R.NEW(SC.SBS.BROKER.NO)<1,REC.NO> = '' THEN
                        OLD.AF = AF
                        OLD.AV = AV
                        AF = SC.SBS.BROKER.NO
                        AV = REC.NO
                        CALL STORE.END.ERROR
                        AV = OLD.AV
                        AF = OLD.AF
                    END
                    IF R.NEW(SC.SBS.BR.ACC.NO)<1,REC.NO> = '' THEN
*
* BG_100002230 S
                        MY.BROK = R.NEW(SC.SBS.BROKER.NO)<1,REC.NO>
                        TRD.CCY = R.NEW(SC.SBS.TRADE.CCY)
                        OUT.ACC.NO = ''
                        ST.DEF.ACC = ''
                        TOT.ACCOUNT = ''
                        CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.BR.SET.ACC,MY.BROK,ST.DEF.ACC)
                        TOT.ACCOUNT = DCOUNT(ST.DEF.ACC,VM)
                        ACC.CHK = 1
                        LOOP
                        WHILE ACC.CHK <= TOT.ACCOUNT
                            ACC.CCY = ''
                            CALL DBR('ACCOUNT':FM:AC.CURRENCY,ST.DEF.ACC<1,ACC.CHK>,ACC.CCY)
                            IF TRD.CCY EQ ACC.CCY THEN
                                OUT.ACC.NO = ST.DEF.ACC<1,ACC.CHK>
                                ACC.CHK = TOT.ACCOUNT
                            END
                            ACC.CHK +=1
                        REPEAT
                        IF NOT(OUT.ACC.NO) THEN
* BG_100002230 E
                            E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
                            CALL SC.CALC.NOSTRO(R.NEW(SC.SBS.BROKER.NO)<1,REC.NO>,'','',R.NEW(SC.SBS.TRADE.CCY),'B',OUT.ACC.NO,O.CUST)
                        END   ;* BG_100002230 S/E
*
                        IF E THEN
                            ETEXT = E
                            AF = SC.SBS.BR.ACC.NO
                            AV = REC.NO
                            CALL STORE.END.ERROR
                        END ELSE
                            R.NEW(SC.SBS.BR.ACC.NO)<1,REC.NO> = OUT.ACC.NO
                        END
                    END
                    IF NOT(END.ERROR) THEN
                        ACCOUNT.CURRENCY = ""
                        CALL DBR('ACCOUNT':FM:AC.CURRENCY:FM:'.A',R.NEW(SC.SBS.BR.ACC.NO)<1,REC.NO>,ACCOUNT.CURRENCY)

                        IF ACCOUNT.CURRENCY # R.NEW(SC.SBS.TRADE.CCY) THEN
                            IF R.NEW(SC.SBS.SECURITY.CURRENCY) = 'LUF' AND R.NEW(SC.SBS.TRADE.CCY) = 'LUF' AND ACCOUNT.CURRENCY = 'BEF' THEN
                                NULL
                            END ELSE
* BG_100003642 -S
                                TEXT = 'BROKER (&) A/C AND TRADE CURRENCIES NOT EQUAL'
                                TEXT<2,1> = R.NEW(SC.SBS.BROKER.NO)<1,AV>
* BG_100003642 -E
                            END
                        END
                        IF TEXT THEN
                            AF = SC.SBS.BR.ACC.NO ;
                            AV = REC.NO ;
                            CALL STORE.OVERRIDE(YCURR.NO)   ;* BG_100003373
                        END
* EN_10001612 -S
                        IF TEXT = "NO" THEN
                            TEXT = ''
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
* EN_10001612 -E
                        R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,REC.NO> = ACCOUNT.CURRENCY
                    END
                NEXT REC.NO
** GB9701014
                SAVE.MESSAGE = MESSAGE  ;* BG_100008063
                GOSUB REPEAT.CHECK.FIELDS         ;* CI-10001481 S/E
                MESSAGE = SAVE.MESSAGE  ;* BG_100008063

* EN_10000784 S  For part-paid bonds/shares prices can not be < [price] amount unpaid.
                Y.UNPAID.AMOUNT = ''
                Y.UNPAID.AMOUNT.EXRATE = ''
                IF R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT> THEN
                    CCY1 = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                    CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                    IF CCY1 NE CCY2 THEN
                        Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                        Y1 = R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT>
                        GOSUB CALC.EXCHRATE
                        Y.UNPAID.AMOUNT.EXRATE = Y4
                        GOSUB CALC.EXCHPRICE
                        Y.UNPAID.AMOUNT = Y2
                        CALL EB.ROUND.AMOUNT(CCY2,Y.UNPAID.AMOUNT,'2','')
                    END ELSE
                        Y.UNPAID.AMOUNT = R.SEC.MASTER<SC.SCM.UNPAID.AMOUNT>
                    END

                    AF = SC.SBS.TRADE.CCY
                    IF Y.UNPAID.AMOUNT.EXRATE THEN
                        TEXT = 'EX RATE (&) USED FOR UNPAID AMOUNT PRICE CHECKS'
                        TEXT<2,1> = Y.UNPAID.AMOUNT.EXRATE
                        CALL STORE.OVERRIDE(YCURR.NO)
                        IF TEXT = "NO" THEN
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END

                    AF = SC.SBS.CUST.PRICE
                    NO.AV = DCOUNT(R.NEW(AF),VM)
                    FOR AV = 1 TO NO.AV
                        NO.AS = DCOUNT(R.NEW(AF)<1,AV>,SM)
                        FOR AS = 1 TO NO.AS
                            IF R.NEW(AF)<1,AV,AS> AND R.NEW(AF)<1,AV,AS> < Y.UNPAID.AMOUNT THEN
                                ETEXT = "CAN NOT BE < UNPAID AMOUNT ON SECURITY MASTER"
                                CALL STORE.END.ERROR
                            END
                        NEXT AS
                    NEXT AV

                    AF = SC.SBS.BR.PRICE
                    NO.AV = DCOUNT(R.NEW(AF),VM)
                    FOR AV = 1 TO NO.AV
                        NO.AS = DCOUNT(R.NEW(AF)<1,AV>,SM)
                        FOR AS = 1 TO NO.AS
                            IF R.NEW(AF)<1,AV,AS> AND R.NEW(AF)<1,AV,AS> < Y.UNPAID.AMOUNT THEN
                                ETEXT = "CAN NOT BE < UNPAID AMOUNT ON SECURITY MASTER"
                                CALL STORE.END.ERROR
                            END
                        NEXT AS
                    NEXT AV
                END
* EN_10000784 E

* BG_10002991 S
                AF = SC.SBS.BR.AGENT
                NO.AV = DCOUNT(R.NEW(AF),VM)
                FOR AV = 1 TO NO.AV
                    NO.AS = DCOUNT(R.NEW(AF)<1,AV>,SM)
                    NULL.COUNT = 0
                    FOR AS = 1 TO NO.AS
                        IF NOT(R.NEW(AF)<1,AV,AS>) AND R.NEW(SC.SBS.BR.AGENT.AC)<1,AV,AS> THEN
                            ETEXT = 'INPUT MISSING'
                            CALL STORE.END.ERROR
                        END ELSE
                            IF NOT(R.NEW(AF)<1,AV,AS>) AND NOT(R.NEW(SC.SBS.BR.AGENT.AC)<1,AV,AS>) THEN
                                ETEXT = 'NULL LINES NOT ALLOWED'
                                CALL STORE.END.ERROR
                            END
                        END
                    NEXT AS
                NEXT AV
*BG_10002991 E
* CHECK THAT THE TRANSACTION CODES USED THROUGHOUT THE TRADE
* BELONG TO THE SAME SC.TRANS.TYPE RECORD.
*
                AF = SC.SBS.CUST.TRANS.CODE ; AV = 1
                SC.TRA.CODE.ID = R.NEW(AF)<1,AV>  ;* BG_100010567 s
                GOSUB GET.SC.TRANSACTION.DETAILS
                IF ER NE '' THEN
                    ETEXT = ER
                    CALL STORE.END.ERROR
                END ;* BG_100010567 e
                AF = SC.SBS.CUST.TRANS.CODE
                CUST.TRANS = DCOUNT(R.NEW(SC.SBS.CUST.TRANS.CODE),VM)
                FOR AV = 1 TO CUST.TRANS
                    IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> <> DR.CODE AND R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> <> CR.CODE THEN
                        ETEXT = "TRANS CODE MISMATCH"
                        CALL STORE.END.ERROR
                    END
                NEXT AV
*
                AF = SC.SBS.BR.TRANS.CODE
                BR.TRANS = DCOUNT(R.NEW(SC.SBS.BR.TRANS.CODE),VM)
                FOR AV = 1 TO BR.TRANS
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> <> DR.CODE AND R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> <> CR.CODE THEN
                        ETEXT = "TRANS CODE MISMATCH"
                        CALL STORE.END.ERROR
                    END
                NEXT AV
*
* VALIDATE THE TRANSACTION CODE USED AGAINST THE SC.STD.NEW.ISSUE
* RECORD TO DETERMINE WHETHER IT IS A NEW ISSUE TRADE OR NOT.
*
                NEW.ISSUE.TRADE = 0
                IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,1> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.CUST.TRANS.CODE)<1,1> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
                    NEW.ISSUE.TRADE = 1
                END ELSE
                    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
                        NEW.ISSUE.TRADE = 1
                    END
                END
*
                NO.OF.CUSTOMERS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                CPTY.TRANS = ''
*
                AF = SC.SBS.CU.DISC.PCENT
                DISC.COUNT = DCOUNT(R.NEW(AF),VM)
                FOR AV = 1 TO DISC.COUNT
                    IF R.NEW(AF)<1,AV> THEN
                        IF R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> > R.NEW(SC.SBS.CU.COMMISSION)<1,AV> THEN
                            ETEXT = 'DISCOUNT EXCEEDS CU.COMMISSION'
                            CALL STORE.END.ERROR
                        END
                    END
                NEXT AV

                AF = SC.SBS.CUST.NOMINEE
                NOMINEE.COUNT = COUNT(R.NEW(AF),VM) + 1
                FOR AV = 1 TO NOMINEE.COUNT
* GB9700479 - Use the input flags, and check Nominee codes, null or not
                    IF R.NEW(AF)<1,AV> THEN
                        IF DEPOT.INPUT THEN
                            IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> THEN
                                LOCATE R.NEW(SC.SBS.DEPOSITORY) IN R.VAULT.PARAMETER<SC.VPR.DEPOSITORY,1> SETTING POSN THEN
                                    IF NOT(NOMINEE.INPUT<AV>) THEN
                                        IF R.VAULT.PARAMETER<SC.VPR.NOMINEE,POSN> = 'YES' THEN
                                            R.NEW(AF)<1,AV> = R.VAULT.PARAMETER<SC.VPR.NOMINEE.CODE,POSN>
                                        END ELSE
                                            R.NEW(AF)<1,AV> = ''
                                        END
                                    END
                                END ELSE
                                    IF NOT(NOMINEE.INPUT<AV>) THEN
                                        R.NEW(AF)<1,AV> = ''
                                    END
                                END
                            END
                        END
                    END ELSE
                        IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> THEN
                            LOCATE R.NEW(SC.SBS.DEPOSITORY) IN R.VAULT.PARAMETER<SC.VPR.DEPOSITORY,1> SETTING POSN THEN
                                IF R.VAULT.PARAMETER<SC.VPR.NOMINEE,POSN> = 'YES' THEN
                                    R.NEW(AF)<1,AV> = R.VAULT.PARAMETER<SC.VPR.NOMINEE.CODE,POSN>
                                END
                            END
                        END
                    END
                NEXT AV
*
                AF = SC.SBS.CUST.SEC.ACC
                SAVE.CTAX.STATUS = ""
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = '' THEN
* CI_10015686 S
* CI_10018894 S
                        COMPANY.CUST = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                        GOSUB PICK.SAM

                        IF R.SEC.ACC.CUST = '' THEN
                            ETEXT = 'INPUT MISSING'
                        END
* CI_10018894 E
* CI_10015686 E
                        IF ETEXT THEN
                            ETEXT = 'CANNOT DEFAULT TO PORTFOLIO'
                            CALL STORE.END.ERROR
                        END


* CI_10015686 S
                        R.NEW(AF)<1,AV> = THIS.COMP.SAM.ID
* CI_10015686 E
                    END
                    OLD.AF = AF
                    GOSUB CHECK.FOR.MEMO.ACC
                    AF = OLD.AF
*GB0101564S
                    IF R.NEW(AF)<1,AV> THEN
                        SECURITY.NUMBER = ""
                        PORTFOLIO.NUMBER = ""
                        DEFAULT.DEPOSITORY = ""
                        PORTFOLIO.NUMBER = R.NEW(AF)<1,AV>
                        SECURITY.NUMBER = R.NEW(SC.SBS.SECURITY.CODE)
* GLOBUS_EN_10000438 - S
                        DEFAULT.SUB.ACCOUNT = ''
                        CALL SC.DEFAULT.DEPO (SECURITY.NUMBER, PORTFOLIO.NUMBER, DEFAULT.DEPOSITORY,DEFAULT.SUB.ACCOUNT)
* GLOBUS_EN_10000438 - E

                        IF DEFAULT.DEPOSITORY ELSE
                            CUSTOMER.NUMBER = ""
                            CUSTOMER.NUMBER = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                            CALL DBR ("CUSTOMER.SECURITY":FM:SC.CSC.DEFAULT.DEPOSITORY, CUSTOMER.NUMBER, DEFAULT.DEPOSITORY)
                        END
                    END

                    IF DEFAULT.DEPOSITORY <> "" THEN
                        IF R.NEW(SC.SBS.DEPOSITORY) <> "" THEN
                            IF R.NEW(SC.SBS.DEPOSITORY) <> DEFAULT.DEPOSITORY THEN
                                TEXT<1> = 'PORT.DEFAULT.DEPO.DIFF'    ;* GLOBUS_EN_10000345
* GB0101422 - S
                                CALL STORE.OVERRIDE(YCURR.NO)
* GB0101422 - E
                                IF TEXT = "NO" THEN
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                            END
                        END
                    END
                    IF BOND.OR.SHARE EQ 'B' THEN
                        SAM.CTAX.ID = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                        GOSUB CHECK.FOR.NET.TAX
                        IF NOT(SAVE.CTAX.STATUS) THEN
                            SAVE.CTAX.STATUS = CTAX.STATUS
                        END ELSE
                            IF CTAX.STATUS NE SAVE.CTAX.STATUS THEN
                                ETEXT = "GROUPING OF PORTFOLIO'S CAN BE EXEMPT OR NON.EXEMPT"
                                CALL STORE.END.ERROR
                            END
                        END
                    END
                NEXT AV
*
                AF = SC.SBS.CUST.ACC.NO ;* CI_10023441 S
                ACCOUNT.CURRENCY = ""
                NO.OF.ACCS = DCOUNT(R.NEW(AF),VM)
                FOR AV = 1 TO NO.OF.ACCS
                    IF R.NEW(AF)<1,AV>[4,3] # "CRF" THEN
                        CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                        CALL DBR(CHECKFILE2, R.NEW(AF)<1,AV>,ACCOUNT.CURRENCY)
                        IF ACCOUNT.CURRENCY NE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> THEN
* CI_10002303 S
                            ETEXT = 'ACCOUNT CLOSED'
* CI_10002303 E
                            CALL STORE.END.ERROR
                        END
                    END

                NEXT AV
* CI_10002023 S
                NO.OF.ACCS = DCOUNT(R.OLD(AF),VM)
                FOR AV = 1 TO NO.OF.ACCS
                    IF R.OLD(AF)<1,AV>[4,3] # "CRF" THEN
                        CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                        CALL DBR(CHECKFILE2, R.OLD(AF)<1,AV>,ACCOUNT.CURRENCY)
                        IF ACCOUNT.CURRENCY NE R.OLD(SC.SBS.CU.ACCOUNT.CCY)<1,AV> THEN
* CI_10002303 S
                            ETEXT = 'A/C ':R.OLD(SC.SBS.CUST.ACC.NO)<1,AV>:' CLOSED'
* CI_10002303 E
                            CALL STORE.END.ERROR
                        END
                    END
                NEXT AV
* CI_10002023 E
                ACCOUNT.CURRENCY = ""   ;* CI_10023441 E
                NO.OF.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                IF NOT(NEW.ISSUE.TRADE) THEN
                    AF = SC.SBS.CUST.SEC.ACC ; CALL DUP
                    AF = SC.SBS.BROKER.NO
                    IF NOT(END.ERROR) AND R.NEW(SC.SBS.BROKER.NO) THEN
                        FOR AV = 1 TO NO.OF.BROKERS
                            BROK.NO = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                            LOCATE BROK.NO IN R.NEW(SC.SBS.CUSTOMER.NO)<1,1> SETTING POS ELSE POS = 0
                            IF POS THEN
                                ETEXT = 'ALREADY ENTERED AS A CUSTOMER'
                                CALL STORE.END.ERROR
                            END
                            IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' AND R.NEW(SC.SBS.CL.COMMISSION)<1,AV> THEN
                                OLD.AF = AF
                                AF = SC.SBS.CL.COMMISSION
                                ETEXT = 'INVALID INPUT FOR BROKER TYPE '
                                CALL STORE.END.ERROR
                                AF = OLD.AF
                            END
                        NEXT AV
                    END
                END
*GB0100224S
                AF = SC.SBS.SUB.ACCOUNT
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                    SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                    DEPOSITORY = R.NEW(SC.SBS.DEPOSITORY)
                    CALL SC.SUB.ACC.DEFAULT (PORTFOLIO,SECURITY.NO,DEPOSITORY,SUB.ACCOUNT)
                    IF SUB.ACCOUNT THEN
* GB0101422 - S
                        IF R.NEW(SC.SBS.SUB.ACCOUNT)<1,AV> NE SUB.ACCOUNT THEN
* CI_10010949 S
                            TEXT<1>='SUB.ACCT.CUST'
                            TEXT<2,1>=SUB.ACCOUNT
                            TEXT<2,2>=R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
* CI_10010949 E
                            CALL STORE.OVERRIDE(YCURR.NO)
                            IF TEXT = 'NO' THEN
                                ETEXT = "SUB.ACCOUNT ADVISED IS ":SUB.ACCOUNT
                                CALL STORE.END.ERROR
                                TEXT = ''
                            END
                        END
                    END
                NEXT AV
*GB0100224E
                AF = SC.SBS.BROKER.TYPE
                BRKRS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                FOR AV = 1 TO BRKRS
                    CUST.TYPE = ''
                    CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.CUSTOMER.TYPE:FM:'.A',R.NEW(SC.SBS.BROKER.NO)<1,AV>,CUST.TYPE)
                    IF R.NEW(AF)<1,AV> EQ '' THEN
                        BEGIN CASE
                        CASE 'BROKER' MATCHES CUST.TYPE
                            R.NEW(AF)<1,AV> = 'BROKER'
                        CASE 'COUNTERPARTY' MATCHES CUST.TYPE
                            R.NEW(AF)<1,AV> = 'COUNTERPARTY'
                        CASE 'CLIENT' MATCHES CUST.TYPE
                            R.NEW(AF)<1,AV> = 'CLIENT'
                        CASE 1
                            ETEXT = 'INVALID BROKER TYPE'
                            CALL STORE.END.ERROR
                        END CASE
                    END ELSE
                        LOCATE R.NEW(AF)<1,AV> IN CUST.TYPE<1,1> SETTING POS ELSE
                            ETEXT = 'INVALID BROKER TYPE'
                            CALL STORE.END.ERROR
                        END
                    END
                NEXT AV
                AF = SC.SBS.CUST.SEC.ACC
                DEALER.BOOK.FLAG = ''
                NO.SEC.ACCS = DCOUNT(R.NEW(AF),VM)
                FOR AV = 1 TO NO.SEC.ACCS
                    K.SEC.ACC = R.NEW(AF)<1,AV>
                    IF K.SEC.ACC > "" THEN
                        ER = '' ; R.SEC.ACC.MSTR = ''
                        CALL F.READ('F.SEC.ACC.MASTER',K.SEC.ACC,R.SEC.ACC.MSTR,F.SEC.ACC.MSTR,ER)
                        IF ER THEN
                            ETEXT = 'RECORD & MISSING FROM FILE &':FM:K.SEC.ACC:VM:'F.SEC.ACC.MASTER'
                            CALL STORE.END.ERROR
                        END ELSE
                            IF R.SEC.ACC.MSTR<SC.SAM.CUSTOMER.NUMBER> <> R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> THEN
                                ETEXT = "A/C NOT FOR THIS CUST"
                                CALL STORE.END.ERROR
                            END ELSE
                                IF R.SEC.ACC.MSTR<SC.SAM.DEALER.BOOK> THEN
                                    DEALER.BOOK.FLAG<1,AV> = '1'
                                END
                            END
* GB9700068
* Special checking for compound discount accrual
*
                            IF R.SEC.ACC.MSTR<SC.SAM.DEALER.BOOK> AND R.SEC.ACC.MSTR<SC.SAM.ACCRUE.DISCOUNT> = 'Y' THEN
                                IF R.SEC.ACC.MSTR<SC.SAM.LINEAR.COMP.ACCR> = 'COMPOUND' THEN
                                    IF DISC.INSTR[1,1] = 'Y' THEN
                                        IF CALC.METHOD <> 'DPRICE' THEN
                                            ETEXT = 'ONLY "DPRICE" ALLOWED FOR COMPOUND DISC ACCR'
                                            CALL STORE.END.ERROR
                                        END
*
                                        IF R.SEC.ACC.MSTR<SC.SAM.DISCSOLD.TO.REALPL> = 'Y' THEN
                                            ETEXT = 'DISALLOW DISC SOLD TO REAL P&L FOR COMPOUND'
                                            CALL STORE.END.ERROR
                                        END
                                    END
*
                                END
                            END
*
* GB9801576
* Disallow trade on redenominated bonds
*
                            CALL DBR("SECURITY.MASTER":FM:SC.SCM.NEW.SECURITY.NO,R.NEW(SC.SBS.SECURITY.CODE),NEW.SECURITY.NO)
                            IF NEW.SECURITY.NO THEN
                                ETEXT = 'TRADE DISALLOWED FOR REDENOMINATED SECURITIES'
                                CALL STORE.END.ERROR
                            END
*
* Block back-value txns for bonds which have gone through redenomination
                            IF R.SEC.ACC.MSTR<SC.SAM.DEALER.BOOK> THEN
                                CALL DBR("SECURITY.MASTER":FM:SC.SCM.OLD.SECURITY.NO,R.NEW(SC.SBS.SECURITY.CODE),OLD.SECURITY.NO)
                                IF OLD.SECURITY.NO THEN
                                    STP.ID = K.SEC.ACC:'.':R.NEW(SC.SBS.SECURITY.CODE)
                                    CALL DBR("SC.TRANS.POS.HISTORY":FM:SC.TRH.CURR.PER.ST.DATE,STP.ID,STP.START.DATE)
                                    IF STP.START.DATE AND R.NEW(SC.SBS.VALUE.DATE) LT STP.START.DATE THEN
                                        ETEXT = 'CANNOT BACK-VALUE PRIOR TO REDENOMINATION DATE'
                                        CALL STORE.END.ERROR
                                    END
                                END
                            END
*
                        END
                        IF NOT(END.ERROR) THEN
                            CHECK.DATE = ''
                            IF R.SEC.ACC.MSTR<SC.SAM.CLOSURE.DATE> AND R.SEC.ACC.MSTR<SC.SAM.CLOSURE.DATE> LE TODAY THEN
                                COMI.HLD = COMI
                                COMI = R.SEC.ACC.MSTR<SC.SAM.CLOSURE.DATE>
                                CALL IN2D('11','D')
                                TEXT = 'PORT.CLOSED':@FM:K.SEC.ACC:@VM:V$DISPLAY          ;* GLOBUS_EN_10000345
                                CHECK.DATE = R.SEC.ACC.MSTR<SC.SAM.CLOSURE.DATE>
                                COMI = COMI.HLD
                            END ELSE
                                IF R.SEC.ACC.MSTR<SC.SAM.BLOCKING.DATE> AND R.SEC.ACC.MSTR<SC.SAM.BLOCKING.DATE> LE TODAY THEN
                                    COMI.HLD = COMI
                                    COMI = R.SEC.ACC.MSTR<SC.SAM.BLOCKING.DATE>
                                    CALL IN2D('11','D')
                                    TEXT = 'PORT.BLOCKED':@FM:K.SEC.ACC:@VM:V$DISPLAY     ;* GLOBUS_EN_10000345
                                    CHECK.DATE = R.SEC.ACC.MSTR<SC.SAM.BLOCKING.DATE>
                                    COMI = COMI.HLD
                                END
                            END
                            IF CHECK.DATE THEN
                                CALL STORE.OVERRIDE(YCURR.NO)
                                IF TEXT = 'NO' THEN
                                    TEXT = ''
                                    GOTO FIELD.DISPLAY.OR.INPUT       ;*CI_10024505 S-E
                                END ELSE
                                    CALL EXCEPTION.LOG('S','SC','SECURITIES','SECURITIES','150','','SEC.TRADE',ID.NEW,R.NEW(V-7),'BLOCKED PORTFOLIO',R.NEW(V-2))
                                END
                            END
                        END
                    END
                NEXT AV
                ACC.ROUTINE = 'SC.SEC.TRADE.ACC'
* BG_100000919 - S
                BROKER.COUNT = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                AV = '' ; AS = 1        ;* CI_10039990
                FOR AV = 1 TO BROKER.COUNT
                    BROK.VALUE = ''
                    BROK.VALUE = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                    CALL SC.DEFAULT.SETT.INSTR(BROK.VALUE, 'SEC.TRADE')         ;* BG_100005060 S-E
                    CALL REBUILD.SCREEN
                NEXT AV
* BG_100000919 - E
                IF R.NEW(SC.SBS.BROKER.NO) THEN
                    AF = SC.SBS.BROKER.DEPO
                    FOR AV = 1 TO NO.OF.BROKERS
                        IF DEALER.BOOK.FLAG AND AV > 1 AND NOT(NEW.ISSUE.TRADE) THEN
                            OLD.AF = AF ; AF = SC.SBS.BROKER.NO
                        END
*
                        NO.SUBV = COUNT(R.NEW(AF)<1,AV>,SM)+1
                        IF NO.SUBV >1 THEN
                            OLD.AS = AS
                            IF CUSTOMER.ENTRY THEN
                                FOR AS = 2 TO NO.SUBV
                                    ETEXT = 'INVALID INPUT'
                                    CALL STORE.END.ERROR
                                NEXT AS
                            END ELSE
                                FOR AS = 1 TO NO.SUBV
                                    IF AS < 5 THEN
                                        IF R.NEW(AF)<1,AV,AS> = '' THEN
                                            ETEXT = 'INPUT MISSING'
                                            CALL STORE.END.ERROR
                                        END
                                    END ELSE
                                        ETEXT = 'INVALID-ENTER 4 LINES ONLY'
                                        CALL STORE.END.ERROR
                                    END
                                NEXT AS
                            END
                            AS = OLD.AS
*
                        END ELSE
                            COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                            GOSUB CHECK.TRANS     ;*==
                            IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = CR.CODE AND R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' THEN
                                IF INDEX(PGM.VERSION,'CD',1) ELSE
                                    IF R.NEW(AF)<1,AV> = '' THEN      ;* CI_10028319 - S/E
                                        ETEXT = 'INPUT MANDATORY FOR PURCHASE'
                                        AS = NO.SUBV
                                        CALL STORE.END.ERROR
                                    END
                                END
                            END
*
                        END
** CEDEL
                        CUST.CLEARING.NAME = ''
                        CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(SC.SBS.DEPOSITORY),CUST.CLEARING.NAME)
                        IF ETEXT THEN
                            CUST.CLEARING.NAME = 'OTHER'
                        END
                        BROKER.CLEARING.NAME = ''
                        CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(SC.SBS.BROKER.DEPO)<1,AV>,BROKER.CLEARING.NAME)
                        IF ETEXT THEN
                            BROKER.CLEARING.NAME = 'OTHER'
                        END
*
                        PAY.CODE = ''
                        CALL DBR('SC.DEL.INSTR':FM:SC.DLI.WITH.PAYMENT.FLAG:FM:'.A',R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>,PAY.CODE)
* CI_10000362 Starts
* CI_10000362 Ends
                        IF CUST.CLEARING.NAME MATCHES 'CEDEL':VM:'EUROCLEAR':VM:'BNB' THEN
                            IF R.NEW(AF)<1,AV> = '' AND R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' THEN
                                IF CUST.CLEARING.NAME = 'CEDEL' THEN
                                    ETEXT = 'INPUT MANDATORY FOR CEDEL CLEARING'
                                END ELSE
                                    IF CUST.CLEARING.NAME = 'EUROCLEAR' THEN
                                        ETEXT = 'INPUT MANDATORY FOR EUROCLEAR CLEARING'
                                    END ELSE
                                        ETEXT = 'INPUT MANDATORY FOR BNB CLEARING'
                                    END
                                END
                                AS = 1
                                CALL STORE.END.ERROR
                            END
*
                            IF R.SEC.MASTER<SC.SCM.I.S.I.N.> = "" THEN
                                ETEXT = "ISIN NO. MISSING FROM SECURITY MASTER"
                                AS = 1
                                AF = SC.SBS.SECURITY.CODE
                                CALL STORE.END.ERROR
                            END
*
                            AF = SC.SBS.BR.SEC.DEPOT.AC
                            BEGIN CASE
                            CASE BROKER.CLEARING.NAME = 'CEDEL'
                                BR.NO = ''
                                CALL DBR('SC.CEDEL.ACC.CON':FM:1,R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV>,BR.NO)
                                IF BR.NO AND R.NEW(SC.SBS.BROKER.NO)<1,AV> # BR.NO THEN
                                    ETEXT = 'DEPOT ACC BELONGS TO CPTY ':BR.NO
                                    CALL STORE.END.ERROR
                                END
                            CASE BROKER.CLEARING.NAME = 'EUROCLEAR'
                                BR.NO = ''
                                CALL DBR('SC.EUROCLEAR.ACC.CON':FM:1,R.NEW(SC.SBS.BR.SEC.DEPOT.AC)<1,AV>,BR.NO)
                                IF BR.NO AND R.NEW(SC.SBS.BROKER.NO)<1,AV> # BR.NO THEN
                                    ETEXT = 'DEPOT ACC BELONGS TO CPTY ':BR.NO
                                    CALL STORE.END.ERROR
                                END
                            END CASE
                        END
*
                        IF CUST.CLEARING.NAME MATCHES 'CEDEL':VM:'EUROCLEAR' THEN
                            IF R.NEW(AF)<1,AV> = '' THEN
                                DIRECT.LINK = ''
                                CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.DIRECT.LINK,R.NEW(SC.SBS.BROKER.DEPO)<1,AV>,DIRECT.LINK)
                                IF DIRECT.LINK = 'Y' THEN
                                    IF CUST.CLEARING.NAME = 'CEDEL' THEN
                                        ETEXT = 'INPUT MANDATORY FOR CEDEL CLEARING'
                                    END ELSE
                                        ETEXT = 'INPUT MANDATORY FOR EUROCLEAR CLEARING'
                                    END
                                    CALL STORE.END.ERROR
                                END
                            END
                        END
                        AF = SC.SBS.BROKER.DEPO
                    NEXT AV
                END
*
                AF = SC.SBS.CU.DELIV.INSTR
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    SAM.ID = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>         ;* BG_100008063 s
                    CALL F.READ('F.SEC.ACC.MASTER',SAM.ID,R.SEC.ACC.MASTER,F.SEC.ACC.MASTER,'')
                    DEAL.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
                    MEMO.ACC = R.SEC.ACC.MASTER<SC.SAM.MEMO.ACCOUNT>
* CI_10010072/CI_10011283 S
                    SDI.ID = R.NEW(AF)<1,AV>
                    CALL F.READ('F.SC.DEL.INSTR',SDI.ID,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')
                    PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>
                    DELIVER.CODE = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>     ;* BG_100008063 e
                    IF PAY.CODE EQ 'Y' AND DELIVER.CODE EQ 'NO' THEN
                        R.NEW(AF)<1,AV> = ''
                    END
* CI_10010072/CI_10011283E
                    IF R.NEW(AF)<1,AV> = '' THEN
                        IF MEMO.ACC[1,1] = 'Y' THEN R.NEW(AF)<1,AV> = FRE ELSE R.NEW(AF)<1,AV> = DAP
                    END ELSE
                        IF NOT(DEAL.BOOK) THEN
                            IF (MEMO.ACC[1,1] = 'Y' AND R.NEW(AF)<1,AV> = FRE) OR (MEMO.ACC[1,1] = 'N' AND R.NEW(AF)<1,AV> = DAP) THEN
                                NULL
                            END ELSE
                                ETEXT = 'INVALID DELIVERY INSTRUCTIONS'
                                CALL STORE.END.ERROR
                            END
                        END
                    END
                    SDI.ID = R.NEW(AF)<1,AV>      ;* BG_100008063 s
                    CALL F.READ('F.SC.DEL.INSTR',SDI.ID,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')
                    PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>
                    DELIVER.CODE = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>     ;* BG_100008063 e
* CI_10023010 S
                    IF NOT(DEAL.BOOK) AND PAY.CODE NE DELIVER.CODE THEN         ;* CI_10023400
* CI_10023010 E
                        CALL F.READ('F.ACCOUNT',R.NEW(SC.SBS.CUST.ACC.NO)<1,AV>,R.CU.ACCOUNT,F.ACCOUNT,ETEXT)
                        IF ETEXT THEN
                            ETEXT = 'CUSTOMER ACCOUNT NOT ON FILE'    ;* GB9900350 S
                            AF = SC.SBS.CUST.ACC.NO
                            CALL STORE.END.ERROR  ;* GB9900350 E
                        END ELSE
                            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                            GOSUB CHECK.TRANS     ;*==
* GB0000350 S * Additional check added for PAYMENT.REQD
                            IF R.CU.ACCOUNT<AC.LIMIT.REF> = 'NOSTRO' AND R.CU.ACCOUNT<AC.CUSTOMER> NE R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> AND COMI4 = 'DEBIT' AND R.NEW(SC.SBS.PAYMENT.REQD) = 'YES' THEN
* GB0000350 E * Additional check added for PAYMENT.REQD
                                TEXT = "PAYMENT CABLE WILL BE GENERATED"
                                CALL STORE.OVERRIDE(YCURR.NO)
                                IF TEXT = 'NO' THEN
                                    ETEXT = 'PAYMENT CABLE NOT OVERRIDDEN '
                                    CALL STORE.END.ERROR
                                    TEXT = ''
                                END
                            END
                        END
                    END
                    INPUT.BUFFER = ''   ;* CI_10005082 S-E
                NEXT AV
                AF = SC.SBS.BR.DELIV.INSTR
*
* GLOBUS_EN_10000457 - S
                IF COMI = '' THEN
                    COMI = R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>
                END
* GLOBUS_EN_10000457 - E
*
                FOR AV = 1 TO NO.OF.BROKERS
                    IF R.NEW(AF)<1,AV> = '' THEN
                        NOST.ACCT = ''
                        CHECKFILE2 = "ACCOUNT":FM:AC.LIMIT.REF
                        CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,NOST.ACCT)
                        IF NOST.ACCT = 'NOSTRO' THEN
                            R.NEW(AF)<1,AV> = DAP
                        END ELSE
                            R.NEW(AF)<1,AV> = FRE
                        END
                    END
                    PAY.CODE = ''
                    CALL DBR('SC.DEL.INSTR':FM:SC.DLI.WITH.PAYMENT.FLAG:FM:'.A',R.NEW(AF)<1,AV>,PAY.CODE)
                    DELIVER.CODE = ''
                    CALL DBR('SC.DEL.INSTR':FM:SC.DLI.TO.BE.RECD.OR.DEL:FM:'.A',R.NEW(AF)<1,AV>,DELIVER.CODE)
                    IF PAY.CODE = DELIVER.CODE AND PAY.CODE = "Y" THEN
                        NOST.ACCT = ''
                        CHECKFILE2 = "ACCOUNT":FM:AC.LIMIT.REF
                        CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,NOST.ACCT)
                        IF NOST.ACCT = 'NOSTRO' THEN
                            CUST.NUM = ''
                            CHECKFILE2 = "ACCOUNT":FM:AC.CUSTOMER
                            CALL DBR(CHECKFILE2,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,CUST.NUM)
                            IF CUST.NUM # R.NEW(SC.SBS.DEPOSITORY) THEN
* CI_10001387 Starts
                                CALL DBR("ACCOUNT":FM:AC.JOINT.HOLDER,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,JOINT.HOLDER)
                                LOCATE R.NEW(SC.SBS.DEPOSITORY) IN JOINT.HOLDER<1,1> SETTING JOINT.CUS ELSE
                                    JOINT.CUS = ''
                                END
                                IF JOINT.CUS ELSE
* CI_10001387 Ends
                                    CUST.CLEARING.NAME = ''
                                    CALL DBR('SC.CLEARING.SYSTEM':FM:SC.CLS.SYSTEM.NAME,R.NEW(SC.SBS.DEPOSITORY),CUST.CLEARING.NAME)
* CI_10002125/S
* CI_10002125/E
                                END
                            END         ;* CI_10001387 S-E
                        END ELSE
                            IF NUM(R.NEW(SC.SBS.BR.ACC.NO)<1,AV>[1,3]) THEN
                                ETEXT = 'INVALID INSTR, ACCOUNT NOT A NOSTRO'
                                CALL STORE.END.ERROR
                            END
                        END
                    END ELSE
                        IF PAY.CODE NE DELIVER.CODE THEN
                            CALL F.READ('F.ACCOUNT',R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,R.BR.ACCOUNT,F.ACCOUNT,ETEXT)
                            IF ETEXT THEN
                                ETEXT = 'BROKER ACCOUNT NOT ON FILE'  ;* GB9900350 S
                                AF = SC.SBS.BR.ACC.NO
                                CALL STORE.END.ERROR        ;* GB9900350 E
                            END ELSE
                                COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                                GOSUB CHECK.TRANS ;*==
* GB0000350 S * Additional check added for PAYMENT.REQD
                                IF R.BR.ACCOUNT<AC.LIMIT.REF> = 'NOSTRO' AND R.BR.ACCOUNT<AC.CUSTOMER> NE R.NEW(SC.SBS.BROKER.NO)<1,AV> AND COMI4 = 'DEBIT' AND R.NEW(SC.SBS.PAYMENT.REQD) = 'YES' THEN
* GB0000350 E * Additional check added for PAYMENT.REQD
                                    TEXT = "PAYMENT CABLE WILL BE GENERATED"
                                    CALL STORE.OVERRIDE(YCURR.NO)
                                    IF TEXT = 'NO' THEN
                                        ETEXT = 'PAYMENT CABLE NOT OVERRIDDEN '
                                        CALL STORE.END.ERROR
                                        TEXT = ''
                                    END
                                END
                            END
                        END
                    END
                NEXT AV
                AF = SC.SBS.CUST.TRANS.CODE
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    IF R.NEW(AF)<1,AV> = '' THEN
                        ETEXT = 'INPUT MISSING'
                        CALL STORE.END.ERROR
                    END
                NEXT AV
                AF = SC.SBS.BR.TRANS.CODE
                FOR AV = 1 TO NO.OF.BROKERS
                    IF R.NEW(AF)<1,AV> = '' THEN
                        ETEXT = 'INPUT MISSING'
                        CALL STORE.END.ERROR
                    END
                NEXT AV
                IF NOT(END.ERROR) THEN
                    GOSUB CHECK.TOTS.BY.PRICE     ;*==
                END
*
* GB0002591 S
                IF NOT(END.ERROR) THEN  ;* CI_10032473 S/E
                    AF = SC.SBS.CUST.SEC.ACC
                    NO.OF.CUSTS = DCOUNT(R.NEW(AF),VM)
                    FOR AV = 1 TO NO.OF.CUSTS
                        PORTFOLIO.NUMBER = R.NEW(AF)<1,AV>
                        SECURITY.NUMBER = R.NEW(SC.SBS.SECURITY.CODE)
                        IF R.NEW(SC.SBS.VALUE.DATE) THEN
                            TRANSACTION.DATE = R.NEW(SC.SBS.VALUE.DATE)
                        END ELSE
                            IF R.NEW(SC.SBS.TRADE.DATE) THEN
                                TRANSACTION.DATE = R.NEW(SC.SBS.TRADE.DATE)
                            END ELSE
                                TRANSACTION.DATE = R.DATES(EB.DAT.TODAY)
                            END
                        END
                        TRANSACTION.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>

                        ACCOUNT.NO = R.NEW(SC.SBS.CUST.ACC.NO)<1, AV> ;* GLOBUS_EN_10000534 S
                        ERR = ''

* GLOBUS_BG_100001594s
                        SILENT.MODE = 1
                        R.TRANSACTION = ''
                        APPL.NAME = APPLICATION
                        AM.OPTIONS = ''

                        TXN.OPTIONS = ''
                        TXN.OPTIONS<1> = ID.NEW
                        TXN.OPTIONS<2> = TRANSACTION.DATE
                        TXN.OPTIONS<3> = TRANSACTION.CODE
                        TXN.OPTIONS<4> = YCURR.NO
                        TXN.OPTIONS<5> = ''

                        MATBUILD R.TRANSACTION FROM R.NEW

                        CALL SC.CHECK.SECURITY.CONSTRAINT(SECURITY.NUMBER, PORTFOLIO.NUMBER, ACCOUNT.NO, TXN.OPTIONS, ERR, SILENT.MODE, R.TRANSACTION, APPL.NAME, AM.OPTIONS)       ;* EN_1000534 S

                        IF ERR THEN
                            MAX.ERR = DCOUNT(ERR<SC.ERROR.MESSAGE>, VM)

                            FOR ERR.NO = 1 TO MAX.ERR
                                BEGIN CASE
                                CASE ERR<SC.ERROR.TYPE,ERR.NO> = 'OVERRIDE'
                                    OVERRIDE.ID = ERR<SC.ERROR.MESSAGE,ERR.NO>
                                    CALL DBR('OVERRIDE':FM:EB.OR.MESSAGE, OVERRIDE.ID, OVERRIDE.DATA)
                                    IF ETEXT THEN OVERRIDE.ID = PORTFOLIO.NUMBER:' - ':OVERRIDE.ID

                                    TEXT<1> = OVERRIDE.ID
                                    TEXT<2> = PORTFOLIO.NUMBER

                                    CALL STORE.OVERRIDE(YCURR.NO)
                                    IF TEXT = 'NO' THEN
                                        TEXT = ''
                                        ETEXT = OVERRIDE.ID
                                        CALL STORE.END.ERROR
                                        EXIT
                                    END

                                CASE ERR<SC.ERROR.TYPE,ERR.NO> = 'ERROR'
                                    ETEXT = ERR<SC.ERROR.MESSAGE,ERR.NO>
                                    CALL STORE.END.ERROR
                                    EXIT

                                END CASE
                            NEXT ERR.NO
                        END
* GLOBUS_BG_100001594e

                    NEXT AV
                END
*GB0002591 E
                IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) = "YES" THEN
* Do this defaulting here as OFS input does not go through the check fields code.
                    IF R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = '' THEN      ;* BG_100008063 s
                        R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.CUST.ACT.SUSP.CAT>
                    END
                    IF R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = '' THEN
                        R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.BROK.ACT.SUSP.CAT>
                    END
                    IF R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = '' THEN
                        R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.MISC.ACT.SUSP.CAT>
                    END       ;* BG_100008063 e

                    AF = SC.SBS.CUST.ACT.SUSP.CAT
                    IF NOT(R.NEW(AF)) THEN
                        ETEXT = "For Actual cash, must have suspense category"
                        CALL STORE.END.ERROR
                    END

                    AF = SC.SBS.BROK.ACT.SUSP.CAT
                    IF NOT(R.NEW(AF)) THEN
                        ETEXT = "For Actual cash, must have suspense category"
                        CALL STORE.END.ERROR
                    END

                    AF = SC.SBS.MISC.ACT.SUSP.CAT
                    IF NOT(R.NEW(AF)) THEN
                        ETEXT = "For Actual cash, must have suspense category"
                        CALL STORE.END.ERROR
                    END
* GB0101552/S
                    AF = SC.SBS.AUTO.CUST.SETT
                    ALL.CUSTS = R.NEW(SC.SBS.CUSTOMER.NO)
                    ALL.AUTO.SETTS = R.NEW(SC.SBS.AUTO.CUST.SETT)
                    SET.CNT = DCOUNT(ALL.CUSTS,VM)
                    FOR SETT = 1 TO SET.CNT
                        CURR.SET = FIELD(ALL.AUTO.SETTS,VM,SETT)
                        AF = SC.SBS.AUTO.CUST.SETT
                        AV = SETT
* EN_10000753 - START
                        MY.PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                        DEAL.CHK = ''
                        CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,MY.PORTFOLIO,DEAL.CHK)
                        IF R.NEW(AF)<1,AV> = '' THEN
                            IF DEAL.CHK THEN
                                R.NEW(AF)<1,AV> = 'YES'
                            END
                            IF NOT(DEAL.CHK) THEN
* EN_10000753 - END
                                CURR.CUST = FIELD(ALL.CUSTS,VM,SETT)
                                CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.AUTO.CUST.SETT,CURR.CUST,AUTO.Y.N)
                                IF AUTO.Y.N = '' THEN
                                    AUTO.Y.N = 'NO'
                                END
                                R.NEW(AF)<1,AV> = AUTO.Y.N
                            END
                        END ELSE        ;* BG_100009201 s
                            IF DEAL.CHK AND R.NEW(AF)<1,AV> NE 'YES' THEN
                                ETEXT = 'Dealer Book - Only Auto Settlement allowed'
                                CALL STORE.END.ERROR
                            END         ;* BG_100009201 e
                        END   ;* EN_10000753
                    NEXT SETT
* GB0101552/E
* GLOBU_EN_10000419 s
                    AF = SC.SBS.AUTO.BROK.SETT
                    ALL.BROKS = R.NEW(SC.SBS.BROKER.NO)
                    ALL.AUTO.SETTS = R.NEW(SC.SBS.AUTO.BROK.SETT)
                    SET.CNT = DCOUNT(ALL.BROKS,VM)
                    FOR SETT = 1 TO SET.CNT
                        CURR.SET = FIELD(ALL.AUTO.SETTS,VM,SETT)
                        IF CURR.SET = '' THEN
                            AF = SC.SBS.AUTO.BROK.SETT
                            AV = SETT
                            CURR.BROK = FIELD(ALL.BROKS,VM,SETT)
                            CALL DBR('CUSTOMER.SECURITY':FM:SC.CSC.AUTO.BROK.SETT,CURR.BROK,BRK.AUTO)
                            IF BRK.AUTO = '' THEN
                                BRK.AUTO = 'NO'
                            END
                            R.NEW(AF)<1,AV> = BRK.AUTO
                        END
                    NEXT SETT
* GLOBUS_EN_10000419 e

                END ELSE
* BG_100001218
                    IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES' THEN          ;* BG_100001218 ; * BG_100009201
                        AF = SC.SBS.AUTO.CUST.SETT
                        ALL.Y.N = R.NEW(SC.SBS.AUTO.CUST.SETT)
                        AUTO.Y.N.CNT = DCOUNT(ALL.Y.N,VM)
                        FOR SETT = 1 TO AUTO.Y.N.CNT
                            CURR.Y.N = ALL.Y.N<1,SETT>      ;* BG_100009201
                            IF CURR.Y.N = 'YES' THEN        ;* BG_100009201
                                AV = SETT
                                ETEXT = "Allowed only if CASH/SEC HOLD.SETTLE is YES"     ;* BG_100001218
                                CALL STORE.END.ERROR
                            END
                        NEXT SETT
* GB0101552/E
* GLOBUS_EN_10000419 s
                        AF = SC.SBS.AUTO.BROK.SETT
                        ALL.Y.N = R.NEW(SC.SBS.AUTO.BROK.SETT)
                        AUTO.Y.N.CNT = DCOUNT(ALL.Y.N,VM)
                        FOR SETT = 1 TO AUTO.Y.N.CNT
                            CURR.Y.N = ALL.Y.N<1,SETT>      ;* BG_100009201
                            IF CURR.Y.N = 'YES' THEN        ;* BG_100009201
                                AV = SETT
                                ETEXT = "Allowed only if CASH/SEC HOLD.SETTLE is YES"     ;* BG_100001218
                                CALL STORE.END.ERROR
                            END
                        NEXT SETT
                    END       ;* GLOBUS_EN_10000419 e
                END
*
* Counterparty Limits processing
*
                GOSUB COUNTERPARTY.LIMITS
*
*----------------------------------------------------------
REM "HANDLE AUTOM. CALCULATED FIELDS (BEGINNING WITH OVERRIDE):
* GB0000042 (Starts)
                AF = SC.SBS.BROKER.NO
                BROKER.COUNT = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                FOR AV = 1 TO BROKER.COUNT
                    BROKNO = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                    CALL SC.VAL.BROKER(BROKNO,YCURR.NO)
                    IF TEXT = 'NO' THEN
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                NEXT AV
* GB0000042 (Ends)
                AF = SC.SBS.NET.TRADE ; IF R.NEW(AF) = "" THEN R.NEW(AF) = "NO"
                AF = SC.SBS.TRADE.DATE ; IF R.NEW(AF) = "" THEN R.NEW(AF) = R.DATES(EB.DAT.TODAY)
                GOSUB CHECK.HOLIDAY     ;*==
                IF OLD.TRADE.DATE AND OLD.TRADE.DATE # R.NEW(AF) THEN
                    IF BOND.OR.SHARE = 'B' THEN
                        IF YEAR.DAYS[1,1] = 'O' THEN
                            GOSUB CALC.INT.DAYS   ;*==
                        END
                        OLD.TRADE.DATE = R.NEW(AF)
                    END
                END
                COMI.SAVE = COMI
                COMI = R.NEW(AF)
                CALL SC.CHECK.NS.RESTRICTIONS
                COMI = COMI.SAVE
                IF E THEN
                    ETEXT = E
                END

                IF ETEXT THEN
                    CALL STORE.END.ERROR
                END

                AF = SC.SBS.MARKET.TYPE
* CI_10010072 S
                IF R.NEW(AF) = '' THEN
                    IF R.NEW(SC.SBS.STOCK.EXCHANGE) = 'HBO' OR R.NEW(SC.SBS.STOCK.EXCHANGE) = '990' THEN
                        R.NEW(AF) = 'N'
                    END ELSE
                        R.NEW(AF) = 'S'
                    END
                END ELSE
                    IF R.NEW(SC.SBS.STOCK.EXCHANGE) = 'HBO' OR R.NEW(SC.SBS.STOCK.EXCHANGE) = '990' THEN
                        IF R.NEW(AF) # 'N' THEN
                            ETEXT = 'INVALID INPUT FOR STOCK.EXCHANGE' ; CALL STORE.END.ERROR
                        END
                    END ELSE
                        IF R.NEW(AF) = 'N' THEN
                            ETEXT = 'INVALID INPUT FOR STOCK.EXCHANGE' ; CALL STORE.END.ERROR
                        END
                    END
                END
* CI_10010072 E
                AF = SC.SBS.DEPOSITORY
                ENRIX = ""
                IF R.NEW(AF) = "" THEN
* CI_10003620 S
                    SECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
                    SAM.NO = ''
                    DEFAULT.DEPO = ''
                    DEFAULT.SUB.ACC = ''
                    CALL SC.DEFAULT.DEPO(SECURITY.NO,SAM.NO,DEFAULT.DEPO,DEFAULT.SUB.ACC)
                    R.NEW(SC.SBS.DEPOSITORY) = DEFAULT.DEPO
* CI_10003620 E
                END
                IF R.NEW(AF) = "" THEN
                    ETEXT = "INPUT MISSING"
                    CALL STORE.END.ERROR
                END
                AF = SC.SBS.STOCK.EXCHANGE
                IF R.NEW(AF) = "" THEN
                    R.NEW(AF) = R.SEC.MASTER<SC.SCM.STOCK.EXCHANGE>
                END
                AF = SC.SBS.EXCH.RATE.SEC
                IF R.NEW(AF) = '' THEN
                    Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
                    CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
                    IF CCY1 <> CCY2 THEN
                        GOSUB CALC.EXCHRATE       ;*==
                        IF E > "" THEN
                            ETEXT = E
                            CALL STORE.END.ERROR
                        END
                        R.NEW(AF) = Y4
                    END ELSE
                        R.NEW(AF) = '1'
                    END
                END
                AF = SC.SBS.EXCH.RATE.TRD

                IF R.NEW(AF) = '' THEN
                    CCY1 = R.NEW(SC.SBS.TRADE.CCY)
                    Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
                    IF CCY1 <> CCY2 THEN
                        GOSUB CALC.EXCHRATE       ;*==
                        IF E > "" THEN
                            ETEXT = E
                            CALL STORE.END.ERROR
                        END
                        R.NEW(AF) = Y4
                    END ELSE
                        R.NEW(AF) = '1'
                    END
                END
                AF = SC.SBS.VALUE.DATE
                OVE.MESS = '' ;* CI-10001192 S
                IF BOND.OR.SHARE = 'B' THEN
                    IF CALC.METHOD[5] = 'YIELD' THEN
                        IF R.NEW(SC.SBS.VALUE.DATE) LT R.NEW(SC.SBS.ISSUE.DATE) THEN
                            OVE.MESS = 'YIELD PRICE.TYPE - VALUE DATE PRIOR TO ISSUE DATE(Y/N):'
                        END
                    END
                END
                IF OVE.MESS THEN
                    TEXT = OVE.MESS
                    AF = SC.SBS.VALUE.DATE
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT = 'NO' THEN
                        TEXT = ''
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ;* CI-10001192 E
                IF R.NEW(AF) = "" THEN
                    CALL SC.CALC.VALUE.DATE(R.NEW(SC.SBS.TRADE.DATE),R.NEW(AF),R.NEW(SC.SBS.STOCK.EXCHANGE),R.NEW(SC.SBS.SECURITY.CODE),R.NEW(SC.SBS.ISSUE.DATE),TEXT)
                END
                OVE.MESS = '' ;**GB0002938 S
                IF R.NEW(AF) GT R.DATES(EB.DAT.FORW.VALUE.MAXIMUM) THEN
                    OVE.MESS = "GREATER THAN FORWARD VALUE MAXIMUM"
                END
                IF OVE.MESS THEN
                    TEXT = OVE.MESS
                    AF = SC.SBS.VALUE.DATE
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT = 'NO' THEN
                        TEXT = ''
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END ;*GB0002938 E
                IF R.NEW(AF) < R.NEW(SC.SBS.TRADE.DATE) THEN
                    ETEXT = 'INVALID - DATE < TRADE DATE'
                    CALL STORE.END.ERROR
                END
                GOSUB CHECK.HOLIDAY     ;*==
                IF NOT(R.NEW(AF)) THEN
                    ETEXT = 'INPUT MISSING'
                    CALL STORE.END.ERROR
                END
                AF = SC.SBS.TRADE.CCY
                IF R.NEW(AF) = "" THEN
                    R.NEW(AF) = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                END
                IF INDEX(DEALER.BOOK.FLAG,1,1) OR NEW.ISSUE.TRADE THEN
                    IF R.NEW(AF) # R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
                        ETEXT = 'MUST EQUAL TO THE SECURITY CCY'
                        CALL STORE.END.ERROR
                    END
                END
* GB0000350 S
                AF = SC.SBS.PAYMENT.REQD
                IF R.NEW(SC.SBS.PAYMENT.REQD) = '' THEN
                    R.NEW(SC.SBS.PAYMENT.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>  ;* BG_100008063
                END
*
                AF = SC.SBS.BROKER.ADVICE.REQD
                IF R.NEW(SC.SBS.BROKER.ADVICE.REQD) = '' THEN
                    R.NEW(SC.SBS.BROKER.ADVICE.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>      ;* BG_100008063
                END
*
                AF = SC.SBS.DEPOT.ADVICE.REQD
                IF R.NEW(SC.SBS.DEPOT.ADVICE.REQD) = '' THEN
                    R.NEW(SC.SBS.DEPOT.ADVICE.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>       ;* BG_100008063
                END
*
* GB0000350 E
*
*GB0001938S
                AF = SC.SBS.CASH.HOLD.SETTLE
                IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN       ;* BG_100001183
                    IF R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = '' THEN      ;* BG_100008063 s
                        R.NEW(SC.SBS.CUST.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.CUST.ACT.SUSP.CAT>
                    END
                    IF R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = '' THEN
                        R.NEW(SC.SBS.BROK.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.BROK.ACT.SUSP.CAT>
                    END
                    IF R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = '' THEN
                        R.NEW(SC.SBS.MISC.ACT.SUSP.CAT) = R.SC.PARAMETER<SC.PARAM.MISC.ACT.SUSP.CAT>
                    END       ;* BG_100008063 e
                END
* GLOBUS_EN_10000419 e
                AF = SC.SBS.SEC.HOLD.SETTLE
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
*GB0001938E
*
                AF = SC.SBS.LAST.PAYMNT.DATE
                COMI2 = ""
                IF BOND.OR.SHARE = "B" THEN
                    COMI2 = R.NEW(SC.SBS.VALUE.DATE)
* CI_10003428 S
                    IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) = '' OR GTSVAL THEN       ;* CI_10014817 S-E
* CI_10003428 E
                        IF R.NEW(SC.SBS.VALUE.DATE) < R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE> THEN
                            COMI2 = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                            UPPER.RANGE = '366' ; LOWER.RANGE = '-30'
                            LOCATE R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE> IN R.SEC.MASTER<SC.SCM.RATE.CH.DATE,1> SETTING NPOS ELSE NPOS = 0
                            IF NPOS THEN
                                INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,NPOS>
                            END ELSE
                                INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
                            END
                        END ELSE
                            IF R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'O' THEN
                                COMI2 = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                            END ELSE
                                COMI2 = R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE>
                            END
                            UPPER.RANGE = '14' ; LOWER.RANGE = '0'
                            LOCATE R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE> IN R.SEC.MASTER<SC.SCM.RATE.CH.DATE,1> SETTING NPOS ELSE NPOS = 0
                            IF NPOS THEN
                                INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,NPOS>
                            END ELSE
                                INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
                            END
                        END
                        R.NEW(SC.SBS.INTEREST.RATE) = INTEREST.RATE
                    END ELSE
                        COMI2 = R.NEW(SC.SBS.LAST.PAYMNT.DATE)
                    END
                    R.NEW(AF) = COMI2
                    IF R.NEW(SC.SBS.INTEREST.DAYS) = '' AND R.NEW(AF) THEN
                        INTEREST.DAYS = '' ; INTEREST.AMT = '' ; MONTH.DAYS = '' ; NYEAR.DAYS = ''
                        YEAR.DAYS = R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>
                        SEC.TOT.NOM = 0
                        CUM.EX.DIV = 'EX.DIV'
                        GROSS.INT.AMT = ''
                        SECURITY.PRICE = ""
                        CALL SC.CALC.INT.AMT(SEC.TOT.NOM,COMI2,R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),R.NEW(SC.SBS.INTEREST.RATE),YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)  ;* GB9800993
                        R.NEW(SC.SBS.INTEREST.DAYS) = INTEREST.DAYS
                        R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID        ;* EN_1000793 S-E
                    END
                    OVE.MESS = ''
                    IF NOT(KO.PROCESSING) AND R.NEW(SC.SBS.INTEREST.DAYS) THEN
                        IF R.NEW(SC.SBS.INTEREST.DAYS) < LOWER.RANGE THEN
                            OVE.MESS = 'INTEREST DAYS LESS THAN "':LOWER.RANGE:'"'
                        END
                        IF R.NEW(SC.SBS.INTEREST.DAYS) > UPPER.RANGE THEN
                            OVE.MESS = 'INTEREST DAYS MORE THAN "':UPPER.RANGE:'"'
                        END
                    END
                    IF OVE.MESS THEN
                        TEXT = OVE.MESS
                        AF = SC.SBS.INTEREST.DAYS
                        CALL STORE.OVERRIDE(YCURR.NO)
                        IF TEXT = 'NO' THEN
                            ETEXT = OVE.MESS
                            CALL STORE.END.ERROR
                            TEXT = ''
                        END
                    END
                END
                IF END.ERROR = "" THEN
                    YERROR = 'INPUT MISSING'
                    AF.ASS1 = SC.SBS.CUSTOMER.NO
                    AF.ASS2 = SC.SBS.CUST.SEC.ACC
                    AF.ASS3 = SC.SBS.CUST.ACC.NO
                    AF.ASS4 = SC.SBS.CU.BRKR.COMM
                    AF.ASS5 = SC.SBS.CU.FOREIGN.FEE
                    AF.ASS6 = SC.SBS.CU.COMMISSION
                    AF.ASS7 = SC.SBS.CU.STAMP.TAX
                    AF.ASS8 = SC.SBS.CU.EBV.FEES
                    AF.ASS10 = SC.SBS.CU.EX.RATE.REF
                    LOCAL6 = '1'
                    TOTAL.DR.NET = 0 ; TOTAL.CR.NET = 0
                    CUST.NOM.TOTS = ''
*
* EXTRACT DR OR CR CODE AND CATEGORY FOR MARKET PL.
* AND EXCHANGE PL .
*
** GB9500166 - Supress Currency Position
*
                    LOCAL8 = ''
                    TOT.BROKER.FOREIGN = 0 ; TOT.BROKER.COMM = 0
                    FOR AV = 1 TO NO.OF.CUSTOMERS
                        IF R.NEW(AF.ASS1)<1,AV> = '' THEN
                            ETEXT = YERROR ; AF = AF.ASS1 ; CALL STORE.END.ERROR
                        END
                        IF R.NEW(AF.ASS2)<1,AV> = '' AND NOT(CPTY.TRANS<1,AV>) THEN
                            ETEXT = YERROR ; AF = AF.ASS2 ; CALL STORE.END.ERROR
                        END
                        IF R.NEW(AF.ASS3)<1,AV> = '' AND NOT(CPTY.TRANS<1,AV>) THEN
                            ETEXT = YERROR ; AF = AF.ASS3 ; CALL STORE.END.ERROR
                        END ELSE
                            BEGIN CASE
                            CASE DEALER.BOOK.FLAG<1,AV> AND NOT(NEW.ISSUE.TRADE)
                                ASSET.CAT = ''
                                CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.ASSET.CAT,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,ASSET.CAT)
                                BOOK.INT.ACC = R.NEW(SC.SBS.SECURITY.CURRENCY):ASSET.CAT:INT.DEPT.CODE
                                IF R.NEW(AF.ASS3)<1,AV> # BOOK.INT.ACC THEN
                                    ETEXT = 'INCORRECT ACCOUNT FOR DEALER.BOOK'
                                    AF = AF.ASS3
                                    CALL STORE.END.ERROR
                                END
                            CASE OTHERWISE
                                ASSET.CAT = ''
                                CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.ASSET.CAT,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,ASSET.CAT)
                                IF ASSET.CAT # '' THEN
                                    BOOK.INT.ACC = R.NEW(SC.SBS.SECURITY.CURRENCY):ASSET.CAT:INT.DEPT.CODE
                                    IF R.NEW(AF.ASS3)<1,AV> # BOOK.INT.ACC THEN
                                        ETEXT = 'INCORRECT ACCOUNT FOR DEALER.BOOK'
                                        AF = AF.ASS3
                                        CALL STORE.END.ERROR
                                    END
                                END ELSE
                                    MEMO.ACC = ''
                                    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.MEMO.ACCOUNT,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,MEMO.ACC)
                                    IF MEMO.ACC = 'NO' THEN
                                        IF R.NEW(AF.ASS3)<1,AV>[1,3] = R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
                                            ETEXT = 'INVALID FOR NON DEALER.BOOK'
                                            AF = AF.ASS3
                                            CALL STORE.END.ERROR
                                        END ELSE

                                            ACCNT.NOS = ''
                                            CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.ACCOUNT.NOS:FM:".A",R.NEW(AF.ASS2)<1,AV>,ACCNT.NOS)
                                            IF ETEXT >"" THEN
                                                AF = AF.ASS2
                                                CALL STORE.END.ERROR
                                            END
*
* GB9901034 - Code added here for CUST.ACC.NO field
*             validation. Section one gives an override
*             if the account input has not been defined
*             on the SEC.ACC.MASTER file. Section two
*             gives an override if the account is already
*             being used on another portfolio. Section
*             three gives an override if the portfolio
*             owner (i.e. as extracted from the
*             CUST.SEC.ACC field)is different from the
*             account owner.
*
* GB9901034 - Section one

                                            CU.ACC.NO = R.NEW(AF.ASS3)<1,AV>
                                            LOCATE CU.ACC.NO IN ACCNT.NOS<1,1> SETTING POS ELSE
                                                TEXT<1> = "ACCT.NOT.PART.PORT"  ;* GLOBUS_EN_10000345
                                                AF = AF.ASS3
                                                CALL STORE.OVERRIDE(YCURR.NO)
                                                IF TEXT = "NO" THEN
                                                    TEXT = ''
                                                    GOTO FIELD.DISPLAY.OR.INPUT
                                                END
* GB9901034 - Section two
                                                PORT.ACCNT = ''
                                                CALL DBR("SC.REF.ACCOUNT":FM:1:FM:".A",R.NEW(AF.ASS3)<1,AV>,PORT.ACCNT)
                                                IF NOT(ETEXT) THEN
                                                    TEXT = 'A/C ALREADY USED IN ANOTHER PORTFOLIO'
                                                    AF = AF.ASS3
                                                    CALL STORE.OVERRIDE(YCURR.NO)
                                                    IF TEXT = "NO" THEN
                                                        TEXT = ''
                                                        GOTO FIELD.DISPLAY.OR.INPUT
                                                    END
                                                END
                                            END

* GB9901034 - Section three
                                            ACCNT.CUS = ''
                                            CALL DBR("ACCOUNT":FM:AC.CUSTOMER:FM:".A",R.NEW(AF.ASS3)<1,AV>,ACCNT.CUS)
                                            IF NOT(ETEXT) THEN
                                                PORT.CUS = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',1)
                                                IF PORT.CUS NE ACCNT.CUS THEN
                                                    TEXT = "A/C CUST DIFFERS FROM PORTFOLIO OWNER"
                                                    AF = AF.ASS3
                                                    CALL STORE.OVERRIDE(YCURR.NO)
                                                    IF TEXT = "NO" THEN
                                                        TEXT = ''
                                                        GOTO FIELD.DISPLAY.OR.INPUT
                                                    END
                                                END
                                            END

                                        END
*
* GB9901283 S
                                    END ELSE      ;* MEMO.ACC
                                        E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
                                        SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                                        CALL SC.CALC.NOSTRO(R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,SEC.ACC.NO,R.NEW(AF.ASS3)<1,AV>,R.NEW(SC.SBS.TRADE.CCY),'C',OUT.ACC.NO,O.CUST)
*
                                        IF E THEN
                                            TEXT = E
                                            E = ''
                                            AF = AF.ASS3
                                            CALL STORE.OVERRIDE(YCURR.NO)
                                            IF TEXT = "NO" THEN
                                                TEXT = ''
                                                GOTO FIELD.DISPLAY.OR.INPUT
                                            END
                                        END
*
                                        CU.ACC.NO = R.NEW(AF.ASS3)<1,AV>
                                        PORT.ACCNT = ''
                                        CALL DBR("SC.REF.ACCOUNT":FM:1,CU.ACC.NO,PORT.ACCNT)
                                        IF NOT(ETEXT) THEN
                                            TEXT = 'A/C ALREADY USED IN ANOTHER PORTFOLIO'
                                            AF = AF.ASS3
                                            CALL STORE.OVERRIDE(YCURR.NO)
                                            IF TEXT = "NO" THEN
                                                TEXT = ''
                                                GOTO FIELD.DISPLAY.OR.INPUT
                                            END
                                        END
*
                                        CALL F.READ('F.ACCOUNT',CU.ACC.NO,R.ACCOUNT,F.ACCOUNT,'')   ;* BG_100008063 s
                                        ACCNT.CUS = R.ACCOUNT<AC.CUSTOMER>
                                        NOSTRO.ACC = R.ACCOUNT<AC.LIMIT.REF>    ;* BG_100008063 e
                                        IF NOT(ETEXT) THEN
                                            IF NOSTRO.ACC NE 'NOSTRO' THEN
                                                PORT.CUS = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',1)
                                                IF ACCNT.CUS AND PORT.CUS NE ACCNT.CUS THEN
                                                    TEXT = "A/C CUST DIFFERS FROM PORTFOLIO OWNER"
                                                    AF = AF.ASS3
                                                    CALL STORE.OVERRIDE(YCURR.NO)
                                                    IF TEXT = "NO" THEN
                                                        TEXT = ''
                                                        GOTO FIELD.DISPLAY.OR.INPUT
                                                    END
                                                END
                                            END
                                        END
*
                                        REF.CURRENCY = ''
                                        CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.REFERENCE.CURRENCY
                                        CALL DBR(CHECKFILE2,SEC.ACC.NO,REF.CURRENCY)
                                        ACCOUNT.CURRENCY = ""
                                        CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                                        CALL DBR(CHECKFILE2,CU.ACC.NO,ACCOUNT.CURRENCY)
                                        IF ACCOUNT.CURRENCY # R.NEW(SC.SBS.TRADE.CCY) THEN
                                            IF R.NEW(SC.SBS.SECURITY.CURRENCY) = 'LUF' AND R.NEW(SC.SBS.TRADE.CCY) = 'LUF' AND ACCOUNT.CURRENCY = 'BEF' THEN
                                                NULL
                                            END ELSE
                                                TEXT = 'ACCOUNT AND TRADE CURRENCIES NOT EQUAL'
                                                AF = AF.ASS3
                                                CALL STORE.OVERRIDE(YCURR.NO)
                                                IF TEXT = "NO" THEN
                                                    TEXT = ''
                                                    GOTO FIELD.DISPLAY.OR.INPUT
                                                END
                                            END
                                        END
                                        R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                                        R.NEW(SC.SBS.CU.REF.CCY)<1,AV> = REF.CURRENCY
* GB9901283 E
                                    END
                                END
                            END CASE
                        END

                        IF R.NEW(AF.ASS4)<1,AV> # '' OR R.NEW(AF.ASS5)<1,AV> # '' OR R.NEW(AF.ASS6)<1,AV> # '' OR R.NEW(AF.ASS7)<1,AV> # '' OR R.NEW(AF.ASS8)<1,AV> # '' THEN
                        END
                        OVE.ADDR = R.NEW(SC.SBS.CU.OVE.ADDR)<1,AV>
                        IF COUNT(OVE.ADDR,SM) + 1 GT 6 THEN
                            ETEXT = 'MAX 6 LINES ALLOWED'
                            AF = SC.SBS.CU.OVE.ADDR
                            CALL STORE.END.ERROR
                        END
                        IF NOT(END.ERROR) THEN
                            V$ERROR = '' ; CU.OVE.ADD = R.NEW(SC.SBS.CU.OVE.ADDR)<1,AV>
                            CARRIER = ''
                            CALL DBR('MESSAGE.CONTROL':FM:LD25.CARRIER,R.NEW(SC.SBS.CU.MESS.CONTROL)<1,AV>,CARRIER)
                            CONVERT SM TO VM IN CU.OVE.ADD
                            CALL CHECK.OVR.CARR(CARRIER,R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,CU.OVE.ADD,V$ERROR)
                            IF V$ERROR THEN
                                ETEXT = V$ERROR
                                AF = SC.SBS.CU.MESS.CONTROL
                                CALL STORE.END.ERROR
                            END
                        END
                        IF R.NEW(AF.ASS10)<1,AV> = '' THEN
                            Y1 = "" ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                            CCY1 = R.NEW(SC.SBS.CU.REF.CCY)<1,AV>
                            IF CCY1 <> CCY2 THEN
                                GOSUB CALC.EXCHRATE         ;*==
                                IF E > "" THEN
                                    ETEXT = YERROR ; AF = AF.ASS10 ; CALL STORE.END.ERROR
                                END ELSE R.NEW(AF.ASS10)<1,AV> = Y4
                            END ELSE
                                R.NEW(AF.ASS10)<1,AV> = 1
                            END
                        END
                        AF = SC.SBS.CUST.TOT.NOM
                        AFX = SC.SBS.CUST.NO.NOM ; AFX1 = SC.SBS.CUST.PRICE
                        NO.CUST.NOMS = DCOUNT(R.NEW(AFX)<1,AV>,SM)
                        FOR AS = 1 TO NO.CUST.NOMS
                            IF TRADING.UNITS THEN
* GB0000217 S
                                OLD.AF = AF
                                AF = AFX
                                IF R.NEW(SC.SBS.ODD.LOT.TRADE) THEN
                                    SECURITY.NO.PARAM = R.NEW(SC.SBS.SECURITY.CODE):FM:'ODD.LOT'
                                END ELSE
                                    SECURITY.NO.PARAM = R.NEW(SC.SBS.SECURITY.CODE)
                                END
                                CALL SC.VAL.UNITS(SECURITY.NO.PARAM,R.NEW(AF)<1,AV,AS>,'C',YCURR.NO)          ;*GB0000454
                                ARG1 =R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
                                ARG2 = R.NEW(SC.SBS.SECURITY.CODE)
                                ARG3 = R.NEW(SC.SBS.DEPOSITORY)
                                ARG4 = R.NEW(SC.SBS.CUST.NOMINEE)
                                CALL DBR('SECURITY.MASTER':FM:SC.SCM.SUB.ASSET.TYPE,R.NEW(SC.SBS.SECURITY.CODE),RET.VAL)
                                CALL DBR('SUB.ASSET.TYPE':FM:SC.CSG.KASSENOBLIGATIONEN,RET.VAL,VALUE)
                                IF VALUE = 'YES' THEN
                                    ARG5 = R.NEW(SC.SBS.MATURITY.DATE)
                                    ARG6 = R.NEW(SC.SBS.INTEREST.RATE)
                                END ELSE
                                    ARG5 = ''
                                    ARG6 =''
                                END
                                ARG7 = R.NEW(SC.SBS.SUB.ACCOUNT)<1,AV>          ;*GB0100224 Add sub account as the 7th argument
                                IF R.NEW.LAST(AF)<1,AV> = '' OR R.NEW(SC.SBS.RECORD.STATUS) EQ 'IHLD' THEN    ;* GB0101649 S ; * CI_10033576 S/E
                                    ARG8 = R.NEW(AF)<1,AV>
                                END ELSE
                                    ARG8 = R.NEW(AF)<1,AV> - R.NEW.LAST(AF)<1,AV>
                                END     ;* GB0101649 E
                                ARG9 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                                ARG10 = YCURR.NO
                                CALL SC.VAL.MIN.HOLD(ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,ARG7,ARG8,ARG9,ARG10)      ;* GB0101649 S-E
                                AF = OLD.AF
* GB0000217 E
                            END
                        NEXT AS
                        IF NOT(END.ERROR) THEN
                            GOSUB CALC.NOM.AMT
                        END
                        GOSUB CALC.DISC.AMOUNT    ;*EN_10002646 S/E
                        IF E > "" THEN
                            ETEXT = E ; CALL STORE.END.ERROR
                        END
                        IF NOT(END.ERROR) THEN
                            IF TOT.NOM # R.NEW(AF)<1,AV> THEN
                                IF R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV> THEN
                                    REALLOW.AMT = (TOT.NOM*R.NEW(SC.SBS.CU.REALLOWANCE)<1,AV>)/100
                                    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                                        CALL SC.CHF.ROUNDING(REALLOW.AMT)
                                    END
                                    R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> = REALLOW.AMT
                                END
                            END
                            R.NEW(AF)<1,AV> = TOT.NOM
                            AF = SC.SBS.CU.GROSS.AM.SEC
                            R.NEW(AF)<1,AV> = SEC.GROSS.AMT
                            AF = SC.SBS.CU.GROSS.AM.TRD
                            CUST.GROSS.TRADE = R.NEW(AF)
                            R.NEW(AF)<1,AV> = GROSS.AMT
                            IF NOT(GTSVAL) THEN   ;* CI_10014817 S-E
                                IF CUST.GROSS.TRADE<1,AV> # R.NEW(AF)<1,AV> THEN
                                    RECALC.CHARGES = 1
* Int always getting defaulted
                                    R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = ''      ;* CI_10009552 S-E
                                    LOCAL6 = ''
* GB9800993
                                    R.NEW(SC.SBS.CU.COUP.TAX.AMT)<1,AV> = ''

                                END ELSE
                                    RECALC.CHARGES = 0
                                    LOCAL6 = 1
                                END
                            END ELSE    ;* GB0003142 S
                                RECALC.CHARGES = 0
                                LOCAL6 = 1
                            END         ;* GB0003142 E
* GLOBUS_CI_10001223 +
* IF code commented to set RECALC.CHARGES to 1 even if any one
* of the below said fields is left blank
                            RECALC.CHARGES = 1
                            LOCAL6 = ''
* GB9800993
* CI_10012868 R.NEW(SC.SBS.CU.COUP.TAX.AMT)<1,AV> = ''
* GLOBUS_CI_10001223 -
                            GOSUB SETUP.DETAILS.STK.EXC     ;*==
                            IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) AND R.NEW(SC.SBS.INTEREST.DAYS) AND R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = '' THEN
                                INTEREST.DAYS = R.NEW(SC.SBS.INTEREST.DAYS) ; INTEREST.AMT = '' ; NYEAR.DAYS = ''
* GB9800993
                                GROSS.INT.AMT = ''

                                IF BOND.OR.SHARE = 'B' THEN
                                    CUM.EX.DIV = 'EX.DIV'
* GB9801068 (Starts)
                                    SECURITY.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV>
                                    GOSUB CALC.CUST.WEIGHT.AVG.PRICE  ;* CI_10017271
                                    CALL SC.CALC.INT.AMT(R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>,R.NEW(SC.SBS.LAST.PAYMNT.DATE),R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),R.NEW(SC.SBS.INTEREST.RATE),YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)    ;* GB9800993
                                    YAMT = CAP.AMT
                                    R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID      ;* EN_1000793 S-E
                                    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                                        CALL SC.CHF.ROUNDING(YAMT)
                                    END
* GB9901179 - Call correctly
                                    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
                                    R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV> = YAMT
* GB9801068 (Ends)
                                    IF R.SEC.MASTER<SC.SCM.PAID.CODE> = '%' THEN
                                        INTEREST.AMT = (INTEREST.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
* GB9801283
                                        GROSS.INT.AMT = (GROSS.INT.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
                                    END
                                END
* GB9800993
                                COUPON.TAX.AMT = GROSS.INT.AMT - INTEREST.AMT
                                IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                                    CALL SC.CHF.ROUNDING(GROSS.INT.AMT)
                                    IF COUPON.TAX.AMT THEN
                                        CALL SC.CHF.ROUNDING(COUPON.TAX.AMT)
                                    END
                                END
* GB9801283
                                R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = GROSS.INT.AMT
* CI_10002884 - S
                                IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
                                    CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
                                    CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                                    Y1 = GROSS.INT.AMT ; Y2 = "" ; Y3 = "" ; Y4 = ''
                                    IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                                        GOSUB CALC.EXCHRATE ;*==
                                    END
                                    Y1 = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> ; Y2 = "" ; Y3 = ""
                                    Y5 = "" ; Y6 = "" ; RET.CODE = ""
                                    GOSUB CALC.EXCHRATE     ;*==
                                    R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = Y2
                                END
* CI_10002884 - E

                                YCCY = R.NEW(SC.SBS.TRADE.CCY)
                                YAMT = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                                CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
                                R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = YAMT
* GB9800993
                                IF COUPON.TAX.AMT THEN
                                    YAMT = COUPON.TAX.AMT
                                    CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
*
* GB9801517
* populate coupon.tax.amt only if dealer book and tax exempt
*
                                    SAM.ID = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>   ;* BG_100008063 s
                                    CALL F.READ('F.SEC.ACC.MASTER',SAM.ID,R.SEC.ACC.MASTER,F.SEC.ACC.MASTER,'')
                                    DEAL.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
                                    COUPON.TAX.STATUS = R.SEC.ACC.MASTER<SC.SAM.COUPON.TAX.STATUS>  ;* BG_100008063 e
                                    IF (DEAL.BOOK) AND (COUPON.TAX.STATUS EQ 'EXEMPT') THEN
                                        R.NEW(SC.SBS.CU.COUP.TAX.AMT)<1,AV> = YAMT
                                    END
* GB9801283
                                    R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> -= YAMT   ;* GB9801517
* GB0100114 S
                                    COUPON.TAX.IDX<1,AV> = 1
                                END ELSE
                                    COUPON.TAX.IDX<1,AV> = 0
* GB0100114 E
                                END

                            END
* GB9801068
                            R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
                            CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                            GOSUB CL.STOCK.EXCHANGE         ;*==
                            IF ETEXT > "" THEN
                                CALL STORE.END.ERROR
                            END
                            IF NOT(END.ERROR) THEN
                                IF RECALC.CHARGES THEN
                                    IF NOT(BOOK.DEAL) AND R.NEW(SC.SBS.NET.TRADE)[1,1] NE 'Y' THEN
                                        TRN.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                                        CUSTOMER.COMM = 0
                                        IF TRN.CODE THEN
                                            LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
                                                IF R.STD.SEC.TRADE<SC.SST.COMM.PRIN.INT> = "PRINCIPAL" THEN
                                                    CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                                                END ELSE
                                                    CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                                                END
                                                GOSUB FETCH.CU.TAX    ;* EN_10002391 S-E
                                                GOSUB CHECK.WHT.TAX.CODE        ;* EN_10002037 S-E
                                                GOSUB CHECK.CUST.TAX  ;* EN_10002037 S-E
                                                GOSUB CHECK.CUST.COMM ;*==
                                            END
                                        END
                                    END ELSE CUSTOMER.COMM = ''
** VAT
* GLOBUS_CI_10001223 +
* Check the CU.BRKR.COMM , CU.FOREIGN.FEE , CU.COMMISSION if NULL then
* default the values from YARRAY
                                    IF CUSTOMER.COMM NE '' THEN
                                        YARRAY(54) = CUSTOMER.COMM<1>
                                    END
                                    IF R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> EQ '' THEN
                                        R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> = YARRAY(51)     ;* CI_10005154 S-E
                                    END
                                    IF R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> EQ '' THEN
                                        R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> = YARRAY(53)   ;* CI_10005154 S-E
                                    END
                                    IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> EQ '' THEN
                                        R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = YARRAY(54)    ;* CI_10005017 E ; * CI_10005154 S-E
                                    END
                                    R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = CUSTOMER.COMM<2>
                                    R.NEW(SC.SBS.COMM.CODE)<1,AV> = CUSTOMER.COMM<3>
                                    R.NEW(SC.SBS.COMM.PERCENT)<1,AV> = CUSTOMER.COMM<7>
                                    R.NEW(SC.SBS.COM.TAX.CODE)<1,AV> = CUSTOMER.COMM<5>
                                    R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = CUSTOMER.COMM<6>
                                    R.NEW(SC.SBS.COM.TAX.XRTE)<1,AV> = CUSTOMER.COMM<4>
*CI-10018453                                    CALL REBUILD.SCREEN
                                END
                                CUST.COMMISSIONS<1,AV> = YARRAY(25)
                                CUST.COMMISSIONS<2,AV> = YARRAY(26)
                                CUST.COMMISSIONS<3,AV> = YARRAY(27)
                                CUST.COMMISSIONS<4,AV> = YARRAY(35)
                                CUST.COMMISSIONS<5,AV> = YARRAY(36)
                                CUST.COMMISSIONS<6,AV> = YARRAY(37)
                                CUST.COMMISSIONS<7,AV> = YARRAY(45)
                                CUST.COMMISSIONS<8,AV> = YARRAY(46)
                                CUST.COMMISSIONS<9,AV> = YARRAY(47)
*
                                IF NO.OF.CUSTOMERS = 1 AND NO.OF.BROKERS = 1 AND DEALER.BOOK.FLAG<1,AV> THEN
                                    IF NOT(NEW.ISSUE.TRADE) THEN
                                        AF.ASS3 = SC.SBS.BR.BROKER.COMM
                                        AF.ASS4 = SC.SBS.BR.FOREIGN.FEE
                                        AF.ASS5 = SC.SBS.BR.STAMP.TAX
                                        AF.ASS6 = SC.SBS.BR.EBV.FEES
*
                                        MAT OLD.YARRAY = MAT YARRAY
                                        OLD.RECALC.FLAG = RECALC.CHARGES
                                        GOSUB RECALC.BROKER.CHARGES   ;*==
                                        MAT YARRAY = MAT OLD.YARRAY
                                        RECALC.CHARGES = OLD.RECALC.FLAG
                                        BROKER.RECALC = 0
                                        R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> = R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV>
                                        R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> = R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV>
                                    END ELSE
                                        BROKER.RECALC = 1
                                    END
                                END ELSE
                                    BROKER.RECALC = 1
                                END
                                YARRAY(20) = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                                GOSUB CALC.LOCAL.CHARGES    ;*==
                                IF RECALC.CHARGES THEN
* GLOBUS_CI_10001223 +
* Check the CU.STAMP.TAX AND CU.EBV.FEES , if NULL then default the value
* from YARRAY
                                    IF R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> EQ '' THEN
                                        R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> = YARRAY(51)
                                    END
                                    IF R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> EQ '' THEN
                                        R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> = YARRAY(52)
                                    END
* GLOBUS_CI_10001223 -
                                    IF TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
                                        R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = YARRAY(12)
                                    END
* GB9801068
                                    R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
                                    LOCATE SC.SBS.CU.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE
                                        POS = 0
                                    END
                                    IF POS THEN
                                        T.SEQU<-1> = "D":POS
                                    END
                                END
                                CUST.CHARGES<1,AV> = YARRAY(21)
                                CUST.CHARGES<2,AV> = YARRAY(22)
                                CUST.CHARGES<3,AV> = YARRAY(23)
                                CUST.CHARGES<4,AV> = YARRAY(25)
                                CUST.CHARGES<5,AV> = YARRAY(26)
                                CUST.CHARGES<6,AV> = YARRAY(27)
                                CUST.CHARGES<7,AV> = YARRAY(30)
                                CUST.CHARGES<8,AV> = YARRAY(31)
                                CUST.CHARGES<9,AV> = YARRAY(32)
                                CUST.CHARGES<10,AV> = YARRAY(28)      ;* GLOBUS_CI_10002030
                            END
                        END
                        IF DEALER.BOOK.FLAG<1,AV> AND NOT(NEW.ISSUE.TRADE) THEN
                            IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> THEN
                                OLD.AF = AF
                                AF = SC.SBS.CU.COMMISSION
                                ETEXT = 'MUST BE ZERO FOR DEALER BOOK'
                                CALL STORE.END.ERROR
                                AF = OLD.AF
                            END
                        END
                        IF NOT(END.ERROR) THEN
                            COMI2 = '' ; ENRIX = ''
                            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS         ;*==
                            FOREIGN.FEES = R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> + R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV>
                            IF NEW.ISSUE.TRADE AND R.NEW(SC.SBS.SECURITY.CURRENCY) = LCCY AND R.SEC.MASTER<SC.SCM.COMPANY.DOMICILE> = 'CH' THEN
                                LOCAL.FEES = R.NEW(SC.SBS.CU.COMMISSION)<1,AV> + R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> + R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> + R.NEW(SC.SBS.CU.FEES.MISC)<1,AV> - R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
                                NEW.ISSUE.STAMP.TAX = R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV>
                            END ELSE
                                LOCAL.FEES = R.NEW(SC.SBS.CU.COMMISSION)<1,AV> + R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> + R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV>+R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> + R.NEW(SC.SBS.CU.FEES.MISC)<1,AV> - R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
                                NEW.ISSUE.STAMP.TAX = 0
                            END
                            IF COMI4 = 'CREDIT' THEN
* GB9801068
                                R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + (FOREIGN.FEES + LOCAL.FEES) - R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>       ;* EN_10002391 S-E
                            END ELSE
                                IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
* GB9801068
                                    R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> - (FOREIGN.FEES + LOCAL.FEES) - R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>   ;* EN_10002391 S-E
                                END ELSE
* GB9801068
                                    R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> - (FOREIGN.FEES + LOCAL.FEES) + R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>   ;* EN_10002391 S-E
                                END
                            END
* EN_10002037 S
                            IF COMI4 = 'CREDIT' THEN        ;* BG_100009867 S/E
                                R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> + TXN.TAX.CUM.AMT
                            END ELSE
                                R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - TXN.TAX.CUM.AMT ;* R.NEW(SC.SBS.CU.WHT.TAX) ; * <1,AV>
                            END         ;* BG_100009867 S/E
* EN_10002037 E
                            IF COMI4 = 'DEBIT' THEN
                                IF CU.NAV.TYPE = 'NET' AND BOND.OR.SHARE = 'S' THEN
                                    GOSUB FETCH.CU.TAX
                                END
                                IF SUM(R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV>) THEN
                                    R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - SUM(R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV>)
                                END ELSE
                                    IF SUM(R.NEW(SC.SBS.CU.TAX.TCY)<1,AV>) THEN
                                        R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - SUM(R.NEW(SC.SBS.CU.TAX.TCY)<1,AV>)
                                    END
                                END
                            END
                            LOCATE SC.SBS.CU.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
                                T.SEQU<-1> = 'D':DISP.POS
                            END
                            LOCATE SC.SBS.CU.DISC.AMT:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
                                T.SEQU<-1> = 'D':DISP.POS
                            END
                            YAMT = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV>
                            YCCY = R.NEW(SC.SBS.TRADE.CCY)
                            CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
                            IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                                CALL SC.CHF.ROUNDING(YAMT)  ;* CI_10037362 S/E
                            END
                            R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = YAMT
                            R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> * R.NEW(SC.SBS.CU.DISC.PCENT)<1,AV> / 100
                            YAMT = R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
                            YCCY = R.NEW(SC.SBS.TRADE.CCY)
                            CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
                            R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> = YAMT
                            GOSUB CALC.CUST.AM.DUE          ;*==
* GB9700195 (3) - next 14 lines inserted
                            IF RATE.INPUT.MKR = @FALSE OR GTSVAL THEN ;* CI_10014817 S-E
                                IF RET.CODE<2> NE "" THEN
                                    OLD.AF = AF
                                    AF = SC.SBS.CU.EX.RATE.ACC
                                    TEXT = "RATE REQUIRED - EXCEEDS LIMIT"
                                    CALL STORE.OVERRIDE(YCURR.NO)
                                    IF TEXT = "NO" THEN
                                        ETEXT = "RATE REQUIRED - EXCEEDS LIMIT"
                                        CALL STORE.END.ERROR
                                        TEXT = ""
                                    END
                                    AF = OLD.AF
                                END
                            END
* GB9700195 (3) - end
                            IF ETEXT THEN
                                OLD.AF = AF
                                AF = SC.SBS.CU.EX.RATE.ACC
                                CALL STORE.END.ERROR
                                AF = OLD.AF
                            END
                        END
*
                        IN.ACCT = R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> ; OUT.COMP = '' ; OUT.ACC.NO = '' ; RETURN.CODE = ''
                        CALL GET.NOSTRO('','SC',IN.ACCT,'','',OUT.COMP,OUT.ACC.NO,'','',RETURN.CODE,'')
                        COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
                        GOSUB CHECK.TRANS         ;*==
                        CUST.RET = ''
                        CALL DBR('ACCOUNT':FM:AC.CUSTOMER,R.NEW(SC.SBS.CUST.ACC.NO)<1,AV>,CUST.RET)
                        SDI.ID = R.NEW(SC.SBS.CU.DELIV.INSTR)<1,AV>   ;* BG_100008063 s
                        CALL F.READ('F.SC.DEL.INSTR',SDI.ID,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')
                        DEL.REC = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>
                        PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG>     ;* BG_100008063 e
                        IF RETURN.CODE GE 0 AND R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = DR.CODE AND CUST.RET # R.NEW(SC.SBS.CUSTOMER.NO)<1,AV> AND DEL.REC # PAY.CODE THEN  ;* CUSTOMER.ACC = NOSTRO
                            IN.CUSTOMER = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                            RET.AGENT.CODE = ""
                            OUT.CUSTOMER = ""
                            OUT.INTER.CUST = ""
                            OUT.INTER.ACCOUNT = ""
                            OUT.ACCOUNT.NUMBER = ""
                            IN.APPLICATION = 'SC'
                            IN.AGENT = ""
*----------------------------------------------------
                            CALL GET.AGENT(IN.CUSTOMER,R.NEW(SC.SBS.TRADE.CCY),IN.APPLICATION,IN.AGENT,"", "", "", "", "","","",OUT.CUSTOMER,OUT.ACCOUNT.NUMBER,"", "",OUT.INTER.CUST,OUT.INTER.ACCOUNT,RET.AGENT.CODE)
*----------------------------------------------------
                            IF OUT.CUSTOMER THEN
                                IF R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = '' THEN  ;* CI_10001803 - S-E
                                    R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = OUT.CUSTOMER
                                END     ;* CI_10001803 - S-E
                            END ELSE
                                ETEXT = 'INPUT MISSING'
                                AF = SC.SBS.CU.BEN.BANK.1
                                CALL STORE.END.ERROR
                            END
                            IF OUT.ACCOUNT.NUMBER AND R.NEW(SC.SBS.CU.BEN.ACCT)<1,AV,AS> = '' THEN
                                AS = 1
                                R.NEW(SC.SBS.CU.BEN.ACCT)<1,AV,AS> = OUT.ACCOUNT.NUMBER
                            END
* CI_10001803 - E
                            IF R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> = R.NEW(SC.SBS.CU.BEN.BANK.2)<1,AV> AND R.NEW(SC.SBS.CU.BEN.BANK.2)<1,AV> THEN
                                ETEXT = 'INPUT MUST BE DIFFERENT FROM CU.BEN.BANK.1'
                                AF = SC.SBS.CU.BEN.BANK.2
                                CALL STORE.END.ERROR
                            END
                            AF = SC.SBS.CU.BEN.ADDR
                            IF R.NEW(AF)<1,AV> AND R.NEW(SC.SBS.CU.BEN.BANK.1)<1,AV> AND R.NEW(SC.SBS.CU.BEN.BANK.2)<1,AV> THEN
                                AS = 1
                                ETEXT = 'NO INPUT IF BOTH BANKS ENTERED'
                                CALL STORE.END.ERROR
                            END
                        END ELSE        ;* CUSTOMER.ACC = VOSTRO
                            BEGIN CASE
                            CASE CUST.RET = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                                ETEXT = 'INPUT ONLY FOR OUR ACCOUNT'
                            CASE R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = DR.CODE
                                ETEXT = 'INPUT ONLY ALLOWED FOR PURCHASES'
                            CASE DEL.REC = PAY.CODE
                                ETEXT = 'INPUT NOT ALLOWED FOR "':R.NEW(SC.SBS.CU.DELIV.INSTR)<1,AV>:'" DEL. INSTR'
                            END CASE
                            IF ETEXT NE '' THEN   ;* BG_100010364
                                AF = SC.SBS.CU.BEN.BANK.1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.CU.BEN.BANK.2
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.CU.BEN.ADDR
                                AS = 1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.CU.BEN.ACCT
                                AS = 1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                            END         ;* BG_100010364
                        END
*
                        CUST.FLAG = 'C'
                        IF NOT(END.ERROR) THEN
                            IF COMI4 = 'CREDIT' THEN
                                TOTAL.CR.NET += R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                            END ELSE
                                TOTAL.DR.NET += R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                            END
                            CUST.NOM.TOTS<1,-1> = R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>
* GB9901144
                            AUTO.SETT.FIELD = SC.SBS.AUTO.CUST.SETT
                            ACC.FIELD = SC.SBS.CUST.ACC.NO
                            GOSUB BUILD.ENTRIES
                        END
                    NEXT AV
                    GOSUB CHECK.DEALER.BOOK.PRICE ;* CI_10039457 S/E
                    IF R.NEW(SC.SBS.BROKER.NO) THEN
                        AF.ASS1 = SC.SBS.BROKER.NO
                        AF.ASS2 = SC.SBS.BR.ACC.NO
                        AF.ASS3 = SC.SBS.BR.BROKER.COMM
                        AF.ASS4 = SC.SBS.BR.FOREIGN.FEE
                        AF.ASS5 = SC.SBS.BR.STAMP.TAX
                        AF.ASS6 = SC.SBS.BR.EBV.FEES
                        FOR AV = 1 TO NO.OF.BROKERS
                            OVE.ADDR = R.NEW(SC.SBS.BR.OVE.ADDR)<1,AV>
                            IF COUNT(OVE.ADDR,SM) + 1 GT 6 THEN
                                ETEXT = 'MAX 6 LINES ALLOWED'
                                AF = SC.SBS.BR.OVE.ADDR
                                CALL STORE.END.ERROR
                            END
                            IF NOT(END.ERROR) THEN
                                V$ERROR = '' ; BR.OVE.ADD = R.NEW(SC.SBS.BR.OVE.ADDR)<1,AV>
                                CARRIER = ''
                                CALL DBR('MESSAGE.CONTROL':FM:LD25.CARRIER,R.NEW(SC.SBS.BR.MESS.CONTROL)<1,AV>,CARRIER)
                                CONVERT SM TO VM IN BR.OVE.ADD
                                CALL CHECK.OVR.CARR(CARRIER,R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.OVE.ADD,V$ERROR)
                                IF V$ERROR THEN
                                    ETEXT = V$ERROR
                                    AF = SC.SBS.BR.MESS.CONTROL
                                    CALL STORE.END.ERROR
                                END
                            END
                            IF NOT(END.ERROR) THEN
*
                                BROKER.RECALC = 1
                                IF BROKER.RECALC THEN
                                    GOSUB UPDATE.NET.COUPON.TAX       ;* CI_10033208
                                    GOSUB RECALC.BROKER.CHARGES       ;*==
                                END
*
                                ENRIX = '' ; COMI2 = ''
                                COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS       ;*==
                                IF NEW.ISSUE.TRADE AND R.NEW(SC.SBS.SECURITY.CURRENCY) = LCCY AND R.SEC.MASTER<SC.SCM.COMPANY.DOMICILE> = 'CH' THEN
                                    CHARGES = R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> + R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> + R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> + R.NEW(SC.SBS.BR.FEES.MISC)<1,AV> + R.NEW(SC.SBS.CL.COMMISSION)<1,AV>
                                    NEW.ISSUE.STAMP.TAX = R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV>
                                    IF COMI4 EQ 'CREDIT' THEN
                                        NEW.ISSUE.STAMP.TAX = -NEW.ISSUE.STAMP.TAX
                                    END
                                END ELSE
                                    CHARGES = R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> + R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> + R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> + R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> + R.NEW(SC.SBS.BR.FEES.MISC)<1,AV> + R.NEW(SC.SBS.CL.COMMISSION)<1,AV>
                                    NEW.ISSUE.STAMP.TAX = 0
                                END
                                IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = "CLIENT" THEN        ;* ADD CHARGES
                                    IF COMI4 = 'CREDIT' THEN
* GB9801068
                                        R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                    END ELSE
                                        IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
* GB9801068
                                            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                        END ELSE
* GB9801068
                                            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES + R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                        END
                                    END
                                END ELSE
                                    IF COMI4 = 'CREDIT' THEN
                                        IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> THEN
* GB9801068
                                            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                        END ELSE
* GB9801068
                                            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES + R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                        END
                                    END ELSE
* GB9801068
                                        R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                                    END
                                END
                                LOCATE SC.SBS.BR.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
                                    T.SEQU<-1> = 'D':DISP.POS
                                END
                                YAMT = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
                                YCCY = R.NEW(SC.SBS.TRADE.CCY)
                                CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
                                IF R.NEW(SC.SBS.TRADE.CCY)<1,AV> = 'CHF' THEN
                                    CALL SC.CHF.ROUNDING(YAMT)        ;* CI_10037362 S/E
                                END
                                R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = YAMT
                                GOSUB CALC.BRKR.AM.DUE      ;*==
                                IF ETEXT THEN
                                    OLD.AF = AF
                                    AF = SC.SBS.BR.EX.RATE.ACC
                                    CALL STORE.END.ERROR
                                    AF = OLD.AF
                                END
                            END
                            IN.ACCT = R.NEW(SC.SBS.BR.ACC.NO)<1,AV> ; OUT.COMP = '' ; OUT.ACC.NO = '' ; RETURN.CODE = ''
                            CALL GET.NOSTRO('','SC',IN.ACCT,'','',OUT.COMP,OUT.ACC.NO,'','',RETURN.CODE,'')
                            COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                            GOSUB CHECK.TRANS     ;*==
                            CUST.RET = ''
                            CALL DBR('ACCOUNT':FM:AC.CUSTOMER,R.NEW(SC.SBS.BR.ACC.NO)<1,AV>,CUST.RET)
                            SDI.ID = R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>         ;* BG_10008063 s
                            CALL F.READ('F.SC.DEL.INSTR',SDI.ID,R.SC.DEL.INSTR,F.SC.DEL.INSTR,'')
                            DEL.REC = R.SC.DEL.INSTR<SC.DLI.TO.BE.RECD.OR.DEL>
                            PAY.CODE = R.SC.DEL.INSTR<SC.DLI.WITH.PAYMENT.FLAG> ;* BG_100008063 e
                            IF RETURN.CODE GE 0 AND R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = DR.CODE AND CUST.RET # R.NEW(SC.SBS.BROKER.NO)<1,AV> THEN     ;* BROKER.ACC = NOSTRO
                                IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = '' AND R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = '' AND R.NEW(SC.SBS.BR.BEN.ADDR)<1,AV> = '' THEN        ;* CI_10018686 S-E
                                    IF DEL.REC <> 'Y' OR PAY.CODE <> 'Y' THEN   ;* BG_100002230 S-E
                                        IN.CUSTOMER = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                                        RET.AGENT.CODE = ""
                                        OUT.CUSTOMER = ""
                                        OUT.INTER.CUST = ""
                                        OUT.INTER.ACCOUNT = ""
                                        OUT.ACCOUNT.NUMBER = ""
                                        IN.APPLICATION = 'SC'
                                        IN.AGENT = ""
*----------------------------------------------------
                                        CALL GET.AGENT(IN.CUSTOMER,R.NEW(SC.SBS.TRADE.CCY),IN.APPLICATION,IN.AGENT,"", "", "", "", "","","",OUT.CUSTOMER,OUT.ACCOUNT.NUMBER,"", "",OUT.INTER.CUST,OUT.INTER.ACCOUNT,RET.AGENT.CODE)
*----------------------------------------------------
                                        IF OUT.CUSTOMER AND R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = '' AND R.NEW(SC.SBS.BR.BEN.ADDR)<1,AV> = '' THEN      ;* CI_10002552 S-E  ;* CI_10017599 S-E
                                            R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = OUT.CUSTOMER
                                        END       ;* CI_10002552 S/E
* CI_10001487 Starts
                                        IF OUT.ACCOUNT.NUMBER AND NOT(R.NEW(SC.SBS.BR.BEN.ACCT)<1,AV>) AND R.NEW(SC.SBS.BR.BEN.ADDR)<1,AV> = '' THEN  ;* CI_10004843 S-E  ;* CI_10017599 S-E
                                            AS = 1
                                            R.NEW(SC.SBS.BR.BEN.ACCT)<1,AV,AS> = OUT.ACCOUNT.NUMBER
                                        END
* CI_10001487 Ends
* CI_10004843 S
                                        IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> THEN
                                            IN.CUSTOMER = R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV>
                                            RET.AGENT.CODE = ""
                                            OUT.CUSTOMER = ""
                                            OUT.INTER.CUST = ""
                                            OUT.INTER.ACCOUNT = ""
                                            OUT.ACCOUNT.NUMBER = ""
                                            IN.APPLICATION = 'SC'
                                            IN.AGENT = ""
                                            CALL GET.AGENT(IN.CUSTOMER,R.NEW(SC.SBS.TRADE.CCY),IN.APPLICATION,IN.AGENT,"","","","","","","",OUT.CUSTOMER,OUT.ACCOUNT.NUMBER,"","",OUT.INTER.CUST,OUT.INTER.ACCOUNT,RET.AGENT.CODE)
                                            IF OUT.CUSTOMER NE R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> AND NOT(R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV>) AND R.NEW(SC.SBS.BR.BEN.ADDR)<1,AV> = '' THEN     ;* CI_10017599 S/E
                                                R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = OUT.CUSTOMER
                                            END
                                        END
* CI_10004843 E
                                    END ;* CI_10018686 S/E
                                END     ;* CI_10018686 S/E
* CI_10018436 S
                                IF (R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> NE '' AND R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> NE '') AND (R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> EQ R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV>) THEN        ;* CI_10018596 S/E
                                    R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = ''      ;* CI_10018596 S/E
                                END
* CI_10018436 E
* CI_10003099 S
                                PAYMENT.FLAG = ''
                                CALL DBR('SC.DEL.INSTR':FM:SC.DLI.WITH.PAYMENT.FLAG,R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>,PAYMENT.FLAG)
                                IF R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> = '' AND PAYMENT.FLAG NE 'Y' AND R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> = '' AND R.NEW(SC.SBS.BR.BEN.ADDR)<1,AV> = '' THEN    ;* CI_10007746 -HD0303052 S/E
* CI_10003099 E
                                    ETEXT = 'INPUT MISSING'
                                    AF = SC.SBS.BR.BEN.BANK.1
                                    CALL STORE.END.ERROR
                                END

                                AF = SC.SBS.BR.BEN.ADDR
                                IF R.NEW(AF)<1,AV> AND R.NEW(SC.SBS.BR.BEN.BANK.1)<1,AV> AND R.NEW(SC.SBS.BR.BEN.BANK.2)<1,AV> THEN
                                    AS = 1
                                    ETEXT = 'NO INPUT IF BOTH BANKS ENTERED'
                                    CALL STORE.END.ERROR
                                END
                            END ELSE    ;* BROKER.ACC = VOSTRO
                                BEGIN CASE
                                CASE CUST.RET = R.NEW(SC.SBS.BROKER.NO)<1,AV>
                                    ETEXT = 'INPUT ONLY FOR OUR ACCOUNT'
                                CASE R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = CR.CODE
                                    ETEXT = 'INPUT ONLY ALLOWED FOR SALES'
                                CASE DEL.REC = PAY.CODE
                                    ETEXT = "INPUT NOT ALLOWED FOR & DEL. INSTR":FM:R.NEW(SC.SBS.BR.DELIV.INSTR)<1,AV>
                                END CASE
                                AF = SC.SBS.BR.BEN.BANK.1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.BR.BEN.BANK.2
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.BR.BEN.ADDR
                                AS = 1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                                AF = SC.SBS.BR.BEN.ACCT
                                AS = 1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    CALL STORE.END.ERROR
                                END
                            END
                            IF RETURN.CODE LT 0 THEN
                                AF = SC.SBS.CUST.REMARKS
                                AS = 1
                                IF R.NEW(AF)<1,AV> NE '' THEN
                                    ETEXT = 'INPUT ONLY FOR OUR ACCOUNT'
                                    CALL STORE.END.ERROR
                                END
                            END
                            CUST.FLAG = 'BC'
                            IF NOT(ID.OLD) OR (R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES') OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN         ;* BG_10008102 /S/E
                                IF NOT(END.ERROR) THEN
                                    IF COMI4 = 'CREDIT' THEN
                                        TOTAL.CR.NET += R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV>
                                    END ELSE
                                        TOTAL.DR.NET += R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV>
                                    END
                                    AUTO.SETT.FIELD = SC.SBS.AUTO.BROK.SETT
                                    ACC.FIELD = SC.SBS.BR.ACC.NO
                                    GOSUB BUILD.ENTRIES
                                END
                            END         ;* BG_10008102 /S/E
                            AF = SC.SBS.BR.NO.NOM

                            NO.NOMS = DCOUNT(R.NEW(AF)<1,AV>,SM)
                            FOR AS = 1 TO NO.NOMS
                                IF TRADING.UNITS THEN
* GB0000217 S
                                    IF R.NEW(SC.SBS.ODD.LOT.TRADE) THEN
                                        SECURITY.NO.PARAM = R.NEW(SC.SBS.SECURITY.CODE):FM:'ODD.LOT'
                                    END ELSE
                                        SECURITY.NO.PARAM = R.NEW(SC.SBS.SECURITY.CODE)
                                    END
                                    CALL SC.VAL.UNITS(SECURITY.NO.PARAM,R.NEW(AF)<1,AV,AS>,'B',YCURR.NO)      ;*GB0000454
* GB0000217 E
                                END
                            NEXT AS     ;* Broker Nominal Loop
                        NEXT AV
                    END
*
* GB9700626
                    AF = SC.SBS.CONSOL.RATE
                    RATE.COUNT = DCOUNT(R.NEW(SC.SBS.SETTLE.CURR),VM)
                    FOR AV = 1 TO RATE.COUNT
                        IF R.NEW(AF)<1,AV> THEN
                            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                            CCY1 = R.NEW(SC.SBS.SETTLE.CURR)<1,AV>
                            Y1 = 1 ; Y2 = "" ; Y3 = "" ; Y4 = ""
                            Y5 = "" ; Y6 = "" ; RET.CODE = ""
                            GOSUB CALC.EXCHRATE   ;*==
                            IF E > "" THEN
                                ETEXT = E
                                CALL STORE.END.ERROR
                            END
                            CURRENCY.ID = Y3      ;* BG_100010567
                            GOSUB GET.CURRENCY.DETAILS      ;* BG_100010567
                            IF RATE.ALLOWANCE = "" THEN
                                RATE.ALLOWANCE=R.COMPANY(EB.COM.DEFAULT.RATE.ALLOW)
                            END
                            IF Y4 THEN
                                TOLERANCE=((R.NEW(AF)<1,AV>-Y4)/Y4)*100         ;* express tolerance as percentage of calculated rate
                                IF ABS(TOLERANCE) > RATE.ALLOWANCE THEN
                                    TEXT = "RATE OUTSIDE TOLERANCE"
                                    CALL STORE.OVERRIDE(YCURR.NO)
                                    IF TEXT = 'NO' THEN
                                        ETEXT = "RATE OUTSIDE TOLERANCE"
                                        CALL STORE.END.ERROR
                                    END
                                    TEXT = ""
                                END
                            END
*
* GB9700626
                        END ELSE
                            IF R.NEW(SC.SBS.SETTLE.CURR)<1,AV> THEN
                                ETEXT = 'INPUT MISSING'
                                CALL STORE.END.ERROR
                            END
*
                        END
                    NEXT AV
* CI_10011249 S
                    IF NOT(END.ERROR) THEN
                        IF R.NEW(SC.SBS.NET.TRADE)[1,1] EQ 'P' THEN
                            PRORATA = @TRUE
                            GOSUB PRORATA.COMM    ;*==
                        END
                    END
* CI_10011249 E
                    IF NOT(END.ERROR) THEN GOSUB CHECK.INTR.AMTS      ;*==
                    IF NOT(ID.OLD) OR (R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES') OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN       ;* BG_10008102 /S/E
                        IF NOT(END.ERROR) THEN
                            MARKET.PL.AMT = TOTAL.DR.NET - TOTAL.CR.NET
                            IF R.NEW(SC.SBS.TREASURY.PRICE) THEN
                                GOSUB POST.TREASURY.PL
                                GOSUB POST.MARKET.PL
                                MARKET.PL.AMT = ''
                            END
                            TRANS.CODE.EQUAL = '' ;* CI_10015648
                            IF MARKET.PL.AMT THEN
                                IF MARKET.PL.AMT LE -1 OR MARKET.PL.AMT GE 1 THEN
                                    GRAND.TOT.NOM = 0
                                    FOR AV = 1 TO NO.OF.CUSTOMERS
* CI_10006386 S
* If only one broker is involved then PL  should
* be booked only for that particular customer
*
                                        IF NOT(DEALER.BOOK.FLAG<1,AV>) THEN
                                            IF DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM) EQ 1 AND DCOUNT(R.NEW(SC.SBS.BR.NO.NOM)<1,1>,SM) EQ 1 AND DCOUNT(R.NEW(SC.SBS.CUST.NO.NOM)<1,AV>,SM) EQ 1 AND R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> NE R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> THEN  ;* CI_10015648
                                                TOT.CUST.PRICE = SUM(R.NEW(SC.SBS.CUST.PRICE)<1,AV>)
                                                TOT.BROK.PRICE = SUM(R.NEW(SC.SBS.BR.PRICE)<1,1>)
                                                IF TOT.CUST.PRICE NE TOT.BROK.PRICE THEN
                                                    GRAND.TOT.NOM += CUST.NOM.TOTS<1,AV>
                                                END ELSE
                                                    CUST.NOM.TOTS<1,AV> = ''
                                                END
                                            END ELSE
                                                GRAND.TOT.NOM += CUST.NOM.TOTS<1,AV>
* CI_10015648 S
* If suppose there are 2 customer and 1 broker
* then there are chances where one broker and
* one customer may buy and another customer may sell.
* In that case P and L will be prorated among customers
*
                                                IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> EQ R.NEW(SC.SBS.BR.TRANS.CODE)<1,1> THEN
                                                    TRANS.CODE.EQUAL = 1
                                                END
* CI_10015648 E
                                            END
                                        END

* CI_10006386 E
                                    NEXT AV
                                    CUST.FLAG = 'PL'
                                    MARKET.CAT = R.STD.SEC.TRADE<SC.SST.MARKET.PL.CAT>
                                    IF MARKET.PL.AMT > 0 THEN
                                        MARKET.PL.CODE = R.STD.SEC.TRADE<SC.SST.MARKET.PL.DB.CODE>
                                        MARKET.PL.AMT = (-1) * MARKET.PL.AMT
                                    END ELSE
                                        MARKET.PL.CODE = R.STD.SEC.TRADE<SC.SST.MARKET.PL.CR.CODE>
                                        MARKET.PL.AMT = ABS(MARKET.PL.AMT)
                                    END
                                    FOR AV = 1 TO NO.OF.CUSTOMERS
                                        IF CUST.NOM.TOTS<1,AV> AND NOT(DEALER.BOOK.FLAG<1,AV>) THEN
* CI_10015648 S
* P and L prorating won't happen only when
* 1. There is one broker invloved
* 2. When all cust trans code are same
* 3. when there is no expansion of broker price fields

                                            IF DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM) EQ 1 AND DCOUNT(R.NEW(SC.SBS.BR.NO.NOM)<1,1>,SM) EQ 1 AND NOT(TRANS.CODE.EQUAL) THEN
                                                PL.CALCULATION = 1
                                                AFX = SC.SBS.CUST.NO.NOM
                                                AFX1 = SC.SBS.CUST.PRICE
                                                AFX4 = SC.SBS.CUST.TOT.NOM
                                                GOSUB CALC.NOM.AMT
                                                MRKT.PL.AMT = GROSS.AMT
                                            END ELSE
* CI_10015648 E
                                                MRKT.PL.AMT = (MARKET.PL.AMT * CUST.NOM.TOTS<1,AV>)/(GRAND.TOT.NOM)
                                            END   ;* CI_10015648
                                            CUST.COMMISSIONS<10,AV> = MARKET.CAT
* CI_10016249 S
* Added the validation to check the value of MRKT.PL.AMT in TRADE.CCY and if that value is NE '0' then
* call @ACC.ROUTINE else SKIP this routine to Supress raising of '0' amt in PL Entries.
                                            CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),MRKT.PL.AMT)
                                            IF MRKT.PL.AMT = 0 THEN
                                                GOTO SKIP.ACC.RTN
                                            END
* CI_10016249 E
                                            CUST.COMMISSIONS<11,AV> = MRKT.PL.AMT
                                            CUST.COMMISSIONS<12,AV> = MARKET.PL.CODE
                                            AUTO.SETT.FIELD = SC.SBS.AUTO.CUST.SETT
                                            ACC.FIELD = SC.SBS.CUST.ACC.NO
                                            GOSUB BUILD.ENTRIES
                                        END
SKIP.ACC.RTN:       * CI_10016249/S/E
                                    NEXT AV
                                    PL.CALCULATION = ''     ;* CI_10015648
*
** CLIENT OR NO CUSTOMERS MARKET PROFIT
*
                                    GRAND.BROKER.TOT.NOM = 0
                                    BROKER.NOM.TOTS = ''
                                    FOR AV = 1 TO NO.OF.BROKERS
                                        BROKER.NOM.TOTS<1,AV> = R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>
                                        IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = 'CLIENT' THEN
                                            GRAND.BROKER.TOT.NOM += BROKER.NOM.TOTS<1,AV>
                                        END
                                    NEXT AV
*
                                    FOR AV = 1 TO NO.OF.BROKERS
                                        IF BROKER.NOM.TOTS<1,AV> AND R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = 'CLIENT' THEN
                                            MRKT.PL.AMT = (MARKET.PL.AMT * BROKER.NOM.TOTS<1,AV>/GRAND.BROKER.TOT.NOM)
                                            CUST.COMMISSIONS<10,AV> = MARKET.CAT
* CI_10016249 S
* Added the validation to check the value of MRKT.PL.AMT in TRADE.CCY and if that value is NE '0' then
* call @ACC.ROUTINE else SKIP this routine to Supress raising of '0' amt in PL Entries.
                                            CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),MRKT.PL.AMT)
                                            IF MRKT.PL.AMT = 0 THEN GOTO SKIP.ACC.RTN1
* CI_10016249 E
                                            CUST.COMMISSIONS<11,AV> = MRKT.PL.AMT
                                            CUST.COMMISSIONS<12,AV> = MARKET.PL.CODE
                                            AUTO.SETT.FIELD = SC.SBS.AUTO.BROK.SETT
                                            ACC.FIELD = SC.SBS.BR.ACC.NO
                                            GOSUB BUILD.ENTRIES
                                        END
SKIP.ACC.RTN1:      * CI_10016249/S/E
                                    NEXT AV
*
                                END
                            END
                            CUST.FLAG = 'BN'
                            AUTO.SETT.FIELD = SC.SBS.AUTO.BROK.SETT
                            ACC.FIELD = SC.SBS.BR.ACC.NO
                            GOSUB BUILD.ENTRIES
                        END
                    END       ;* BG_10008102 /S/E
                END
                IF NOT(END.ERROR) THEN  ;* CI_10023427
                    COMMI.COUNT = DCOUNT(R.NEW(SC.SBS.CU.COMMISSION),VM)
                    AF = SC.SBS.CU.COMMISSION
                    FOR AV = 1 TO COMMI.COUNT
                        IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> GT R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> THEN
                            TEXT = 'COMMISSION AMOUNT GREATER THAN TRADE'
                            CALL STORE.OVERRIDE(YCURR.NO)
                            IF TEXT = 'NO' THEN
                                ETEXT = 'COMMISSION AMOUNT GREATER THAN TRADE'
                                CALL STORE.END.ERROR
                                TEXT = ''
                            END
                        END
                    NEXT AV
                END ;* CI_10023427
                AF = SC.SBS.MATURITY.DATE
                IF R.NEW(AF) AND R.NEW(AF) < TODAY THEN
                    TEXT = 'MATURITY.DATE LESS THEN TODAY'
                    AF = SC.SBS.SECURITY.CODE
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT = 'NO' THEN
                        ETEXT = 'MATURITY.DATE LESS THEN TODAY'
                        CALL STORE.END.ERROR
                        TEXT = ''
                    END
                END
                IF R.NEW(SC.SBS.PRICE.TYPE) NE '' THEN
                    DISC.INSTR = ''
                    CALL DBR('PRICE.TYPE':FM:SC.PRT.DISC.INSTRUMENT,R.NEW(SC.SBS.PRICE.TYPE),DISC.INSTR)
                    IF DISC.INSTR[1,1] = 'Y' THEN
                        IF R.NEW(SC.SBS.VALUE.DATE) GT R.NEW(SC.SBS.MATURITY.DATE) THEN
                            AF = SC.SBS.VALUE.DATE
                            ETEXT = 'VALUE DATE IS GREATER THAN MATURITY DATE'
                            CALL STORE.END.ERROR
                        END
                    END
                END
*
                AF = SC.SBS.TRADE.TIME
                IF TRADE.TIME.FLAG = 'Y' THEN
                    IF NOT(R.NEW(AF)) THEN
                        R.NEW(AF) = TIME()
                        R.NEW(AF) = OCONV(R.NEW(AF),'MTS')  ;* EN_10000316 Change format to include seconds
                    END
* GB9901164 S
                    IF R.NEW(SC.SBS.CG.TRADE.TIME) EQ '' THEN
                        R.NEW(SC.SBS.CG.TRADE.TIME) = R.NEW(AF)[1,5]  ;* EN_10000316 Format of this field to be HH:MM
                    END
* GB9901164 E
                END
* EN_10000316 S New crossval for new field
* CI_10002404 s
                AF = SC.SBS.BR.TRD.TIME
                IF TRADE.TIME.FLAG = 'Y' THEN
                    NO.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                    FOR BRK.CNT = 1 TO NO.BROKERS
                        NO.BR.NOM = DCOUNT(R.NEW(SC.SBS.BROKER.NO)<1,BRK.CNT>,SM)
                        FOR BR.NOM.CNT = 1 TO NO.BR.NOM
                            IF R.NEW(AF)<1,BRK.CNT,BR.NOM.CNT> = "" THEN
                                R.NEW(AF)<1,BRK.CNT,BR.NOM.CNT> = OCONV(TIME(),"MTS")
                            END
                        NEXT BR.NOM.CNT
                    NEXT BRK.CNT
                END
                IF R.NEW(AF)<1,1,1> NE '' THEN    ;* default value of BR.TRD.TIME to TRADE.TIME
                    IF R.NEW(SC.SBS.TRADE.TIME) = '' THEN
                        R.NEW(SC.SBS.TRADE.TIME) = R.NEW(AF)<1,1,1>
                    END
                END
* CI_10002404 e
* EN_10000316 E
* GB0000350 * cross check for PAYMENT.REQD - BROKER.ADVICE.REQD - DEPOT.ADVICE.REQD
                AF = R.NEW(SC.SBS.PAYMENT.REQD)
                IF R.NEW(SC.SBS.PAYMENT.REQD) = '' THEN
                    R.NEW(SC.SBS.PAYMENT.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>
                END
*
                AF = R.NEW(SC.SBS.BROKER.ADVICE.REQD)
                IF R.NEW(SC.SBS.BROKER.ADVICE.REQD) = '' THEN
                    R.NEW(SC.SBS.BROKER.ADVICE.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>
                END
*
                AF = R.NEW(SC.SBS.DEPOT.ADVICE.REQD)
                IF R.NEW(SC.SBS.DEPOT.ADVICE.REQD) = '' THEN
                    R.NEW(SC.SBS.DEPOT.ADVICE.REQD) = R.SC.PARAMETER<SC.PARAM.ADVICE.DEFAULT>
                END
*
* GB0000350 * cross check for PAYMENT.REQD - BROKER.ADVICE.REQD - DEPOT.ADVICE.REQD

* GB9701059 +
                AF = SC.SBS.CUM.EX.IND
                CALL DUP      ;* CI_10001859 - S/E
                INDICATORS = DCOUNT(R.NEW(SC.SBS.CUM.EX.IND),VM)
                FOR AV = 1 TO INDICATORS
                    IF R.NEW(AF)<1,AV> NE '' THEN
                        ENRICH.NAME = ''
                        VALIDATION = 'DE.TRANSLATION':FM:DE.TRA.DESCRIPTION:FM:'L..S'
                        CALL DBR(VALIDATION,'SW':R.NEW(AF)<1,AV>,ENRICH.NAME)
                        IF ETEXT THEN
                            E = 'INVALID CUM OR EX INDICATOR'
                            CALL STORE.END.ERROR
                        END
                    END
                NEXT AV
* GB9701059 -
*EN10000184-S
                AF = SC.SBS.ODD.LOT.TRADE
                CT.POS = 0
                SMID = R.NEW(SC.SBS.SECURITY.CODE) ; R.SECURITY.MASTER = ''
                CALL F.READ('F.SECURITY.MASTER',SMID,R.SECURITY.MASTER,F.SECURITY.MASTER,ER)
                IF R.NEW(AF) = 'YES' THEN
                    FOR AV = 1 TO NO.OF.CUSTOMERS
                        SC.TRA.CODE.ID = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>    ;* BG_100010567
                        GOSUB GET.SC.TRANSACTION.DETAILS    ;* BG_100010567
                        IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.TRADE> = '' THEN
                            ETEXT = 'Order lot not allowed for this security'
                            CALL STORE.END.ERROR
                        END ELSE
                            IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.TRADE> = 'BUY' THEN
                                IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = DR.CODE THEN
                                    ETEXT = 'Only buy is allowed for this security'
                                    CALL STORE.END.ERROR
                                END
                            END ELSE
                                IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.TRADE> = 'SELL' THEN
                                    IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = CR.CODE THEN
                                        ETEXT = 'Only sell lot order allowed for this security'
                                        CALL STORE.END.ERROR
                                    END
                                END
                            END
                            TRADING.UNITS = 0
                            IF R.NEW(SC.SBS.SECURITY.CODE) THEN
                                TRADING.UNITS = R.SECURITY.MASTER<SC.SCM.TRADING.UNITS>
                                ODD.LOT.UNIT.CHECK = ''
                                IF R.NEW(SC.SBS.ODD.LOT.TRADE) = 'YES' THEN
                                    IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.UNITS> OR R.SEC.MASTER<SC.SCM.ODD.LOT.UNITS> = 0 THEN     ;* CI_10003743 S/E
                                        TRADING.UNITS = R.SECURITY.MASTER<SC.SCM.ODD.LOT.UNITS>
                                        ODD.LOT.UNIT.CHECK = '1'
                                    END
                                END
                            END
                            IF R.SC.PARAMETER<SC.PARAM.OVER.TRADE.UNIT> = "YES" ELSE
                                IF TRADING.UNITS THEN
                                    NO.CUST.NOMS = DCOUNT(R.NEW(SC.SBS.CUST.NO.NOM)<1,AV>,SM)
                                    FOR AS = 1 TO NO.CUST.NOMS
                                        RATIO.OF.TU = R.NEW(SC.SBS.CUST.NO.NOM)<1,AV,AS> / TRADING.UNITS
                                        IF R.NEW(SC.SBS.CUST.NO.NOM)<1,AV,AS> < TRADING.UNITS OR FIELD(RATIO.OF.TU,'.',2) THEN
                                            IF ODD.LOT.UNIT.CHECK THEN
                                                ETEXT = 'INVALID - NOMINAL < ODD LOT UNITS'
                                            END ELSE
                                                ETEXT = 'INVALID - NOMINAL < TRADING UNITS'
                                            END
                                            CALL STORE.END.ERROR
                                        END
                                    NEXT AS
                                END
                            END
                        END
                    NEXT AV
**
                    IF R.NEW(SC.SBS.BROKER.NO) THEN
                        IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.BROKER> THEN
                            CT.BK = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                            FOR IND.BK = 1 TO CT.BK
                                LOCATE R.NEW(SC.SBS.BROKER.NO)<1,IND.BK> IN R.SECURITY.MASTER<SC.SCM.ODD.LOT.BROKER,1> SETTING ODD.POS ELSE ODD.POS = ''
                                IF NOT(ODD.POS) THEN
                                    ETEXT = 'Order not allowed for this broker'
                                    IND.BK = CT.BK + 1
                                END
                            NEXT IND.BK
                            IF ETEXT THEN
                                CALL STORE.END.ERROR
                            END
                        END
                    END
**
                    IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
                        IF R.SECURITY.MASTER<SC.SCM.ODD.LOT.EXCH> NE '' THEN
                            LOCATE R.NEW(SC.SBS.STOCK.EXCHANGE) IN R.SECURITY.MASTER<SC.SCM.ODD.LOT.EXCH,1> SETTING ODD.POS ELSE ODD.POS = ''
                            IF NOT(ODD.POS) THEN
                                ETEXT = 'Order not allowed for this stock exchange'
                                CALL STORE.END.ERROR
                            END
                        END
                    END
                END
*EN10000184-E
* EN_10001090 s
                AF = SC.SBS.CUST.SEC.ACC
* error message processing
                GOSUB GET.CGT.PROCESS.FLAG
                IF CGT.FLAG THEN
                    PORTF.NO.FLD.CNT = DCOUNT(R.NEW(SC.SBS.CUST.SEC.ACC),VM)
                    FOR STEP.CNT = 1 TO PORTF.NO.FLD.CNT
                        PORTF.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,STEP.CNT>
                        SEC.NO = R.NEW(SC.SBS.SECURITY.CODE)
                        CUST.NO = FIELD(PORTF.NO,"-",1)
                        CG.ID = ""
                        CALL SC.GET.BASE.ID(CUST.NO,SEC.NO,PORTF.NO,CG.ID)
                    NEXT STEP.CNT

                    BEGIN CASE          ;* BG_100003057 case statement moved
                    CASE CGT$PORTFOLIO.GROUPING.ERROR NE ""
                        FIELD.ERR.CNT = DCOUNT(CGT$PORTFOLIO.GROUPING.ERROR,FM)
                        FOR REPEAT.ERROR = 1 TO FIELD.ERR.CNT
                            ETEXT = CGT$PORTFOLIO.GROUPING.ERROR<REPEAT.ERROR>
* BG_100002477 s
                            NO.SPCS = COUNT(ETEXT," ")
                            YCUST.NO = FIELD(ETEXT," ",NO.SPCS+1)
                            LOCATE YCUST.NO IN R.NEW(SC.SBS.CUSTOMER.NO)<1,1> SETTING AV ELSE AV = 1
* BG_100002477 e
                            CALL STORE.END.ERROR
                        NEXT REPEAT.ERROR
* override processing
                    CASE CGT$PORTFOLIO.GROUPING.OVERRIDE NE ""
                        NO.OVES = DCOUNT(CGT$PORTFOLIO.GROUPING.OVERRIDE,FM)
                        FOR OVE.CNT = 1 TO NO.OVES
                            TEXT = CGT$PORTFOLIO.GROUPING.OVERRIDE<OVE.CNT>
                            CALL STORE.OVERRIDE(YCURR.NO)
                            IF TEXT = "NO" THEN
                                JOURNAL.BYPASS = ''
                                CALL TRANSACTION.ABORT
                                TEXT = ''
                                V.UPD.FLAG = ''
                                GOTO ID.INPUT
                            END
                        NEXT OVE.CNT
                    END CASE
                END
* EN_10001090 e
* GB9701451
* EN10000360 - S
* The foll lines are commented off, as Portfolio Constraint can
* now be applied to more than 1 Customer SEC TRADE.
                AF = SC.SBS.PORT.CONST.NO
                FLAG.ERROR = ''
                CONSTRAINT.FLAG = ''
                NO.OF.CUST = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                FOR I = 1 TO NO.OF.CUST
                    CHECKFILE1 = 'PORTFOLIO.CONSTRAINT':FM:0
* CI_10012115
                    PORTFOLIO.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,I>
                    MYLIST = '' ; READ.ERROR = ''
                    GOSUB GET.CONSTRAINT.LIST
                    IF MYLIST = '' THEN
                        MYLIST = ID.COMPANY
* Two lines removed. ; * CI_10037228
                    END
* CI_10014244 E
                    LOOP
                        REMOVE PORT.NO FROM MYLIST SETTING MORE
                    WHILE PORT.NO:MORE DO
                        IF NOT (FLAG.ERROR) THEN
                            CALL DBR(CHECKFILE1,PORT.NO,YENRI)
                            PC.NO = PORT.NO
                            GOSUB GET.PORT.CONST.NO
* CI_10037724 - updating portfolio.constraint field
* at this stage is removed
                        END
                    REPEAT
                NEXT I
* EN10000360 - E
*
* EN_10001823 S
                AF = SC.SBS.TO.CONTRA.REF
*
                IF R.NEW(AF) THEN
                    SEC.CODE = ''
                    CALL DBR('SEC.TRADE':FM:SC.SBS.SECURITY.CODE,R.NEW(AF),SEC.CODE)
                    IF SEC.CODE THEN
                        IF R.NEW(SC.SBS.SECURITY.CODE) NE SEC.CODE THEN
                            ETEXT = 'CONTRA Transaction not allowed - SECURITY.CODE is different'
                            CALL STORE.END.ERROR
                        END
                    END ELSE
                        ETEXT = 'INVALID SEC.TRADE ID'
                        CALL STORE.END.ERROR
                    END
                END
*
* EN_10001823 E
* EN_10001841 S
                AF = SC.SBS.BULK.PROCESSING
                GOSUB BULK.PROCESSING.REQUIRED
                IF R.NEW(AF) = '' THEN
                    IF BULK.PROCESSING = @TRUE THEN
                        R.NEW(AF) = 'YES'
                    END ELSE
                        R.NEW(AF) = 'NO'
                    END
                END

                IF BULK.PROCESSING = @TRUE AND R.NEW(AF) = 'YES' THEN
                    TEXT = 'BULK.PROCESSING'
                    CALL STORE.OVERRIDE(YCURR.NO) ;* BG_100004606 s/e
                END
                IF BULK.PROCESSING = @FALSE AND R.NEW(AF) = 'YES' THEN
                    TEXT = 'NO.BULK.PROCESSING'
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT = 'Y' THEN R.NEW(AF) = 'NO'
                END
                IF BULK.PROCESSING = @TRUE AND R.NEW(AF) = 'NO' THEN  ;* BG_100004389 S
                    TEXT = 'ELIGIBLE.FOR.BULK.PROCESSING'
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT = 'Y' THEN BULK.PROCESSING = @FALSE       ;* BG_100004612 s/e
                END ;* BG_100004389 E
* EN_10001841 - E
* EN_10002336 S - Moved EN_10000836 and EN_10001823 from being called
* called after calls to SC.TRANS.UPDATE, to here.
* EN_10000836 S
* THIS PART IS ADDED FOR RECALCULATING THE CONSOL.AMT
                AF = SC.SBS.CONSOL.RATE
                CALL BLA.BLA
                IF COMI THEN
                    ACCOUNT.COUNT = DCOUNT(R.NEW(SC.SBS.CU.ACCOUNT.CCY),VM)
                    FOR CNT = 1 TO ACCOUNT.COUNT
                        IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> NE R.NEW(SC.SBS.TRADE.CCY) THEN
                            FOUND = @TRUE ; POSN = ''
                            LOCATE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> IN R.NEW(SC.SBS.SETTLE.CURR)<1,1> BY 'AR' SETTING POSN ELSE FOUND = @FALSE
                            IF FOUND THEN
                                IF R.NEW(SC.SBS.CONSOL.RATE)<1,POSN> NE R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,CNT> THEN
                                    IF R.NEW(SC.SBS.SETTLE.AMT)<1,POSN> THEN    ;* BG_100010567
* when coming through OFS this field is not set but consol.amt is set correctly, so don't do the subtract
                                        R.NEW(SC.SBS.CONSOL.AMT)<1,POSN> -= R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CNT>
                                    END ;* BG_100010567
                                    Y4 = R.NEW(SC.SBS.CONSOL.RATE)<1,POSN>
                                    Y1 = R.NEW(SC.SBS.CONSOL.AMT)<1,POSN>
                                    CCY1 = R.NEW(SC.SBS.TRADE.CURR)<1,POSN>
                                    CCY2 = R.NEW(SC.SBS.SETTLE.CURR)<1,POSN>
                                    Y2 = "" ; Y3 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                                    GOSUB CALC.EXCHRATE     ;*==
                                    IF R.NEW(SC.SBS.SETTLE.CURR)<1,POSN> = 'CHF' THEN CALL SC.CHF.ROUNDING(Y2)
                                    R.NEW(SC.SBS.SETTLE.AMT)<1,POSN> = Y2
                                END
                            END
                        END ELSE        ;* CI_10034755 S
                            R.NEW(AF) = ''
                        END   ;* CI_10034755 E
                    NEXT CNT
                END
* EN_10000836 E
*
* EN_10001823 S
*
                AF = SC.SBS.TO.CONTRA.REF
                IF ID.OLD THEN
                    OVE.MESS = ''
                    IF R.NEW(AF) THEN
                        OVE.MESS = 'This is Contra Trade'
                    END
                    IF OVE.MESS THEN
                        TEXT = OVE.MESS
                        CALL STORE.OVERRIDE(YCURR.NO)
                        IF TEXT = 'NO' THEN
                            TEXT = ''
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END
                END
*
                IF R.NEW(AF) THEN
                    SEC.CODE = ''
                    CALL DBR('SEC.TRADE':FM:SC.SBS.SECURITY.CODE,R.NEW(AF),SEC.CODE)
                    IF SEC.CODE THEN
                        IF R.NEW(SC.SBS.SECURITY.CODE) NE SEC.CODE THEN
                            ETEXT = 'CONTRA Transaction not allowed - SECURITY.CODE is different'
                            CALL STORE.END.ERROR
                        END
                    END ELSE
                        ETEXT = 'INVALID SEC.TRADE ID'
                        CALL STORE.END.ERROR
                    END
                END
*
                AF = SC.SBS.CONTRA.BY.REF
                IF ID.OLD THEN
                    OVE.MESS = ''
                    IF R.NEW(AF) THEN
                        OVE.MESS = 'This Trade has a CONTRA Trade'
                    END
                    IF OVE.MESS THEN
                        TEXT = OVE.MESS
                        CALL STORE.OVERRIDE(YCURR.NO)
                        IF TEXT = 'NO' THEN
                            TEXT = ''
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END
                END

* EN_10001823 E
* EN_10002336 E
* CALL STORE.OVERRIDE IF ACCOUNT CCYS ARE DIFFERENT TO THE
* TRADE CURRENCY.
*
                IF NOT(END.ERROR) THEN
                    FOR CUSNO = 1 TO NO.OF.CUSTOMERS
                        IF R.NEW(SC.SBS.TRADE.CCY) NE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CUSNO> THEN
                            OVE.TEXT = "ACCOUNT CCY FOR SEC.ACC & NOT THE SAME AS TRADE.CCY":FM:R.NEW(SC.SBS.CUST.SEC.ACC)<1,CUSNO>
                            TEXT = OVE.TEXT
                            AV = CUSNO
                            CALL STORE.OVERRIDE(YCURR.NO)
                            IF TEXT = 'NO' THEN
                                AF = SC.SBS.CUST.ACC.NO     ;* CI_10018505 S/E
                                ETEXT = OVE.TEXT
                                CALL STORE.END.ERROR
                                TEXT = ''
                            END
                        END
                    NEXT CUSNO
                END
                LOCAL6 = ''
                IF END.ERROR = "" THEN
                    CHANGE.MADE = 0
                    MY.ARRAY = ''
* CHECK THAT THE STATUS IS NOT AT 'HOLD'
                    IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] # 'R' AND R.NEW(SC.SBS.RECORD.STATUS)[2,3] # "HLD" THEN
                        FOR XX = 1 TO V
                            IF R.NEW.LAST(SC.SBS.SECURITY.CODE) THEN
                                MY.ARRAY<XX> = R.NEW.LAST(XX)
                            END ELSE XX = V
                        NEXT XX
                        IF MY.ARRAY<1> THEN
* No need to consider override and other irrelevant fields.
                            FOR XX = 1 TO V - 10  ;* CI_10017663 SE
                                IF R.NEW(XX) # R.NEW.LAST(XX) THEN CHANGE.MADE = 1 ; XX = V
                            NEXT XX
                            IF CHANGE.MADE THEN
                                MAT LOCALI = ''
                                MAT LOCALI = MAT R.NEW
*
                                MAT R.NEW = MAT R.NEW.LAST
                                R.NEW(V-9) = LOCALI(V-9)    ;* GB9801144 Keep current overrides
                                ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
                                R.NEW(SC.SBS.RECORD.STATUS) = 'RNAU'
*
** Pass an additional multi value in the MY.MESSAGE parameter
** to indicate to the called routine the action desired
*
                                MY.MESSAGE = 'AUT':FM:'DI'
                                CALL SC.TRANS.UPDATE(MY.MESSAGE)
                                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                                LOCALI(V-9) = R.NEW(V-9)    ;* GB9800465
                                MAT R.NEW = MAT LOCALI
                            END
                        END ELSE
                            IF ID.OLD THEN
                                MAT LOCALI = ''
                                MAT LOCALI = MAT R.NEW
*
                                MAT R.NEW = MAT R.OLD
                                ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
                                R.NEW(SC.SBS.RECORD.STATUS) = 'RNAU'
*
                                MY.MESSAGE = 'AUT'
                                CALL SC.TRANS.UPDATE(MY.MESSAGE)
                                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                                CALL SC.VAULT.REVERSE
                                LOCALI(V-9) = R.NEW(V-9)    ;* GB9800465
                                MAT R.NEW = MAT LOCALI
                            END
                        END
* BG_100006640 S/E - Remove condition to call SC.TRANS.UPDATE.
                        IF NOT(MY.ARRAY<1>) OR CHANGE.MADE THEN       ;*CI_10033175 S/E
                            MY.MESSAGE = "CHK"
                            CALL SC.TRANS.UPDATE(MY.MESSAGE)
                            IF TEXT = 'NO' THEN   ;* GB9800696
                                CALL TRANSACTION.ABORT
                                TEXT = ""
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END   ;*CI_10033175 S/E
                        IF TEXT = "NO" THEN
                            IF CHANGE.MADE THEN
                                MAT R.NEW = MAT R.NEW.LAST
                                CALL SC.TRANS.UPDATE('VAL')
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                                CALL SC.TRANS.UPDATE('AUT')
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                                LOCALI(V-9) = R.NEW(V-9)    ;* GB9800465
                                MAT R.NEW = MAT LOCALI
                            END
                            JOURNAL.BYPASS = ''
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END ELSE
                        IF R.NEW(SC.SBS.RECORD.STATUS)[2,3] = 'HLD' THEN
* CI_10000568 Starts
                            IF ID.OLD THEN
                                MAT LOCALI = ''
                                MAT LOCALI = MAT R.NEW
*
                                MAT R.NEW = MAT R.OLD
                                ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
                                R.NEW(SC.SBS.RECORD.STATUS) = 'RNAU'
*
                                MY.MESSAGE = 'AUT'
                                CALL SC.TRANS.UPDATE(MY.MESSAGE)
                                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                                CALL SC.VAULT.REVERSE
                                LOCALI(V-9) = R.NEW(V-9)
                                MAT R.NEW = MAT LOCALI
                            END
* CI_10000568 Ends
                            MY.MESSAGE = 'CHK'
                            CALL SC.TRANS.UPDATE(MY.MESSAGE)
                            IF TEXT = 'NO' THEN   ;* GB9800696
                                CALL TRANSACTION.ABORT
                                TEXT = ""
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                            IF TEXT = "NO" THEN
                                JOURNAL.BYPASS = ''
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END
                    END
                END
            END     ;* From IF CHANGED.ENTRIES THEN
*
*----------------------------------------------------------
REM "HANDLING UPDATE SPECIAL FILES:
*----------------------------------------------------------
        END
        JOURNAL.BYPASS = 1
        IF V$FUNCTION # 'D' AND V$FUNCTION # 'R' AND NOT(END.ERROR) AND CHANGED.ENTRIES THEN
            IF MY.ARRAY<1> THEN MY.MESS = 'CHG' ELSE MY.MESS = 'VAL'
*
** GB9701446
** ---------
*
            IF MY.MESS = 'CHG' AND (NOT(R.NEW(SC.SBS.STATEMENT.NOS)) OR R.NEW(SC.SBS.STATEMENT.NOS) # "VAL") THEN MY.MESS = 'VAL'
* GB9900963 (Starts)
            IF NOT(MY.ARRAY<1>) OR CHANGE.MADE THEN
                IF R.NEW.LAST(SC.SBS.RECORD.STATUS)[2,3] = "HLD" THEN ID.NEW.LAST = ""
                CALL SC.TRANS.UPDATE("VAL")       ;* GB9901094
                IF TEXT = 'NO' THEN     ;* GB9800696
                    CALL TRANSACTION.ABORT
                    TEXT = ""
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
*
** Call SC.TRANS.UPDATE with an extra multi value in the
** MY.MESSAGE parameter to indicate to the called program
** that this is an input of a SEC.TRADE
*
                CALL SC.TRANS.UPDATE('AUT':FM:'IU')
                IF TEXT = 'NO' THEN     ;* GB9800696
                    CALL TRANSACTION.ABORT
                    TEXT = ""
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
* GB9900963 (Ends)
* EN_10001090 s
            IF CGT$STMT.ENTRY.ARRAY NE "" THEN
* can't stop SC.POS.UPDATE creating multiple postings for CGT tax entries, so
* a little manual frig to filter them out.
                NO.CGT.ENTRIES = DCOUNT(CGT$STMT.ENTRY.ARRAY,FM)
                FOR YCNT = 1 TO NO.CGT.ENTRIES
                    YCGT.STMT.ENT = CGT$STMT.ENTRY.ARRAY<YCNT>
                    IF INDEX(MY.MULTI.STMT,YCGT.STMT.ENT,1) THEN
* don't add it, it's already there!
                    END ELSE
                        MY.MULTI.STMT<-1> = YCGT.STMT.ENT
                    END
                NEXT YCNT
                CGT$STMT.ENTRY.ARRAY = ''
            END
            GOSUB GET.CGT.PROCESS.FLAG  ;* Get flag to run CGT processing
*
** GB9900963 (Starts)
*
            IF CGT.FLAG THEN
* EN_10001090 e
                ETEXT = ''    ;* GB9901086
                GOSUB BUILD.CGT.SAM.LIST          ;* CI_10030695
                AF = SC.SBS.CGT.BASE.AMT
                GOSUB PROCESS.CGT.CALCULATION
* GB9901094
                IF NOT(END.ERROR) THEN
                    IF CGT.ENTRIES THEN
                        MY.MULTI.STMT := FM:CGT.ENTRIES
                    END
                END
* GB9901086 E
*
            END
*
** GB9900963 (Ends)
*
* GB9901164 S
            IF END.ERROR THEN
                CALL TRANSACTION.ABORT  ;* BG_100002698
                GOTO CALL.UNAUTH.RECORD.WRITE
            END
* GB9901164 E
*
            IGNORE.ACC = '0'
** GB9500166 - Supress Currency Position
* GB0002358 - Include Account Parameter test
            REV.FLAG = ''
            GOSUB GET.CRF.ENTRIES       ;*==
            IF RB.MULTI.STMT THEN MY.MULTI.STMT<-1> = RB.MULTI.STMT
* EN_10002167/S/E            END
            IF R.NEW(SC.SBS.STATEMENT.NOS) THEN
                IF NOT(MY.MULTI.STMT) THEN MY.MESS = 'DEL'
            END ELSE
                IF NOT(MY.MULTI.STMT) THEN IGNORE.ACC = '1'
            END

            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE "YES" THEN ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
** GB9500362 - Delete SC.HOLD.ENTRIES if No Accounting - Might already be there
                F.SC.HOLD.ENTRIES = ''
                CALL OPF('F.SC.HOLD.ENTRIES',F.SC.HOLD.ENTRIES)
                CALL F.DELETE('F.SC.HOLD.ENTRIES',ID.NEW)
** END OF GB9500362
* GB0001700/S
            END ELSE
                IF NOT(ID.OLD) OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN         ;* BG_10008102 /S/E
                    F.SC.SETT.ENTRIES = ''
                    CALL OPF('F.SC.SETT.ENTRIES',F.SC.SETT.ENTRIES)
                    CALL F.DELETE('F.SC.SETT.ENTRIES',ID.NEW)

                    F.SC.SETT.ENTRIES.ORG = ''
                    CALL OPF('F.SC.SETT.ENTRIES.ORG',F.SC.SETT.ENTRIES.ORG)
                    CALL F.DELETE('F.SC.SETT.ENTRIES.ORG',ID.NEW)
                END
            END     ;* BG_10008102 /S/E
* GB0001700/E
*
* CI_10003020 - START
* SC.SETT.ENTRIES do not get deleted if CASH.HOLD.SETTLE is changes
* from YES to NO.
            IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW.LAST(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN
                F.SC.SETT.ENTRIES = ''
                CALL OPF('F.SC.SETT.ENTRIES',F.SC.SETT.ENTRIES)
                CALL F.DELETE('F.SC.SETT.ENTRIES',ID.NEW)

                F.SC.SETT.ENTRIES.ORG = ''
                CALL OPF('F.SC.SETT.ENTRIES.ORG',F.SC.SETT.ENTRIES.ORG)
                CALL F.DELETE('F.SC.SETT.ENTRIES.ORG',ID.NEW)
            END
* CI_10003020 - END
*
            IF NOT(IGNORE.ACC) THEN
                IF CHANGE.MADE THEN
* GB9701018 - Save R.NEW, else overrides will be lost
                    MAT LOCALI = ''
                    MAT LOCALI = MAT R.NEW
                    MAT R.NEW = MAT R.NEW.LAST
                    R.NEW(V-9) = LOCALI(V-9)      ;* GB9801144 keep current overrides
                    MAT R.NEW = MAT LOCALI
                END
*
                TRANS.REF = ID.NEW
                R.RECORD = '' ; YMODE = ''
                IF NOT(ID.OLD) OR (R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES') OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN ;* BG_10008102 /S/E
                    CALL SC.POST.FILLED.ORDERS(TRANS.REF,R.RECORD,YMODE)
                END ;* BG_10008102 /S/E
*
* GB9700921s
* Purge all entries before calling EB.ACCOUNTING
*
* GB9800045 - Don't purge Entries on initial input
                IF ID.OLD THEN
                    CALL SC.PURGE.ENTRIES(MY.MULTI.STMT)
                END
* GB9700921e
*
* GB9900953 S
* SC.PURGE.ENTRIES could make MY.MULTI.STMT null when there is no new entry to raise
                IF MY.MULTI.STMT EQ '' THEN
                    GOTO SKIP.ACCOUNTING
                END
                IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE "YES" THEN       ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
                    IF MY.MULTI.STMT THEN         ;* BG_100004278 S/E
                        CALL EB.ACCOUNTING('SC',MY.MESS,MY.MULTI.STMT,'')
                    END
                END ELSE      ;* Actual settlement
                    IF NOT(ID.OLD) OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN     ;* BG_10008102 /S/E

                        CALL F.WRITE("F.SC.SETT.ENTRIES",ID.NEW,R.SC.SETT.ENTRIES)        ;* BG_100010567

                        R.SC.SETT.ENTRIES.ORG = MY.MULTI.STMT
                        CALL F.WRITE("F.SC.SETT.ENTRIES.ORG",ID.NEW,R.SC.SETT.ENTRIES.ORG)          ;* BG_100010567

                        IF R.NEW.LAST(SC.SBS.STATEMENT.NOS) # "" THEN
                            CALL EB.ACCOUNTING("SC","DEL","","")
                            R.NEW(SC.SBS.STATEMENT.NOS) = ""
                        END
                        MY.MESS = 'ADD' ;* CI_10002001 s
                        IF SUP.ACT.FWD.ENT NE 'YES' AND  MY.MULTI.FWD.STMT THEN ;* BG_100004278 S/E
                            CALL EB.ACCOUNTING('SC',MY.MESS,MY.MULTI.FWD.STMT,'1')        ;* BG_100001218
                        END
                        MY.MESS = 'VAL'
                        IF MY.MULTI.LIV.STMT THEN
                            CALL EB.ACCOUNTING('SC',MY.MESS,MY.MULTI.LIV.STMT,'')
                        END
* BG_10008102 S
                    END ELSE
                        IF MY.MULTI.STMT THEN
                            CALL EB.ACCOUNTING('SC','VAL',MY.MULTI.STMT,'')
                        END
                    END
* BG_10008102 E
                END
* GB0001700/E

SKIP.ACCOUNTING:    * GB9900953

                IF TEXT = 'NO' THEN
                    IF CHANGE.MADE THEN
                        MAT R.NEW = MAT R.NEW.LAST
                        CALL SC.TRANS.UPDATE('VAL')
                        IF TEXT = 'NO' THEN       ;* GB9800696
                            CALL TRANSACTION.ABORT
                            TEXT = ""
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
*
** GB9800014
                        CALL SC.TRANS.UPDATE('AUT':FM:'IU')
                        IF TEXT = 'NO' THEN       ;* GB9800696
                            CALL TRANSACTION.ABORT
                            TEXT = ""
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                        LOCALI(V-9) = R.NEW(V-9)  ;* GB9800465
                        MAT R.NEW = MAT LOCALI
                    END
                    CALL TRANSACTION.ABORT        ;* GB9901094
                    JOURNAL.BYPASS = ''
                    TEXT = ''
                    AF = ''   ;* CI_10018505 S/E
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
            END
        END
        R.TEMP = ''
        IF PM.CALL AND CHANGED.ENTRIES THEN
            IF R.HOLD.ENTRY # '' THEN
                R.TEMP = R.HOLD.ENTRY
            END ELSE
                F.HOLD.ENTRY = ''
                CALL OPF('F.ENTRY.HOLD',F.HOLD.ENTRY)
                ER = ''
                ENTRY.ID = 'SC':ID.NEW
                CALL F.READ('F.ENTRY.HOLD',ENTRY.ID,R.TEMP,F.HOLD.ENTRY,ER)
            END
        END
        IF NOT(END.ERROR) THEN
            GOSUB CHECK.LIMITS
        END
        IF TEXT = 'NO' THEN   ;* GB9800696
            CALL TRANSACTION.ABORT
            TEXT = ""
            GOTO FIELD.DISPLAY.OR.INPUT
        END
* EN_10002336 - Remove label CALL.UNAUTH.RECORD.WRITE and call to
* UNAUTH.RECORD.WRITE
*
        SAVE.OVERRIDE = R.NEW(SC.SBS.OVERRIDE)    ;* GB9801144
*

        MY.MESSAGE = "VAL"

        IF V$FUNCTION = 'R' THEN
            ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
            R.NEW(SC.SBS.RECORD.STATUS) = 'RNAU'
*
** Call SC.TRANS.UPDATE with an extra multi value in the
** MY.MESSAGE parameter to indicate to the called program
** that the this is a reversal attempt on the deal
*
            CALL SC.TRANS.UPDATE('AUT':FM:'RU')
            R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS

            IF TEXT = 'NO' THEN         ;* GB9800696
                CALL TRANSACTION.ABORT
                TEXT = ""
                GOTO FIELD.DISPLAY.OR.INPUT
            END

        END ELSE

            IF V$FUNCTION = 'D' AND R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN

                ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
                R.NEW(SC.SBS.RECORD.STATUS) = 'INAU'
                CALL SC.TRANS.UPDATE(MY.MESSAGE)
                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                IF TEXT = 'NO' THEN     ;* GB9800696
                    CALL TRANSACTION.ABORT
                    TEXT = ""
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
*
** Call SC.TRANS.UPDATE with an extra multi value
** field in MY.MESSAGE 'DR' to indicate to the
** called program that this is a delete of a reversal
*
                R.NEW(SC.SBS.RECORD.STATUS) = 'INAU'
                CALL SC.TRANS.UPDATE('AUT':FM:'DR')
                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                IF TEXT = 'NO' THEN     ;* GB9800696
                    CALL TRANSACTION.ABORT
                    TEXT = ""
                    GOTO FIELD.DISPLAY.OR.INPUT
                END

                R.NEW(SC.SBS.RECORD.STATUS) = 'INAU'
                CALL SC.TRANS.UPDATE('UPD.DATE')
                R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                IF TEXT = 'NO' THEN     ;* GB9800696
                    CALL TRANSACTION.ABORT
                    TEXT = ""
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
* EN_10001090 s
                GOSUB UPDATE.CTB.STMT.NOS
* EN_10001090 e
            END ELSE

                IF V$FUNCTION = 'D' THEN
                    MY.MESSAGE = 'AUT'

* EN_100000088 S
* When a SEC.TRADE is deleted; the records in SC.SETT.ENTRIES and
* SC.SETT.ENTRIES.ORG needs to be removed
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
                    IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' THEN    ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
* BG_100001183
                        F.SC.SETT.ENTRIES = ""
                        FN.SC.SETT.ENTRIES = "F.SC.SETT.ENTRIES"
                        CALL OPF("F.SC.SETT.ENTRIES",F.SC.SETT.ENTRIES)

                        F.SC.SETT.ENTRIES.ORG = ""
                        FN.SC.SETT.ENTRIES.ORG = "F.SC.SETT.ENTRIES.ORG"
                        CALL OPF("F.SC.SETT.ENTRIES.ORG",F.SC.SETT.ENTRIES.ORG)

                        CALL F.DELETE(FN.SC.SETT.ENTRIES.ORG,ID.NEW)
                        CALL F.DELETE(FN.SC.SETT.ENTRIES,ID.NEW)
                    END
* EN_100000088 E

                    IF R.NEW(SC.SBS.RECORD.STATUS)[2,3] # 'HLD' THEN
                        ORIG.STATUS = R.NEW(SC.SBS.RECORD.STATUS)
                        R.NEW(SC.SBS.RECORD.STATUS) = 'RNAU'
*
** Call SC.TRANS.UPDATE with an extra multi value in the
** MY.MESSAGE parameter to indicate to the called program
** that this is a delete of an unauthorised deal
*
                        CALL.TRANS.UPD = @TRUE
                        GOSUB DETERMINE.CALL.STATUS

                        IF CALL.TRANS.UPD THEN
                            CALL SC.TRANS.UPDATE('AUT':FM:'DI')
                            R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                            IF TEXT = 'NO' THEN   ;* GB9800696
                                CALL TRANSACTION.ABORT
                                TEXT = ""
                                GOTO FIELD.DISPLAY.OR.INPUT
                            END
                        END ELSE
                            REC.STATUS = "AUTH"
                            GOSUB UPDATE.SECS.UNAUTH
                        END
                        R.NEW(SC.SBS.RECORD.STATUS) = ORIG.STATUS
                        IF CALL.TRANS.UPD THEN    ;* CI_10009300 S/E
* GB9601417
                            IF ID.OLD THEN
                                MAT R.NEW = MAT R.OLD
                                CALL SC.TRANS.UPDATE(MY.MESSAGE)
                                IF TEXT = 'NO' THEN         ;* GB9800696
                                    CALL TRANSACTION.ABORT
                                    TEXT = ""
                                    GOTO FIELD.DISPLAY.OR.INPUT
                                END
                            END
                            MAT R.NEW = MAT R.NEW.LAST
                        END
                    END
                END
            END
        END
        IF TEXT = 'NO' THEN   ;* GB9800696
            CALL TRANSACTION.ABORT
            TEXT = ""
            GOTO FIELD.DISPLAY.OR.INPUT
        END
CALL.UNAUTH.RECORD.WRITE:     * EN_10002336 S/E
        JOURNAL.BYPASS = ''
        IF MESSAGE # 'RET' THEN
            IF PM.CALL AND V$FUNCTION # 'A' AND CHANGED.ENTRIES THEN
                IF END.ERROR = '' THEN  ;* BG_100008370 condition was wrong, must be null
                    CALL PM.CONTROL.SC(R.TEMP)
                END
            END
* EN_10002336 - Removed F.MATWRITE on SEC.TRADE
* CI_10023487 - Removed CI_10011265. UNAUTH.RECORD.WRITE handles the
* record when END.ERROR is set.
            CALL UNAUTH.RECORD.WRITE    ;* EN_10002336 - S/E
        END
* CI_10023487 S - Moved the lines below after the call to UNAUTH.RECORD.WRITE
        IF MESSAGE = "RET" THEN         ;* GB9800274
*GB9801264-S
            JOURNAL.BYPASS=''
*GB9801264-E
            GOTO ID.INPUT
        END

        IF MESSAGE = "ERROR" THEN
            JOURNAL.BYPASS = ''
            GOTO FIELD.DISPLAY.OR.INPUT
        END
* CI_10023487 E
        IF MESSAGE = "AUT" THEN
            MY.MULTI.STMT = ''
            GOTO HANDLE.MESSAGE
        END
    CASE MESSAGE = "AUT"
* CI_10024936 - Start
        IF CHANGED.ENTRIES = 'NEW' THEN
            CHANGED.ENTRIES = @TRUE
            IF ID.OLD AND R.NEW(SC.SBS.RECORD.STATUS)[1,1] NE 'R' THEN
                CHANGED.ENTRIES = @FALSE
                GOSUB GET.CHANGED.ENTRIES
            END
        END
* CI_10024936 - Ends
        CGT$PORTFOLIO.GROUPING.OVERRIDE = ""      ;* BG_100002797
        CGT$PORTFOLIO.GROUPING.ERROR = ""         ;* BG_100002797
        CONSOL.RATE.INPUT = 0 ;* EN_10000836 S/E
* GB0000296  - begin - rigid blockage of security
        AF = SC.SBS.SECURITY.CODE
        IF R.NEW(AF) THEN
            SECURITY.MASTER.BLOCKING.DATE = ''
            CALL DBR("SECURITY.MASTER":FM:SC.SCM.BLOCKING.DATE,R.NEW(AF),SECURITY.MASTER.BLOCKING.DATE)
            IF SECURITY.MASTER.BLOCKING.DATE AND SECURITY.MASTER.BLOCKING.DATE LE TODAY THEN
                E = "SECURITY IS BLOCKED"
                CALL ERR
                GOTO ID.INPUT
            END
        END
* GB0000296  - end - rigid blockage of security
*
* ADDED AS PART OF PIF : GB9500005
* Allow Deal Slips to be produced when SEC.TRADE transactions are input
*PRINT THE DEAL SLIP
*
* GB9601771 For Reversal set and reset Function for Del slip printing
*
        HOLD.FUNK = ''
        IF V$FUNCTION = 'A' AND R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN     ;*CI_10029730 S/E
            HOLD.FUNK = V$FUNCTION
            V$FUNCTION = 'R'
        END
* Next Line not changed
        CALL DEAL.SLIP.CONTROL
* Changes continued
        IF HOLD.FUNK THEN
            V$FUNCTION = HOLD.FUNK
        END
* end of pif GB9601771 Changes
*
* EN_10001841 Removed GOSUB BULK.PROCESSING.REQUIRED and following
* IF Condition
*
* GB0001990 starts

* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
        IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) = 'YES' OR R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' THEN     ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183

* BG_100001183
* If actual settlement is turned on
            IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) = 'NO' OR R.NEW(SC.SBS.SEC.HOLD.SETTLE) = '' THEN
                GOSUB BROKER.POS.UPDATE
            END
            IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN  ;*CI_10029730 S/E

* If the authorisation is for a reversed record
* GB0100072 S
                CALL SC.SETTLEMENT.BUILD('REV')
            END ELSE
                IF ID.OLD = '' THEN
                    PROCESS = 'INS'     ;* first time authorisation
                    CALL SC.SETTLEMENT.BUILD(PROCESS)
                END
* GB0100072 E
            END
        END ELSE    ;* BG_100001231 S
* Changes to handle contractual settlement for 'US' settle method
            GOSUB BROKER.POS.UPDATE
        END
* BG_100001231 E

* GB0001990 ends

        IF R.NEW(SC.SBS.BULK.PROCESSING) EQ 'YES' THEN
            CALL SC.ORD.PROCESS.UPDATE
            R.NEW(SC.SBS.RECORD.STATUS)[2,3] = 'NAB'
            R.NEW(SC.SBS.AUTHORISER) = TNO:"_":OPERATOR
            CALL F.MATWRITE('F.SEC.TRADE$NAU',ID.NEW,MAT R.NEW, SC.SBS.AUDIT.DATE.TIME)
            SERVICE.NAME = 'SC.BULK.TRADE'
            CALL SERVICE.CONTROL('SC.BULK.TRADE','START','')
            CALL JOURNAL.UPDATE('')     ;* AUTH.RECORD.WRITE does not get called so journal update is required.
* EN_10002336 - Remove call to Journal Update
        END ELSE
*
* GB0001700
            IF (R.NEW(SC.SBS.VALUE.DATE) NE R.OLD(SC.SBS.VALUE.DATE) AND R.OLD(SC.SBS.VALUE.DATE)) AND R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE "YES" THEN
* GLOBUS_EN_10000419 e
                MY.MESSAGE = "UPD.DATE"
                NO.OF.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
                IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN
                    IF R.NEW(SC.SBS.BROKER.NO) THEN
                        OLD.MESS = MESSAGE
                        MESSAGE = 'AUT'
                        GOSUB CHECK.OUTST.DEL     ;*==
                        MESSAGE = OLD.MESS
                        IF NOT(REV.POSSIBLE) THEN
                            JOURNAL.BYPASS = ''
                            GOTO ID.INPUT
                        END
                    END
                    V$INS = 'D'
                    CALL SC.VAULT.REVERSE
*
** An extra call must be made to SC.TRANS.UPDATE so as to
** process the SECS.UNAUTH file for an authorised reversal
*
                    CALL SC.TRANS.UPDATE('REV':FM:'RA')
                    IF TEXT = 'NO' THEN ;* GB9800696
                        CALL TRANSACTION.ABORT
                        TEXT = ""
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END

                END ELSE
                    V$INS = 'I'
                    CALL SC.TRANS.UPDATE(MY.MESSAGE)
                    IF TEXT = 'NO' THEN ;* GB9800696
                        CALL TRANSACTION.ABORT
                        TEXT = ""
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
                CALL SEC.TRADE.ADJUST.UPDATE
                TRANS.FLAG = 'CHANGE'
                VALUE.DATE = R.NEW(SC.SBS.VALUE.DATE)
                CALL SC.UPD.SETTL.DATE.CONTROL(ID.NEW,TRANS.FLAG,VALUE.DATE,'','','','','','','')
                IF R.NEW(SC.SBS.OVERRIDE) THEN
                    CALL EXCEPTION.LOG("U","SC","SEC.TRADE","SECURITIES","110","OVERRIDE CONDITION",FULL.FNAME,ID.NEW,R.NEW(SC.SBS.CURR.NO),"OVERRIDE CONDITION",R.NEW(SC.SBS.DEPT.CODE))     ;*GB9901233  S/E
                END
                JOURNAL.BYPASS = 0
* EN_10001090 s
                GOSUB UPDATE.CTB.STMT.NOS
* EN_10001090 e
* EN_10002336 S/E - Move call to AUTH.RECORD.WRITE to the end of the
*                   case statement.
            END ELSE
*----------------------------------------------------------
REM "DEFINE FINAL CHECKS BEFORE STORING AUTHORISED LIVE FILE RECORD:
*----------------------------------------------------------

* GB0100595 S

                JOURNAL.BYPASS = 1
                IF R.NEW(SC.SBS.STATEMENT.NOS) # '' THEN
* GB9700921s
                    IF V$FUNCTION = 'R' THEN
                        CALL F.DELETE("F.SEC.TRADE.ENTRIES",ID.NEW)
                    END
                    CALL F.DELETE("F.SEC.TRADE.ENTRIES.SAVE",ID.NEW)
* GB9700921e
                    CALL EB.ACCOUNTING('SC','AUT','','')
                END
* GB0002723/S
* BG_100001183 - Reverting back to the old scenario - Commenting existing
*                and uncommenting what existed earlier.
                IF V$FUNCTION = "R" AND R.NEW(SC.SBS.CASH.HOLD.SETTLE) = "YES" THEN       ;* GLOBUS_EN_10000419 s; * Uncommented EN_10000419 in BG_100001183
* BG_100001183
                    IF R.NEW(SC.SBS.CU.NET.AM.TRD) NE 0 THEN          ;* CI-10001651 S/E
                        CALL EB.ACCOUNTING("SC","DEL","","")
                    END       ;* CI-10001651 S/E
                END
* GB0002723/E
                REV.FLAG = ''
                IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN
                    REV.FLAG<1> = '1'
                END ELSE REV.FLAG<1> = ''
*
* PRODUCE DELIVERY ADVICE NOTES.
*
                CALL SEC.TRADE.CONTRIB(REV.FLAG)
                CALL SEC.TRADE.CONTRIB.NEW(REV.FLAG)        ;* GB0100109
*
                CALL SEC.TRADE.DELIVERY(R.SEC.MASTER,REV.FLAG)
                IF REV.FLAG = 'ABORT' THEN GOTO FIELD.DISPLAY.OR.INPUT
*
                ETEXT = ''
                R.SC.RIGHTS = ''
                CALL F.READ('F.SC.RIGHTS',R.NEW(SC.SBS.SECURITY.CODE),R.SC.RIGHTS,F.SC.RIGHTS,ETEXT)
                IF ETEXT ELSE
                    CALL SC.RIGHTS.UPDATE
                END
*
* Update the CRF if the transaction has been changed. Not required for
* reversals.
*
                CONSOL.TYPE = 'LIVE'    ;* EN_10002167/S/E
                IF ID.OLD AND R.NEW(SC.SBS.RECORD.STATUS)[1,1] # 'R' THEN
                    GOSUB REVERSE.CRF.ENTRIES
                END
                IF R.STD.SEC.TRADE<SC.SST.CRF.POST> = 'Y' THEN
                    CRF.FLAG = 1
                END ELSE
                    CRF.FLAG = 0
                END
                IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN
                    TRANS.FLAG = 'DEL'
                END ELSE
                    TRANS.FLAG = 'ADD'
                END
                IF TRANS.FLAG = 'DEL' THEN
                    ID.REC = ID.NEW:';':R.NEW(SC.SBS.CURR.NO)
                END ELSE
                    ID.REC = ID.NEW
                END
                VALUE.DATE = R.NEW(SC.SBS.VALUE.DATE)
                CRF.IND = ''
                ACCOUNT.NO = '' ; CUST.NO = '' ; ACC.CCY = '' ; AMT = '' ; NARRATIVE = '' ; FIN.TRANS.CODES = ''
                NO.CUSTOMERS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
                FOR CUST.POS = 1 TO NO.CUSTOMERS
                    DEAL.BOOK = ''
                    SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>
                    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
                    IF DEAL.BOOK THEN
                        CRF.TRADE = 1
                    END ELSE
                        CRF.TRADE = ''
                    END
                    IF CRF.TRADE THEN
                        IF NOT(CRF.IND) THEN CRF.IND = 1
                    END
*
                    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,CUST.POS> ; GOSUB CHECK.TRANS ;*==
                    IF COMI4 = 'CREDIT' THEN
                        TRANS.CODE = 'DB'
                    END ELSE
                        TRANS.CODE = 'CR'
                    END
                    IF TRANS.CODE = 'CR' THEN
                        FIN.TRANS.CODE = FIN.CR.CODE
                    END ELSE
                        FIN.TRANS.CODE = FIN.DR.CODE        ;* BG_100010567
                    END
*
                    POSN.KEY = R.NEW(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>:'.':R.NEW(SC.SBS.SECURITY.CODE)
                    IF R.NEW(SC.SBS.CUST.INTR.AMT)<1,CUST.POS> THEN
                        ACCRUAL.TYPE = 'IENC'
                    END ELSE
                        ACCRUAL.TYPE = ''
                    END
* GB9801068 (Starts assign CAP.TYPE)
                    IF R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,CUST.POS> THEN
                        ACCRUAL.TYPE<1,2> = "CIENC"
                    END
* GB9801068 (Ends assign CAP.TYPE)
*
                    IF CRF.TRADE AND CRF.FLAG AND R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CUST.POS> NE 0 THEN ;* CI-10001651 S/E ; * CI_10028534
** GB9500166 - Supress Currency Position
                        IF CONSOL.TYPE = 'LIVE' THEN CONSOL.TYPE = 'LIVE.BAL.UPD'
                        CALL SC.UPD.CONSOL.TODAY(POSN.KEY,ID.NEW,ID.REC,CONSOL.TYPE,ACCRUAL.TYPE,VALUE.DATE,TRANS.CODE,TRANS.FLAG)
                    END
                NEXT CUST.POS
* BG_100001218
                IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN       ;* EN_10002167/S/E
                    IF CHANGED.ENTRIES THEN       ;* CI_10020867/S/E
                        IF NOT(ID.OLD) OR (R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES') OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) OR TRANS.FLAG = 'DEL' THEN ;* BG_10008102 /S/E
                            CALL SC.UPD.SETTL.DATE.CONTROL(ID.NEW,TRANS.FLAG,VALUE.DATE,CRF.IND,ACCOUNT.NO,FIN.TRANS.CODES,CUST.NO,ACC.CCY,AMT,NARRATIVE)
                        END   ;* BG_10008102 /S/E
                    END       ;* CI_10020867/S/E
                END
                CALL SEC.TRADE.ADJUST.UPDATE
                IF R.NEW(SC.SBS.OVERRIDE) THEN
                    CALL EXCEPTION.LOG("U","SC","SEC.TRADE","SECURITIES","110","OVERRIDE CONDITION",FULL.FNAME,ID.NEW,R.NEW(SC.SBS.CURR.NO),"OVERRIDE CONDITION",R.NEW(SC.SBS.DEPT.CODE))     ;*GB9901233   S/E
                END
                IF MESSAGE = "ERROR" THEN
                    JOURNAL.BYPASS = ''
                    GOTO FIELD.DISPLAY.OR.INPUT
                END
                MY.MESSAGE = "UPD.DATE"
                NO.OF.BROKERS = COUNT(R.NEW(SC.SBS.BROKER.NO),VM)+(R.NEW(SC.SBS.BROKER.NO) # '')
                IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN
                    IF NO.OF.BROKERS THEN
                        OLD.MESS = MESSAGE
                        MESSAGE = 'AUT'
                        GOSUB CHECK.OUTST.DEL     ;*==
                        MESSAGE = OLD.MESS
                        IF NOT(REV.POSSIBLE) THEN
                            JOURNAL.BYPASS = ''
                            GOTO ID.INPUT
                        END
                    END
                    V$INS = 'D'
*
** An extra call needs to be made to SC.TRANS.UPDATE
** in order to update the SECS.UNAUTH file for a
** a situation when a reversal entry is being authorised.
*
                    CALL SC.TRANS.UPDATE('REV':FM:'RA')
                    IF TEXT = 'NO' THEN ;* GB9800696
                        CALL TRANSACTION.ABORT
                        TEXT = ""
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END

                END ELSE
                    CALL.TRANS.UPD = @TRUE
                    GOSUB DETERMINE.CALL.STATUS
                    V$INS = 'I'
                    IF CALL.TRANS.UPD THEN
*
                        MY.MESSAGE = MY.MESSAGE:FM:'IA'
                        CALL SC.TRANS.UPDATE(MY.MESSAGE)
                        IF TEXT = 'NO' THEN       ;* GB9800696
                            CALL TRANSACTION.ABORT
                            TEXT = ""
                            GOTO FIELD.DISPLAY.OR.INPUT
                        END
                    END ELSE
                        REC.STATUS = "AUTH"
                        GOSUB UPDATE.SECS.UNAUTH
                    END

                END
* EN_10001090 s
                GOSUB UPDATE.CTB.STMT.NOS
* EN_10001090 e
* CI_10001776 S
* EN_10001823 S
*
                CALL SC.SEC.TRADE.UPD.CONTRA.REF
*
* EN_10001823 E
* Since DEP.DELIV.KEY is not getting updated when SC.DEPOT.ROUTING
* is set so,position of AUTH.RECORD.WRITE is changed
* EN_10002336 - S/E - Remove call to AUTH.RECORD.WRITE
*
* GLOBUS_EN_10001556 - Start
*
                CHECK.AM = ''
                CALL AM.INSTALLED(CHECK.AM)
                IF CHECK.AM THEN
                    CALL AM.OLUPD.INST.FLOW
                END
*
* GLOBUS_EN_10001556 -  End
* CI_10001776 E
                YCUST.OPEN.ORDERS = R.NEW(SC.SBS.CU.ORDER.NOS)
                CONVERT SM TO '' IN YCUST.OPEN.ORDERS
                CONVERT VM TO '' IN YCUST.OPEN.ORDERS
                IF YCUST.OPEN.ORDERS THEN
**********************************************
* IF THERE ORDER NUMBER FOR THE CUSTOMER THEN
* UPDATE THE CONCAT FILE WHOSE KEY IS ID.COMPANY
* AND INSERT ID.NEW IN THE RECORD .
**********************************************
                    YID = ID.COMPANY
                    YFIELD = ID.NEW
                    CALL CONCAT.FILE.UPDATE('F.EXECUTED.ORDER',YID,YFIELD,V$INS,'AR')
                END
*
*****************************************
* Update the broker concat file for each
* broker where the key is the broker number
* and insert ID.NEW in the record.
*****************************************
*
                IF NO.OF.BROKERS THEN
                    FOR BRKR = 1 TO NO.OF.BROKERS
! GB9301824 Update SC.BROKER.UNCONF only IF CONF.BY.BROKER is NULL
                        IF R.NEW(SC.SBS.CONF.BY.BROKER)<1,BRKR> = '' THEN
                            YID = R.NEW(SC.SBS.BROKER.NO)<1,BRKR>
                            YFIELD = ID.NEW
                            YFIELD := VM:R.NEW(SC.SBS.SECURITY.CODE)
                            YFIELD := VM:R.NEW(SC.SBS.TRADE.DATE)
                            YFIELD := VM:R.NEW(SC.SBS.VALUE.DATE)
                            YFIELD := VM:R.NEW(SC.SBS.TRADE.CCY)
                            YFIELD := VM:R.NEW(SC.SBS.BR.NET.AM.TRD)<1,BRKR>
                            CALL CONCAT.FILE.UPDATE('F.SC.BROKER.UNCONF',YID,YFIELD,V$INS,'AR')
                        END
                    NEXT BRKR
                END
*
* FOR ALL ORDERS TRADED TODAY UPDATE F.SEC.TRADES.TODAY
*
                YID = ID.COMPANY
                YFIELD = ID.NEW
                CALL CONCAT.FILE.UPDATE('F.SEC.TRADES.TODAY',YID,YFIELD,V$INS,'AR')
* EN_100011930 Begins
* In a backdated sec trade, if portfolio no is changed and
* authorised, the security positions for changed portfolio
* should be updated accordingly in historic valuation file.
* BG_100005266 Begins
                BACKVAL.UPD = ''
                R.AM.PARAMETER = ''
                IF CHECK.AM THEN
* Do not move OPF outside the IF.
* It would crash if AM module is not installed.
                    CALL CACHE.READ('F.AM.PARAMETER',ID.COMPANY,R.AM.PARAMETER,PAR.ERR)   ;* BG_100010567
                END
                BACKVAL.UPD = R.AM.PARAMETER<AM.PAR.BACKVALUE.UPD>    ;* BG_100010567
                BV.TXN.UPD = R.AM.PARAMETER<AM.PAR.BV.TXN.UPD>        ;* BG_100010567
* BG_100005266 Ends
* Update if back value functionality and back value transactions set to ON
* in AM.PARAMETER.
                IF BACKVAL.UPD EQ 'YES' AND BV.TXN.UPD AND BV.TXN.UPD NE 'OFF' THEN       ;* BG_100005266
                    IF (V$FUNCTION = 'A') OR (V$FUNCTION = 'I') THEN
* Is trade date on trans is back date
                        IF R.NEW(SC.SBS.TRADE.DATE) LT TODAY THEN
                            FN.BV.TRANSACTIONS = 'F.BV.TRANSACTIONS'
                            F.BV.TRANSACTIONS = ''
                            CALL OPF(FN.BV.TRANSACTIONS,F.BV.TRANSACTIONS)
                            DEPO = R.OLD(SC.SBS.DEPOSITORY)
                            TRADE.DATE = R.OLD(SC.SBS.TRADE.DATE)
                            SECURITY.NO = R.OLD(SC.SBS.SECURITY.CODE)
                            NO.OF.CUS = DCOUNT(R.NEW(SC.SBS.CUST.SEC.ACC),VM)
                            TXN.KEY = TRADE.DATE:'#':ID.NEW
* The follwing part updates BV.TRANSACTION with old portfolio
* in case portfolio no is changed
                            FOR INDX = 1 TO NO.OF.CUS
                                IF R.NEW(SC.SBS.CUST.SEC.ACC)<1,INDX> NE R.OLD(SC.SBS.CUST.SEC.ACC)<1,INDX> THEN
                                    PORTFOLIO.CODE = R.OLD(SC.SBS.CUST.SEC.ACC)<1,INDX>
                                    DEALER.BK = ''
                                    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,PORTFOLIO.CODE,DEALER.BK)
* In case of own book portfolio need not update BV.TRANSACTIONS
                                    IF DEALER.BK THEN CONTINUE
                                    R.BV.TXN = ''
                                    WRITE.REC = 1
* Check BV.TRANSACTIONS. It might have been updated already.
                                    CALL F.READ(FN.BV.TRANSACTIONS,PORTFOLIO.CODE,R.BV.TXN,F.BV.TRANSACTIONS,ER2)
                                    LOCATE SECURITY.NO IN R.BV.TXN<BV.TX.SEC.OR.ACCT.NO,1> SETTING SEC.FOUND THEN
                                        LOCATE DEPO IN R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,1> SETTING DEPO.FOUND THEN
*
                                            DEPO.CTR = DCOUNT(R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND>, SM)
                                            INSERT.POS = 999
                                            FOUND.POS = DEPO.FOUND
                                            CONTINUE.LOOP = 1
                                            DEPO.POSITION = DEPO.FOUND
                                            LOOP
                                            WHILE DEPO.POSITION <= DEPO.CTR AND CONTINUE.LOOP

                                                IF DEPO EQ R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,DEPO.POSITION> AND TRADE.DATE LT R.BV.TXN<BV.TX.EFF.DATE,SEC.FOUND,DEPO.POSITION> THEN
                                                    INSERT.POS = DEPO.POSITION - 1
                                                    CONTINUE.LOOP = 0
                                                END
                                                IF DEPO EQ R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,DEPO.POSITION> AND TRADE.DATE GT R.BV.TXN<BV.TX.EFF.DATE,SEC.FOUND,DEPO.POSITION> THEN
                                                    INSERT.POS = DEPO.POSITION
                                                END
                                                IF DEPO NE R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,DEPO.POSITION> THEN
                                                    INSERT.POS = DEPO.POSITION - 1
                                                    CONTINUE.LOOP = 0
                                                END
                                                IF DEPO EQ R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,DEPO.POSITION> AND TRADE.DATE EQ R.BV.TXN<BV.TX.EFF.DATE,SEC.FOUND,DEPO.POSITION> THEN
                                                    INSERT.POS = 999
                                                    FOUND.POS = DEPO.POSITION
                                                    CONTINUE.LOOP = 0
                                                END
                                                DEPO.POSITION += DEPO.POSITION
                                            REPEAT
*
                                            IF INSERT.POS NE 999 THEN
                                                INSERT.POS = INSERT.POS + 1
                                                INS DEPO BEFORE R.BV.TXN<BV.TX.DEPOSITORY, SEC.FOUND, INSERT.POS>
                                                INS TRADE.DATE BEFORE R.BV.TXN<BV.TX.EFF.DATE, SEC.FOUND, INSERT.POS>
                                                INS TXN.KEY BEFORE R.BV.TXN<BV.TX.TXN.KEY, SEC.FOUND, INSERT.POS>
                                            END

                                            IF INSERT.POS = 999 THEN
                                                LOCATE TXN.KEY IN R.BV.TXN<BV.TX.TXN.KEY,SEC.FOUND, 1> SETTING TXN.POS THEN
                                                    WRITE.REC = 0
                                                END
                                                ELSE
                                                    R.BV.TXN<BV.TX.TXN.KEY,SEC.FOUND, -1> = TXN.KEY
                                                END
                                            END
                                        END ELSE
                                            R.BV.TXN<BV.TX.DEPOSITORY,SEC.FOUND,-1> = DEPO
                                            R.BV.TXN<BV.TX.EFF.DATE,SEC.FOUND,-1> = TRADE.DATE
                                            R.BV.TXN<BV.TX.TXN.KEY,SEC.FOUND,-1> = TXN.KEY
                                        END
                                    END ELSE
                                        R.BV.TXN<BV.TX.SEC.OR.ACCT.NO,-1> = SECURITY.NO
                                        R.BV.TXN<BV.TX.DEPOSITORY,-1,1> = DEPO
                                        R.BV.TXN<BV.TX.EFF.DATE,-1,1> = TRADE.DATE
                                        R.BV.TXN<BV.TX.TXN.KEY, SEC.FOUND,-1> = TXN.KEY
                                    END

                                    IF WRITE.REC THEN
                                        CALL F.WRITE(FN.BV.TRANSACTIONS,PORTFOLIO.CODE,R.BV.TXN)
                                    END
                                END
                            NEXT INDX
                        END
                    END

* EN_10001930 Ends
                END ;* EN_10001974 S
* AM product installation check lines are removed for SEC.REVERSAL.TODAY - EN_10001974
**CD GLOBUS_EN_10000333 -Start
**For Reversed txns, write to SEC.REVERSAL.TODAY as it is removed
**from SEC.TRADES.TODAY. Dont write txns done and reversed TODAY.
                IF R.NEW(SC.SBS.RECORD.STATUS) EQ 'RNAU' AND MESSAGE EQ "AUT" THEN        ;* BG_100008300 S
                    IF ID.NEW[7,5] NE R.DATES(EB.DAT.JULIAN.DATE)[3,5] THEN
                        YID = ID.COMPANY : '*' : ID.NEW ; R.SEC.REVERSAL.TODAY = ''       ;* BG_100010567
                        CALL F.WRITE('F.SEC.REVERSAL.TODAY',YID,R.SEC.REVERSAL.TODAY)     ;* BG_100008300 E ; * BG_100010567
                    END
                END
*
**** GLOBUS_BG_100000790
* END line is removed and added above    ; * EN_10001974 S/E
*
**CD GLOBUS_EN_10000333 -End
                MY.MULTI.STMT = ''
                JOURNAL.BYPASS = ''
***************** PM CHANGE
                IF PM.CALL AND MESSAGE # 'AUT' AND V$FUNCTION # 'A' THEN
                    IF END.ERROR = '' THEN        ;* Condition is wrong, must be null.
                        CALL PM.CONTROL.SC(R.TEMP)
                    END
                END
* EN_10001090 s
                GOSUB UPDATE.CTB.STMT.NOS
* EN_10001090 e
* EN_10002336 - Remove call to Journal Update
            END

* GB0101757/S
* The call to be below routine will determine whether a TRADE has to
* Automatically settled in the customer side.  If 'YES' then the
* routine will move the existing SEC.TRADE to history and then
* pass the relevant Accounting entries (This is because, we have
* already raised the suspense entries and field STATEMENT.NOS will
* not get updated with both the Statement Nos and thereby audit
* trail is lost

* BG_100001124 - START
            AUTO.CUS.SETT = ''
            AUTO.BROK.SETT = ''
            AUTO.CUST.CHK = ''
            AUTO.BROK.CHK = ''
            AUTO.CUST.SETT = R.NEW(SC.SBS.AUTO.CUST.SETT)
            AUTO.BROK.SETT = R.NEW(SC.SBS.AUTO.BROK.SETT)
            LOCATE 'YES' IN AUTO.CUST.SETT<1,1> SETTING POS ELSE POS = 'A'
            IF POS NE 'A' THEN
                AUTO.CUST.CHK = 'YES'
            END
            LOCATE 'YES' IN AUTO.BROK.SETT<1,1> SETTING POS ELSE POS = 'A'
            IF POS NE 'A' THEN
                AUTO.BROK.CHK = 'YES'
            END
            IF R.NEW(SC.SBS.VALUE.DATE) LE TODAY AND (R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES') AND (AUTO.CUST.CHK EQ 'YES' OR AUTO.BROK.CHK EQ 'YES') THEN
* BG_100001124 - END
                BATCH.ONLINE = 'ONLINE'
                ID.SC.SETTLEMENT = ID.NEW
                CALL SC.SETT.AUTO.SETTLEMENT(ID.SC.SETTLEMENT,BATCH.ONLINE)
* EN_10002336 - Remove call to Journal Update
                V = SC.SBS.AUDIT.DATE.TIME
            END     ;* BG_100001183
* GB0101757/E
*
* EN_10002336 S
            CALL AUTH.RECORD.WRITE
            IF MESSAGE = "ERROR" THEN
                JOURNAL.BYPASS = ''
                GOTO FIELD.DISPLAY.OR.INPUT
            END
* EN_10002336 E
        END
    END CASE
*
    GOTO ID.INPUT
*
*********************************************************************
*   SUBROUTINES
*   ===========
*********************************************************************
*
COUNTERPARTY.LIMITS:
*
    CALL.LIMITS = ""
    BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)
    DEL.INSTR = R.NEW(SC.SBS.BR.DELIV.INSTR)<1,1>
    CPL = ''
    CALL DBR('SC.DEL.INSTR':FM:SC.DLI.COUNTERPARTY.LIMIT:FM:'.A',DEL.INSTR,CPL)
    AF = SC.SBS.CPTY.LIMIT.REF
    BEGIN CASE
    CASE R.NEW(SC.SBS.CPTY.LIMIT.REF) AND NOT(DEALER.BOOK.FLAG)
        ETEXT = 'TRADE MUST BE FOR DEALER BOOK'
        CALL STORE.END.ERROR
    CASE R.NEW(SC.SBS.CPTY.LIMIT.REF) AND BROKERS > 1
        ETEXT = '1 BROKER ONLY FOR COUNTERPARTY LIMIT'
        CALL STORE.END.ERROR
    CASE BROKERS > 1
    CASE NOT(DEALER.BOOK.FLAG)
    CASE R.NEW(SC.SBS.CPTY.LIMIT.REF) AND CPL NE 'Y'
        ETEXT = 'INVALID DELIVERY INSTRUCTIONS FOR LIMITS'
        CALL STORE.END.ERROR
    CASE CPL NE 'Y'
    CASE OTHERWISE
        LCUST = R.NEW(SC.SBS.BROKER.NO)
        LPRODUCT = ""
        LPRODUCT<1> = R.NEW(SC.SBS.CPTY.LIMIT.REF)
        SEC.CCY = R.NEW(SC.SBS.TRADE.CCY)         ;* GB9900028
        CALL LIMIT.GET.PRODUCT("",LCUST,SEC.CCY,LPRODUCT)
        IF ETEXT THEN
            LPRODUCT = ""
            TEXT = LCUST:' ':ETEXT
            CALL STORE.OVERRIDE(YCURR.NO)
            ETEXT = ""
        END ELSE
            R.NEW(SC.SBS.CPTY.LIMIT.REF) = LPRODUCT
            CALL.LIMITS = 1
        END
    END CASE
    RETURN
*
CHECK.LIMITS:       * GB9800922
    IF V$FUNCTION = 'R' THEN  ;* GB9801040
        IF REV.POSSIBLE NE 1 THEN
* If rev possible is 2 then partial delivery has taken place
* so user must back out limit using sec del control
*
            RETURN
        END
    END
    CALL SC.UPDATE.CPARTY.LIMITS
    RETURN
*
SETUP.VERSION:      * GB9700572
*
* Load version details if necessary. Do not use R.VERSION as it has
* been radically altered by this stage.
*
    VERSION.RECORD = ""  ; YERR2 = ''
    IF PGM.VERSION THEN
        CALL CACHE.READ('F.VERSION', APPLICATION:PGM.VERSION ,VERSION.RECORD,YERR2)
        IF YERR2 THEN
            VERSION.RECORD = ""
            RETURN  ;* NO VERSION RECORD
        END
    END ELSE
        RETURN
    END
*
* Translate field names to numbers
*
    DIM DIM.VERSION.RECORD(EB.VER.AUDIT.DATE.TIME)
    ERR.MSG = ''
    MATPARSE DIM.VERSION.RECORD FROM VERSION.RECORD
    CALL VERSION.NAMES.TO.NUMBERS(APPLICATION,MAT DIM.VERSION.RECORD,EB.VER.AUDIT.DATE.TIME,ERR.MSG)
    VERSION.RECORD = ''
    MATBUILD VERSION.RECORD FROM DIM.VERSION.RECORD
    VERSION.FIELDS = VERSION.RECORD<EB.VER.FIELD.NO>
    CONVERT VM TO FM IN VERSION.FIELDS
    NFS = DCOUNT(VERSION.FIELDS,FM)
    FOR I = 1 TO NFS
        VERSION.FIELDS<I> = FIELD(VERSION.FIELDS<I>,".",1)
    NEXT I
    RETURN
*
CHECK.IF.EXPANDABLE:* GB9700359
*
    EXPANDABLE = 1
    IF PGM.VERSION = "" THEN
        RETURN
    END
    LOCATE AF:".":AV:".":AS IN VERSION.RECORD<EB.VER.FIELD.NO,1> SETTING POS ELSE POS = 0
    IF POS THEN
        IF VERSION.RECORD<EB.VER.EXPANSION,POS> = "NO" THEN
            EXPANDABLE = 0
        END
    END
    RETURN
**************************************
GUI.FIELD.SKIP:
    INP.CNT = DCOUNT(INPUT.BUFFER,' ')  ;* number of fields in buffer
    G.AF = AF
*
* Skip no input fields
* work out last field which is inputtable
*
    LV = V-9
    FOR I = LV TO 1 STEP -1
        IF T(I)<3> NE "NOINPUT" THEN
            LV = I
            I = 1
        END
    NEXT I
*
* work out new position don't go past last inputtable field
*
    FOR I = 1 TO INP.CNT
        IF (G.AF + I) < LV THEN
            IF T(G.AF+ I)<3> = 'NOINPUT' THEN INP.CNT += 1
        END
    NEXT I
* GB9801331 use T.FIELDNO
    INP.CNT += 1
    IF (G.AF + INP.CNT) < LV THEN       ;* if new position is < last inputtable
        G.AF += INP.CNT       ;* add number of fields to skip
    END
    LOCATE G.AF:'.':AV IN T.FIELDNO<1> SETTING GPOS ELSE GPOS = 0
    IF GPOS > 0 THEN          ;* set next field position
        T.SEQU<-1> =GPOS
    END
    RETURN
*--------------------
HANDLE.VERIFY.RECORD:         *=====
*--------------------
*
    R.CHECK.REC = ""          ;* BG_100010567
    CALL F.READU ("F.SEC.TRADE$NAU",ID.NEW,R.CHECK.REC,F.FILE$NAU,"","")        ;* BG_100010567
    IF NOT(R.CHECK.REC) THEN  ;* BG_100010567
* CI_10001375 Starts
        IF INDEX(TTYPE,"GUI",1) THEN
            VBROKER.NO = VER.BROKER.NO
        END
* CI_100001375 Ends
        FOR AV = 1 TO NO.BKRS
            IF R.NEW(SC.SBS.BROKER.NO)<1,AV> = VBROKER.NO THEN
                R.NEW(SC.SBS.CONF.BY.BROKER)<1,AV> = TNO:"_":OPERATOR:" ":TIMEDATE()[1,8]:"_":TIMEDATE()[10,11]         ;* EN_10000316 TIMEDATE to display seconds
            END
        NEXT AV
        JOURNAL.BYPASS = "1"
        CALL F.MATWRITE ("F.SEC.TRADE",ID.NEW,MAT R.NEW,V)
*------------------------------------------
*  NOW DELETE ID.NEW FROM UNCONFIRMED FILE.
*------------------------------------------
        ID.NEW.SAVE = ID.NEW
        ID.NEW := VM:R.NEW(SC.SBS.SECURITY.CODE)
        ID.NEW := VM:R.NEW(SC.SBS.TRADE.DATE)
        ID.NEW := VM:R.NEW(SC.SBS.VALUE.DATE)
        ID.NEW := VM:R.NEW(SC.SBS.TRADE.CCY)
        V$INS = "D"
*
*-----------------------------------------
* Update the broker concat file for each
* broker where the key is the broker number
* and delete ID.NEW in the record.
*-----------------------------------------
        FOR BRKR = 1 TO NO.BKRS
            YID = R.NEW(SC.SBS.BROKER.NO)<1,BRKR>
            IF YID = VBROKER.NO THEN
                YFIELD = ID.NEW:VM:R.NEW(SC.SBS.BR.NET.AM.TRD)<1,BRKR>
                CALL CONCAT.FILE.UPDATE('F.SC.BROKER.UNCONF',YID,YFIELD,V$INS,'AR')
            END
        NEXT BRKR
        ID.NEW = ID.NEW.SAVE
        ID.NEW.LAST = ID.NEW
*
        JOURNAL.BYPASS = ""
        CALL JOURNAL.UPDATE (ID.NEW)
*
    END ELSE
        TEXT = "TRADE IN UNAUTHORISED STATUS CANNOT VERIFY"
        CALL REM
        RELEASE F.FILE$NAU,ID.NEW
    END
*
    IF V.FLAG THEN
        V$FUNCTION = 'V'
        ID.NEW = OLD.ID
        IF T.FUNCTION = '' THEN V.UPD.FLAG = 1
    END ELSE
        V.UPD.FLAG = 0
    END
    RETURN
*
*------------------
REVERSE.CRF.ENTRIES:
*------------------
*
    IF R.STD.SEC.TRADE<SC.SST.CRF.POST> = 'Y' THEN CRF.FLAG = 1 ELSE CRF.FLAG = 0
* GB0000620 -Start
* ENTIRE CHANGES OF GB0000620 has been removed as part of CI-10001390
    TRANS.FLAG = 'DEL'        ;* CI-10001390 S/E
* GB0000620 -End
    ID.REC = ID.NEW:';':R.OLD(SC.SBS.CURR.NO)
*
    VALUE.DATE = R.OLD(SC.SBS.VALUE.DATE)
    CRF.IND = ''
    ACCOUNT.NO = '' ; CUST.NO = '' ; ACC.CCY = '' ; AMT = '' ; NARRATIVE = '' ; FIN.TRANS.CODES = ''
    NO.CUSTOMERS = DCOUNT(R.OLD(SC.SBS.CUSTOMER.NO),VM)
    FOR CUST.POS = 1 TO NO.CUSTOMERS
        DEAL.BOOK = ''
        SEC.ACC.NO = R.OLD(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>
        CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
        IF DEAL.BOOK THEN
            CRF.TRADE = 1
        END ELSE
            CRF.TRADE = ''
        END
        IF CRF.TRADE THEN
            IF NOT(CRF.IND) THEN
                CRF.IND = 1
            END
        END
*
        COMI4 = R.OLD(SC.SBS.CUST.TRANS.CODE)<1,CUST.POS> ; GOSUB CHECK.TRANS
        IF COMI4 = 'CREDIT' THEN
            TRANS.CODE = 'DB'
        END ELSE
            TRANS.CODE = 'CR'
        END
        IF TRANS.CODE = 'CR' THEN
            FIN.TRANS.CODE = FIN.CR.CODE
        END ELSE
            FIN.TRANS.CODE = FIN.DR.CODE          ;* BG_100010567
        END
*
        POSN.KEY = R.OLD(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>:'.':R.OLD(SC.SBS.SECURITY.CODE)
        IF R.OLD(SC.SBS.CUST.INTR.AMT)<1,CUST.POS> THEN
            ACCRUAL.TYPE = 'IENC'
        END ELSE
            ACCRUAL.TYPE = ''
        END
* GB9801068 (Starts assign CAP.TYPE)
        IF R.OLD(SC.SBS.CU.CAP.INT.AMT)<1,CUST.POS> THEN
            ACCRUAL.TYPE<1,2> = "CIENC"
        END
* GB9801068 (Ends assign CAP.TYPE)
*
        IF CRF.TRADE AND CRF.FLAG AND R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CUST.POS> NE 0 THEN   ;* CI-10001651 S/E ; * CI_10028534
            IF CONSOL.TYPE = 'LIVE' THEN
                CONSOL.TYPE = 'LIVE.BAL.UPD'
            END
            CALL SC.UPD.CONSOL.TODAY(POSN.KEY,ID.NEW,ID.REC,CONSOL.TYPE,ACCRUAL.TYPE,VALUE.DATE,TRANS.CODE,TRANS.FLAG)
        END
    NEXT CUST.POS

    IF CONSOL.TYPE = 'FORWARD' AND CHANGED.ENTRIES THEN     ;* CI_10020867/S/E
        IF NOT(ID.OLD) OR (R.NEW(SC.SBS.CASH.HOLD.SETTLE) NE 'YES' AND R.NEW(SC.SBS.SEC.HOLD.SETTLE) NE 'YES') OR NOT(R.NEW(SC.SBS.STATEMENT.NOS)) THEN         ;* BG_10008102 /S/E
            CALL SC.UPD.SETTL.DATE.CONTROL(ID.NEW,TRANS.FLAG,VALUE.DATE,CRF.IND,ACCOUNT.NO,FIN.TRANS.CODES,CUST.NO,ACC.CCY,AMT,NARRATIVE)
        END         ;* BG_10008102 /S/E
    END
*
    RETURN
*
************************************
* SUBROUTINE TO CALCULATE COMMISSIONS
* AND CHARGES FOR THE BROKER AT
* VALIDATION.
************************************
*---------------------
RECALC.BROKER.CHARGES:        *=====
*---------------------
    AF = SC.SBS.BR.TOT.NOM
    AFX = SC.SBS.BR.NO.NOM ; AFX1 = SC.SBS.BR.PRICE
    IF NOT(END.ERROR) THEN
        GOSUB CALC.NOM.AMT    ;*==
    END
    IF E > "" THEN
        ETEXT = E
        CALL STORE.END.ERROR
    END
    IF NOT(END.ERROR) THEN
        IF TOT.NOM # R.NEW(AF)<1,AV> THEN
            IF R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV> THEN
                REALLOW.AMT = (TOT.NOM*R.NEW(SC.SBS.BR.REALLOWANCE)<1,AV>)/100
                IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                    CALL SC.CHF.ROUNDING(REALLOW.AMT)
                END
                R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> = REALLOW.AMT
            END
        END
        R.NEW(AF)<1,AV> = TOT.NOM
        AF = SC.SBS.BR.GROSS.AM.SEC
        R.NEW(AF)<1,AV> = SEC.GROSS.AMT
        AF = SC.SBS.BR.GROSS.AM.TRD
        BROKER.GROSS.TRADE = R.NEW(AF)
        R.NEW(AF)<1,AV> = GROSS.AMT
        IF NOT(GTSVAL) THEN   ;* CI_10014817/S/E
            IF BROKER.GROSS.TRADE<1,AV> # R.NEW(AF)<1,AV> THEN
                RECALC.CHARGES = 1
                R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = ''     ;* CI_10009552 S/E
                LOCAL6 = ''
            END ELSE
                LOCAL6 = 1
                RECALC.CHARGES = 0
            END
        END ELSE    ;* GB0003142 S
            LOCAL6 = 1
            RECALC.CHARGES = 0
        END         ;* GB0003142 E
* GLOBUS_CI_10001223 +
* IF statement is commented to allow RECALC.CHARGES = 1 if any
* value is entered in any of the BROKER Commission fields.
        RECALC.CHARGES = 1
        LOCAL6 = ''
* GLOBUS_CI_10001223 -
        GOSUB SETUP.DETAILS.STK.EXC     ;*==
        GOSUB RECALC.BROKER.INT.AMT.TRD
        R.NEW(SC.SBS.BR.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
        GOSUB BR.STOCK.EXCHANGE         ;*==
        IF ETEXT > "" THEN
            CALL STORE.END.ERROR
        END
        IF NOT(END.ERROR) THEN
            IF RECALC.CHARGES THEN
                TRN.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
                BROKER.COMM = 0
                IF TRN.CODE THEN
                    LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
                        GOSUB CHECK.BROK.COMM     ;* GB9301824 ;*==
                    END
                END
                IF BROKER.COMM # '' THEN
                    YARRAY(54) = BROKER.COMM      ;* GB9301824
                END
                IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' THEN
                    YARRAY(54) = 0
                END
                IF R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> EQ '' THEN
                    R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = YARRAY(51)   ;* CI_10005017 S ; * CI_10005154 S/E
                END
                IF R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> EQ '' THEN
                    R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> = YARRAY(53)   ;* CI_10005154 S/E
                END
                IF R.NEW(SC.SBS.CL.COMMISSION)<1,AV> EQ '' THEN
                    R.NEW(SC.SBS.CL.COMMISSION)<1,AV> = YARRAY(54)    ;* CI_10005017 E ; * CI_10005154 S/E
                END
            END
            BROKER.COMMISSIONS<1,AV> = YARRAY(20)
            BROKER.COMMISSIONS<2,AV> = YARRAY(21)
            BROKER.COMMISSIONS<3,AV> = YARRAY(22)
            BROKER.COMMISSIONS<4,AV> = YARRAY(40)
            BROKER.COMMISSIONS<5,AV> = YARRAY(41)
            BROKER.COMMISSIONS<6,AV> = YARRAY(42)
            BROKER.COMMISSIONS<7,AV> = YARRAY(30) ;* GB9301824
            BROKER.COMMISSIONS<8,AV> = YARRAY(31) ;* GB9301824
            BROKER.COMMISSIONS<9,AV> = YARRAY(32) ;* GB9301824
            YARRAY(20) = R.NEW(SC.SBS.BROKER.NO)<1,AV>
            GOSUB CALC.LOCAL.CHARGES    ;*==
            IF RECALC.CHARGES THEN
* GLOBUS_CI_10001223 +
* Check if BR.STAMP.TAX , BR.EBV.FEES are NULL , if so then
* default the values from YARRAY
                IF R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> EQ '' THEN
                    R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> = YARRAY(51)
                END
                IF R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> EQ '' THEN
                    R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> = YARRAY(52)
                END
* GLOBUS_CI_10001223 -
                IF TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
                    R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = YARRAY(12)
                END
* GB9801068
                R.NEW(SC.SBS.BR.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
                LOCATE SC.SBS.BR.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
                IF POS THEN
                    T.SEQU<-1> = "D":POS
                END
            END
            BROKER.CHARGES<1,AV> = YARRAY(25)     ;* Stamp tax Category
            BROKER.CHARGES<2,AV> = YARRAY(26)     ;* Stamp tax Dr. Trans. code
            BROKER.CHARGES<3,AV> = YARRAY(27)     ;* Stamp tax Cr. Trans. code
            BROKER.CHARGES<4,AV> = YARRAY(30)     ;* EBV Fees category.
            BROKER.CHARGES<5,AV> = YARRAY(31)     ;* EBV Fees Dr. Trans code
* GB9900797 - If this is still blank a different array has been used
            IF NOT(BROKER.CHARGES<7,AV>) THEN
                BROKER.CHARGES<7,AV> = R.STD.SEC.TRADE<SC.SST.BR.MISC.FEES.CAT> ;* GB0001338 S/E
            END
* GB0001338S
            BROKER.CHARGES<8,AV> = R.STD.SEC.TRADE<SC.SST.BR.MIS.DB.TRANS.CD>   ;* Misc. Fees Dr. Trans code
            BROKER.CHARGES<9,AV> = R.STD.SEC.TRADE<SC.SST.BR.MIS.CR.TRANS.CD>   ;* Misc. Fees Cr. Trans code
* GB0001338E
        END
        BROKER.CHARGES<6,AV> = YARRAY(32)
    END
    BROKER.CHARGES<10,AV> = YARRAY(28)  ;* GLOBUS_CI_10002030
    RETURN
*----------------------------------------------------------------------------
RECALC.BROKER.INT.AMT.TRD:

*Broker int amt is re-calculated here
*if it is a BOND then net or gross of
*int is taken as per setup.

    IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) AND R.NEW(SC.SBS.INTEREST.DAYS) AND NOT(R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>) THEN
        INTEREST.DAYS = R.NEW(SC.SBS.INTEREST.DAYS) ; INTEREST.AMT = '' ; NYEAR.DAYS = ''
        GROSS.INT.AMT = ''

        IF BOND.OR.SHARE = 'B' THEN
            CUM.EX.DIV = 'EX.DIV'
            SECURITY.PRICE = R.NEW(SC.SBS.BR.PRICE)<1,AV>
            GOSUB CALC.BR.WEIGHT.AVG.PRICE        ;* CI_10017271
            IF AV = 1 THEN
                GOSUB FIND.CUST.CHARGES
            END
            IF CTAX.STATUS EQ 'EXEMPT' THEN
                CTAX.STATUS = ''
            END ELSE
                CTAX.STATUS = VM:'NON.EXEMPT'
            END
            CALL SC.CALC.INT.AMT(R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>,R.NEW(SC.SBS.LAST.PAYMNT.DATE),R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),R.NEW(SC.SBS.INTEREST.RATE),YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, CTAX.STATUS,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT) ;* GB9800993
            YAMT = CAP.AMT
            R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID          ;* EN_1000793 S/E
            IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN CALL SC.CHF.ROUNDING(YAMT)
            CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
            R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV> = YAMT
            IF R.SEC.MASTER<SC.SCM.PAID.CODE> = '%' THEN
                INTEREST.AMT = (INTEREST.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
            END
        END
        R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = INTEREST.AMT
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = INTEREST.AMT ; Y2 = "" ; Y3 = "" ; Y4 = ''
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> ; Y2 = "" ; Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = Y2
        END
* CI_10002884 - E
        YCCY = R.NEW(SC.SBS.TRADE.CCY)
        YAMT = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
        CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
        R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = YAMT
    END
    RETURN
*----------------------------------------------------------------------------
***************************************
* SUBROUTINE TO SETUP STOCK EXCHANGE
* DETAILS FOR CALCULATING COMMISSIONS
* AND CHARGES.
***************************************
*-----------------
SET.DETS.FOR.CHGS:  *=====
*-----------------
    GOSUB SETUP.DETAILS.STK.EXC         ;*==
    IF ETEXT > "" THEN
        E = ETEXT ; CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
    END
    INTEREST.RATE = R.NEW(SC.SBS.INTEREST.RATE)
    LOCAL4 = '' ; LOCAL6 = ''
    YCCY = R.NEW(SC.SBS.TRADE.CCY)
    RETURN
***************************************
* SUBROUTINE TO CALCULATE COMMISSIONS
* AND CHARGES FOR CUSTOMER .
***************************************
*-----------------
CALC.CUST.CHARGES:  *=====
*-----------------
    IF NOT(R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>) THEN
        RETURN
    END
* CI_10026040 - S
    IF AV = 1 THEN
        COUPON.TAX.IDX = ''
        COUPON.TAX.AMOUNT = ''
    END
* CI_10026040 - E

    IF POPULATE.FLD.VAL THEN  ;* BG_100007541 S
        GROSS.INT.AMT = COMI6 + R.NEW(SC.SBS.CU.COUP.TAX.AMT)<1,AV>
        INTEREST.AMT = COMI6
    END ELSE
        GROSS.INT.AMT = ''
        INTEREST.AMT = ''
        COMI6 = ''
    END   ;* BG_100007541 E
    GOSUB CALC.CUST.INT.AMT.TRD
* Calculate coupon tax amount
*
    SAM.ID = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>     ;* BG_100008063 s
    CALL F.READ('F.SEC.ACC.MASTER',SAM.ID,R.SEC.ACC.MASTER,F.SEC.ACC.MASTER,'')
    DEAL.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
    COUPON.TAX.STATUS = R.SEC.ACC.MASTER<SC.SAM.COUPON.TAX.STATUS>    ;* BG_100008063 e
    COUPON.TAX.AMT = GROSS.INT.AMT - INTEREST.AMT
    IF COUPON.TAX.AMT THEN
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = COUPON.TAX.AMT ; Y2 = "" ; Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN
                GOTO EXIT.CALC.NOM.AMT
            END
            COUPON.TAX.AMT = Y2
        END
        IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
            CALL SC.CHF.ROUNDING(COUPON.TAX.AMT)
        END
        YAMT = COUPON.TAX.AMT
* GB9901179 - Call correctly
        CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
*
* GB9801517
* populate coupon.tax.amt only if dealer book and tax exempt
        COUPON.TAX.AMT = YAMT
        IF (DEAL.BOOK) AND (COUPON.TAX.STATUS EQ 'EXEMPT') THEN
            R.NEW(SC.SBS.CU.COUP.TAX.AMT)<1,AV> = YAMT
        END
*
    END
    YAMT = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        CALL SC.CHF.ROUNDING(YAMT)
    END
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
    R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = YAMT
*
* GB9801283
    IF COUPON.TAX.AMT THEN
* GB0100114 S
        COUPON.TAX.IDX<1,AV> = 1
    END ELSE
        COUPON.TAX.IDX<1,AV> = 0
* GB0100114 E
    END
    COMI6 = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
*
* GB9801068
    R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
    GOSUB CL.STOCK.EXCHANGE   ;*==
* GB9801068
    R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
    CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
    IF NOT(BOOK.DEAL) AND R.NEW(SC.SBS.NET.TRADE)[1,1] NE 'Y' THEN
        TRN.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
        CUSTOMER.COMM = 0
        IF TRN.CODE THEN
            LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
                IF R.STD.SEC.TRADE<SC.SST.COMM.PRIN.INT> = "PRINCIPAL" THEN
                    CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
                END ELSE
                    CU.GROSS.ACCR = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
                END
                GOSUB CHECK.WHT.TAX.CODE          ;* EN_10002037 S
                GOSUB CHECK.CUST.TAX    ;* EN_10002037 E
                GOSUB CHECK.CUST.COMM   ;*==
            END
        END
    END ELSE
        CUSTOMER.COMM = ''
    END
**VAT
    CUST.COMM = YARRAY(54)
    IF RECALC.FLAG = 'N' THEN
        LOCATE SC.SBS.CU.BRKR.COMM:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            INPUT.BUFFER3 = YARRAY(51)
        END
        IF POS THEN T.SEQU<-1> = "D":POS
        LOCATE SC.SBS.CU.FOREIGN.FEE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN
                INPUT.BUFFER3 := " ":YARRAY(53)
            END ELSE
                INPUT.BUFFER3 = YARRAY(53)
            END
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
        LOCATE SC.SBS.CU.COMMISSION:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
**
            IF R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> EQ '' THEN
                R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> = YARRAY(51)         ;* CI_10006386 S/E
            END
            IF R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> EQ '' THEN
                R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> = YARRAY(53)       ;* CI_10005017 E; * CI_10006386 S/E
            END
*
            IF INPUT.BUFFER3 # '' THEN
                INPUT.BUFFER3 := " ":YARRAY(54)
            END ELSE
                INPUT.BUFFER3 = YARRAY(54)
            END
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
**VAT
        LOCATE SC.SBS.CU.COMM.TAX:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            VAT.TAX = CUSTOMER.COMM<2>
        END ELSE
            VAT.TAX = ''
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
        R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = VAT.TAX
        R.NEW(SC.SBS.COMM.CODE)<1,AV> = CUSTOMER.COMM<3>
        R.NEW(SC.SBS.COMM.PERCENT)<1,AV> = CUSTOMER.COMM<7>
        R.NEW(SC.SBS.COM.TAX.CODE)<1,AV> = CUSTOMER.COMM<5>
        R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = CUSTOMER.COMM<6>
        R.NEW(SC.SBS.COM.TAX.XRTE)<1,AV> = CUSTOMER.COMM<4>
** END VAT
    END
    IF R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> = YARRAY(51)       ;* CI_10005017 S/E; * CI_10006386 S/E
    END
    IF R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV> = YARRAY(53)     ;* CI_10006386 S/E
    END
    IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = YARRAY(54)      ;* CI_10005017 E; * CI_10006386 S/E
    END
    CUST.COMMISSIONS<1,AV> = YARRAY(25)
    CUST.COMMISSIONS<2,AV> = YARRAY(26)
    CUST.COMMISSIONS<3,AV> = YARRAY(27)
    CUST.COMMISSIONS<4,AV> = YARRAY(35)
    CUST.COMMISSIONS<5,AV> = YARRAY(36)
    CUST.COMMISSIONS<6,AV> = YARRAY(37)
    CUST.COMMISSIONS<7,AV> = YARRAY(45)
    CUST.COMMISSIONS<8,AV> = YARRAY(46)
    CUST.COMMISSIONS<9,AV> = YARRAY(47)
    YARRAY(20) = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
    GOSUB CALC.LOCAL.CHARGES  ;*==
    IF RECALC.FLAG = 'N' THEN
        LOCATE SC.SBS.CU.STAMP.TAX:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(51) ELSE INPUT.BUFFER3 = YARRAY(51)
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
        LOCATE SC.SBS.CU.EBV.FEES:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(52) ELSE INPUT.BUFFER3 = YARRAY(52)
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
    END ELSE
        IF R.NEW(SC.SBS.CU.FEES.MISC)<1,AV> THEN
            R.NEW(SC.SBS.CU.FEES.MISC)<1,AV> = '' ;* CI_10005017 S; * CI_10006386 S/E
        END
    END
    IF R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> = '' THEN
        R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV> = YARRAY(51)       ;* CI_10006386 S/E
    END
    IF R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> = YARRAY(52)        ;* CI_10005017 E; * CI_10006386 S/E
    END
    IF NOT(NO.CU.INT) THEN
        IF TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
            R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = YARRAY(12)
        END
    END
* GB9801068
    R.NEW(SC.SBS.CU.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
    LOCATE SC.SBS.CU.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
    IF POS THEN
        T.SEQU<-1> = "D":POS
    END
* GB9901705 - Use the saved category if necessary
    IF YARRAY(21) NE R.STD.SEC.TRADE<SC.SST.CL.MISC.FEES.CAT> AND YARRAY(21) NE '' THEN
        CUST.CHARGES<1,AV> = SAVE.CUST.CAT        ;* Misc. Fees category.
    END ELSE
        CUST.CHARGES<1,AV> = YARRAY(21) ;* Misc. Fees category.
    END
    IF NOT(CUST.CHARGES<1,AV>) THEN
        CUST.CHARGES<1,AV> = YARRAY(25)
    END
    CUST.CHARGES<2,AV> = YARRAY(22)
    CUST.CHARGES<3,AV> = YARRAY(23)
    CUST.CHARGES<4,AV> = YARRAY(25)
    CUST.CHARGES<5,AV> = YARRAY(26)
    CUST.CHARGES<6,AV> = YARRAY(27)
    CUST.CHARGES<7,AV> = YARRAY(30)
    CUST.CHARGES<8,AV> = YARRAY(31)
    CUST.CHARGES<9,AV> = YARRAY(32)
    IF LOCAL4 AND NOT(CUST.COMM) AND RECALC.FLAG = 'N' THEN
**
        XX = COUNT(INPUT.BUFFER3,' ')
        IF INPUT.BUFFER3 THEN
            INPUT.BUFFER3 := STR(' ':C.B,XX+1)
        END
    END
*
    IF CUSTOMER.COMM NE '' THEN
        R.NEW(SC.SBS.CU.COMMISSION)<1,AV> = CUSTOMER.COMM<1>
        LOCATE SC.SBS.CU.COMMISSION:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
    END
*
    IF RECALC.FLAG = 'Y' THEN
        COMI7 = ''
        RECALC.CUST.AM.DUE = 1          ;* BG_100008558
        GOSUB CALC.CUST.NET   ;*==
    END
    RETURN
*------------------------------------------------------------------------
CALC.CUST.INT.AMT.TRD:

*CUST int amt is calculated here
*if it is a BOND then net or gross of
*int is taken as per setup.

    IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) AND R.NEW(SC.SBS.INTEREST.DAYS) AND COMI6 = '' THEN
        INTEREST.DAYS = R.NEW(SC.SBS.INTEREST.DAYS) ; INTEREST.AMT = '' ; NYEAR.DAYS = ''
        IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
            CALC.INTEREST = 0
        END ELSE CALC.INTEREST = 1
        IF CALC.INTEREST THEN
            IF BOND.OR.SHARE = 'B' THEN
                CUM.EX.DIV = 'EX.DIV'
                SECURITY.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV>
                GOSUB CALC.CUST.WEIGHT.AVG.PRICE  ;* CI_10017271
                CALL SC.CALC.INT.AMT(R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>,R.NEW(SC.SBS.LAST.PAYMNT.DATE),R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),R.NEW(SC.SBS.INTEREST.RATE),YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)
                CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),GROSS.INT.AMT)   ;* CI_10033208
                CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),INTEREST.AMT)    ;* CI_10033208
                COUPON.TAX.AMT = GROSS.INT.AMT - INTEREST.AMT
                IF COUPON.TAX.AMT THEN
                    COUPON.TAX.IDX<1,AV> = 1      ;*Tax Deducted - NON.EXEMPT
                    COUPON.TAX.AMOUNT<1, AV> = COUPON.TAX.AMT
                END ELSE
                    COUPON.TAX.IDX<1,AV> = 0      ;* EXEMPT
                    COUPON.TAX.AMOUNT<1, AV> = 0
                END
                R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID      ;* EN_1000793 S/E
                IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
                    CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
                    CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                    Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
                    IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                        GOSUB CALC.EXCHRATE       ;*==
                    END
                    Y1 = CAP.AMT ; Y2 = "" ; Y3 = ""
                    Y5 = "" ; Y6 = "" ; RET.CODE = ""
                    GOSUB CALC.EXCHRATE ;*==
                    IF E > "" THEN
                        GOTO EXIT.CALC.NOM.AMT
                    END
                    CAP.AMT = Y2
                END
                YAMT = CAP.AMT
                IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                    CALL SC.CHF.ROUNDING(YAMT)
                END
                CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
                R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV> = YAMT
                IF R.SEC.MASTER<SC.SCM.PAID.CODE> = '%' THEN
                    INTEREST.AMT = (INTEREST.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
                    GROSS.INT.AMT = (GROSS.INT.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
                END
            END
        END
* GROSS.INT.AMT will equal to INTEREST.AMT if no coupon tax amt
        IF R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> EQ '' OR NOT(GTSVAL) THEN
            R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = INTEREST.AMT          ;* CI_10014817/S/E
        END
        COMI6 = INTEREST.AMT
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> ; Y2 = "" ; Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN
                GOTO EXIT.CALC.NOM.AMT
            END
            R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = Y2
            COMI6 = Y2
        END
    END ELSE
        IF R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> EQ '' OR NOT(GTSVAL) THEN
            R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> = INTEREST.AMT          ;* CI_10014817/S/E
        END
    END

    RETURN
*------------------------------------------------------------------------
*****************************************
* SUBROUTINE TO CALCULATE COMMISSIONS AND
* CHARGES FOR THE BROKER .
*****************************************
*----------------------
CALC.BROKER.CHARGES:
*----------------------
    IF NOT(R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>) THEN
        RETURN
    END
    GOSUB CALC.BROKER.INT.AMT.TRD
    YAMT = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        CALL SC.CHF.ROUNDING(YAMT)
    END
* GB9901179 - Call correctly
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
    R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = YAMT
    COMI6 = YAMT
* GB9801068
    R.NEW(SC.SBS.BR.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
    GOSUB BR.STOCK.EXCHANGE   ;*==
    BR.COMM = YARRAY(51)
    BR.FOR = YARRAY(53)
    TRN.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
    BROKER.COMM = 0
    IF TRN.CODE THEN
        LOCATE TRN.CODE IN TRANS.CODES<1,1> SETTING POS ELSE
            GOSUB CHECK.BROK.COMM       ;* GB9301824 ;*==
        END
    END
    IF BROKER.COMM # '' THEN
        YARRAY(54) = BROKER.COMM        ;* GB9301824
    END
    IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> NE 'CLIENT' THEN
        YARRAY(54) = 0
    END
    IF RECALC.FLAG = 'N' THEN
        LOCATE SC.SBS.BR.BROKER.COMM:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            INPUT.BUFFER3 = YARRAY(51)
        END
        IF POS THEN T.SEQU<-1> = "D":POS
        LOCATE SC.SBS.BR.FOREIGN.FEE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(53) ELSE INPUT.BUFFER3 = YARRAY(53)
        END
        IF POS THEN T.SEQU<-1> = "D":POS
* GB9301824 Start
        LOCATE SC.SBS.CL.COMMISSION:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(54) ELSE INPUT.BUFFER3 = YARRAY(54)
        END
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
* GB9301824 End
    END
    IF R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> EQ '' THEN R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = YARRAY(51)          ;* CI_10006386 S/E
    IF R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> EQ '' THEN R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> = YARRAY(53)          ;* CI_10006386 S/E
    IF R.NEW(SC.SBS.CL.COMMISSION)<1,AV> EQ '' THEN R.NEW(SC.SBS.CL.COMMISSION)<1,AV> = YARRAY(54)  ;* CI_10005017 E; * CI_10006386 S/E
    BROKER.COMMISSIONS<1,AV> = YARRAY(20)
    BROKER.COMMISSIONS<2,AV> = YARRAY(21)
    BROKER.COMMISSIONS<3,AV> = YARRAY(22)
    BROKER.COMMISSIONS<4,AV> = YARRAY(40)
    BROKER.COMMISSIONS<5,AV> = YARRAY(41)
    BROKER.COMMISSIONS<6,AV> = YARRAY(42)
    BROKER.COMMISSIONS<7,AV> = YARRAY(30)         ;* GB9301824
    BROKER.COMMISSIONS<8,AV> = YARRAY(31)         ;* GB9301824
    BROKER.COMMISSIONS<9,AV> = YARRAY(32)         ;* GB9301824
    YARRAY(20) = R.NEW(SC.SBS.BROKER.NO)<1,AV>
    GOSUB CALC.LOCAL.CHARGES  ;*==
    IF RECALC.FLAG = 'N' THEN
        LOCATE SC.SBS.BR.STAMP.TAX:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(51) ELSE INPUT.BUFFER3 = YARRAY(51)
        END
        IF POS THEN T.SEQU<-1> = "D":POS
        LOCATE SC.SBS.BR.EBV.FEES:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
**
        IF POS THEN
            IF INPUT.BUFFER3 # '' THEN INPUT.BUFFER3 := " ":YARRAY(52) ELSE INPUT.BUFFER3 = YARRAY(52)
        END
        IF POS THEN T.SEQU<-1> = "D":POS
    END
    IF R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> = YARRAY(51)       ;* CI_10006386 S/E
    END
    IF R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> EQ '' THEN
        R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> = YARRAY(52)        ;* CI_10005017 E; * CI_10006386 S/E
    END
    IF NOT(NO.BR.INT) THEN
        IF TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
            R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = YARRAY(12)
        END
    END
* GB9801068
    R.NEW(SC.SBS.BR.GROSS.ACCR)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
    LOCATE SC.SBS.BR.GROSS.ACCR:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
    IF POS THEN T.SEQU<-1> = "D":POS
    BROKER.CHARGES<1,AV> = YARRAY(25)
    BROKER.CHARGES<2,AV> = YARRAY(26)
    BROKER.CHARGES<3,AV> = YARRAY(27)
    BROKER.CHARGES<4,AV> = YARRAY(30)
    BROKER.CHARGES<5,AV> = YARRAY(31)
    BROKER.CHARGES<6,AV> = YARRAY(32)
* GB9900797 - If this is still blank a different array has been used
    IF NOT(BROKER.CHARGES<7,AV>) THEN
        BROKER.CHARGES<7,AV> = R.STD.SEC.TRADE<SC.SST.BR.MISC.FEES.CAT>         ;* GB0001338 S/E
    END
* GB0001338S
    BROKER.CHARGES<8,AV> = R.STD.SEC.TRADE<SC.SST.BR.MIS.DB.TRANS.CD>
    BROKER.CHARGES<9,AV> = R.STD.SEC.TRADE<SC.SST.BR.MIS.CR.TRANS.CD>
* GB0001338E
*
    IF LOCAL4 AND NOT(BR.FOR) AND RECALC.FLAG = 'N' THEN
**
        XX = COUNT(INPUT.BUFFER3,' ')
        IF BR.COMM = '' THEN
            IF INPUT.BUFFER3 THEN INPUT.BUFFER3 := STR(' ':C.B,XX+1)
        END ELSE
            IF INPUT.BUFFER3 THEN INPUT.BUFFER3 := STR(' ':C.B,XX)
        END
    END
*   CALCULATE BROKER COMMISION AFTER GETTING NET INTEREST AMT
    GOSUB BR.STOCK.EXCHANGE   ;*==
    BROKER.COMM = 0
    IF BROKER.COMM THEN
        R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> = BROKER.COMM
        LOCATE SC.SBS.BR.BROKER.COMM:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
        IF POS THEN
            T.SEQU<-1> = "D":POS
        END
    END
*
    IF RECALC.FLAG = 'Y' THEN
        COMI7 = ''
        GOSUB CALC.BRKR.NET   ;*==
    END
    RETURN
*-------------------------------------------------------------------------------
CALC.BROKER.INT.AMT.TRD:

*Broker int amt is calculated here
*if it is a BOND then net or gross of
*int is taken as per setup.

    IF R.NEW(SC.SBS.LAST.PAYMNT.DATE) AND R.NEW(SC.SBS.INTEREST.DAYS) AND COMI6 = '' THEN
        INTEREST.DAYS = R.NEW(SC.SBS.INTEREST.DAYS) ; INTEREST.AMT = '' ; NYEAR.DAYS = ''
* GB9800993
        GROSS.INT.AMT = ''

        IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
            CALC.INTEREST = 0
        END ELSE
            CALC.INTEREST = 1
        END
        IF CALC.INTEREST THEN
            IF BOND.OR.SHARE = 'B' THEN
                CUM.EX.DIV = 'EX.DIV'
* GB9801068 (Starts)
                SECURITY.PRICE = R.NEW(SC.SBS.BR.PRICE)<1,AV>
                GOSUB CALC.BR.WEIGHT.AVG.PRICE    ;* CI_10017271
                GOSUB FIND.CUST.CHARGES ;* BG_100007541 S/E
                IF CTAX.STATUS EQ 'EXEMPT' THEN
                    CTAX.STATUS = ''    ;* Gross
                END ELSE
                    CTAX.STATUS = VM:'NON.EXEMPT' ;* Net
                END
                CALL SC.CALC.INT.AMT(R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>,R.NEW(SC.SBS.LAST.PAYMNT.DATE),R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),R.NEW(SC.SBS.INTEREST.RATE),YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, CTAX.STATUS,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)       ;* GB9800993
                R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID      ;* EN_1000793 S/E
                YAMT = CAP.AMT
                IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                    CALL SC.CHF.ROUNDING(YAMT)
                END
                CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),YAMT)
                R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV> = YAMT
                IF R.SEC.MASTER<SC.SCM.PAID.CODE> = '%' THEN
                    INTEREST.AMT = (INTEREST.AMT * R.SEC.MASTER<SC.SCM.PAID.AMOUNT>)/100
                END
            END
        END
        IF R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> EQ '' OR NOT(GTSVAL) THEN
            R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = INTEREST.AMT         ;* CI_10014817/S/E
        END
* FOLLOWING CURRENCY CONVERSION ADDED AFTER REMOVING PREVIOUS CONVERSION
* LINES HERE AS PART OF G10220369
* G10220369 S
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> ; Y2 = "" ; Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN
                GOTO EXIT.CALC.NOM.AMT
            END
            R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = Y2
        END
        COMI6 = INTEREST.AMT
    END ELSE
        IF R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> EQ '' OR NOT(GTSVAL) THEN
            R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> = COMI6      ;* CI_10014817/S/E
        END
    END   ;* CI_10005017 E
    RETURN
*-------------------------------------------------------------------------------



***********************************
* SUBROUTINE TO CALCULATE CUSTOMER
* NET AMOUNT DUE AND NET AMOUNT TRADE
***********************************
*----------------
CALC.CUST.NET:      *=====
*----------------
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS   ;*==
    FOREIGN.FEES = R.NEW(SC.SBS.CU.BRKR.COMM)<1,AV> + R.NEW(SC.SBS.CU.FOREIGN.FEE)<1,AV>
    IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
        DEDUCT.ST.TAX = 1
    END ELSE
        DEDUCT.ST.TAX = 0
    END
    IF DEDUCT.ST.TAX AND R.NEW(SC.SBS.SECURITY.CURRENCY) = LCCY AND R.SEC.MASTER<SC.SCM.COMPANY.DOMICILE> = 'CH' THEN
        LOCAL.FEES = R.NEW(SC.SBS.CU.COMMISSION)<1,AV> + R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> + R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> + COMI7 - R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
        NEW.ISSUE.STAMP.TAX = R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV>
    END ELSE
        LOCAL.FEES = R.NEW(SC.SBS.CU.COMMISSION)<1,AV> + R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> +R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV>+R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> + COMI7 - R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
        NEW.ISSUE.STAMP.TAX = 0
    END
    IF COMI4 = 'CREDIT' THEN
* GB9801068
        R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> + (FOREIGN.FEES + LOCAL.FEES) - R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV> ;* EN_10002391 S/E
    END ELSE
        IF R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
* GB9801068
            R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> - (FOREIGN.FEES + LOCAL.FEES) - R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>       ;* EN_10002391 S/E
        END ELSE
* GB9801068
            R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>+R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> - (FOREIGN.FEES + LOCAL.FEES) + R.NEW(SC.SBS.CU.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>       ;* EN_10002391 S/E
        END
    END
* EN_10002037 S
    TXN.TAX.AMT = R.NEW(SC.SBS.CU.WHT.TAX)<1,AV>
    GOSUB CALC.TAX.CUM.AMT
    IF COMI4 = 'CREDIT' THEN  ;* BG_100009867 S/E
        R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> + TXN.TAX.CUM.AMT
    END ELSE
        R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - TXN.TAX.CUM.AMT     ;* R.NEW(SC.SBS.CU.WHT.TAX)
    END   ;* BG_100009867 S/E
* EN_10002037 E
    IF COMI4 = 'DEBIT' THEN
        IF CU.NAV.TYPE = 'NET' AND BOND.OR.SHARE = 'S' THEN
            GOSUB FETCH.CU.TAX
        END
        IF SUM(R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV>) THEN       ;* EN_10002717
            R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - SUM(R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV>)
        END ELSE
            IF SUM(R.NEW(SC.SBS.CU.TAX.TCY)<1,AV>) THEN
                R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - SUM(R.NEW(SC.SBS.CU.TAX.TCY)<1,AV>)
            END
        END
    END
    LOCATE SC.SBS.CU.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
        T.SEQU<-1> = 'D':DISP.POS
    END
    LOCATE SC.SBS.CU.DISC.AMT:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
        T.SEQU<-1> = 'D':DISP.POS
    END
    YAMT = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV>
    YCCY = R.NEW(SC.SBS.TRADE.CCY)
    CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        CALL SC.CHF.ROUNDING(YAMT)      ;* CI_10037362 S/E
    END
    R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> = YAMT
    R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> * R.NEW(SC.SBS.CU.DISC.PCENT)<1,AV> / 100
    YAMT = R.NEW(SC.SBS.CU.DISC.AMT)<1,AV>
    YCCY = R.NEW(SC.SBS.TRADE.CCY)
    CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
    R.NEW(SC.SBS.CU.DISC.AMT)<1,AV> = YAMT
* GB9901855 - If there is to be a Recalc, then clear the CU.EX.RATE.ACC
    IF RECALC.CUST.AM.DUE THEN
        LOCATE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> IN R.NEW(SC.SBS.SETTLE.CURR)<1,1> SETTING POSN THEN
            IF R.NEW(SC.SBS.CONSOL.RATE)<1,POSN> THEN
                IF R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> EQ R.NEW(SC.SBS.CONSOL.RATE)<1,POSN> THEN     ;* EN_10000836 S/E
                    R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = R.NEW(SC.SBS.CONSOL.RATE)<1,POSN>
                END ;* EN_10000836 S/E
            END
        END
        GOSUB CALC.CUST.AM.DUE          ;*==
    END
*
    RETURN
****************************************
* CALCULATE AMOUNT DUE FOR CUSTOMER.
****************************************
*----------------
CALC.CUST.AM.DUE:   *=====
*----------------
*
    IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = '' OR R.NEW(SC.SBS.TRADE.CCY) = '' THEN
        RETURN
    END
    SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    DEAL.BOOK = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
    BEGIN CASE
    CASE DEAL.BOOK
        ACC.CCY = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
*
        CLEAN.BOOK = ""
        CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.CLEAN.BOOK.COST,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CLEAN.BOOK)
        IF CLEAN.BOOK = "Y" THEN
            ACC.AMT.DUE = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
        END ELSE
* GB9801068
            ACC.AMT.DUE = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV> - R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV> - R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,AV>
        END
        IF R.STD.SEC.TRADE<SC.SST.POST.BELGIUM.TAX> = 'Y' AND R.STD.SEC.TRADE<SC.SST.CRF.POST> = 'Y' AND TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
            TAX.AMT = R.NEW(SC.SBS.CU.EBV.FEES)<1,AV> + R.NEW(SC.SBS.CU.STAMP.TAX)<1,AV>
        END ELSE
            TAX.AMT = 0
        END
        ACC.AMT.DUE = ACC.AMT.DUE + ABS(TAX.AMT)
        GOSUB EXIT.CALC.ACCT.AMT        ;*==
        R.NEW(SC.SBS.CU.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
        R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = '1'
    CASE OTHERWISE
        RET.CODE = ''
        LOCAL.CCY.BUY = '' ; LOCAL.CCY.SELL = ''
        ACC.CCY = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
        COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS         ;*==
        IF R.NEW(SC.SBS.TRADE.CCY) <> ACC.CCY THEN
* CI_10000493 Starts
* CI_10000493 Ends
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = ACC.CCY
            Y1 = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV>
            CUST.RATE = R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV>
            BASE.CCY = ''
            IF COMI4 = 'DEBIT' THEN
                BUY.CCY = CCY1 ; SELL.CCY = CCY2
                BUY.AMT = Y1 ; SELL.AMT = ''
            END ELSE
                BUY.CCY = CCY2 ; SELL.CCY = CCY1
                SELL.AMT = Y1 ; BUY.AMT = ''
            END
            CALL CUSTRATE('1',BUY.CCY,BUY.AMT,SELL.CCY,SELL.AMT,BASE.CCY,"",CUST.RATE,"","",LOCAL.CCY.BUY,LOCAL.CCY.SELL,RET.CODE)
            IF ETEXT THEN RETURN
            IF COMI4 = 'DEBIT' THEN
                ACC.AMT.DUE = SELL.AMT
            END ELSE
                ACC.AMT.DUE = BUY.AMT
            END
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.CU.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            IF CONSOL.RATE.INPUT NE 1 THEN        ;* EN_10000836 S/E
                R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = CUST.RATE
            END     ;* EN_10000836 S/E
        END ELSE
            ACC.AMT.DUE = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV>
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.CU.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = '1'
        END
    END CASE
*
    GOSUB UPDATE.FOREX.CONSOLIDATION    ;*==
*
    RETURN
*
*-------------------------
UPDATE.FOREX.CONSOLIDATION:   *=====
*-------------------------
*
    IF R.STD.SEC.TRADE<SC.SST.CONSOLIDATE.FX> = 'Y' ELSE
        RETURN
    END
    ACCOUNT.COUNT = DCOUNT(R.NEW(SC.SBS.CU.ACCOUNT.CCY),VM)
    HOLD.SETTLE.CURR = R.NEW(SC.SBS.SETTLE.CURR)
    HOLD.CONSOL.AMT = R.NEW(SC.SBS.CONSOL.AMT)
    HOLD.SETTLE.AMT = R.NEW(SC.SBS.SETTLE.AMT)
    HOLD.CONSOL.RATE = R.NEW(SC.SBS.CONSOL.RATE)
    HOLD.CON.VAL.DATE = R.NEW(SC.SBS.CON.VAL.DATE)
    R.NEW(SC.SBS.TRADE.CURR) = ''
    R.NEW(SC.SBS.SETTLE.CURR) = ''
    R.NEW(SC.SBS.CONSOL.AMT) = ''
    R.NEW(SC.SBS.SETTLE.AMT) = ''
    IF CONSOL.RATE.INPUT NE 1 AND GTSVAL NE 1 THEN          ;* EN_10000836 S/E ; * BG_100010567
        R.NEW(SC.SBS.CONSOL.RATE) = ''
    END   ;* EN_10000836 S/E
    R.NEW(SC.SBS.CON.VAL.DATE) = ''
    CONSOL.RATE.NEEDED = @FALSE
    FOR CNT = 1 TO ACCOUNT.COUNT
        IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> NE R.NEW(SC.SBS.TRADE.CCY) THEN
            CONSOL.RATE.NEEDED = @TRUE
            FOUND = @TRUE
            LOCATE R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> IN R.NEW(SC.SBS.SETTLE.CURR)<1,1> BY 'AR' SETTING POSN ELSE FOUND = @FALSE
            IF FOUND THEN
                R.NEW(SC.SBS.CONSOL.AMT)<1,POSN> += R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CNT>
            END ELSE
                INS R.NEW(SC.SBS.TRADE.CCY) BEFORE R.NEW(SC.SBS.TRADE.CURR)<1,POSN>
                INS R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CNT> BEFORE R.NEW(SC.SBS.SETTLE.CURR)<1,POSN>
                INS R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CNT> BEFORE R.NEW(SC.SBS.CONSOL.AMT)<1,POSN>
                INS R.NEW(SC.SBS.VALUE.DATE) BEFORE R.NEW(SC.SBS.CON.VAL.DATE)<1,POSN>
            END
        END
    NEXT CNT
    IF R.STD.SEC.TRADE<SC.SST.CONSOLIDATE.FX> = 'Y' AND CONSOL.RATE.NEEDED THEN
        N(SC.SBS.CONSOL.RATE) = '11.1.C'
        T(SC.SBS.CONSOL.RATE)<3> = ''
        T(SC.SBS.CON.VAL.DATE)<3> = ''
    END ELSE
        N(SC.SBS.CONSOL.RATE) = '11..C'
        T(SC.SBS.CONSOL.RATE)<3> = 'NOINPUT'
        T(SC.SBS.CON.VAL.DATE)<3> = 'NOINPUT'
    END
*
    IF R.NEW(SC.SBS.SETTLE.CURR) THEN
        SETTLE.COUNT = DCOUNT(R.NEW(SC.SBS.SETTLE.CURR),VM)
        FOR CT = 1 TO SETTLE.COUNT
            LOCATE R.NEW(SC.SBS.SETTLE.CURR)<1,CT> IN HOLD.SETTLE.CURR<1,1> SETTING POSN THEN
                IF R.NEW(SC.SBS.CONSOL.AMT)<1,CT> EQ HOLD.CONSOL.AMT<1,POSN> THEN
                    R.NEW(SC.SBS.CONSOL.RATE)<1,CT> = HOLD.CONSOL.RATE<1,POSN>
                    R.NEW(SC.SBS.SETTLE.AMT)<1,CT> = HOLD.SETTLE.AMT<1,POSN>
                END ELSE      ;* CI_10035944 S
                    IF R.NEW(SC.SBS.CONSOL.RATE)<1,CT> THEN
                        Y4 = R.NEW(SC.SBS.CONSOL.RATE)<1,POSN>
                        Y1 = R.NEW(SC.SBS.CONSOL.AMT)<1,POSN>
                        CCY1 = R.NEW(SC.SBS.TRADE.CURR)<1,POSN>
                        CCY2 = R.NEW(SC.SBS.SETTLE.CURR)<1,POSN>
                        Y2 = "" ; Y3 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
                        GOSUB CALC.EXCHRATE       ;*==
                        IF R.NEW(SC.SBS.SETTLE.CURR)<1,POSN> = 'CHF' THEN
                            CALL SC.CHF.ROUNDING(Y2)
                        END
                        R.NEW(SC.SBS.SETTLE.AMT)<1,POSN> = Y2
                    END
                END ;* CI_10035944 E
            END
        NEXT CT
    END
*
    CALL REBUILD.SCREEN
*
    RETURN
*
*-------------------
UPDATE.CUST.ACC.AMT:*=====
*-------------------
*
    ACC.COUNT = DCOUNT(R.NEW(SC.SBS.CU.ACCOUNT.CCY),VM)
    FOR CT = 1 TO ACC.COUNT
        IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CT> = R.NEW(SC.SBS.SETTLE.CURR)<1,AV> THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CT>
            Y1 = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CT>
            Y2 = '' ; Y3 = ''
            Y4 = COMI
            Y5 = '' ; Y6 = ''
            GOSUB CALC.EXCHRATE         ;*==
            IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,CT> = 'CHF' THEN
                CALL SC.CHF.ROUNDING(Y2)
            END
            R.NEW(SC.SBS.CU.AMOUNT.DUE)<1,CT> = Y2
            R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,CT> = Y4
        END
    NEXT CT
*
    RETURN
*
********************************************
* SUBROUTINE TO CALCULATE BROKER NET AMOUNT
* DUE AND NET AMOUNT TRADE .
********************************************
*---------------
CALC.BRKR.NET:
*---------------
    COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS     ;*==
    IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
        DEDUCT.ST.TAX = 1
    END ELSE
        DEDUCT.ST.TAX = 0
    END
    IF DEDUCT.ST.TAX AND R.NEW(SC.SBS.SECURITY.CURRENCY) = LCCY AND R.SEC.MASTER<SC.SCM.COMPANY.DOMICILE> = 'CH' THEN
        CHARGES = R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> + R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> + R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> + COMI7 + R.NEW(SC.SBS.CL.COMMISSION)<1,AV>
        NEW.ISSUE.STAMP.TAX = R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV>
        IF COMI4 EQ 'CREDIT' THEN
            NEW.ISSUE.STAMP.TAX = -NEW.ISSUE.STAMP.TAX
        END
    END ELSE
        CHARGES = R.NEW(SC.SBS.BR.BROKER.COMM)<1,AV> + R.NEW(SC.SBS.BR.FOREIGN.FEE)<1,AV> + R.NEW(SC.SBS.BR.STAMP.TAX)<1,AV> + R.NEW(SC.SBS.BR.EBV.FEES)<1,AV> + COMI7 + R.NEW(SC.SBS.CL.COMMISSION)<1,AV>
        NEW.ISSUE.STAMP.TAX = 0
    END
*** SWITCH CHARGES FOR CLIENT
    IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = "CLIENT" THEN      ;* ADD CHARGES
        IF COMI4 = 'CREDIT' THEN
* GB9801068
            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
        END ELSE
            IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
* GB9801068
                R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
            END ELSE
* GB981068
                R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES + R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
            END
        END
    END ELSE
        IF COMI4 = 'CREDIT' THEN
            IF R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> THEN
* GB9801068
                R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
            END ELSE
* GB9801068
                R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> - CHARGES + R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
            END
        END ELSE
* GB981068
            R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + CHARGES - R.NEW(SC.SBS.BR.REALLOW.AMT)<1,AV> + NEW.ISSUE.STAMP.TAX + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>
        END
    END
*
    LOCATE SC.SBS.BR.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING DISP.POS THEN
        T.SEQU<-1> = 'D':DISP.POS
    END
*
    YCCY = R.NEW(SC.SBS.TRADE.CCY)
    YAMT = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
    CALL SC.FORMAT.CCY.AMT(YCCY,YAMT)
    IF R.NEW(SC.SBS.TRADE.CCY)<1,AV> = 'CHF' THEN
        CALL SC.CHF.ROUNDING(YAMT)      ;* CI_10037362 S/E
    END
    R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = YAMT
    IF RECALC.BRKR.AM.DUE THEN
* BG_100003642 -S
        IF NOT(R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV>) THEN
            R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV> = ''
        END
* BG_100003642 -E
        GOSUB CALC.BRKR.AM.DUE          ;*==
    END
    RETURN
***************************************
* CALCULATE BROKER AMOUNT DUE.
***************************************
*----------------
CALC.BRKR.AM.DUE:   *=====
*----------------
    IF R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV> = '' OR R.NEW(SC.SBS.TRADE.CCY) = '' THEN
        RETURN
    END
    SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,1>
    DEAL.BOOK = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
    BEGIN CASE
    CASE DEAL.BOOK
        ACC.CCY = R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV>
        IF R.NEW(SC.SBS.TRADE.CCY) <> ACC.CCY THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = ACC.CCY
            Y1 = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
            Y2 = '' ; Y3 = '' ; Y5 = '' ; Y6 = ''
            Y4 = R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV>
            GOSUB CALC.EXCHRATE         ;*==
            ACC.AMT.DUE = Y2
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.BR.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV> = Y4
        END ELSE
            ACC.AMT.DUE = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.BR.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV> = '1'
        END
    CASE OTHERWISE
        RET.CODE = ''
        LOCAL.CCY.BUY = '' ; LOCAL.CCY.SELL = ''
        ACC.CCY = R.NEW(SC.SBS.BR.ACCOUNT.CCY)<1,AV>
        COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV> ; GOSUB CHECK.TRANS ;*==
        IF R.NEW(SC.SBS.TRADE.CCY) <> ACC.CCY THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = ACC.CCY
* BG_100003642 -S
            IF R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> EQ '' THEN R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV> = 0
* BG_100003642 -E
            Y1 = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
            CUST.RATE = R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV>
            BASE.CCY = ''
            IF COMI4 = 'DEBIT' THEN
                BUY.CCY = CCY1 ; SELL.CCY = CCY2
                BUY.AMT = Y1 ; SELL.AMT = ''
            END ELSE
                BUY.CCY = CCY2 ; SELL.CCY = CCY1
                SELL.AMT = Y1 ; BUY.AMT = ''
            END
            CALL CUSTRATE('1',BUY.CCY,BUY.AMT,SELL.CCY,SELL.AMT,BASE.CCY,"",CUST.RATE,"","",LOCAL.CCY.BUY,LOCAL.CCY.SELL,RET.CODE)
            IF ETEXT THEN RETURN
            IF COMI4 = 'DEBIT' THEN
                ACC.AMT.DUE = SELL.AMT
            END ELSE
                ACC.AMT.DUE = BUY.AMT
            END
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.BR.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV> = CUST.RATE
        END ELSE
            ACC.AMT.DUE = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
            GOSUB EXIT.CALC.ACCT.AMT    ;*==
            R.NEW(SC.SBS.BR.AMOUNT.DUE)<1,AV> = ACC.AMT.DUE
            R.NEW(SC.SBS.BR.EX.RATE.ACC)<1,AV> = '1'
        END
    END CASE
    RETURN
************************************************
* SUBROUTINE TO CHECK THE OUTSTANDING DELIVERIES
* BEFORE REVERSAL OF SEC.TRADE RECORD IS PERMITTED
************************************************
*---------------
CHECK.OUTST.DEL:    *=====
*---------------
    REV.POSSIBLE = 1
    CALL SC.SEC.TRADE.OUT.DEL(REV.POSSIBLE)
    IF REV.POSSIBLE THEN
        CALL SC.VAULT.REVERSE
    END
*
    RETURN
*
*************************************
* SUBROUTINE TO CALCULATE THE LAST INT
* PAYMENT DATE .
*************************************
*------------------
CALC.LAST.PAY.DATE: *=====
*------------------
    INTEREST.RATE = ''
    IF BOND.OR.SHARE = "B" THEN
        IF COMI5 = "" THEN
            IF R.NEW(SC.SBS.VALUE.DATE) < R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE> THEN
* CI_10009210 S
                IF R.NEW(SC.SBS.VALUE.DATE) < R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE> AND R.SEC.MASTER<SC.SCM.PREV.ACCR.STR.DATE> THEN
                    COMI2 = R.SEC.MASTER<SC.SCM.PREV.ACCR.STR.DATE>
                END ELSE
* CI_10009210 E
                    COMI2 = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                END ;* CI_10009210
                UPPER.RANGE = '366' ; LOWER.RANGE = '-30'
                LOCATE COMI2 IN R.SEC.MASTER<SC.SCM.RATE.CH.DATE,1> SETTING NPOS ELSE NPOS = 0      ;* CI_10009210
                IF NPOS THEN
                    INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,NPOS>
                END ELSE
                    INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
                END
* CI_10000712/S
* CI_10000712/E
            END ELSE
                IF R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'O' THEN
                    COMI2 = R.SEC.MASTER<SC.SCM.ACCRUAL.START.DATE>
                END ELSE
                    COMI2 = R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE>
                END
                UPPER.RANGE = '14' ; LOWER.RANGE = '0'
                LOCATE R.SEC.MASTER<SC.SCM.INT.PAYMENT.DATE> IN R.SEC.MASTER<SC.SCM.RATE.CH.DATE,1> SETTING NPOS ELSE NPOS = 0
                IF NPOS THEN
                    INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,NPOS>
                END ELSE
                    INTEREST.RATE = R.SEC.MASTER<SC.SCM.INTEREST.RATE,1>
                END
            END
        END ELSE COMI2 = COMI5
*
        IF COMI2 > "" THEN
            INTEREST.DAYS = '' ; INTEREST.AMT = '' ; MONTH.DAYS = '' ; NYEAR.DAYS = ''
* GB9800993
            GROSS.INT.AMT = ''

            YEAR.DAYS = R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>
            SEC.TOT.NOM = 0
            CUM.EX.DIV = 'EX.DIV'
* GB9801068
* GB9801220
            SECURITY.PRICE = ""
            BOND.VALUE.DATE = R.NEW(SC.SBS.VALUE.DATE)      ;* GB0101290 S
            IF (R.NEW(SC.SBS.MATURITY.DATE)) AND R.NEW(SC.SBS.VALUE.DATE) GE R.NEW(SC.SBS.MATURITY.DATE) THEN
                R.NEW(SC.SBS.VALUE.DATE) = R.NEW(SC.SBS.MATURITY.DATE)          ;* CI_10005226 - E
            END
            CALL SC.CALC.INT.AMT(SEC.TOT.NOM,COMI2,R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.TRADE.DATE),INTEREST.RATE,YEAR.DAYS,R.NEW(SC.SBS.SECURITY.CODE),INTEREST.DAYS,INTEREST.AMT,NYEAR.DAYS,CUM.EX.DIV, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,CAP.RATE,CAP.AMT,SECURITY.PRICE,GROSS.INT.AMT)        ;* GB9800993
            R.NEW(SC.SBS.INTEREST.DAYS) = INTEREST.DAYS
            R.NEW(SC.SBS.BND.RND.METH) = SC.BOND.ROUNDING.ID          ;* EN_1000793 S/E
            R.NEW(SC.SBS.VALUE.DATE) = BOND.VALUE.DATE      ;* GB0101290 S/E
            COMI5 = COMI2
        END ELSE
            R.NEW(SC.SBS.INTEREST.DAYS) = ''
        END
    END ELSE
        R.NEW(SC.SBS.INTEREST.DAYS) = ''
    END
    R.NEW(SC.SBS.INTEREST.RATE) = INTEREST.RATE
    CALL REFRESH.FIELD(SC.SBS.INTEREST.RATE, '')  ;* CI_10009210
    R.NEW(SC.SBS.LAST.PAYMNT.DATE) = COMI5
    RETURN
*------------------ CI_10021922 S
CUST.BRO.DEF.PRICE:
*------------------ ; * To default the Cust/Broker price.
    IF R.STD.SEC.TRADE<SC.SST.DEF.CUST.PRICE> = "Y" THEN
        R.PRT = ''
        CALC.METHOD = ''
        CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRT,ETEXT)
        CALC.METHOD = R.PRT<SC.PRT.CALCULATION.METHOD>
        DISC.INSTR = R.PRT<SC.PRT.DISC.INSTRUMENT>
        MULT.FACT = R.PRT<SC.PRT.MULTIPLY.FACTOR>
        IF CALC.METHOD[5] = 'YIELD' OR CALC.METHOD = 'DISCOUNT' THEN
            DEF.PRICE = R.SEC.MASTER<SC.SCM.DISC.YLD.PERC>
        END ELSE
            DEF.PRICE = R.SEC.MASTER<SC.SCM.LAST.PRICE>
        END
        R.PRT = ''
        PERCENTAGE = ''
        PERCENTAGE = R.PRT<SC.PRT.PERCENTAGE>
        PERC.CODE = PERCENTAGE
        IF R.SEC.MASTER<SC.SCM.PRICE.CURRENCY> <> R.NEW(SC.SBS.TRADE.CCY) AND PERCENTAGE NE 'Y' THEN          ;* CI-10005230 E
            CCY1 = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = DEF.PRICE
            Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = "" ;
            GOSUB CALC.EXCHPRICE        ;* GB9900532
            DEF.PRICE = Y2
        END
    END
    RETURN          ;* CI_10021922 S/E

*------------------
CALC.NOM.AMT:       *=====
*------------------
    PERC.CODE = ""
    MULT.FACT = 0
    TOT.NOM = 0
    GROSS.AMT = 0
    SEC.GROSS.AMT = ""
    E = ""
    AF5 = R.NEW(SC.SBS.PRICE.TYPE)
    CHECKFILE2 = "PRICE.TYPE":FM:SC.PRT.MULTIPLY.FACTOR:FM:".A"
    CALL DBR(CHECKFILE2, AF5, MULT.FACT)
* EN_10000784 S
    IF R.SEC.MASTER<SC.SCM.NOMINAL.FACTOR> THEN
        IF R.SEC.MASTER<SC.SCM.FACTOR.TYPE> = "DIVIDE" THEN
            MULT.FACT = 1 / R.SEC.MASTER<SC.SCM.NOMINAL.FACTOR>
        END ELSE
            MULT.FACT = R.SEC.MASTER<SC.SCM.NOMINAL.FACTOR>
        END
    END
* EN_10000784 E
    CHECKFILE2 = "PRICE.TYPE":FM:SC.PRT.PERCENTAGE:FM:".A"
    CALL DBR(CHECKFILE2, AF5, PERC.CODE)
    COUNT.AFX = COUNT(R.NEW(AFX)<1,AV>,SM)+1
    FOR AVX = 1 TO COUNT.AFX
        NO.NOM = EXTRACT(R.NEW(AFX),1,AV,AVX)
* CI_10015648 S
* P and L calculation for each customer
*
        IF PL.CALCULATION THEN
            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
            GOSUB CHECK.TRANS
            CU.TRANS.CODE = COMI4
            COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,1>
            GOSUB CHECK.TRANS
            BR.TRANS.CODE = COMI4
            CR.PRICE = '' ; DR.PRICE = ''
            IF NOT(R.NEW(SC.SBS.CUST.PRICE)<1,AV,AVX>) AND NOT(DEF.PRICE) THEN  ;* CI_10021922 S
                GOSUB CUST.BRO.DEF.PRICE          ;* To get default Price.
            END
            IF NOT(R.NEW(SC.SBS.CUST.PRICE)<1,AV,AVX>) AND DEF.PRICE THEN
                R.NEW(SC.SBS.CUST.PRICE)<1,AV,AVX> = DEF.PRICE
            END     ;* CI_10021922 E
            IF CU.TRANS.CODE EQ 'CREDIT' THEN
                CR.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV,AVX>
            END ELSE
                DR.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV,AVX>
            END
            IF NOT(R.NEW(SC.SBS.BR.PRICE)<1,1,1>) AND NOT(DEF.PRICE) THEN       ;* CI_10021922 S
                GOSUB CUST.BRO.DEF.PRICE          ;* To get default Price.
            END
            IF NOT(R.NEW(SC.SBS.BR.PRICE)<1,1,1>) AND DEF.PRICE THEN
                R.NEW(SC.SBS.BR.PRICE)<1,1,1> = DEF.PRICE
            END     ;* CI_10021922 E
            IF  BR.TRANS.CODE EQ 'CREDIT' THEN
                CR.PRICE = R.NEW(SC.SBS.BR.PRICE)<1,1,1>
            END ELSE
                DR.PRICE = R.NEW(SC.SBS.BR.PRICE)<1,1,1>
            END

            PRICE = CR.PRICE - DR.PRICE
        END ELSE
* CI_10015648 E
            PRICE = EXTRACT(R.NEW(AFX1),1,AV,AVX)
            IF NOT(PRICE) AND NO.NOM THEN
                IF NOT(DEF.PRICE) THEN  ;* CI_10021922 S
                    GOSUB CUST.BRO.DEF.PRICE      ;* To get default Price.
                END
                IF DEF.PRICE THEN
                    R.NEW(AFX1)<1,AV,AVX> = DEF.PRICE
                    PRICE = DEF.PRICE   ;* CI_10023427
                END ELSE      ;* CI_10021922 E
                    E = 'INPUT MISSING'
                    AF = AFX1 ; AS = AVX
                    RETURN
                END ;* CI_10021922 S/E
            END
        END         ;* CI_10015648
        TOT.NOM = TOT.NOM + NO.NOM
        TOT.AMT = NO.NOM * PRICE * MULT.FACT
** DISCO
        CONSID = ''
        IF R.NEW(SC.SBS.SECURITY.CODE) NE '' THEN
* GB9801068 (Starts)
            CAP.RATE = "" ; CAP.AMT = ""
            FACTOR = ''       ;* CI_10000996 S/E
            CALL SC.CALC.CONSID(R.NEW(SC.SBS.SECURITY.CODE),NO.NOM,PRICE,R.NEW(SC.SBS.VALUE.DATE),CONSID,CAP.RATE,CAP.AMT,FACTOR)
            R.NEW(SC.SBS.FACTOR) = FACTOR
* GB9801068 (Ends)
        END
        GROSS.AMT += CONSID
**
        FIELD.NO = AFX1:'.':AV:'.':AVX
        LOCATE FIELD.NO IN T.FIELDNO<1> SETTING POS ELSE POS = 0
        IF POS THEN
            T.ENRI<POS> = T.ENRI<SC.SBS.PRICE.TYPE>
        END
    NEXT AVX
    IF PERC.CODE = "Y" THEN
        SEC.GROSS.AMT = GROSS.AMT
        GROSS.AMT = ""
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                Y1 = 99000000
                Y4 = R.NEW(SC.SBS.EXCH.RATE.SEC)
                CCY2 = LCCY
                GOSUB CALC.EXCHRATE     ;*==
* GB9900172 - Use local amt returned and the Trd exch rate for trade amt
*
                Y1 = Y6
                Y4 = R.NEW(SC.SBS.EXCH.RATE.TRD)
                CCY1 = LCCY
                CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                Y2 = ''
                Y3 = ''
                GOSUB CALC.EXCHRATE     ;*==
* GB9900172 - Set Sec and Trd amts to get the exch rate between them
*
                Y1 = 99000000
                CCY1 = R.NEW(SC.SBS.SECURITY.CURRENCY)
                Y3 = ''
                Y4 = ''
                GOSUB CALC.EXCHRATE     ;*==
            END
* GB9900172 - Gross Amt now calculated correctly
            Y1 = SEC.GROSS.AMT ; Y2 = ''          ;* CI-10005230 S/E
            Y3 = ""
            Y5 = ""
            Y6 = ""
            RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN GOTO EXIT.CALC.NOM.AMT
            GROSS.AMT = Y2    ;* CI_10002501 - S ; * CI_10002802 - S
*CI_10002501 - E
        END ELSE
            GROSS.AMT = SEC.GROSS.AMT
        END
    END ELSE
        IF R.NEW(SC.SBS.TRADE.CCY) <> R.NEW(SC.SBS.SECURITY.CURRENCY) THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = GROSS.AMT
            Y2 = ""
            Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN
                GOTO EXIT.CALC.NOM.AMT
            END
            SEC.GROSS.AMT = Y2
* GB9801068 (Starts)
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            CCY2 = R.NEW(SC.SBS.SECURITY.CURRENCY)
            Y1 = "" ; Y2 = "" ; Y3 = "" ; Y4 = ""
            IF R.NEW(SC.SBS.EXCH.RATE.TRD) AND R.NEW(SC.SBS.EXCH.RATE.SEC) THEN
                GOSUB CALC.EXCHRATE     ;*==
            END
            Y1 = GROSS.AMT ; Y2 = "" ; Y3 = ""
            Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            IF E > "" THEN
                GOTO EXIT.CALC.NOM.AMT
            END
            SEC.GROSS.AMT = Y2
* GB9801068 (Ends)
        END ELSE
            SEC.GROSS.AMT = GROSS.AMT
        END
    END
* GB9801068 (Starts)
    IF FACTOR AND NOT(PL.CALCULATION) THEN        ;* CI_10015648
        IF AFX = SC.SBS.CUST.NO.NOM THEN
            R.NEW(SC.SBS.CU.UNF.GROSS)<1,AV> = GROSS.AMT / FACTOR
            R.NEW(SC.SBS.CU.UNF.SEC.GROS)<1,AV> = SEC.GROSS.AMT / FACTOR
        END ELSE
            R.NEW(SC.SBS.BR.UNF.GROSS)<1,AV> = GROSS.AMT / FACTOR
            R.NEW(SC.SBS.BR.UNF.SEC.GROS)<1,AV> = SEC.GROSS.AMT / FACTOR
        END
    END
* GB9801068 (Ends)
*
*---------------------
EXIT.CALC.NOM.AMT:  *=====
*---------------------
    IF R.NEW(SC.SBS.SECURITY.CURRENCY) = 'CHF' THEN
        CALL SC.CHF.ROUNDING(SEC.GROSS.AMT)
    END
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.SECURITY.CURRENCY),SEC.GROSS.AMT)
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        CALL SC.CHF.ROUNDING(GROSS.AMT)
    END
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),GROSS.AMT)
    RETURN
*---------------------
EXIT.CALC.ACCT.AMT: *=====
*---------------------
    IF ACC.CCY THEN
        CALL SC.FORMAT.CCY.AMT(ACC.CCY,ACC.AMT.DUE)
    END
    IF ACC.CCY = 'CHF' THEN
        CALL SC.CHF.ROUNDING(ACC.AMT.DUE)
    END
    RETURN
*---------------------
CHECK.TOTS.BY.PRICE:*=====
*---------------------
    CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRICE.TYPE,'')    ;* BG_100008063 s
    CALC.METHOD = R.PRICE.TYPE<SC.PRT.CALCULATION.METHOD>
    DISC.INSTR = R.PRICE.TYPE<SC.PRT.DISC.INSTRUMENT>       ;* BG_100008063 e
*
    DEBIT.NOM = '' ; CREDIT.NOM = ''
    FOR AVX1 = 1 TO NO.OF.CUSTOMERS
        CUST.TRANS.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AVX1>
        ENRIX = '' ; COMI2 = ''
        COMI4 = CUST.TRANS.CODE ; GOSUB CHECK.TRANS         ;*==
        CUST.NOMINAL = R.NEW(SC.SBS.CUST.NO.NOM)<1,AVX1>
        CONVERT SM TO VM IN CUST.NOMINAL
        CUST.NOMINAL = SUM(CUST.NOMINAL)
        IF CUST.TRANS.CODE = DR.CODE THEN
            DEBIT.NOM = DEBIT.NOM + CUST.NOMINAL
        END ELSE
            CREDIT.NOM = CREDIT.NOM + CUST.NOMINAL
        END
    NEXT AVX1
    IF R.NEW(SC.SBS.BROKER.NO) THEN
        FOR AVX1 = 1 TO NO.OF.BROKERS
            BR.TRANS.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AVX1>
            ENRIX = '' ; COMI2 = ''
            COMI4 = BR.TRANS.CODE ; GOSUB CHECK.TRANS       ;*==
            BR.NOMINAL = R.NEW(SC.SBS.BR.NO.NOM)<1,AVX1>
            CONVERT SM TO VM IN BR.NOMINAL
            BR.NOMINAL = SUM(BR.NOMINAL)
            IF BR.TRANS.CODE = DR.CODE THEN
                DEBIT.NOM = DEBIT.NOM + BR.NOMINAL
            END ELSE
                CREDIT.NOM = CREDIT.NOM + BR.NOMINAL
            END
        NEXT AVX1
    END
    ETEXT = ""
    IF DEBIT.NOM # CREDIT.NOM THEN
        AF = SC.SBS.CUST.NO.NOM
        FOR AV = 1 TO NO.OF.CUSTOMERS
            CUST.PRICE = COUNT(R.NEW(SC.SBS.CUST.PRICE)<1,AV>,SM)+1
            FOR AS = 1 TO CUST.PRICE
                ETEXT = 'CREDIT NOMINALS NOT EQUAL DEBIT NOMINALS'
                CALL STORE.END.ERROR
            NEXT AS
        NEXT AV
        IF R.NEW(SC.SBS.BROKER.NO) THEN
            AF = SC.SBS.BR.NO.NOM
            FOR AV = 1 TO NO.OF.BROKERS
                BR.PRICE = DCOUNT(R.NEW(SC.SBS.BR.PRICE)<1,AV>,SM)
                FOR AS = 1 TO BR.PRICE
                    ETEXT = 'CREDIT NOMINALS NOT EQUAL DEBIT NOMINALS'
                    CALL STORE.END.ERROR
                NEXT AS
            NEXT AV
        END
    END ELSE
*  CHECK THE PRICE PERCENTAGE TOLERANCE FOR THE CUSTOMER
        IF R.STD.SEC.TRADE<SC.SST.PRICE.TOLRNC.PERC> NE '' THEN
            IF R.SEC.MASTER<SC.SCM.LAST.PRICE> THEN
                AF = SC.SBS.CUST.PRICE
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    CUST.PRICE = DCOUNT(R.NEW(SC.SBS.CUST.PRICE)<1,AV>,SM)
                    FOR AS = 1 TO CUST.PRICE
                        Y1 = R.SEC.MASTER<SC.SCM.LAST.PRICE>
                        YSEC.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV,AS>
                        IF CALC.METHOD[5] = 'YIELD' OR CALC.METHOD = 'DISCOUNT' THEN
                            YDRATE = R.NEW(SC.SBS.CUST.PRICE)<1,AV,AS>
                            GOSUB CALC.SEC.PRICE  ;*==
                        END
                        R.PRT = ''      ;* CI-10005230 S
                        PERCENTAGE = ''
                        CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRT,ETEXT)
                        PERCENTAGE = R.PRT<SC.PRT.PERCENTAGE>
                        IF R.SEC.MASTER<SC.SCM.PRICE.CURRENCY> <> R.NEW(SC.SBS.TRADE.CCY) AND PERCENTAGE NE 'Y' THEN    ;* CI-10005230 E
                            CCY1 = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                            CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                            Y2 = '' ; Y3 = '' ; Y4 = '' ; Y5 = '' ; Y6 = '' ; RET.CODE = ''
                            GOSUB CALC.EXCHRATE   ;*==
                            TEMP.LAST.PRICE = Y2
                            IF E > '' THEN
                                ETEXT = E
                                CALL STORE.END.ERROR
                            END
                        END ELSE
                            CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),Y1)
                            TEMP.LAST.PRICE = Y1
                        END
                        PRICE.DIFF = ABS(YSEC.PRICE - TEMP.LAST.PRICE)
                        IF TEMP.LAST.PRICE THEN
                            PERC.DIFF = (PRICE.DIFF / TEMP.LAST.PRICE) * 100
                        END ELSE
                            PERC.DIFF = PRICE.DIFF * 100
                        END
                        IF PERC.DIFF > R.STD.SEC.TRADE<SC.SST.PRICE.TOLRNC.PERC> THEN
                            TOL.DIFF = PERC.DIFF - R.STD.SEC.TRADE<SC.SST.PRICE.TOLRNC.PERC>
                            TOL.DIFF = FMT(TOL.DIFF,"R3")
                            TEXT<1> = 'CUST.LAST.PRICE.DIFF'          ;* GLOBUS_EN_10000345 S
                            TEXT<2,1> = TEMP.LAST.PRICE
                            TEXT<2,2> = TOL.DIFF  ;* CI_10004297 E
                            CALL STORE.OVERRIDE(YCURR.NO)
                            IF TEXT = 'NO' THEN
                                ETEXT = "CUSTOMER LAST PRICE (&) OUT BY & %":FM:TEMP.LAST.PRICE:VM:TOL.DIFF
                                CALL STORE.END.ERROR
                                TEXT = ''
                            END
                        END
                    NEXT AS
                NEXT AV
* GB9700048 - Give an Override here
            END ELSE
                AF = SC.SBS.CUST.PRICE
                AV = 1
                AS = 1
                TEXT = "CUSTOMER LAST PRICE IS NULL"        ;* GLOBUS_EN_10000345 S/E ; * BG_100008370
                CALL STORE.OVERRIDE(YCURR.NO)
                IF TEXT = "NO" THEN
                    ETEXT = "LAST PRICE IS NULL"
                    CALL STORE.END.ERROR
                    TEXT = ""
                END
            END
* CHECK THE PRICE PERCENTAGE TOLERANCE FOR THE BROKER
            IF R.NEW(SC.SBS.BROKER.NO) THEN
                AF = SC.SBS.BR.PRICE
                FOR AV = 1 TO NO.OF.BROKERS
                    BR.PRICE = DCOUNT(R.NEW(SC.SBS.BR.PRICE)<1,AV>,SM)
                    FOR AS = 1 TO BR.PRICE
                        IF R.SEC.MASTER<SC.SCM.LAST.PRICE> THEN
                            Y1 = R.SEC.MASTER<SC.SCM.LAST.PRICE>
                            YSEC.PRICE = R.NEW(SC.SBS.BR.PRICE)<1,AV,AS>
                            IF CALC.METHOD[5] = 'YIELD' OR CALC.METHOD = 'DISCOUNT' THEN
                                YDRATE = R.NEW(SC.SBS.BR.PRICE)<1,AV,AS>
                                GOSUB CALC.SEC.PRICE        ;*==
                            END
                            R.PRT = ''  ;* CI-10005230 S
                            PERCENTAGE = ''
                            CALL CACHE.READ('F.PRICE.TYPE',R.NEW(SC.SBS.PRICE.TYPE),R.PRT,ETEXT)
                            PERCENTAGE = R.PRT<SC.PRT.PERCENTAGE>
                            IF R.SEC.MASTER<SC.SCM.PRICE.CURRENCY> <> R.NEW(SC.SBS.TRADE.CCY) AND PERCENTAGE NE 'Y' THEN          ;* CI-10005230 E
                                CCY1 = R.SEC.MASTER<SC.SCM.PRICE.CURRENCY>
                                CCY2 = R.NEW(SC.SBS.TRADE.CCY)
                                Y2 = '' ; Y3 = '' ; Y4 = '' ; Y5 = '' ; Y6 = '' ; RET.CODE = ''
                                GOSUB CALC.EXCHRATE         ;*==
                                TEMP.LAST.PRICE = Y2
                                IF E > '' THEN
                                    ETEXT = E
                                    CALL STORE.END.ERROR
                                END
                            END ELSE
                                CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),Y1)
                                TEMP.LAST.PRICE = Y1
                            END
                            PRICE.DIFF = ABS(YSEC.PRICE - TEMP.LAST.PRICE)
                            IF TEMP.LAST.PRICE THEN
                                PERC.DIFF = (PRICE.DIFF / TEMP.LAST.PRICE) * 100
                            END ELSE PERC.DIFF = PRICE.DIFF * 100
                            IF PERC.DIFF > R.STD.SEC.TRADE<SC.SST.PRICE.TOLRNC.PERC> THEN
                                TOL.DIFF = PERC.DIFF - R.STD.SEC.TRADE<SC.SST.PRICE.TOLRNC.PERC>
                                TOL.DIFF = FMT(TOL.DIFF,"R3")
                                TEXT<1> = 'BROK.LAST.PRICE.DIFF'      ;* GLOBUS_EN_10000345 S
                                TEXT<2,1> = TEMP.LAST.PRICE
                                TEXT<2,2> = TOL.DIFF        ;* CI_10004297 E
                                CALL STORE.OVERRIDE(YCURR.NO)
                                IF TEXT = 'NO' THEN
                                    ETEXT = "BROKER LAST PRICE (&) OUT BY & %":FM:TEMP.LAST.PRICE:VM:TOL.DIFF
                                    CALL STORE.END.ERROR
                                    TEXT = ''
                                END
                            END
                        END
                        IF NOT(R.NEW(SC.SBS.BR.NO.NOM)<1,AV,AS>) THEN
                            ETEXT = 'INPUT MISSING'
                            OLD.AF = AF
                            AF = SC.SBS.BR.NO.NOM
                            CALL STORE.END.ERROR
                            AF = OLD.AF
                        END
                    NEXT AS
                NEXT AV
            END
        END
    END
    RETURN          ;* CI_10039457 S

*-----------------------
CHECK.DEALER.BOOK.PRICE:      *=====
*-----------------------
* CI_10039457 E
* FOR DEALER.BOOK TRANSACTIONS CHECK THAT FOR THE CUSTOMER AND
* THE BROKER THE PRICES ENTERED ARE THE SAME.
*
    IF NOT(END.ERROR) AND INDEX(DEALER.BOOK.FLAG,1,1) AND NOT(NEW.ISSUE.TRADE) AND R.NEW(SC.SBS.BROKER.NO) THEN
        CUST.PRICE = COUNT(R.NEW(SC.SBS.CUST.PRICE)<1,AV>,SM)+1
        FOR AV = 1 TO NO.OF.CUSTOMERS
            FOR AS = 1 TO CUST.PRICE
                ASS.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV,AS>
                LOCATE ASS.PRICE IN R.NEW(SC.SBS.BR.PRICE)<1,1,1> SETTING POS ELSE POS = 0
                IF NOT(POS) AND DEALER.BOOK.FLAG<1,AV> THEN
                    AF = SC.SBS.CUST.PRICE
                    ETEXT = 'DEALING BOOK PRICES MUST BE THE SAME'
                    CALL STORE.END.ERROR
                END
            NEXT AS
        NEXT AV
    END
    RETURN
*
****************
CALC.SEC.PRICE:     *=====
****************
*
    IF R.NEW(SC.SBS.MATURITY.DATE) GT 0 AND R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS> THEN
        BEGIN CASE
        CASE R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'A' OR R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'B'
            CALC.YEAR.DAYS = 36000
        CASE R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'E' OR R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'F'
            CALC.YEAR.DAYS = 36500
        CASE R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'C' OR R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'D'
            CALC.YEAR.DAYS = 36500
        CASE R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'G' OR R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>[1,1] = 'H'
            CALC.YEAR.DAYS = 36400
        CASE 1
            CALC.YEAR.DAYS = 0
        END CASE
        LAST.PRICE = R.SEC.MASTER<SC.SCM.LAST.PRICE>
        IF CALC.YEAR.DAYS THEN
            DAYS.TO.GO = ''
            CALL BD.CALC.DAYS(TODAY,R.NEW(SC.SBS.MATURITY.DATE),R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS>,DAYS.TO.GO)
            IF DAYS.TO.GO > 0 THEN
                BEGIN CASE
                CASE CALC.METHOD = 'DISCOUNT'
                    YSEC.PRICE = 100 * (1 - ((YDRATE * DAYS.TO.GO)/CALC.YEAR.DAYS))
                CASE 1
                    YSEC.PRICE = 100 / (1 + ((YDRATE * DAYS.TO.GO)/CALC.YEAR.DAYS))
                END CASE
            END
        END ELSE
            ETEXT = 'INVALID INT. DAY BASIS FOR DISCOUNTED INSTRUMENTS'
            CALL STORE.END.ERROR
        END
    END ELSE
        IF R.NEW(SC.SBS.MATURITY.DATE) = '' THEN
            ETEXT = 'MATURITY DATE MISSING FOR DISCOUNTED INSTRUMENT'
            CALL STORE.END.ERROR
        END
        IF R.SEC.MASTER<SC.SCM.INTEREST.DAY.BASIS> = '' THEN
            ETEXT = 'INT. DAY BASIS MISSING FOR DISCOUNTED INSTRUMENT'
            CALL STORE.END.ERROR
        END
    END
*
    RETURN
*
************************
* ACCRUED INTEREST CHECK
************************
*---------------
CHECK.INTR.AMTS:    *=====
*---------------
    DEBIT.INT = 0 ; CREDIT.INT = 0
    FOR AVX1 = 1 TO NO.OF.CUSTOMERS
        DEALER.BOOK = ''
        CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,R.NEW(SC.SBS.CUST.SEC.ACC)<1,AVX1>,DEALER.BOOK)
        CUST.TRANS.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AVX1>
* CI_10032589 S
        IF NOT(DR.CODE) THEN
            COMI4 = CUST.TRANS.CODE
            GOSUB CHECK.TRANS
        END
* CI_10032589 E

        IF CUST.TRANS.CODE = DR.CODE THEN
            DEBIT.INT += SUM(R.NEW(SC.SBS.CUST.INTR.AMT)<1,AVX1>)
            IF DEALER.BOOK AND TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
                DEBIT.INT -= (SUM(R.NEW(SC.SBS.CU.STAMP.TAX)<1,AVX1>) + SUM(R.NEW(SC.SBS.CU.EBV.FEES)<1,AVX1>))
            END
        END ELSE
            CREDIT.INT += SUM(R.NEW(SC.SBS.CUST.INTR.AMT)<1,AVX1>)
            IF DEALER.BOOK AND TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
                CREDIT.INT += (SUM(R.NEW(SC.SBS.CU.STAMP.TAX)<1,AVX1>) + SUM(R.NEW(SC.SBS.CU.EBV.FEES)<1,AVX1>))
            END
        END
    NEXT AVX1
    IF R.NEW(SC.SBS.BROKER.NO) THEN
        FOR AVX1 = 1 TO NO.OF.BROKERS
            BR.TRANS.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AVX1>
            IF BR.TRANS.CODE = DR.CODE THEN
                DEBIT.INT += SUM(R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AVX1>)
            END ELSE
                CREDIT.INT += SUM(R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AVX1>)
            END
        NEXT AVX1
    END
    ETEXT = ""

    IF DEBIT.INT # CREDIT.INT THEN
        INTEREST.DIFF = ABS(DEBIT.INT - CREDIT.INT)
        IF R.NEW(SC.SBS.TRADE.CCY) # LCCY THEN
            CCY1 = R.NEW(SC.SBS.TRADE.CCY)
            Y1 = INTEREST.DIFF ; CCY2 = LCCY ; Y2 = "" ; Y3 = "" ; Y4 = "" ; Y5 = "" ; Y6 = "" ; RET.CODE = ""
            GOSUB CALC.EXCHRATE         ;*==
            INTEREST.DIFF = Y2
        END
        IF NOT(GTSVAL) THEN   ;* CI_10014817/S/E
            IF INTEREST.DIFF > '0.2' THEN
                AF = SC.SBS.CUST.INTR.AMT
                FOR AV = 1 TO NO.OF.CUSTOMERS
                    ETEXT = 'CR INT NE DR INT, "&"':FM:INTEREST.DIFF
                    CALL STORE.END.ERROR
                NEXT AV
                IF R.NEW(SC.SBS.BROKER.NO) THEN
                    AF = SC.SBS.BR.INTR.AM.TRD
                    FOR AV = 1 TO NO.OF.BROKERS
                        ETEXT = 'CR INT NE DR INT, "&"':FM:INTEREST.DIFF
                        CALL STORE.END.ERROR
                    NEXT AV
                END
            END
        END         ;* CI-10001481 S/E
    END
    INPUT.BUFFER = ''         ;* CI_10005082 S-E
    RETURN
*---------------------
SETUP.DETAILS.STK.EXC:
*---------------------
    MAT YARRAY = ''
    YARRAY(2) = R.NEW(SC.SBS.VALUE.DATE)
    YARRAY(3) = R.NEW(SC.SBS.TRADE.DATE)
    YARRAY(4) = R.NEW(SC.SBS.MATURITY.DATE)
    IF AF = SC.SBS.SECURITY.CODE THEN   ;* BG_100008739 s
        YARRAY(7) = COMI
    END ELSE
        YARRAY(7) = R.NEW(SC.SBS.SECURITY.CODE)
    END   ;* BG_100008739 e
    YARRAY(8) = R.NEW(SC.SBS.SECURITY.CURRENCY)
    YARRAY(9) = R.NEW(SC.SBS.TRADE.CCY)
    YARRAY(11) = R.NEW(SC.SBS.PRICE.TYPE)
    YARRAY(15) = R.NEW(SC.SBS.NET.TRADE)
    RETURN
*---------------------
CL.STOCK.EXCHANGE:  *=====
*---------------------
    YARRAY(10) = "C"
    YARRAY(1) = R.NEW(SC.SBS.CUST.NO.NOM)<1,AV>
    YARRAY(5) = R.NEW(SC.SBS.CU.GROSS.AM.SEC)<1,AV>
    YARRAY(6) = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
    YARRAY(12) = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
    YARRAY(13) = R.NEW(SC.SBS.CU.NET.AM.TRD)<1,AV>
    YARRAY(14) = R.NEW(SC.SBS.CUST.PRICE)<1,AV>
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
    GOSUB CHECK.TRANS         ;*==
    IF COMI4 = "DEBIT" THEN
        YARRAY(16) = DR.CODE
    END ELSE
        YARRAY(16) = CR.CODE
    END
    YARRAY(17) = R.NEW(SC.SBS.EXCH.RATE.TRD)
    YARRAY(20) = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
    IF NOT(R.NEW(SC.SBS.STOCK.EXCHANGE)) THEN     ;*CI_10002116 S
        STK.EXC = ''
        CALL DBR('SECURITY.MASTER':FM:SC.SCM.STOCK.EXCHANGE,R.NEW(SC.SBS.SECURITY.CODE),STK.EXC)
        YARRAY(33) = STK.EXC
        R.NEW(SC.SBS.STOCK.EXCHANGE) = STK.EXC
    END ELSE
        YARRAY(33) = R.NEW(SC.SBS.STOCK.EXCHANGE)
    END   ;*CI_10002116 E
    GOSUB CALC.CHARGES        ;*==
    SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    BOOK.DEAL = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,BOOK.DEAL)
*
************
* CUSTOMER COMMISSION TO BE CALCULATED
* USING RATE FROM CUSTOMER.SECURITY .
************
*
    CURRENCY.ID = R.NEW(SC.SBS.TRADE.CCY)         ;* BG_100010567
    GOSUB GET.CURRENCY.DETAILS          ;* BG_100010567
    IF R.NEW(SC.SBS.NET.TRADE) = 'Y' THEN
        IF NO.DECS THEN
            YARRAY(51) = '0.00' ; YARRAY(53) = '0.00'
            YARRAY(54) = '0.00'
        END ELSE
            YARRAY(51) = '0' ; YARRAY(53) = '0'
            YARRAY(54) = '0'
        END
        IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' AND NOT(BOOK.DEAL) THEN
            YAMT1 = YARRAY(54)
            CALL SC.CHF.ROUNDING(YAMT1)
            YARRAY(54) = YAMT1
        END
    END ELSE
        IF ETEXT > "" THEN
            E = ETEXT ; CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
        END
        IF NOT(SE.CALC.EXISTS) THEN
            IF NO.DECS THEN
                YARRAY(51) = '0.00' ; YARRAY(53) = '0.00'
                IF BOOK.DEAL THEN
                    YARRAY(54) = '0.00'
                END
                IF YARRAY(54) = '' THEN
                    YARRAY(54) = '0.00'
                END
            END ELSE
                YARRAY(51) = '0' ; YARRAY(53) = '0'
                IF BOOK.DEAL THEN
                    YARRAY(54) = '0'
                END
                IF YARRAY(54) = '' THEN
                    YARRAY(54) = '0'
                END
            END
            IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' AND NOT(BOOK.DEAL) THEN
                YAMT1 = YARRAY(54)
                CALL SC.CHF.ROUNDING(YAMT1)
                YARRAY(54) = YAMT1
            END
        END ELSE
            IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                YAMT1 = YARRAY(51) ; YAMT2 = YARRAY(53) ; YAMT3 = YARRAY(54)
                CALL SC.CHF.ROUNDING(YAMT1)
                YARRAY(51) = YAMT1
                CALL SC.CHF.ROUNDING(YAMT2)
                YARRAY(53) = YAMT2
                CALL SC.CHF.ROUNDING(YAMT3)
                YARRAY(54) = YAMT3
            END
**** LEAVE BR COMMISSION ALONE IF DEALER BOOK
            IF BOOK.DEAL THEN
                IF NO.DECS THEN
                    YARRAY(54) = '0.00'
                END ELSE
                    YARRAY(54) = '0'
                END
            END
        END
    END
    RETURN
*---------------------
BR.STOCK.EXCHANGE:  *=====
*---------------------
    YARRAY(1) = R.NEW(SC.SBS.BR.NO.NOM)<1,AV>
    YARRAY(5) = R.NEW(SC.SBS.BR.GROSS.AM.SEC)<1,AV>
    YARRAY(6) = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV>
    YARRAY(10) = "B"
    YARRAY(12) = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
    YARRAY(13) = R.NEW(SC.SBS.BR.NET.AM.TRD)<1,AV>
    YARRAY(14) = R.NEW(SC.SBS.BR.PRICE)<1,AV>
    COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
    GOSUB CHECK.TRANS         ;*==
    IF COMI4 = "DEBIT" THEN
        YARRAY(16) = CR.CODE
    END ELSE
        YARRAY(16) = DR.CODE
    END
    YARRAY(17) = R.NEW(SC.SBS.EXCH.RATE.TRD)
    YARRAY(20) = R.NEW(SC.SBS.BROKER.NO)<1,AV>
    IF NOT(R.NEW(SC.SBS.STOCK.EXCHANGE)) THEN     ;*CI_10002116 S
        STK.EXC = ''
        CALL DBR('SECURITY.MASTER':FM:SC.SCM.STOCK.EXCHANGE,R.NEW(SC.SBS.SECURITY.CODE),STK.EXC)
        YARRAY(33) = STK.EXC
        R.NEW(SC.SBS.STOCK.EXCHANGE) = STK.EXC
    END ELSE
        YARRAY(33) = R.NEW(SC.SBS.STOCK.EXCHANGE)
    END   ;*CI_10002116 E
    GOSUB CALC.CHARGES        ;*==
    BROKER.NUMBER = R.NEW(SC.SBS.BROKER.NO)<1,AV>
* GB9801068
    BR.GROSS.CHECK = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.CAP.INT.AMT)<1,AV>          ;* CI_10000202 Ends
    BR.COMM.TYPE = ''
    ER = '' ; R.CUSTOMER.SECURITY = ''
    CALL F.READ('F.CUSTOMER.SECURITY',BROKER.NUMBER,R.CUSTOMER.SECURITY,F.CUSTOMER.SECURITY,ER)
    IF NOT(ER) THEN
        IF R.NEW(SC.SBS.BROKER.TYPE)<1,AV> = 'CLIENT' THEN
            LOCATE '0' IN R.CUSTOMER.SECURITY<SC.CSC.SEC.ACC.SUFF,1> SETTING NPOS ELSE NPOS = 0
            IF NPOS THEN
                IF BOND.OR.SHARE = 'B' THEN
                    BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.BOND.COMM.TYPE,NPOS>
                END ELSE
                    BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.SHARE.COMM.TYPE,NPOS>
                END
            END
        END
    END
    IF NOT(BR.COMM.TYPE) THEN
        IF BOND.OR.SHARE = 'S' THEN
            BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.SHARE.BR.COMM.TYPE>
        END ELSE
            BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.BOND.BR.COMM.TYPE>
        END
    END
    IF BR.COMM.TYPE # '' THEN
        BROKER.COMM = ''
        CALL CALCULATE.CHARGE(BROKER.NUMBER,BR.GROSS.CHECK,R.NEW(SC.SBS.TRADE.CCY),'1','','','',BR.COMM.TYPE,'',TOTAL.CHARGE.FOREIGN,TOTAL.CHARGE.LOCAL)
        IF R.NEW(SC.SBS.TRADE.CCY) = LCCY THEN
            BROKER.COMM = BR.COMM.TYPE<4,1>
        END ELSE
            BROKER.COMM = BR.COMM.TYPE<5,1>
        END
        IF ETEXT THEN
            ETEXT = ''
        END
        IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
            CALL SC.CHF.ROUNDING(BROKER.COMM)
        END ELSE
            CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),BROKER.COMM)
        END
        YARRAY(51) = BROKER.COMM
        IF BR.COMM.TYPE<3> NE '' THEN
            YARRAY(20) = BR.COMM.TYPE<3>
        END
    END
    IF R.NEW(SC.SBS.NET.TRADE) = 'Y' THEN
        CURRENCY.ID = R.NEW(SC.SBS.TRADE.CCY)     ;* BG_100010567
        GOSUB GET.CURRENCY.DETAILS      ;* BG_100010567
        IF NO.DECS THEN
            YARRAY(51) = '0.00' ; YARRAY(53) = '0.00'
        END ELSE
            YARRAY(51) = '0' ; YARRAY(53) = '0'
        END
    END ELSE
        IF ETEXT > "" THEN
            E = ETEXT ; CALL ERR ; T.SEQU = "IFLD" ; GOTO FIELD.DISPLAY.OR.INPUT
        END
        IF NOT(SE.CALC.EXISTS) THEN
            CURRENCY.ID = R.NEW(SC.SBS.TRADE.CCY) ;* BG_100010567
            GOSUB GET.CURRENCY.DETAILS  ;* BG_100010567
            IF NO.DECS THEN
                YARRAY(53) = '0.00'
                IF BR.COMM.TYPE = '' THEN
                    YARRAY(51) = '0.00'
                END
            END ELSE
                YARRAY(53) = '0'
                IF BR.COMM.TYPE = '' THEN
                    YARRAY(51) = '0'
                END
            END
        END ELSE
            IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
                YAMT1 = YARRAY(51) ; YAMT2 = YARRAY(53)
                CALL SC.CHF.ROUNDING(YAMT1)
                CALL SC.CHF.ROUNDING(YAMT2)
                YARRAY(51) = YAMT1
                YARRAY(53) = YAMT2
            END
        END
    END
    RETURN
*---------------------
CHECK.TRANS:        *=====
*---------------------

    SC.TRA.CODE.ID = COMI4    ;* BG_100010567
    GOSUB GET.SC.TRANSACTION.DETAILS    ;* BG_100010567
    IF COMI4 = CR.CODE THEN
        COMI4 = "CREDIT"
    END ELSE
        COMI4 = "DEBIT"
    END
    RETURN
*-------------
CHECK.HOLIDAY:      *=====
*-------------
    COUNTRY.CODE = ""
    COUNTRY.CODE = R.STOCK.EXCHANGE<SC.STE.CALC.COUNTRY>
    IF ETEXT OR NOT(COUNTRY.CODE) THEN
        ETEXT = ""
        COUNTRY.CODE = LOCAL.COUNTRY
    END
    RETURN.CD = '' ; RETURN.DATE = ''
    DISPLACEMENT.DAYS = ''
    CALL WORKING.DAY("",R.NEW(AF),"","","",COUNTRY.CODE,'00',RETURN.DATE,RETURN.CD,DISPLACEMENT.DAYS)
    IF RETURN.CD = 'ERR' THEN
        TEXT = 'UNABLE TO CHECK FOR HOLIDAY'
        CALL REM
    END ELSE
        IF ABS(DISPLACEMENT.DAYS) THEN
            CONVERSION = 'D4E'
            PRIME.DATE = ''
            CALL DIETER.DATE(R.NEW(AF),PRIME.DATE,CONVERSION)
            DATE.ENTER = PRIME.DATE
            PRIME.DATE = ''
            CALL DIETER.DATE(RETURN.DATE,PRIME.DATE,CONVERSION)
            RET.DATE = PRIME.DATE
            TEXT = 'DATE.HOLIDAY':FM:DATE.ENTER:VM:RET.DATE ;* GLOBUS_EN_10000345
            CALL STORE.OVERRIDE(YCURR.NO)
            IF TEXT = 'NO' THEN
                ETEXT = '"&" IS A HOLIDAY - NEXT WORK DAY "&"':FM:DATE.ENTER:VM:RET.DATE
                CALL STORE.END.ERROR
                TEXT = ''
            END
        END
    END
    RETURN
*---------------------
CALC.CHARGES:       *=====
*---------------------
    SE.CALC.EXISTS = 0
    STK.COUNTRY = ""
    STK.COUNTRY = R.STOCK.EXCHANGE<SC.STE.CALC.COUNTRY>
    IF STK.COUNTRY = '' THEN ETEXT = 'STOCK EXCHANGE MISSING'
    IF ETEXT = "" THEN
        LOCATE STK.COUNTRY IN EXCHANGE.COUNTRIES<1,1> SETTING POS ELSE POS = 0
        IF POS THEN
            SE.CALC.EXISTS = 1
            CALL.PARAM = "SC.SE.CALC.":STK.COUNTRY
            LOCAL5 = '' ; DOM.COUNTRY = ''
            IF STK.COUNTRY = 'CH' THEN
                LOCAL5<1,1> = '1'
            END ELSE
                DOM.COUNTRY = R.COMPANY(EB.COM.LOCAL.COUNTRY)
                IF DOM.COUNTRY = 'CH' THEN
                    MAT TEMP.ARRAY = MAT YARRAY
                    CUSTOMER.FLAG = YARRAY(10)
                END
            END
            CALL @CALL.PARAM (MAT YARRAY)
            GOSUB GET.EXCH.CATS         ;*==
            IF DOM.COUNTRY = 'CH' AND NOT(LOCAL6) THEN
                IF CUSTOMER.FLAG = 'C' THEN
                    LOCAL5<1,2> = STK.COUNTRY
                    LOCAL5<1,3> = '1'
                    CALL SC.SE.CALC.CH(MAT TEMP.ARRAY)
                    YARRAY(54) = TEMP.ARRAY(54)
                END
            END
        END ELSE
            GOSUB GET.EXCH.CATS         ;*==
            IF R.COMPANY(EB.COM.LOCAL.COUNTRY) = 'CH' AND NOT(LOCAL6) THEN
                IF YARRAY(10) = 'C' THEN
                    MAT TEMP.ARRAY = MAT YARRAY
                    LOCAL5<1,2> = STK.COUNTRY
                    LOCAL5<1,3> = '1'
                    CALL SC.SE.CALC.CH(MAT TEMP.ARRAY)
                    YARRAY(54) = TEMP.ARRAY(54)
                END
            END
        END
    END ELSE
        ETEXT = ''
        GOSUB GET.EXCH.CATS   ;*==
    END
*
* CHECK FOR NEW ISSUE TO CALCULATE STAMP.TAX AND EBV.FEES
*
    IF YARRAY(10) = 'C' THEN
        TRANSACTION.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
    END ELSE
        TRANSACTION.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
    END
    IF TRANSACTION.CODE = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR TRANSACTION.CODE = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
        CURRENCY.ID = R.NEW(SC.SBS.TRADE.CCY)     ;* BG_100010567
        GOSUB GET.CURRENCY.DETAILS      ;* BG_100010567
        IF NO.DECS THEN
            YARRAY(51) = '0.00' ; YARRAY(53) = '0.00' ; YARRAY(54) = '0.00'
        END ELSE
            YARRAY(51) = '0' ; YARRAY(53) = '0' ; YARRAY(54) = '0'
        END
    END
    LOCAL4 = ''
    RETURN
*---------------------
CALC.LOCAL.CHARGES: *=====
*---------------------
    IF YARRAY(10) = 'C' THEN
        YARRAY(12) = R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
        TRANSACTION.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
    END ELSE
        YARRAY(12) = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
        TRANSACTION.CODE = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
    END
*
* CHECK FOR NEW ISSUE TO CALCULATE STAMP.TAX AND EBV.FEES
*
    IF TRANSACTION.CODE = R.STD.NEW.ISSUE<SC.SNI.SEC.CR.TRANS.CODE> OR TRANSACTION.CODE = R.STD.NEW.ISSUE<SC.SNI.SEC.DR.TRANS.CODE> THEN
        NEW.ISSUE.IND = 1
    END ELSE NEW.ISSUE.IND = 0
    YARRAY(11) = NEW.ISSUE.IND
*
    STK.COUNTRY = ''
    STK.COUNTRY = R.STOCK.EXCHANGE<SC.STE.DOMICILE>
*
    YARRAY(19) = STK.COUNTRY
    YARRAY(33) = R.NEW(SC.SBS.STOCK.EXCHANGE)
    IF YARRAY(10) EQ "C" THEN
        YARRAY(34) = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    END
    IF YARRAY(20) THEN
        OLD.LOCAL6 = LOCAL6
        IF STAMP.TAX.ROUTINE = '' THEN
            IF R.COMPANY(EB.COM.LOCAL.COUNTRY) # 'CH' THEN
                LOCAL6 = 1    ;* I.E. ONLY CALC FOR SWITZERLAND
            END
            STAMP.TAX.CALC = 'SC.SE.CALC.LOCAL'
        END ELSE
            STAMP.TAX.CALC = STAMP.TAX.ROUTINE
        END
        CALL @STAMP.TAX.CALC(MAT YARRAY)
        LOCAL6 = OLD.LOCAL6
    END
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        YAMT1 = YARRAY(51) ; YAMT2 = YARRAY(52)
        CALL SC.CHF.ROUNDING(YAMT1)
        CALL SC.CHF.ROUNDING(YAMT2)
        YARRAY(51) = YAMT1
        YARRAY(52) = YAMT2
    END
* CALCULATE BELGIUM TAX
    IF TAX.RECOVERABLE = 'Y' AND WITH.TAX = 'Y' THEN
        CALL SC.SE.CALC.LOCAL.BE(MAT YARRAY)
    END

    CALL SC.CALC.STK.EXC.FEES(MAT YARRAY,R.SEC.MASTER)      ;*CI_10036318
    IF R.NEW(SC.SBS.NET.TRADE) = 'Y' THEN         ;* GB0002851 S
        YARRAY(52) = 0
    END   ;* GB0002851 E
    RETURN
*****************************************
* SUBROUTINE TO EXTRACT THE CATEGORIES
* AND DEBIT/CREDIT FINANCIAL TRANSACTION
* CODES FOR BROKER AND CUSTOMER FOR WHICH
* NO STOCK EXCHANGE CALCULATION PROGRAM
* EXISTS .
*****************************************
*-------------
GET.EXCH.CATS:      *=====
*-------------
    BEGIN CASE
    CASE YARRAY(10) = 'C'
* GB9901705 - Save the Misc Fees Category on first setting
        IF YARRAY(21) NE R.STD.SEC.TRADE<SC.SST.CL.MISC.FEES.CAT> AND YARRAY(21) NE '' THEN
            YARRAY(21) = ''
        END
        IF YARRAY(21) = '' THEN
            YARRAY(21) = R.STD.SEC.TRADE<SC.SST.CL.MISC.FEES.CAT>
            SAVE.CUST.CAT = YARRAY(21)
        END
        IF YARRAY(22) = '' THEN YARRAY(22) = R.STD.SEC.TRADE<SC.SST.CL.MIS.DB.TRANS.CD>
* GB9901705 - We can get a 0 here for Fees
        IF NOT(YARRAY(23)) THEN YARRAY(23) = R.STD.SEC.TRADE<SC.SST.CL.MIS.CR.TRANS.CD>
        IF YARRAY(25) = '' THEN YARRAY(25) = R.STD.SEC.TRADE<SC.SST.CL.BROKRGE.CAT>
        IF YARRAY(26) = '' THEN YARRAY(26) = R.STD.SEC.TRADE<SC.SST.CL.DB.TRANS.CODE>
        IF YARRAY(27) = '' THEN YARRAY(27) = R.STD.SEC.TRADE<SC.SST.CL.CR.TRANS.CODE>
        IF YARRAY(35) = '' THEN YARRAY(35) = R.STD.SEC.TRADE<SC.SST.CL.COMMISSN.CAT>
        IF YARRAY(36) = '' THEN YARRAY(36) = R.STD.SEC.TRADE<SC.SST.CL.COM.DB.TRANS.CD>
        IF YARRAY(37) = '' THEN YARRAY(37) = R.STD.SEC.TRADE<SC.SST.CL.COM.CR.TRANS.CD>
        IF YARRAY(45) = '' THEN YARRAY(45) = R.STD.SEC.TRADE<SC.SST.CL.FOREIGN.CAT>
        IF YARRAY(46) = '' THEN YARRAY(46) = R.STD.SEC.TRADE<SC.SST.CL.FOR.DB.TRANS.CD>
        IF YARRAY(47) = '' THEN YARRAY(47) = R.STD.SEC.TRADE<SC.SST.CL.FOR.CR.TRANS.CD>
    CASE OTHERWISE
        IF YARRAY(20) = R.NEW(SC.SBS.BROKER.NO)<1,AV> AND YARRAY(20) NE '' THEN YARRAY(20) = ''
* GB9900056 - If the following statement is @TRUE then save the setting
*             It can be a Broker later
        IF YARRAY(20) = '' THEN
            YARRAY(20) = R.STD.SEC.TRADE<SC.SST.BR.BROKRGE.CAT>
            SAVE.BROKE.CAT = YARRAY(20)
        END
        IF YARRAY(21) = '' THEN YARRAY(21) = R.STD.SEC.TRADE<SC.SST.BR.DB.TRANS.CODE>
        IF YARRAY(22) = '' THEN YARRAY(22) = R.STD.SEC.TRADE<SC.SST.BR.CR.TRANS.CODE>
        IF YARRAY(30) = '' THEN YARRAY(30) = R.STD.SEC.TRADE<SC.SST.CL.COMMISSN.CAT>      ;* PIF GB9301824
        IF YARRAY(31) = '' THEN YARRAY(31) = R.STD.SEC.TRADE<SC.SST.CL.COM.DB.TRANS.CD>   ;* PIF GB9301824
        IF YARRAY(32) = '' THEN YARRAY(32) = R.STD.SEC.TRADE<SC.SST.CL.COM.CR.TRANS.CD>   ;* PIF GB9301824
        IF YARRAY(40) = '' THEN YARRAY(40) = R.STD.SEC.TRADE<SC.SST.BR.FOREIGN.CAT>
        IF YARRAY(41) = '' THEN YARRAY(41) = R.STD.SEC.TRADE<SC.SST.BR.FOR.DB.TRANS.CD>
        IF YARRAY(42) = '' THEN YARRAY(42) = R.STD.SEC.TRADE<SC.SST.BR.FOR.CR.TRANS.CD>
    END CASE
    RETURN
GOTO BLA:
*---------------
GET.CRF.ENTRIES:
*---------------
** GB9500166 - Supress Currency Position
    RB.MULTI.STMT = ''
    NO.CUSTOMERS = COUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM) + (R.NEW(SC.SBS.CUSTOMER.NO) # '')
    FOR CUST.POS = 1 TO NO.CUSTOMERS
        DEAL.BOOK = ''
        SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>
        CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
        IF DEAL.BOOK THEN
            CRF.TRADE = 1
        END ELSE
            CRF.TRADE = ''
        END
        IF CRF.TRADE AND R.NEW(SC.SBS.CU.NET.AM.TRD)<1,CUST.POS> NE 0 THEN      ;* CI-10001651 S/E ; * CI_10028534
*
            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,CUST.POS> ; GOSUB CHECK.TRANS         ;*==
            IF COMI4 = 'CREDIT' THEN
                TRANS.CODE = 'DB'
            END ELSE
                TRANS.CODE = 'CR'
            END
*
            POSN.KEY = R.NEW(SC.SBS.CUST.SEC.ACC)<1,CUST.POS>:'.':R.NEW(SC.SBS.SECURITY.CODE)
            IF R.NEW(SC.SBS.CUST.INTR.AMT)<1,CUST.POS> THEN
                ACCRUAL.TYPE = 'IENC'
            END ELSE
                ACCRUAL.TYPE = ''
            END
*
* GB9801068 (Starts assign CAP.TYPE)
            IF R.NEW(SC.SBS.CU.CAP.INT.AMT)<1,CUST.POS> THEN
                ACCRUAL.TYPE<1,2> = "CIENC"
            END
* GB9801068 (Ends assign CAP.TYPE)
            TRANS.TYPE = 'LIVE'
            RECORD1 = ''
            RECORD1<1> = POSN.KEY
            RECORD1<2> = ID.NEW
            RECORD1<3> = ID.NEW
            RECORD1<4> = TRANS.TYPE
            RECORD1<5> = TRANS.CODE
            RECORD1<6> = ACCRUAL.TYPE<1,1>
            RECORD1<7> = R.NEW(SC.SBS.VALUE.DATE)
            RECORD1<8> = REV.FLAG
            RECORD1<9> = R.NEW(SC.SBS.MATURITY.DATE)
            RECORD1<10> = R.NEW(SC.SBS.SECURITY.CURRENCY)
* GB9801068
            RECORD1<11> = ACCRUAL.TYPE<1,2>
            R.ACCT.REC = ''
            CALL SC.TRADE.UPD.CONSOL(RECORD1,R.ACCT.REC)
            RB.MULTI.STMT<-1> = R.ACCT.REC
        END
    NEXT CUST.POS
    RETURN
**
*-------------
BUILD.ENTRIES:
*-------------
* ROUTINE TO CALL 'SC.SEC.TRADE.ACC' TO BUILD THE STATEMENT ENTRIES.
* FROM THE LIST OF ENTRIES WE SEPARATE FORWARD AND LIVE ENTRIES TO BE RAISED
* WHEN ACTUAL SETTLEMENT IS SET.
* SETTLEMENT ENTRIES IN R.SC.SETT.ENTRIES ARE BUILT HERE.

    COUNT.BEGIN = DCOUNT(MY.MULTI.STMT,FM)

    CALL @ACC.ROUTINE(MY.MULTI.STMT,CUST.COMMISSIONS,CUST.CHARGES,BROKER.COMMISSIONS,BROKER.CHARGES,CUST.FLAG)

    COUNT.END = DCOUNT(MY.MULTI.STMT,FM)

    IF R.NEW(SC.SBS.CASH.HOLD.SETTLE) = 'YES' THEN
        FOR II = COUNT.BEGIN + 1 TO COUNT.END
            IF CUST.FLAG = 'BN' AND CHECK.LIV.FWD.ENTRIES THEN
                BROKER = MY.MULTI.STMT<II,8>
                LOCATE BROKER IN R.NEW(SC.SBS.BROKER.NO)<1,1> SETTING AV ELSE AV = 1
            END
            IF CUST.FLAG = 'C' THEN
                MY.MULTI.STMT<II,AC.STE.NARRATIVE,-1> = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
            END
            IF R.NEW(AUTO.SETT.FIELD)<1,AV> = 'YES' AND CHECK.LIV.FWD.ENTRIES THEN        ;* Auto settle in US Settle Method.
                MY.MULTI.LIV.STMT<-1> = MY.MULTI.STMT<II>
            END ELSE
                IF MY.MULTI.STMT<II,1> = R.NEW(ACC.FIELD)<1,AV> THEN
                    MY.MULTI.FWD.STMT<-1> = MY.MULTI.STMT<II>
                END
                R.SC.SETT.ENTRIES<-1> = MY.MULTI.STMT<II>
            END
        NEXT II
    END

    RETURN

*---------------------
CALC.EXCHRATE:      *=====
*---------------------
    E = "" ; ETEXT = "" ; RET.CODE = ""
    IF CCY1 = '' OR CCY2 = '' THEN
        ETEXT = 'BUY OR SELL CURRENCY MISSING'
    END ELSE
        CALL EXCHRATE(CCY.MKT,CCY1,Y1,CCY2,Y2,Y3,Y4,Y5,Y6,RET.CODE)
    END
    IF ETEXT NE "" THEN
        E = ETEXT
    END
    RETURN
*
* GB9900532
*
*---------------------
CALC.EXCHPRICE:     *=====
*---------------------
    E = "" ; ETEXT = "" ; RET.CODE = ""
    IF CCY1 = '' OR CCY2 = '' THEN
        ETEXT = 'BUY OR SELL CURRENCY MISSING'
    END ELSE
        CALL SC.EXCH.PRICE(CCY.MKT,CCY1,Y1,CCY2,Y2,Y3,Y4,Y5,Y6,RET.CODE)
    END
    IF ETEXT NE "" THEN
        E = ETEXT
    END
    RETURN

*-----------------
CALC.INT.DAYS:      *=====
*-----------------
    IF NOT(KO.PROCESSING) AND OLD.TRADE.DATE AND OLD.TRADE.DATE # COMI THEN
        COMI5 = ''
        R.NEW(SC.SBS.INTEREST.DAYS) = ''
        GOSUB CALC.LAST.PAY.DATE        ;*==
        LOCATE SC.SBS.NET.TRADE IN T.FIELDNO<1> SETTING POS ELSE POS = 0
        IF POS THEN T.SEQU<-1> = "D":POS
        LOCATE SC.SBS.INTEREST.DAYS IN T.FIELDNO<1> SETTING POS ELSE POS = 0
        IF POS THEN T.SEQU<-1> = "D":POS
        IF R.NEW(SC.SBS.STOCK.EXCHANGE) THEN
            RECALC.FLAG = 'Y'
            OLD.AV = AV
            IF R.NEW(SC.SBS.CUSTOMER.NO) # '' THEN
                CUSTS = COUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)+1
                GOSUB RESET.CHGS.COMM   ;* CI_10006386 S/E
                TEXT = 'CHARGES AND COMMISSIONS ARE TO BE RECALCULATED'
                CALL REM
                FOR AV = 1 TO CUSTS
                    GOSUB SET.DETS.FOR.CHGS       ;*==
                    COMI6 = ''
                    GOSUB CALC.CUST.CHARGES       ;*==
                    TEXT = '' ; LOCAL4 = ''
                NEXT AV
            END
            IF R.NEW(SC.SBS.BROKER.NO) # '' THEN
                BRKRS = COUNT(R.NEW(SC.SBS.BROKER.NO),VM)+1
                FOR AV = 1 TO BRKRS
                    GOSUB SET.DETS.FOR.CHGS       ;*==
                    COMI6 = ''
                    GOSUB CALC.BROKER.CHARGES     ;*==
                    TEXT = '' ; LOCAL4 = ''
                NEXT AV
            END
            AV = OLD.AV
        END
        LOCATE SC.SBS.LAST.PAYMNT.DATE IN T.FIELDNO<1> SETTING SS ELSE SS = 0
        LOCATE SC.SBS.INTEREST.RATE IN T.FIELDNO<1> SETTING PP ELSE PP = 0
        BEGIN CASE
        CASE SS AND PP
            T.SEQU<-1> = "D":SS:FM:"D":PP
        CASE SS OR PP
            IF SS THEN BUFF.VAR = "D":SS ELSE BUFF.VAR = "D":PP
            T.SEQU<-1> = BUFF.VAR
        END CASE
    END
    RETURN
*****************************************************************
*---------------------
PRORATA.COMM:       *=====
*---------------------
    IF PRORATA THEN
        IF ETEXT THEN
            CALL STORE.END.ERROR
        END
        CALL SC.PRORATA.COMM(PRORATA)
        CUSTS = COUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)+1
        RECALC.FLAG = 'N'
        FOR AV = 1 TO CUSTS
            COMI7 = R.NEW(SC.SBS.CU.FEES.MISC)<1,AV>
            RECALC.CUST.AM.DUE = '1'
            GOSUB CALC.CUST.NET         ;*==
            LOCATE SC.SBS.CU.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            T.ENRI<POS> = R.NEW(SC.SBS.TRADE.CCY)
            LOCATE SC.SBS.CU.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            RECALC.CUST.AM.DUE = 0
        NEXT AV
        BRKRS = COUNT(R.NEW(SC.SBS.BROKER.NO),VM)+1
        FOR AV = 1 TO BRKRS
            RECALC.BRKR.AM.DUE = '1'
            COMI7 = R.NEW(SC.SBS.BR.FEES.MISC)<1,AV>
            GOSUB CALC.BRKR.NET         ;*==
            LOCATE SC.SBS.BR.NET.AM.TRD:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            T.ENRI<POS> = R.NEW(SC.SBS.TRADE.CCY)
            LOCATE SC.SBS.BR.AMOUNT.DUE:'.':AV IN T.FIELDNO<1> SETTING POS ELSE POS = 0
            IF POS THEN
                T.SEQU<-1> = "D":POS
            END
            RECALC.BRKR.AM.DUE = 0
        NEXT AV
    END
    INPUT.BUFFER = ''
    INPUT.BUFFER3 = ''
    RETURN

*EN_10002646 S
******************
CALC.DISC.AMOUNT:
******************

    CUST.PRICE = R.NEW(SC.SBS.CUST.PRICE)<1,AV>
    REDEM.PRICE = R.SEC.MASTER<SC.SCM.REDEM.PRICE>
    IF (CUST.PRICE AND REDEM.PRICE) AND (REDEM.PRICE GT CUST.PRICE) THEN
        DISC.AMOUNT = ""
        CALL SC.CALC.CONSID(R.NEW(SC.SBS.SECURITY.CODE),NO.NOM,CUST.PRICE,R.NEW(SC.SBS.VALUE.DATE),CUST.CONSID,CAP.RATE,CAP.AMT,FACTOR)
        CALL SC.CALC.CONSID(R.NEW(SC.SBS.SECURITY.CODE),NO.NOM,REDEM.PRICE,R.NEW(SC.SBS.VALUE.DATE),REDEM.CONSID,CAP.RATE,CAP.AMT,FACTOR)
        DISC.AMOUNT = REDEM.CONSID - CUST.CONSID

        R.NEW(SC.SBS.DISCOUNT.AMOUNT)<1,AV> = DISC.AMOUNT
        GOSUB CHECK.WHT.TAX.CODE
        GOSUB CHECK.CUST.TAX
    END ELSE
        R.NEW(SC.SBS.DISCOUNT.AMOUNT)<1,AV> = 0
    END
    RETURN
*EN_10002646 E

*EN_10002037 S
CHECK.WHT.TAX.CODE:

    TXN.TRANS.TYPE = ''       ;* BG_100006948
    TXN.TAX.CUST = ''         ;* BG_100006948
    R.TXN.TAX.CODE = ''       ;* BG_100006948
    TXN.TYPE.CODE = ''        ;* CI_10034965 S
    TXN.TAX.CODE = ''         ;* CI_10034965 E
    TXN.TRANS.BASE = ''       ;* BG_100009867 S/E
    IF R.SEC.MASTER<SC.SCM.TXN.TAX.CODE> THEN
        ER =''
        CALL F.READ('F.TXN.TAX.CODE',R.SEC.MASTER<SC.SCM.TXN.TAX.CODE>,R.TXN.TAX.CODE,F.TXN.TAX.CODE,ER)
        IF ER THEN
            R.NEW(SC.SBS.WHT.TAX.CODE) = ''
            E ="TXN.TAX.CODE RECORD NOT FOUND"

            CALL ERR;T.SEQU = 'IFLD'
            GOTO FIELD.DISPLAY.OR.INPUT
        END
        POSN = 0
        LOCATE 'SEC.TRADE' IN R.TXN.TAX.CODE<SC.TXN.TXN.APPLIC,1> SETTING POSN THEN
            LOCATE R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> IN R.TXN.TAX.CODE<SC.TXN.TRANS.TYPE,POSN,1> SETTING YPOS ELSE YPOS = 0     ;* BG_100009867 S/E
            IF YPOS THEN
                TXN.TRANS.TYPE = R.TXN.TAX.CODE<SC.TXN.TRANS.TYPE><1,POSN,YPOS>
                TXN.TRANS.BASE = R.TXN.TAX.CODE<SC.TXN.AMT.BASE,POSN,YPOS>
                IF BOND.OR.SHARE ='B' THEN
                    R.NEW(SC.SBS.WHT.TAX.CODE) = R.TXN.TAX.CODE<SC.TXN.BONDS.TAX><1,POSN,YPOS>
                END ELSE
                    R.NEW(SC.SBS.WHT.TAX.CODE) = R.TXN.TAX.CODE<SC.TXN.SHARE.TAX><1,POSN,YPOS>
                END
                TXN.TAX.CUST = R.TXN.TAX.CODE<SC.TXN.TAX.CUST><1,POSN,YPOS>
            END     ;* BG_100009867 E
            IF R.NEW(SC.SBS.WHT.TAX.CODE)[1,1] ='*' THEN
* GET THE TAXCODE FROM TAX.TYPE.CONDITION
                TXN.TYPE.CODE =R.NEW(SC.SBS.WHT.TAX.CODE)[2,99]
                R.TAX.TYPE.CONDITION = ''
                CALL F.READ('F.TAX.TYPE.CONDITION',TXN.TYPE.CODE,R.TAX.TYPE.CONDITION,F.TAX.TYPE.CONDITION,ER)
            END ELSE
* TAX CODE
                TXN.TAX.CODE = R.NEW(SC.SBS.WHT.TAX.CODE)
            END
        END         ;* LOCATE
    END
    RETURN

* EN_10002037 E

TXN.VALUES.CLEAR:   * CI_10018494 S

    R.NEW(SC.SBS.CU.WHT.PERC)<1,AV> = 0
    R.NEW(SC.SBS.CU.WHT.TAX)<1,AV> = 0
    TXN.TAX.CUM.AMT = 0

    RETURN          ;* CI_10018494 E

CHECK.CUST.TAX:     *=====
*******************
* EN_10002037 S
* TXN.TAX.CODE PROCESS
    IF TXN.TRANS.TYPE NE R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV> THEN
        GOSUB TXN.VALUES.CLEAR          ;* CI_10018494 S/E
        RETURN
    END
    IF TXN.TAX.CUST = 'CUSTOMER' THEN
        TXN.CUSTOMER.NO = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
    END ELSE
        TXN.CUSTOMER.NO = R.NEW(SC.SBS.DEPOSITORY)
    END
    R.TXN.CUSTOMER.CHARGE = ''
    ER = ''
    CUST.TAX.GRP = ''         ;* BG_100006948
    CALL F.READ('F.CUSTOMER.CHARGE',TXN.CUSTOMER.NO,R.TXN.CUSTOMER.CHARGE,F.CUSTOMER.CHARGE,ER)
    IF NOT(ER) THEN ;*  CI_10018494 S/E
        LOCATE TXN.TYPE.CODE IN R.TXN.CUSTOMER.CHARGE<EB.CCH.TAX.TYPE,1> SETTING POSN ELSE POSN = 0

        IF POSN THEN
            CUST.TAX.GRP = R.TXN.CUSTOMER.CHARGE<EB.CCH.TAX.ACT.GROUP><1,POSN,1>
        END

    END

* CI_10034965 - Removed BG_100006948. Nulling TXN.TAX.CODE results in
* loss if TAX ID when TAX.TYPE.CONDITION has not been set.
    IF CUST.TAX.GRP NE '' THEN
        TR = 0
        LOCATE CUST.TAX.GRP IN R.TAX.TYPE.CONDITION<TAX.TTC.CUST.TAX.GRP,1> SETTING POSN ELSE POSN = 0
        TXN.TAX.CODE = ''     ;* CI_10034965 - Null TXN.TAX.CODE for each cus.
        IF POSN THEN
            TXN.TAX.CODE = R.TAX.TYPE.CONDITION<TAX.TTC.TAX.CODE><1,POSN,1>
        END ELSE
            TXN.TAX.CODE = ''
        END
    END
    TXNPOS = 0
    T.DATA = ''
    T.DATA = TXN.TAX.CODE
    LOCAL1 = ''
    LOCAL1 = TXN.TAX.CODE
    T.DATA<2> = "TAX"
*EN_10002646 S
    BEGIN CASE
* BG_100009867 S/E         CASE R.TXN.TAX.CODE<SC.TXN.AMT.BASE,1> = "PRINCIPAL"
    CASE TXN.TRANS.BASE = 'PRINCIPAL'
        DEAL.AMOUNT = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
* BG_100009867 S/E         CASE R.TXN.TAX.CODE<SC.TXN.AMT.BASE,1> = 'DISCOUNT'
    CASE TXN.TRANS.BASE = 'DISCOUNT'
        DEAL.AMOUNT = R.NEW(SC.SBS.DISCOUNT.AMOUNT)<1,AV>
    CASE 1
        DEAL.AMOUNT = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
    END CASE
*EN_10002646 E
    TXN.TRADE.CCY = R.NEW(SC.SBS.TRADE.CCY)
    CUST.CONDITION = ''
    CUST.CONDITION<6> = 'T'

    CALL CALCULATE.CHARGE(R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,DEAL.AMOUNT,R.NEW(SC.SBS.TRADE.CCY),"1",'','','',T.DATA,CUST.CONDITION,'','')
    TXN.TAX.CUM.AMT = 0       ;* BG_100006948
    LOCATE 'TAX' IN T.DATA<2,1> SETTING TXNPOS THEN
* CI_10028487 - S
        IF T.DATA<44> OR T.DATA<45> THEN
            IF TXN.TRADE.CCY = LCCY THEN
                TXN.TAX.AMT = LOWER(T.DATA<44>)
            END ELSE
                TXN.TAX.AMT = LOWER(T.DATA<45>)
            END
        END ELSE
* CI_10028487 - E
            IF TXN.TRADE.CCY = LCCY THEN
                TXN.TAX.AMT = LOWER(T.DATA<4>)
            END ELSE
                TXN.TAX.AMT = LOWER(T.DATA<5>)
            END
        END         ;* CI_10028487 S/E
        R.NEW(SC.SBS.CU.WHT.PERC)<1,AV> =  T.DATA<13>

        R.NEW(SC.SBS.CU.WHT.TAX)<1,AV> = TXN.TAX.AMT
        LOCAL3 = TXN.TAX.AMT  ;* For SC.SEC.TRADE.ACC
        GOSUB CALC.TAX.CUM.AMT
    END
    RETURN

* EN_10002037 E
***************************
CHECK.CUST.COMM:
*******************
*
    CU.COMM.TYPE = ''
    CHG.CALC = ''
    DATA.REC = ''
    DATA.REC<1> = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    IF AF = SC.SBS.SECURITY.CODE THEN   ;* BG_100008739 s
        DATA.REC<2> = COMI
    END ELSE
        DATA.REC<2> = R.NEW(SC.SBS.SECURITY.CODE)
    END   ;* BG_100008739 e
    IF R.STD.SEC.TRADE<SC.SST.COMM.PRIN.INT> = "PRINCIPAL" THEN
        DATA.REC<3> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
    END ELSE
        DATA.REC<3> = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.CUST.INTR.AMT)<1,AV>
    END
    DATA.REC<4> = R.NEW(SC.SBS.TRADE.CCY)
    DATA.REC<5> = R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>
    DATA.REC<6> = 'TRADE'
    TRANS.CODE = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
    CALL SC.CALC.TRADE.CHG(DATA.REC,CHG.CALC,'SEC.TRADE',TRANS.CODE)
*
    IF CHG.CALC = '' THEN
        ETEXT = ''
        CU.COMM.TYPE = ''
        IF DATA.REC<1> NE '' AND DATA.REC<2> NE '' AND DATA.REC<4> NE '' THEN
            GOSUB GET.CUST.COMM.RATE    ;*==
            CUST.COND = ''
        END
*
        CUSTOMER.COMM = ''
*
CALC.COMM.TAX.AMT:  *=====
*
        IF CU.COMM.TYPE THEN
            CALL CALCULATE.CHARGE(R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,CU.GROSS.ACCR,R.NEW(SC.SBS.TRADE.CCY),'1','','','',CU.COMM.TYPE,CUST.COND,TOTAL.CHARGE.FOREIGN,TOTAL.CHARGE.LOCAL)
*
            CUSTOMER.COMM = ''
            CURRENCY = R.NEW(SC.SBS.TRADE.CCY)
*
            LOCATE 'COM' IN CU.COMM.TYPE<2,1> SETTING POS ELSE POS = 0
            IF POS THEN
                IF CURRENCY = LCCY THEN
                    IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> EQ '' THEN COMMISSION.AMT = CU.COMM.TYPE<4,POS>      ;* CI_10005017 S; * CI_10006386 S/E
                END ELSE
                    IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> EQ '' THEN COMMISSION.AMT = CU.COMM.TYPE<5,POS>      ;* CI_10005017 E; * CI_10006386 S/E
                END
            END
*
            LOCATE 'TAX' IN CU.COMM.TYPE<2,1> SETTING TPOS THEN
                IF CURRENCY = LCCY THEN
                    TAX.AMT = CU.COMM.TYPE<4,TPOS>
                    CUSTOMER.COMM<2> = TAX.AMT
                    R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = TAX.AMT
                END ELSE
                    TAX.AMT = CU.COMM.TYPE<5,TPOS>
                    CUSTOMER.COMM<2> = TAX.AMT
                    R.NEW(SC.SBS.CU.COMM.TAX)<1,AV> = TAX.AMT
                    TAX.AMT.LCY = CU.COMM.TYPE<4,TPOS>
                    R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = TAX.AMT.LCY
                    R.NEW(SC.SBS.COM.TAX.XRTE)<1,AV> = CU.COMM.TYPE<6,TPOS>
                END
* CI_10018620/S
* Changing CU.COMMISSION to 0 should change COM.TAX.BCUR to 0
            END ELSE
                R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV> = 0.00
            END
* CI_10018620/E
            IF ETEXT THEN
                ETEXT = ''
            END
        END
    END ELSE
        CUSTOMER.COMM = ''
* CI_10005017 S
        IF R.NEW(SC.SBS.CU.COMMISSION)<1,AV> EQ '' THEN     ;* CI_10006386 S/E
            CUSTOMER.COMM<1> = CHG.CALC<1>        ;* CI_10005017 S
            CUSTOMER.COMM<2> = CHG.CALC<2>        ;* CI_10018059 S/E
            CUSTOMER.COMM<6> = CHG.CALC<5>        ;* CI_10018620 S/E
        END ELSE
            CUSTOMER.COMM<1> = R.NEW(SC.SBS.CU.COMMISSION)<1,AV>
            CUSTOMER.COMM<2> = R.NEW(SC.SBS.CU.COMM.TAX)<1,AV>        ;* CI_10018059 S/E
            CUSTOMER.COMM<6> = R.NEW(SC.SBS.COM.TAX.BCUR)<1,AV>       ;* CI_10018620 S/E
        END
* CI_10005017 E
        CUSTOMER.COMM<3> = CHG.CALC<3>
        CUSTOMER.COMM<4> = CHG.CALC<4>
        CUSTOMER.COMM<7> = CHG.CALC<7>
        CUSTOMER.COMM<5> = CHG.CALC<6>
        CUSTOMER.COMM<8> = CHG.CALC<8>  ;* disc pcent 16/6/95
    END
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        YAMT9 = CUSTOMER.COMM<1>
        CALL SC.CHF.ROUNDING(YAMT9)
        CUSTOMER.COMM<1> = YAMT9
    END
    RETURN
*
*******************
GET.CUST.COMM.RATE: *=====
*******************
*
    CUSTOMER.NO = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
    ER = '' ; R.CUSTOMER.SECURITY = ''
    CALL F.READ('F.CUSTOMER.SECURITY',CUSTOMER.NO,R.CUSTOMER.SECURITY,F.CUSTOMER.SECURITY,ER)
    IF NOT(ER) THEN
        SEC.ACC.SUFF = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',2)
        LOCATE SEC.ACC.SUFF IN R.CUSTOMER.SECURITY<SC.CSC.SEC.ACC.SUFF,1> BY 'AR' SETTING NPOS ELSE NPOS = 0
        IF NOT(NPOS) THEN
            LOCATE 'ALL' IN R.CUSTOMER.SECURITY<SC.CSC.SEC.ACC.SUFF,1> BY 'AR' SETTING NPOS ELSE NPOS = 0
        END
        IF NPOS THEN
            IF BOND.OR.SHARE = 'B' THEN
                CU.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.BOND.COMM.TYPE,NPOS>
            END ELSE
                CU.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.SHARE.COMM.TYPE,NPOS>
            END
        END
    END
    RETURN
*
*-----------------------------------------------------
* GB9301824
CHECK.BROK.COMM:    *=====
*---------------

    BR.GROSS.ACCR = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
    CHG.CALC = ''
    DATA.REC = ''
    DATA.REC<1> = R.NEW(SC.SBS.BROKER.NO)<1,AV>:"-0"        ;* CI_10000609
    DATA.REC<2> = R.NEW(SC.SBS.SECURITY.CODE)
    DATA.REC<3> = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> + R.NEW(SC.SBS.BR.INTR.AM.TRD)<1,AV>
    DATA.REC<4> = R.NEW(SC.SBS.TRADE.CCY)
    DATA.REC<5> = R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>
    DATA.REC<6> = 'TRADE'
    CALL SC.CALC.TRADE.CHG(DATA.REC,CHG.CALC,'SEC.TRADE',"")
    CHG.CALC = CHG.CALC<1>
*
    IF CHG.CALC = '' THEN
        ETEXT = ''
        IF DATA.REC<1> NE '' AND DATA.REC<2> NE '' AND DATA.REC<4> NE '' THEN
            GOSUB GET.BROK.COMM.RATE    ;*==
        END
*
        BROKER.COMM = ''
        IF BR.COMM.TYPE THEN
            CALL CALCULATE.CHARGE(R.NEW(SC.SBS.BROKER.NO)<1,AV>,BR.GROSS.ACCR,R.NEW(SC.SBS.TRADE.CCY),'1','','','',BR.COMM.TYPE,'',TOTAL.CHARGE.FOREIGN,TOTAL.CHARGE.LOCAL)
            IF R.NEW(SC.SBS.TRADE.CCY) = LCCY THEN BROKER.COMM = BR.COMM.TYPE<4,1> ELSE CUSTOMER.COMM = BR.COMM.TYPE<5,1>
            IF ETEXT THEN ETEXT = ''
        END
    END ELSE
        BROKER.COMM = CHG.CALC
    END
    IF R.NEW(SC.SBS.TRADE.CCY) = 'CHF' THEN
        YAMT9 = BROKER.COMM
        CALL SC.CHF.ROUNDING(YAMT9)
        BROKER.COMM = YAMT9
    END
    RETURN
*-----------------------------------------------------
GET.BROK.COMM.RATE: *=====
*------------------
    BROKER.NO = R.NEW(SC.SBS.BROKER.NO)<1,AV>
    BR.COMM.TYPE = ''
    ER = '' ; R.CUSTOMER.SECURITY = ''
    CALL F.READ('F.CUSTOMER.SECURITY',BROKER.NO,R.CUSTOMER.SECURITY,F.CUSTOMER.SECURITY,ER)
    IF NOT(ER) THEN
        SEC.ACC.SUFF = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',2)
        LOCATE SEC.ACC.SUFF IN R.CUSTOMER.SECURITY<SC.CSC.SEC.ACC.SUFF,1> BY 'AR' SETTING NPOS ELSE NPOS = 0
        IF NOT(NPOS) THEN
            LOCATE 'ALL' IN R.CUSTOMER.SECURITY<SC.CSC.SEC.ACC.SUFF,1> BY 'AR' SETTING NPOS ELSE NPOS = 0
        END
        IF NPOS THEN
            IF BOND.OR.SHARE = 'B' THEN
                BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.BOND.COMM.TYPE,NPOS>
            END ELSE
                BR.COMM.TYPE = R.CUSTOMER.SECURITY<SC.CSC.SHARE.COMM.TYPE,NPOS>
            END
        END
    END

    RETURN
*
*------------------------
BULK.PROCESSING.REQUIRED:     *=====
*------------------------
* Subroutine to decide whether the trade should be written to disk
* by the bulk processing phantom.
*
    BULK.PROCESSING = @FALSE
    IF R.SC.PARAMETER<SC.PARAM.BULK.TRANSACT> NE '' THEN    ;* EN_10001841 s/e
        TRANS.ARRAY = ''
        TRANS.LIST = R.NEW(SC.SBS.CUST.TRANS.CODE)
        LOOP
            REMOVE TRANS.CODE FROM TRANS.LIST SETTING MORE
        WHILE TRANS.CODE:MORE DO
            LOCATE TRANS.CODE IN TRANS.ARRAY<1,1> SETTING POSN ELSE POSN = 0
            IF POSN THEN
                TRANS.ARRAY<2,POSN> += 1
            END ELSE
                IF TRANS.ARRAY THEN
                    TRANS.ARRAY<1> := VM:TRANS.CODE
                    TRANS.ARRAY<2> := VM:1
                END ELSE
                    TRANS.ARRAY<1> = TRANS.CODE
                    TRANS.ARRAY<2> = '1'
                END
            END
        REPEAT
*
        TRANS.COUNT = DCOUNT(TRANS.ARRAY<1>,VM)
        FOR CT = 1 TO TRANS.COUNT
            LOCATE TRANS.ARRAY<1,CT> IN R.SC.PARAMETER<SC.PARAM.BULK.TRANSACT,1> SETTING POSN THEN
                IF TRANS.ARRAY<2,CT> GT R.SC.PARAMETER<SC.PARAM.BULK.LIMIT,POSN> THEN
                    BULK.PROCESSING = @TRUE
                END
            END
        NEXT CT
*
    END   ;* EN_10001841 s/e
    RETURN
*
*-------------------------------------------------------------------------
*
DETERMINE.CALL.STATUS:
*--------------------

    IF ID.OLD THEN
        REST.CHANGED = @FALSE
        SPECIFIC.CHANGED = @FALSE
        FOR CT = 1 TO SC.SBS.LOCAL.REF  ;* GB9901164
            IF R.NEW(CT) = R.OLD(CT) ELSE
                BEGIN CASE
*CI_10012564/S
                CASE CT = SC.SBS.BR.NARRATIVE
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.LOCAL.REF
                    SPECIFIC.CHANGED = @TRUE
* CI_10012564/E
                CASE CT = SC.SBS.TRADE.TIME
                    SPECIFIC.CHANGED = @TRUE
* CI_10002404 s
                CASE CT = SC.SBS.BR.TRD.TIME      ;* EN_10000316  add BR.TRD.TIME
* CI_10002404 e
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.CU.NARRATIVE
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.CU.DELIV.INSTR
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.CU.OVE.ADDR
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.CU.MESS.CONTROL
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.CU.DELIV.KEY
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.BR.DELIV.KEY
                    SPECIFIC.CHANGED = @TRUE
                CASE CT = SC.SBS.DEP.DELIV.KEY
                    SPECIFIC.CHANGED = @TRUE
* CI_10006871 S
                CASE CT = SC.SBS.LOCAL.REF
                    SPECIFIC.CHANGED = @TRUE

                CASE CT = SC.SBS.BR.NARRATIVE
                    SPECIFIC.CHANGED = @TRUE
* CI_10006871 E
* CI_10020804 S
                CASE CT = SC.SBS.BROKER.ADVICE.REQD
                    SPECIFIC.CHANGED = @TRUE

                CASE CT = SC.SBS.CG.TRADE.TIME
                    SPECIFIC.CHANGED = @TRUE

                CASE CT = SC.SBS.PAYMENT.REQD
                    SPECIFIC.CHANGED = @TRUE

                CASE CT = SC.SBS.DEPOT.ADVICE.REQD
                    SPECIFIC.CHANGED = @TRUE
* CI_10020804 E
                CASE 1
                    REST.CHANGED = @TRUE
                END CASE
            END
        NEXT CT

        IF NOT(REST.CHANGED) AND SPECIFIC.CHANGED THEN
            CALL.TRANS.UPD = @FALSE
        END
    END

    RETURN
*
*----------------------------------------------------------------
*
UPDATE.SECS.UNAUTH:
*-----------------
*
** Here we shall update the SECS.UNAUTH file
** because it was otherwise not done as a minor
** field changed
*
    F.SECS.UNAUTH = ""
    CALL OPF("F.SECS.UNAUTH",F.SECS.UNAUTH)

    NO.OF.CUSTS = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)
    NO.OF.BROKS = DCOUNT(R.NEW(SC.SBS.BROKER.NO),VM)

    FOR I = 1 TO NO.OF.CUSTS
*
** In order to update the SECS.UNAUTH record call
** the routine SC.UPD.SECS.UNAUTH
*
        SEC.POS.KEY = R.NEW(SC.SBS.CUST.SEC.ACC)<1,I>:".":R.NEW(SC.SBS.SECURITY.CODE):"."
        IF KO.PROCESSING THEN
            INT.RATE = R.NEW(SC.SBS.INTEREST.RATE) ; CONVERT '.' TO '' IN INT.RATE
            IF NOT(INT.RATE) THEN
                INT.RATE = ''
            END
            SEC.POS.KEY := R.NEW(SC.SBS.DEPOSITORY):".":R.NEW(SC.SBS.CUST.NOMINEE)<1,I>:'.':R.NEW(SC.SBS.MATURITY.DATE):'.':INT.RATE
        END ELSE
            SEC.POS.KEY := R.NEW(SC.SBS.DEPOSITORY):".":R.NEW(SC.SBS.CUST.NOMINEE)<1,I>:".."
        END
        SEC.POS.KEY = SEC.POS.KEY:'.':R.NEW(SC.SBS.SUB.ACCOUNT)<1,I>  ;*GB0100224 Add the sub account as 7th element of SECURITY.POSITION key

        SEC.TRANS.KEY = ID.NEW:".":I

        CALL SC.UPD.SECS.UNAUTH(SEC.POS.KEY,SEC.TRANS.KEY,"",REC.STATUS,F.SECS.UNAUTH)

    NEXT I

    RETURN
*
** GB9900963 (Starts)
*
SET.SECURITY.CCY:
*---------------
*
    SECURITY.CCY = R.NEW(SC.SBS.SECURITY.CURRENCY)
*
    RETURN
*
*------------------------------------------------------------
*
PROCESS.CGT.CALCULATION:
*----------------------

    GOSUB SET.SECURITY.CCY

    IF SECURITY.CCY THEN
        GOSUB BUILD.CGT.LIST

        CGT.ADJ.BASE.AMTS = ""
        CGT.CATEG.CODES = ""
        CGT.RATES = ""
        CGT.AMTS = ""
        CGT.LCL.AMTS = ""
        CGT.TXN.CODES = ""
        CGT.ENTRIES = ""
* EN_10001090 s
        CGT.PARAM.COND = ''
        CGT.SRC.LCL.TAX = ''
        THIS.VALUE.DATE = R.NEW(SC.SBS.VALUE.DATE)
        THIS.TRADE.CCY = R.NEW(SC.SBS.TRADE.CCY)
* BG_100002144 s
        CALL SC.CGT.PROCESSING(CUST.ACCOUNTS,SAM.IDS,THIS.VALUE.DATE,THIS.TRADE.CCY,SECURITY.CCY,CGT.BASE.AMTS,CGT.ADJ.BASE.AMTS,CGT.TAX.CODES,CGT.CATEG.CODES,CGT.TXN.CODES, CGT.RATES, CGT.AMTS, CGT.LCL.AMTS,CGT.PARAM.COND,CGT.SRC.LCL.TAX,CGT.ENTRIES,"INPUT","","")     ;* GB9901200
* EN_10001090 e/BG_100002144 e
        IF ETEXT THEN
            CALL STORE.END.ERROR
            RETURN
        END
*
        NO.OF.SAMS = DCOUNT(SAM.IDS,FM)
        FOR SAM.CNT = 1 TO NO.OF.SAMS
            LOCATE SAM.IDS<SAM.CNT> IN R.NEW(SC.SBS.CUST.SEC.ACC)<1,1> SETTING SAM.POS THEN
* GB9901094 S
                IF R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS> AND R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS> NE CGT.BASE.AMTS<SAM.POS> THEN
                    TEXT = 'CGT.BASE.AMT DIFF; REC = &; CALC = &':FM:R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS>:FM:CGT.BASE.AMTS<SAM.POS>        ;* GB9901282
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT EQ 'NO' THEN
                        CALL TRANSACTION.ABORT
                        TEXT = ""
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
*
* EN_10000177 s
                THIS.REC.CGT.CODES = R.NEW(SC.SBS.CGT.CODE)<1,SAM.POS>
                THIS.CALC.CGT.CODES = CGT.TAX.CODES<SAM.POS>
                IF THIS.REC.CGT.CODES AND THIS.REC.CGT.CODES NE LOWER(CGT.TAX.CODES) THEN
                    TEXT = 'CGT.TAX.CODES DIFF; REC = & ; CALC = & ':FM:THIS.REC.CGT.CODES:FM:THIS.CALC.CGT.CODES
* EN_10000177 e
                    CONVERT SM:VM TO ",," IN TEXT ;* EN_10000177
                    CALL STORE.OVERRIDE(YCURR.NO)
                    IF TEXT EQ 'NO' THEN
                        CALL TRANSACTION.ABORT
                        TEXT = ""
                        GOTO FIELD.DISPLAY.OR.INPUT
                    END
                END
* populate CGT FIELDS
* GB9901282 S
                BASE.AMT.CHANGED = ''
                LOCATE R.NEW(SC.SBS.CUST.ACC.NO)<1,SAM.POS> IN CGT.SAM.LIST<1> SETTING CGT.SAM.POS THEN
                    BASE.AMT.CHANGED = CGT.AMT.CHG.LIST<CGT.SAM.POS>
                END
                IF NOT(BASE.AMT.CHANGED = 'Y') OR (BASE.AMT.CHANGED = 'Y' AND (R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS> = '' OR R.NEW(SC.SBS.CGT.CODE)<1,SAM.POS> = '')) THEN
* EN_10000177 s
                    R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS> = LOWER(CGT.BASE.AMTS<SAM.POS>)
* lower required as list is multi-valued
                    R.NEW(SC.SBS.CGT.CODE)<1,SAM.POS> = LOWER(CGT.TAX.CODES<SAM.POS>)
* EN_10000177 e
                END
* GB9901282 E
* GB9901094 E
*
                R.NEW(SC.SBS.CGT.BAMT.CCY)<1,SAM.POS> = SECURITY.CCY
* EN_10000177 s
                R.NEW(SC.SBS.CGT.TAX.RATE)<1,SAM.POS> = LOWER(CGT.RATES<SAM.POS>)
                R.NEW(SC.SBS.CGT.TAX.LCL)<1,SAM.POS> = LOWER(CGT.LCL.AMTS<SAM.POS>)
                R.NEW(SC.SBS.CGT.TAX.AMT)<1,SAM.POS> = LOWER(CGT.AMTS<SAM.POS>)
* EN_10000177 e
* EN_10001090 s
                IF R.NEW(SC.SBS.CGT.BASE.AMT)<1,SAM.POS> <> '' THEN
                    R.NEW(SC.SBS.CGT.PARAM.COND)<1,SAM.POS> = CGT.PARAM.COND
                    R.NEW(SC.SBS.CGT.SRC.LCL.TAX)<1,SAM.POS> = CGT.SRC.LCL.TAX
                END
* EN_10001090 e
            END
        NEXT SAM.CNT
*
    END

    RETURN
*
*--------------------------------------------------------
*
BUILD.CGT.LIST:
*-------------

    SAM.IDS = ""
    CGT.BASE.AMTS = ""
    CGT.TAX.CODES = ""
    CUST.ACCOUNTS = ""
    NO.CGT.CUST = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),VM)      ;* BG_100006895
    FOR AV = 1 TO NO.CGT.CUST ;* BG_100006895
* GB9901282 S
        BASE.AMT.CHANGED = ''
        LOCATE R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> IN CGT.SAM.LIST<1> SETTING CGT.SAM.POS THEN
            BASE.AMT.CHANGED = CGT.AMT.CHG.LIST<CGT.SAM.POS>
        END
* GB9901282 E
        LOCATE R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> IN SAM.IDS<1> SETTING SAM.POS ELSE
            INS R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> BEFORE SAM.IDS<SAM.POS>
            INS R.NEW(SC.SBS.CUST.ACC.NO)<1,AV> BEFORE CUST.ACCOUNTS<SAM.POS>
*
* GB9901164
* Force to re-calculate CG tax
* GB9901282 S
            IF BASE.AMT.CHANGED = 'Y' THEN
                INS R.NEW(SC.SBS.CGT.BASE.AMT)<1,AV> BEFORE CGT.BASE.AMTS<SAM.POS>
* raise required because this will get lowered later
                INS RAISE(R.NEW(SC.SBS.CGT.CODE)<1,AV>) BEFORE CGT.TAX.CODES<SAM.POS>
            END
* GB9901282 E
        END
    NEXT AV

    RETURN
*
** GB9900963 (Ends)
* EN_10001090 s
*================================================================================
GET.CGT.PROCESS.FLAG:
* Get flag to run CGT processing

    CGT.FLAG = 0
    BEGIN CASE
    CASE R.SC.PARAMETER<SC.PARAM.CG.BASE.UPDATE> = "YES"
        CGT.FLAG = 1
    CASE R.SC.PARAMETER<SC.PARAM.CG.BASE.UPDATE> = "RULES"
        CG.TXN.RULES.ID = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,1>
        SEC.MASTER = R.NEW(SC.SBS.SECURITY.CODE)
        CALL SC.GET.CG.TXN.RULES.RECORD(CG.TXN.RULES.ID,SEC.MASTER,R.CG.TXN.RULES,ERR.MSG)
        UPDATE.METHOD = R.CG.TXN.RULES<CG.RUL.UPDATE.METHOD>
        CGT.FLAG = (UPDATE.METHOD = "ONLINE")
    END CASE

    RETURN
*================================================================================
UPDATE.CTB.STMT.NOS:
* Update the CG.TXN.BASE with the stmt.nos from this record
    YAPPL = APPLICATION
    IF V$FUNCTION NE "D" THEN
        MATBUILD YR.NEW FROM R.NEW
    END ELSE
        MATBUILD YR.NEW FROM R.OLD
    END

    YCLIENT.NOS = "" ; YSTMT.NOS = ""
    CALL SC.GET.CGT.STMT.ENTRY.IDS(YAPPL,YR.NEW,YCLIENT.NOS,YSTMT.NOS)

    YSECURITY.NO = R.NEW(SC.SBS.SECURITY.CODE)
    CALL SC.CTB.UPDATE.STMT.NOS(YSECURITY.NO,YCLIENT.NOS,YSTMT.NOS)

    RETURN

*-----------------------------------------------------------------------------
CGT.REVERSAL.PROCESSING:
* we need to do the reversal to pick up the reposted cgt on other sec.trades
* but we don't write the record back so that SEC.TRADE.AUTH.CHANGE

    ACTION = "REVERSAL"
    ORIGIN = 'SEC.TRANS'
    TRA.CODE = ''
    TMP.CNT = 1
    LOOP
        INPUT.ID = ID.NEW:".":TMP.CNT
        R.INPUT.REC = ''      ;* BG_100010567
        TMP.ERR = ''
        CALL F.READ("F.SECURITY.TRANS",INPUT.ID,R.INPUT.REC,F.SECURITY.TRANS,TMP.ERR)     ;* BG_100010567
    UNTIL TMP.ERR NE '' DO
        TMP.CNT += 1
        TRA.CODE = R.INPUT.REC<SC.SCT.TRANS.TYPE> ;* BG_100010567
        PORTFOLIO.NO = R.INPUT.REC<SC.SCT.SECURITY.ACCOUNT> ;* BG_100010567
        SECURITY.NO = R.INPUT.REC<SC.SCT.SECURITY.NUMBER>   ;* BG_100010567
        CUSTOMER.NUMBER = FIELD(PORTFOLIO.NO,"-",1)
        ID.TXN.BASE= ""

        CALL SC.GET.BASE.ID(CUSTOMER.NUMBER,SECURITY.NO,PORTFOLIO.NO,ID.TXN.BASE)
        R.CG.TXN.BASE = '' ; YERR = '' ; RETRY = ''
        CALL F.READU("F.CG.TXN.BASE",ID.TXN.BASE,R.CG.TXN.BASE,F.CG.TXN.BASE,YERR,RETRY)
        OVERRIDE.MSGS = ''
        IF YERR = '' THEN
            REC.OLD.TXN.BASE = R.CG.TXN.BASE
            CALL SC.PREPARE.CG.BASE.UPDATE(R.CG.TXN.BASE, R.INPUT.REC,INPUT.ID,ACTION,OVERRIDE.MSGS,ORIGIN,TRA.CODE)    ;* BG_100010567
        END

        FN.CG.TXN.BASE = "F.CG.TXN.BASE"
        F.CG.TXN.BASE = ""
        CALL OPF(FN.CG.TXN.BASE,F.CG.TXN.BASE)
        CALL F.RELEASE(FN.CG.TXN.BASE,ID.TXN.BASE,F.CG.TXN.BASE)

        IF OVERRIDE.MSGS THEN
            LOOP
                REMOVE OVE.TXT FROM OVERRIDE.MSGS SETTING MORE.OVE
            WHILE OVE.TXT:MORE.OVE DO
                TEXT = OVE.TXT
                CALL STORE.OVERRIDE(YCURR.NO)
                IF TEXT = 'NO' THEN
                    TEXT = ''
                    GOTO ID.INPUT
                END
            REPEAT
        END
    REPEAT

    CGT$STMT.ENTRY.ARRAY = ''

    RETURN
* EN_10001090 e

* EN10000360 - S
*      Subroutine for the Portfolio Constraint check
GET.PORT.CONST.NO:
    SAM.ID = R.NEW(SC.SBS.CUST.SEC.ACC)<1,I>
    SM.ID = R.NEW(SC.SBS.SECURITY.CODE)
    DEAL.ARRAY = ''
    DEAL.ARRAY<1> = R.NEW(SC.SBS.CU.GROSS.AM.SEC)<1,I>
    DEAL.ARRAY<2> = R.NEW(SC.SBS.SECURITY.CURRENCY)
    DEAL.ARRAY<3> = YCURR.NO
** GB9901023 STARTS
    DEAL.ARRAY<4> = R.NEW(SC.SBS.CUST.TRANS.CODE)
    DEAL.ARRAY<5> = R.NEW(SC.SBS.CUST.NO.NOM)<1,I>
** GB9901023 ENDS
*
* sign the deal amount
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,I>
    GOSUB CHECK.TRANS         ;*==
    IF COMI4 = 'DEBIT' THEN
        DEAL.ARRAY<1> = -DEAL.ARRAY<1>
    END
*
    TEXT = ''
    ETEXT = ''
    CONSTRAINT.FLAG<1> = 'VAL'
    CONSTRAINT.FLAG<2> = I
    CALL SC.CHECK.PORTFOLIO.CONSTRAINT(PC.NO,SAM.ID,SM.ID,DEAL.ARRAY,CONSTRAINT.FLAG)
    AF = SC.SBS.PORT.CONST.NO
    AV = I
    IF ETEXT THEN
        FLAG.ERROR = 1
    END ELSE
        FLAG.ERROR = ''
    END
    RETURN
* EN10000360 - E
* CI-10001481 S
*------------------------
REPEAT.CHECK.FIELDS:
* -----------------------
    IF GTSVAL THEN  ;* CI_10014817/S/E
*
* Repeat the check field processing if there is any defined
*
        BASE.AF = ''          ;* CI_10010072 S/E
        FOR AF = SC.SBS.CUSTOMER.NO TO SC.SBS.BR.AMOUNT.DUE
            IF INDEX(N(AF), "C", 1) THEN
*
* Is it a sub value, a multi value or just a field
*
                MESSAGE = ''  ;* CI_10010409 S/E
                BEGIN CASE
* CI_10010072 S
                CASE GTSERROR
                    NULL
* CI_10010072 E
                CASE F(AF)[4,2] = 'XX'  ;* Sv
                    NO.OF.AV = DCOUNT(R.NEW(AF), VM)
                    IF NO.OF.AV = 0 THEN NO.OF.AV = 1
                    FOR AV = 1 TO NO.OF.AV
                        NO.OF.SV = DCOUNT(R.NEW(AF)<1,AV>, SM)
                        IF NO.OF.SV = 0 THEN NO.OF.SV = 1
                        FOR AS = 1 TO NO.OF.SV
                            GOSUB DO.CHECK.FIELD
                        NEXT AS
                    NEXT AV
                CASE F(AF)[1,2] = 'XX'  ;* Mv
                    AS = ''
* CI_10010072 S
                    IF F(AF)[1,3] EQ 'XX<' THEN
                        BASE.AF = AF
                    END ELSE
                        IF F(AF)[1,3] EQ 'XX.' THEN
                            BASE.AF = ''
                        END
                    END
                    IF BASE.AF THEN
                        NO.OF.AV = DCOUNT(R.NEW(BASE.AF), VM)
                    END ELSE
* CI_10010072 E
                        NO.OF.AV = DCOUNT(R.NEW(AF), VM)
                    END       ;* CI_10010072 S/E
                    IF NO.OF.AV = 0 THEN NO.OF.AV = 1
                    FOR AV = 1 TO NO.OF.AV
                        GOSUB DO.CHECK.FIELD
                    NEXT AV
                CASE OTHERWISE
                    AV = '' ; AS = ''
                    GOSUB DO.CHECK.FIELD
                END CASE
            END
        NEXT AF
    END

    RETURN
*-----------------
DO.CHECK.FIELD:
*-----------------
** Repeat the check field validation - errors are returned in the
** variable E.
    COMI.ENRI = ""
    BEGIN CASE
    CASE AS
        COMI = R.NEW(AF)<1,AV,AS>
    CASE AV
        COMI = R.NEW(AF)<1,AV>
    CASE AF
        COMI = R.NEW(AF)
    END CASE
    GOSUB HANDLE.MESSAGE
    IF GTSERROR NE ST.GTSERROR.OLD THEN
        ST.GTSERROR.OLD = GTSERROR
        FLD.POS = AF
        IF AV THEN FLD.POS := '.':AV
        IF AS THEN FLD.POS := '.':AS
        YGT.POS = 0
        LOCATE FLD.POS IN GTSERROR<2,1> SETTING YGT.POS THEN
            ETEXT = GTSERROR<3,YGT.POS>
            CALL STORE.END.ERROR
        END
* CI_10010409 E
    END ELSE
        BEGIN CASE
        CASE AS
            R.NEW(AF)<1,AV,AS> = COMI
            YENRI.FLD = AF:".":AV:".":AS ; YENRI = COMI.ENRI
        CASE AV
            R.NEW(AF)<1,AV> = COMI
            YENRI.FLD = AF:".":AV ; YENRI = COMI.ENRI
        CASE AF
            R.NEW(AF) = COMI
            YENRI.FLD = AF ; YENRI = COMI.ENRI
        END CASE
    END
    RETURN
* CI-10001481 E
*-----------------------------------------------------
* EN_10001271 starts
WRITE.SEC.INFO:
*********************
    R.SEC.TRANS.DET = ''
    F.SEC.TRANS.INFO = ""
    CUST.ACCT.ID = ''
    CALL OPF('F.SEC.TRANS.INFO',F.SEC.TRANS.INFO)
    SEC.INFO.ID = APPLICATION:"*":ID.NEW
*
! GET the Customer Security account number FROM SEC.TRADE record
    CUS.SEC.ACC = R.NEW(SC.SBS.CUST.SEC.ACC)
*
* For deletion of change,use R.OLD
    IF ((V$FUNCTION = 'D' AND  NOT(ID.OLD)) OR (V$FUNCTION = 'R')) THEN
        CALL F.DELETE('F.SEC.TRANS.INFO',SEC.INFO.ID)
        RETURN
    END ELSE
        IF ID.OLD THEN CUS.SEC.ACC = R.OLD(SC.SBS.CUST.SEC.ACC)
    END
*
    CUST.ACCT.ID = R.OLD(SC.SBS.CUST.SEC.ACC)

    IF NOT(CUST.ACCT.ID) THEN
        CUST.ACCT.ID = R.NEW.LAST(SC.SBS.CUST.SEC.ACC)
    END

    IF CUST.ACCT.ID <> CUS.SEC.ACC THEN
        ACC.COUNT = COUNT(CUS.SEC.ACC<1>, VM) + 1
        FOR I = 1 TO ACC.COUNT
            R.SEC.TRANS.DET<SEC.INFO.PORTFOLIO.NO, I> = CUS.SEC.ACC<1,I>
            R.SEC.TRANS.DET<SEC.INFO.SEC.TRANS.ID, I> = ID.NEW:".":I
        NEXT I
        CALL F.WRITE('F.SEC.TRANS.INFO', SEC.INFO.ID, R.SEC.TRANS.DET)
    END
    RETURN
* EN_10001271 ends
* CI_10006386 S
********************
RESET.CHGS.COMM:
******************

* This para will make the charges, commissions and fees related
* fields null during recalculation
*
    IF R.NEW(SC.SBS.CUSTOMER.NO) THEN
        FOR YFIELD = SC.SBS.CU.BRKR.COMM TO SC.SBS.CU.EBV.FEES
            R.NEW(YFIELD) = ''
        NEXT YFIELD
        R.NEW(SC.SBS.CU.EX.RATE.ACC) = ''         ;* CI_10007024 S/E
    END

    IF R.NEW(SC.SBS.BROKER.NO) THEN
        FOR YFIELD = SC.SBS.BR.BROKER.COMM TO SC.SBS.BR.EBV.FEES
            R.NEW(YFIELD) = ''
        NEXT YFIELD
    END


    RETURN
***********************
* CI_10006386 E
************
*CI_10015686 S
*-----------------------
PICK.SAM:
*-----------------------
* Read the SEC.ACC.CUST record and pick the Security account which exists
* in the company being processed.
*
    R.SEC.ACC.CUST = '' ; CUS.ID = '' ; THIS.COMP.SAM.ID = '' ; PORT.COMP.ID = ''
* CI_10018894 S Variable CUSTOMER changed to COMPANY.CUST

    CALL F.READ('F.SEC.ACC.CUST', COMPANY.CUST, R.SEC.ACC.CUST, F.SEC.ACC.CUST, ETEXT)    ;* BG_100010567
* CI_10018894 E
    NO.SAMS = DCOUNT(R.SEC.ACC.CUST, FM)

    GOSUB GET.FILE.CLASSIFICATION

    FOR I = 1 TO NO.SAMS
        ETEXT = ''  ;* Clear the previous read err
        IF SAM.SHARED THEN
            CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.PORT.COMP.ID, R.SEC.ACC.CUST<I>, PORT.COMP.ID)
            IF PORT.COMP.ID = ID.COMPANY THEN
                THIS.COMP.SAM.ID = R.SEC.ACC.CUST<I>
                RETURN
            END
        END ELSE
            CALL DBR("SEC.ACC.MASTER":FM:SC.SAM.CUSTOMER.NUMBER, R.SEC.ACC.CUST<I>, CUS.ID)
            IF ETEXT ELSE
                THIS.COMP.SAM.ID = R.SEC.ACC.CUST<I>
                RETURN
            END
        END
    NEXT I

    RETURN
*-----------------------
GET.FILE.CLASSIFICATION:
*-----------------------
* Check if SAM is shared. If SAM is shared, then check for the PORT.COMP.ID.

    FILE.CLASS = ''
    FILE.NAME = 'SEC.ACC.MASTER'
    SAM.SHARED = 0
    CALL SC.GET.FILE.CLASSIFICATION(FILE.NAME, FILE.CLASS)
    DIFF.COMPANY = 0 ; CUS.COMPANY = '' ; HOLD.ID.COMPANY = ''
    IF FILE.CLASS = 'CUS' OR FILE.CLASS = 'INT' THEN
        SAM.SHARED = 1
    END ELSE
        SAM.SHARED = 0
    END
*
    RETURN
* CI_10015686 E
*----------------------------------------------------------------------------

*
* CI_10017271 S
**************************
CALC.CUST.WEIGHT.AVG.PRICE:
****************************
    IF DCOUNT(R.NEW(SC.SBS.CUST.PRICE)<1,AV>,SM) GT 1 THEN
        SECURITY.PRICE = ''
        CALL SC.CALC.COST(R.NEW(SC.SBS.SECURITY.CODE),SECURITY.PRICE,R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.CU.GROSS.AM.SEC)<1,AV>,R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>)
    END
    RETURN

***********************
CALC.BR.WEIGHT.AVG.PRICE:
************************
    IF DCOUNT(R.NEW(SC.SBS.BR.PRICE)<1,AV>,SM) GT 1 THEN
        SECURITY.PRICE = ''
        CALL SC.CALC.COST(R.NEW(SC.SBS.SECURITY.CODE),SECURITY.PRICE,R.NEW(SC.SBS.VALUE.DATE),R.NEW(SC.SBS.BR.GROSS.AM.SEC)<1,AV>,R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>)
    END
    RETURN
*
* CI_10017271 E
*------------------------------------------------------------------------------

* BG_100007541 S
FIND.CUST.CHARGES:
*----------------
* Update the COUPON.TAX.CODE array.

    POPULATE.FLD.VAL = 0
    CUST.LIST = R.NEW(SC.SBS.CUSTOMER.NO)
    SAVE.AV = AV
    SAVE.PRICE = SECURITY.PRICE
    AV = 1
    COUPON.TAX.IDX = ''
    COUPON.TAX.AMOUNT = ''
    RECALC.FLAG = 'Y'         ;* BG_100008370
    LOOP
        REMOVE CUST.NO FROM CUST.LIST SETTING POS
    WHILE CUST.NO:POS DO
        GOSUB CALC.CUST.CHARGES
        AV += 1
    REPEAT
    CUS.CNT = DCOUNT(CUST.LIST<1>,VM)
    GROSS.INT.AMT = '' ; INTEREST.AMT = ''
    AV = SAVE.AV
    SECURITY.PRICE = SAVE.PRICE
    POPULATE.FLD.VAL = 1
    RETURN
*----------------------------------------------------------------------

UPDATE.NET.COUPON.TAX:
*--------------------
    NO.OF.BROKERS = DCOUNT(R.NEW(SC.SBS.BROKER.NO), VM)
    TOT.COUP.TAX.AMT = SUM(COUPON.TAX.AMOUNT)
    TAX.PER.BROKER = TOT.COUP.TAX.AMT / NO.OF.BROKERS
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY), TAX.PER.BROKER)
    NET.AMT = R.NEW(SC.SBS.BR.INTR.AM.TRD)<1, AV> - TAX.PER.BROKER
    R.NEW(SC.SBS.BR.INTR.AM.TRD)<1, AV> = NET.AMT

    RETURN
* BG_100007541 E

*------------------------------------------------------------
* CI_10024936 - Start
*Moved the code from MESSAGE = 'VAL' to GET.CHANGED.ENTRIES
GET.CHANGED.ENTRIES:
*-------------------
    FOR CT = 1 TO SC.SBS.LOCAL.REF      ;* GB9901164
        IF R.NEW(CT) = R.OLD(CT) ELSE
            CHANGED = @TRUE
            BEGIN CASE
* CI_10012564/S
            CASE CT = SC.SBS.BR.NARRATIVE
                NULL
            CASE CT = SC.SBS.LOCAL.REF
                NULL
* CI_10012564 /E
            CASE CT = SC.SBS.TRADE.TIME
                NULL
* CI_10002404 s
            CASE CT = SC.SBS.BR.TRD.TIME          ;* EN_10000316 Add BR.TRD.TIME
* CI_10002404 e
                NULL
            CASE CT = SC.SBS.CU.NARRATIVE
                NULL
            CASE CT = SC.SBS.CU.DELIV.INSTR
                NULL
            CASE CT = SC.SBS.CU.OVE.ADDR
                NULL
            CASE CT = SC.SBS.CU.MESS.CONTROL
                NULL
* CI_10006871 S
            CASE CT = SC.SBS.LOCAL.REF
                NULL
            CASE CT = SC.SBS.BR.NARRATIVE
                NULL
* CI_10006871 E
* CI_10020804 S
            CASE CT = SC.SBS.BROKER.ADVICE.REQD
                NULL
            CASE CT = SC.SBS.CG.TRADE.TIME
                NULL
            CASE CT = SC.SBS.PAYMENT.REQD
                NULL
            CASE CT = SC.SBS.DEPOT.ADVICE.REQD
                NULL
* CI_10020804 E
* GB9901164 S
            CASE CT MATCHES SC.SBS.LINK.REFERENCE:VM:SC.SBS.CUM.EX.IND:VM:SC.SBS.PORT.CONST.NO:VM:SC.SBS.CPTY.LIMIT.REF
                NULL
* GB9901164 E
* BG_10008102 S
            CASE CT MATCHES SC.SBS.CU.TAX.TCY:VM:SC.SBS.CU.TAX.LCY:VM:SC.SBS.CU.NET.AM.TRD:VM:SC.SBS.CU.AMOUNT.DUE:VM:SC.SBS.CU.MANTAXTCY
                CHANGED.ENTRIES = @TRUE
* BG_10008102 E
            CASE 1
* BG_10008102 S
                IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.CASH.HOLD.SETTLE) EQ 'YES' THEN
                    IF CT = SC.SBS.CU.NOTES AND SUM(R.NEW(SC.SBS.CU.TAX.TCY)) ELSE        ;* CI_10037830
                        IF R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'YES' OR R.NEW(SC.SBS.SEC.HOLD.SETTLE) EQ 'NO' THEN
                            AF = SC.SBS.SEC.HOLD.SETTLE
                        END ELSE
                            AF = SC.SBS.CASH.HOLD.SETTLE
                        END
                        ETEXT = 'CHANGE DISALLOWED FOR ACTUAL SETTLEMENT'
                        CALL STORE.END.ERROR
                    END
                END
* BG_10008102 E
                CHANGED.ENTRIES = @TRUE
            END CASE
        END
    NEXT CT
    RETURN
* CI_10024936 - Ends
*-------------------------------------------------------------------------------------------------------------------------
READ.SEC.POSITION:

    REV1 = ''
    REV2 = ''
    REV3 = ''
    REV4 = ''
    READ.ERROR = ''
    SP.RECORD = ''
    SP.RECORD.ORG = ''

    CALL SC.READ.POSITION(SP.ID,LOCK.RECORD,PROCESS.MAIN.SP,REV1,REV2,SP.RECORD,SP.RECORD.ORG,READ.ERROR,REV3,REV4)

    RETURN

*********************
WRITE.SEC.POSITION:
*********************

    REV1 = ''
    REV2 = ''
    REV3 = ''
    REV4 = ''
    MSG = ''
    CALL SC.WRITE.POSITION(SP.ID,SP.RECORD,SP.RECORD.ORG,LOCK.AND.READ,REV1,REV2,MSG,REV3,REV4)

    RETURN
CLEAR.CU.TAX.DATA:
*----------------
    R.NEW(SC.SBS.CU.TAX.CODE)<1,AV> = ''
    R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV> = ''
    R.NEW(SC.SBS.CU.TAX.TCY)<1,AV> = 0
    R.NEW(SC.SBS.CU.TAX.LCY)<1,AV> = 0
    R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV> = 0
    R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV> = 0
    RETURN

* EN_10002391 S
CU.TAX.CODE.CALC:
************
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>   ;* BG_100007989 S
    GOSUB CHECK.TRANS
    IF COMI4 = 'CREDIT' THEN
        GOSUB CLEAR.CU.TAX.DATA
        RETURN
    END   ;* BG_100007989 E
    CU.PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    DEAL.CHK = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,CU.PORTFOLIO,DEAL.CHK)
    IF DEAL.CHK THEN
        GOSUB CLEAR.CU.TAX.DATA
        RETURN
    END

    CU.TAX.TYPE = ''
    T.DATA = ''
    DIM TXN.REC(C$SYSDIM)
    MAT TXN.REC = ''
    MAT TXN.REC = MAT R.NEW
    RES1 = ''
    RES2 = ''
    CALL SC.CU.TAX.CALC(ID.NEW,MAT TXN.REC,CU.PORTFOLIO,CU.TAX.CODE,CU.TAX.TYPE,BOND.OR.SHARE,RES1,RES2,T.DATA)
    CU.TAX.ERROR = FIELD(T.DATA<38> ,'#',2)
    CU.TAX.STATUS= FIELD(T.DATA<38>,'#',1)
    IF CU.TAX.STATUS = 'CU.IN.TAX' OR CU.TAX.STATUS = 'CU.IN.INFO' THEN
        R.NEW(SC.SBS.CU.TAX.CODE)<1,AV,TAXPOS> = CU.TAX.CODE
        R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV,TAXPOS> = CU.TAX.TYPE
    END ELSE
        R.NEW(SC.SBS.CU.TAX.CODE)<1,AV,TAXPOS> = ''
        R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV,TAXPOS> = ''
    END
    IF CU.TAX.STATUS = 'CU.IN.TAX' THEN
        TRADE.CCY = R.NEW(SC.SBS.TRADE.CCY)
        BASE.AMT.5 = SUM(T.DATA<5>)
        BASE.AMT.4 = SUM(T.DATA<4>)
        GOSUB SET.SECURITY.CCY

        IF TRADE.CCY <> SECURITY.CCY THEN
            BASE.AMT.SAVE.5 = ''
            CALL EXCHRATE("1",LCCY,BASE.AMT.4,TRADE.CCY,BASE.AMT.SAVE.5,'','','','','')
            BASE.AMT.5 = BASE.AMT.SAVE.5
        END

        IF LCCY = TRADE.CCY THEN
            R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,TAXPOS> = BASE.AMT.4
        END ELSE
            R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,TAXPOS> = BASE.AMT.5
        END
        R.NEW(SC.SBS.CU.TAX.LCY)<1,AV,TAXPOS> = BASE.AMT.4
        T.DATA.3 = T.DATA<3,1>
        IF T.DATA.3[1,3] = LCCY THEN
            CUST.CHARGES<14,AV,TAXPOS> = T.DATA<3>
        END ELSE
            T.DATA.3 = T.DATA.3[4,99]
            T.DATA.3 = TRADE.CCY : T.DATA.3
            CUST.CHARGES<14,AV,TAXPOS> = T.DATA.3
        END
        CUST.CHARGES<16,AV,TAXPOS> = T.DATA<7,1>
        CUST.CHARGES<15,AV,TAXPOS> = T.DATA<8,1>
        IF (NOT(T.DATA<3>) OR TRADE.CCY <> SECURITY.CCY) AND (CU.TAX.CODE AND CU.TAX.TYPE) THEN     ;* EN_10002717 S
            GOSUB DUMMY.TAX.CALC
        END         ;* EN_10002717 E
    END ELSE
        R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,TAXPOS> = 0
        R.NEW(SC.SBS.CU.TAX.LCY)<1,AV,TAXPOS> = 0
        R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV,TAXPOS> = 0
        R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV,TAXPOS> = 0
        CUST.CHARGES<14,AV,TAXPOS> = ''
        CUST.CHARGES<16,AV,TAXPOS> = ''
        CUST.CHARGES<15,AV,TAXPOS> = ''
    END
    IF ID.OLD THEN
        CALL REFRESH.FIELD(SC.SBS.CU.TAX.TCY:'.':AV:'.':AS,'')
        CALL REFRESH.FIELD(SC.SBS.CU.TAX.LCY:'.':AV:'.':AS,'')
    END
    RETURN

DUMMY.TAX.CALC:
*-------------:
    CUST.ID = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
    GROSS.AMT.TRD = 1000
    MAN.T.DATA = ''
    MAN.T.DATA = CU.TAX.TYPE
    MAN.T.DATA<2> = "TAX"
    CUST.CONDITION = '' ; CUST.CONDITION<6> = 'T'
    CALL CALCULATE.CHARGE(CUST.ID,GROSS.AMT.TRD,TRADE.CCY,"1",'','','',MAN.T.DATA,CUST.CONDITION,'','')
    CUST.CHARGES<14,AV> = MAN.T.DATA<3>
    CUST.CHARGES<16,AV> = MAN.T.DATA<7,1>
    CUST.CHARGES<15,AV> = MAN.T.DATA<8,1>
    RETURN

CU.TAX.TYPE.CALC:
*****************
* It will calculate the Tax only for CU.TAX.TYPE Has been entered.
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>   ;* BG_100007989 S
    GOSUB CHECK.TRANS
    IF COMI4 = 'CREDIT' THEN
        GOSUB CLEAR.CU.TAX.DATA
        RETURN
    END   ;* BG_100007989 E
    CU.PORTFOLIO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    DEAL.CHK = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,CU.PORTFOLIO,DEAL.CHK)
    IF DEAL.CHK THEN
        GOSUB CLEAR.CU.TAX.DATA
        RETURN
    END
    IF BS.TAX THEN

        CU.TAX.CODE =BS.TAX
        CU.TAX.TYPE = BS.TAX
        T.DATA = ''
        DIM TXN.REC(C$SYSDIM)
        MAT TXN.REC = ''
        MAT TXN.REC = MAT R.NEW
        RES1 = '' ; RES2 =''

        CALL SC.CU.TAX.CALC (ID.NEW,MAT TXN.REC,CU.PORTFOLIO,CU.TAX.CODE,CY.TAX.TYPE,BOND.OR.SHARE,RES1,RES2,T.DATA)    ;* FOR TAX CALCULATION

        TRADE.CCY = R.NEW(SC.SBS.TRADE.CCY)
        BASE.AMT.5 = SUM(T.DATA<5>)
        BASE.AMT.4 = SUM(T.DATA<4>)
        GOSUB SET.SECURITY.CCY

        IF TRADE.CCY <> SECURITY.CCY THEN
            BASE.AMT.SAVE.5 = ''
            CALL EXCHRATE("1",LCCY,BASE.AMT.4,TRADE.CCY,BASE.AMT.SAVE.5,'','','','','')
            BASE.AMT.5 = BASE.AMT.SAVE.5
        END

        IF LCCY = TRADE.CCY THEN
            R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,TAXPOS> = BASE.AMT.4
        END ELSE
            R.NEW(SC.SBS.CU.TAX.TCY)<1,AV,TAXPOS> = BASE.AMT.5
        END
        R.NEW(SC.SBS.CU.TAX.LCY)<1,AV,TAXPOS> = BASE.AMT.4
        T.DATA.3 = T.DATA<3,1>
        IF T.DATA.3[1,3] = LCCY THEN
            CUST.CHARGES<14,AV,TAXPOS> = T.DATA<3>
        END ELSE
            T.DATA.3 = T.DATA.3[4,99]
            T.DATA.3 = TRADE.CCY : T.DATA.3
            CUST.CHARGES<14,AV,TAXPOS> = T.DATA.3
        END
        CUST.CHARGES<16,AV,TAXPOS> = T.DATA<7,1>
        CUST.CHARGES<15,AV,TAXPOS> = T.DATA<8,1>

    END
    RETURN

FETCH.CU.TAX:
************
* Para Fetch the CU.TAX.CODE FROM SECURITY.MASTER and do the tax calculation
* OR Calculate the Tax for available CU.TAX.CODE/CU.TAX.TYPE.
    COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>   ;* BG_100007989 S
    GOSUB CHECK.TRANS
    IF COMI4 = 'CREDIT' THEN
        GOSUB CLEAR.CU.TAX.DATA
        RETURN
    END   ;* BG_100007989 E
    IF R.NEW(SC.SBS.CU.NAV.TYPE) EQ '' THEN
        R.NEW(SC.SBS.CU.NAV.TYPE) = R.SC.PARAMETER<SC.PARAM.NAV.TYPE>
    END
    IF R.NEW(SC.SBS.CU.NAV.TYPE) NE '' THEN
        CU.NAV.TYPE = R.NEW(SC.SBS.CU.NAV.TYPE)
    END
    IF CU.NAV.TYPE = 'NET' AND AF = SC.SBS.CUST.PRICE AND BOND.OR.SHARE = 'S' THEN
        RETURN
    END

    IF R.NEW(SC.SBS.CU.TAX.CODE)<1,AV> EQ '' AND R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV> EQ '' THEN
        TOT.TAX.CODES = DCOUNT(R.SEC.MASTER<SC.SCM.SC.TAX.CODE>,VM)
        IF TOT.TAX.CODES GE 1 THEN
            TAXPOS = ''
            FOR TAXPOS = 1 TO TOT.TAX.CODES
                CU.TAX.CODE = R.SEC.MASTER<SC.SCM.SC.TAX.CODE,TAXPOS>
                GOSUB CU.TAX.CODE.CALC
            NEXT TAXPOS
        END ELSE
            R.NEW(SC.SBS.CU.TAX.CODE)<1,AV> = ''
            R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV> = ''
            R.NEW(SC.SBS.CU.TAX.TCY)<1,AV> = ''
            R.NEW(SC.SBS.CU.TAX.LCY)<1,AV> = ''
            R.NEW(SC.SBS.CU.MANTAXTCY)<1,AV> = 0
            R.NEW(SC.SBS.CU.MANTAXLCY)<1,AV> = 0
        END
    END ELSE
        TOT.CU.TAX.CODE = DCOUNT(R.NEW(SC.SBS.CU.TAX.CODE)<1,AV>,SM)
        FOR TAXPOS = 1 TO TOT.CU.TAX.CODE
            CU.TAX.CODE = R.NEW(SC.SBS.CU.TAX.CODE)<1,AV,TAXPOS>
            IF CU.TAX.CODE THEN
                GOSUB CU.TAX.CODE.CALC
            END ELSE
                BS.TAX = R.NEW(SC.SBS.CU.TAX.TYPE)<1,AV,TAXPOS>
                IF BS.TAX THEN
                    GOSUB CU.TAX.TYPE.CALC
                END
            END
        NEXT TAXPOS
    END
    RETURN
* EN_10002391 E
* CI_10030695 S

********************
CALC.TAX.CUM.AMT:
********************

    TXN.TAX.CUM.AMT = 0
    NO.OF.TAX = DCOUNT(TXN.TAX.AMT,SM)
    FOR TCUM = 1 TO NO.OF.TAX
        TXN.TAX.CUM.AMT  = TXN.TAX.CUM.AMT + TXN.TAX.AMT<1,1,TCUM>
    NEXT TCUM

    RETURN
*********************
GET.CONSTRAINT.LIST:
*********************

    IF CONSTRAINT.SEL.DONE EQ 0 THEN    ;* BG_100010567
        PORT.CONSTRAINT.LIST = '' ; LIST = '' ; PORT.LIST = ''
        CALL CACHE.READ(FN.PORTFOLIO.CONSTRAINT,'SelectIDs',CONSTRAINT.LIST,ER) ;* Cache all ids. ; * BG_100010567
        POS = 1
        LOOP
        WHILE CONSTRAINT.LIST<POS>
            SEQ.NO = FIELD(CONSTRAINT.LIST<POS>,'.',2)
            IF SEQ.NO AND NUM(SEQ.NO) THEN        ;* Ignore ID as company
                PORT.NO = FIELD(CONSTRAINT.LIST<POS>,'.',1)
                LOCATE PORT.NO IN PORT.LIST SETTING FOUND ELSE
                    PORT.LIST<FOUND> = PORT.NO
                END
                IF PORT.CONSTRAINT.LIST<FOUND> THEN
                    PORT.CONSTRAINT.LIST<FOUND> := VM:CONSTRAINT.LIST<POS>
                END ELSE
                    PORT.CONSTRAINT.LIST<FOUND> = CONSTRAINT.LIST<POS>
                END
            END
            POS = POS + 1
        REPEAT
        CONSTRAINT.SEL.DONE = 1         ;* BG_100010567
    END

    IF PORTFOLIO.NO THEN
        LOCATE PORTFOLIO.NO IN PORT.LIST SETTING FOUND THEN
            MYLIST = PORT.CONSTRAINT.LIST<FOUND>
        END
    END
    RETURN
*------------------------------------------------------------
BUILD.CGT.SAM.LIST:
*------------------
*
    CNT.CUST.ACC = DCOUNT(R.NEW(SC.SBS.CUST.ACC.NO),@VM)
    FOR I = 1 TO CNT.CUST.ACC
        LOCATE R.NEW(SC.SBS.CUST.ACC.NO)<1,I> IN CGT.SAM.LIST<1> SETTING CGT.SAM.POS ELSE
            INS R.NEW(SC.SBS.CUST.ACC.NO)<1,I> BEFORE CGT.SAM.LIST<CGT.SAM.POS>
            INS 'Y' BEFORE CGT.AMT.CHG.LIST<CGT.SAM.POS>
        END
    NEXT I
    RETURN
* CI_10030695 E


BROKER.POS.UPDATE:
*----------------
    IF SETTLE.METHOD EQ 'US' THEN
        IF R.NEW(SC.SBS.VALUE.DATE) LE TODAY AND R.NEW(SC.SBS.BROKER.NO) THEN   ;*CI_10037058 S/E
            IF R.NEW(SC.SBS.RECORD.STATUS) <> 'RNAU' THEN   ;* BG_100002230 S/E
                CALL SC.BROKER.POS.UPDATE
            END     ;* BG_100002230 S/E
        END ELSE
            R.SC.HOLD.POS = ''
            HLD.POS.ERROR = ''
            IF R.NEW(SC.SBS.RECORD.STATUS)[1,1] = 'R' THEN  ;*CI_10029730 S/E
                CALL F.READ(FN.SC.HOLD.POS,R.OLD(SC.SBS.VALUE.DATE),R.SC.HOLD.POS,F.SC.HOLD.POS,HLD.POS.ERR)  ;* BG_100010567
                LOCATE ID.NEW IN R.SC.HOLD.POS<1,1> SETTING H.POS ELSE H.POS = ''
                IF H.POS THEN
                    DEL R.SC.HOLD.POS<SC.HLD.POS.TRANS.REF,H.POS>
                    IF NOT(R.SC.HOLD.POS) THEN
                        CALL F.DELETE(FN.SC.HOLD.POS,R.OLD(SC.SBS.VALUE.DATE))
                    END ELSE
                        CALL F.WRITE(FN.SC.HOLD.POS,R.OLD(SC.SBS.VALUE.DATE),R.SC.HOLD.POS)
                    END
                    R.SC.HOLD.POS = ''
                    HLD.POS.ERROR = ''
                END
            END ELSE
                CALL F.READ(FN.SC.HOLD.POS,R.NEW(SC.SBS.VALUE.DATE),R.SC.HOLD.POS,F.SC.HOLD.POS,HLD.POS.ERR)  ;* BG_100010567
                LOCATE ID.NEW IN R.SC.HOLD.POS<1,1> SETTING DP.POS ELSE DP.POS = ''
                IF NOT(DP.POS) THEN
                    R.SC.HOLD.POS<SC.HLD.POS.TRANS.REF,-1> = ID.NEW
                END
                CALL F.WRITE(FN.SC.HOLD.POS,R.NEW(SC.SBS.VALUE.DATE),R.SC.HOLD.POS)
            END
        END
    END
    RETURN

*-----------------------------------------------------------------------------
GET.CURRENCY.DETAILS:
* New subroutine to get currency details using cache.read instead of all the
* calls to DBR.
* BG_100010567

    CALL CACHE.READ('F.CURRENCY',CURRENCY.ID,R.CURRENCY,ER)
    NO.DECS = R.CURRENCY<EB.CUR.NO.OF.DECIMALS>
    RATE.ALLOWANCE = R.CURRENCY<EB.CUR.RATE.ALLOWANCE>
    CCY.NAME = R.CURRENCY<EB.CUR.CCY.NAME,LNGG>
    IF CCY.NAME = '' THEN
        CCY.NAME = R.CURRENCY<EB.CUR.CCY.NAME,1>
    END

    RETURN

*-----------------------------------------------------------------------------
GET.SC.TRANSACTION.DETAILS:
* new subroutine to get details from sc.tra.code & sc.trans.type.
* consolidation of all the calls to dbr & f.read into one place
* BG_100010567

    CALL CACHE.READ('F.SC.TRA.CODE',SC.TRA.CODE.ID,R.SC.TRA.CODE,YERR)
    SC.TRANS.TYPE.ID = R.SC.TRA.CODE<1> ;* no file layout, this is a concat file
    CALL CACHE.READ('F.SC.TRANS.TYPE',SC.TRANS.TYPE.ID,R.SC.TRANS.TYPE,ER)
    DR.CODE = R.SC.TRANS.TYPE<SC.TRN.SECURITY.DR.CODE>
    CR.CODE = R.SC.TRANS.TYPE<SC.TRN.SECURITY.CR.CODE>
    FIN.CR.CODE = R.SC.TRANS.TYPE<SC.TRN.FIN.CR.TRA.CODE>
    FIN.DR.CODE = R.SC.TRANS.TYPE<SC.TRN.FIN.DR.TRA.CODE>

    RETURN
*-----------------------------------------------------------------------------
CHECK.DEFAULT.DEPOSITORY:
    DEFAULT.DEPOSITORY = ""
    IF COMI AND AV = 1 THEN
        R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV> = COMI
        SECURITY.NUMBER = ""
        PORTFOLIO.NUMBER = ""
        PORTFOLIO.NUMBER = COMI
        SECURITY.NUMBER = R.NEW(SC.SBS.SECURITY.CODE)
        SM.DEPO = ""
        CALL DBR ("SECURITY.MASTER":FM:SC.SCM.DEFAULT.DEPOSITORY,SECURITY.NUMBER, SM.DEPO)
        DEFAULT.SUB.ACCOUNT = ''
        CALL SC.DEFAULT.DEPO (SECURITY.NUMBER, PORTFOLIO.NUMBER,DEFAULT.DEPOSITORY,DEFAULT.SUB.ACCOUNT)
        IF DEFAULT.DEPOSITORY THEN
        END ELSE
            CUSTOMER.NUMBER = ""
            CUSTOMER.NUMBER = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
            CALL DBR ("CUSTOMER.SECURITY":FM:SC.CSC.DEFAULT.DEPOSITORY,CUSTOMER.NUMBER, DEFAULT.DEPOSITORY)
        END
    END
    IF DEFAULT.DEPOSITORY <> "" AND AV = 1 AND R.NEW(SC.SBS.DEPOSITORY) EQ '' THEN
        R.NEW(SC.SBS.DEPOSITORY) = DEFAULT.DEPOSITORY
        ENRICH = ""
        CALL DBR ("CUSTOMER":FM:EB.CUS.SHORT.NAME, DEFAULT.DEPOSITORY, ENRICH)
        LOCATE SC.SBS.DEPOSITORY IN T.FIELDNO<1> SETTING POS ELSE POS = ""
        IF POS THEN
            T.ENRI<POS> = ENRICH
        END
        CALL REBUILD.SCREEN
    END
    RETURN
*-----------------------------------------------------------------------------
CHECK.FOR.MEMO.ACC:
*Check whether or not the portfolio is a MEMO account
*if it is a MEMO.ACC
*No accounting entries will be posted
*The customer will handle the accounting
*Gross and net costs will be updated.

    AF = SC.SBS.CUST.ACC.NO
    SEC.ACC.NO = R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>
    MEMO.ACC = ''
    CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.MEMO.ACCOUNT,SEC.ACC.NO,MEMO.ACC)
    IF MEMO.ACC = 'NO' THEN
        DEAL.BOOK = ''
        CALL DBR('SEC.ACC.MASTER':FM:SC.SAM.DEALER.BOOK,SEC.ACC.NO,DEAL.BOOK)
        IF DEAL.BOOK = '' THEN
            COMI2 = ""
            COMI3 = R.NEW(SC.SBS.TRADE.CCY)
            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
            IF COMI3 > "" AND COMI4 > "" THEN
                IF R.NEW(SC.SBS.CU.ORDER.NOS)<1,AV> THEN
                    IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> THEN
                        COMI3 = R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV>
                    END
                END
                APPLN = "SC-":COMI4
                CUST.NO = R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>
                PORTFOLIO.NO = FIELD(R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,'-',2)
                IF R.NEW(AF)<1,AV> = "" THEN      ;* CI_10024653 S/E
                    CALL GET.SETTLEMENT.DEFAULTS(CUST.NO,COMI3,'1',APPLN,PORTFOLIO.NO,'P',COMI2,'','','')
                    R.NEW(AF)<1,AV> = COMI2
                END ELSE      ;* CI_10024653 S
                    COMI2 =  R.NEW(AF)<1,AV>
                END ;* CI_10024653 E
                ACCOUNT.CURRENCY = "" ; REF.CURRENCY = ""
                CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                CALL DBR(CHECKFILE2, COMI2,ACCOUNT.CURRENCY)
                CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.REFERENCE.CURRENCY
                CALL DBR(CHECKFILE2, R.NEW(SC.SBS.CUST.SEC.ACC)<1,AV>,REF.CURRENCY)
                IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> AND R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> # ACCOUNT.CURRENCY THEN    ;* CI_10002724 - E
                    R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = ''
                END
                R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                R.NEW(SC.SBS.CU.REF.CCY)<1,AV> = REF.CURRENCY
            END ELSE ETEXT = 'NO ACCOUNT FOR CUSTOMER IN TRADE CCY' ; CALL STORE.END.ERROR
        END ELSE
            REF.CURRENCY = ''
            CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.REFERENCE.CURRENCY
            CALL DBR(CHECKFILE2,SEC.ACC.NO,REF.CURRENCY)
            ASSET.CATEG = ''
            CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.ASSET.CAT
            CALL DBR(CHECKFILE2,SEC.ACC.NO,ASSET.CATEG)
            R.NEW(AF)<1,AV> = R.NEW(SC.SBS.SECURITY.CURRENCY):ASSET.CATEG:INT.DEPT.CODE
            ACCOUNT.CURRENCY = R.NEW(SC.SBS.SECURITY.CURRENCY)
            IF R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> AND R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> # ACCOUNT.CURRENCY THEN        ;* CI_10002724 - E
                R.NEW(SC.SBS.CU.EX.RATE.ACC)<1,AV> = ''
            END
            R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
            R.NEW(SC.SBS.CU.REF.CCY)<1,AV> = REF.CURRENCY
        END
    END ELSE
        IF R.NEW(AF)<1,AV> # '' THEN
            E = '' ; OUT.ACC.NO = '' ; O.CUST = ''
            CALL SC.CALC.NOSTRO(R.NEW(SC.SBS.CUSTOMER.NO)<1,AV>,SEC.ACC.NO,R.NEW(AF)<1,AV>,R.NEW(SC.SBS.TRADE.CCY),'C',OUT.ACC.NO,O.CUST)
            IF E ELSE
                REF.CURRENCY = ''
                CHECKFILE2 = "SEC.ACC.MASTER":FM:SC.SAM.REFERENCE.CURRENCY
                CALL DBR(CHECKFILE2,SEC.ACC.NO,REF.CURRENCY)
                ACCOUNT.CURRENCY = ""
                CHECKFILE2 = "ACCOUNT":FM:AC.CURRENCY
                R.NEW(AF)<1,AV> = OUT.ACC.NO
                CALL DBR(CHECKFILE2, R.NEW(AF)<1,AV>,ACCOUNT.CURRENCY)
                R.NEW(SC.SBS.CU.ACCOUNT.CCY)<1,AV> = ACCOUNT.CURRENCY
                R.NEW(SC.SBS.CU.REF.CCY)<1,AV> = REF.CURRENCY
            END
        END ELSE
            ETEXT = 'INPUT MANDATORY FOR MEMO.ACCOUNTS'
            CALL STORE.END.ERROR
        END
    END
    RETURN
*-----------------------------------------------------------------------------
CHECK.FOR.NET.TAX:

*In a transaction the portfolios can be EXEMPT or NON.EXEMPT
*based on that CTAX.STATUS is set .

    SAM.CTAX.STATUS = "" ;  CTAX.RECOVERABLE = ""
    R.SEC.ACC.MASTER = "" ; ER = ""
    CALL F.READ('F.SEC.ACC.MASTER',SAM.CTAX.ID,R.SEC.ACC.MASTER,F.SEC.ACC.MSTR,ER)
    SAM.CTAX.STATUS = R.SEC.ACC.MASTER<SC.SAM.COUPON.TAX.STATUS>
    DEALER.BOOK = R.SEC.ACC.MASTER<SC.SAM.DEALER.BOOK>
    IF R.COUPON.TAX.CODE THEN
        CTAX.PAID =  R.COUPON.TAX.CODE<SC.CPN.TAX.TO.BE.PAID>
        CTAX.RECOVERABLE = R.COUPON.TAX.CODE<SC.CPN.TAX.RECOVERABLE>
        IF CTAX.PAID EQ "Y" THEN
            GOSUB GET.CTAX.STATUS
        END ELSE
            CTAX.STATUS = "EXEMPT"
        END
    END
    RETURN
*-----------------------------------------------------------------------------
GET.CTAX.STATUS:

*CTAX.STATUS is set to EXEMPT if GROSS of tax is set.
*or it is set to NON.EXEMPT

    CTAX.STATUS = ""
    BEGIN CASE
    CASE CTAX.RECOVERABLE EQ "NO" AND SAM.CTAX.STATUS EQ ""
        CTAX.STATUS = "NON.EXEMPT"
    CASE CTAX.RECOVERABLE EQ "NO" AND SAM.CTAX.STATUS EQ "EXEMPT" AND NOT(DEALER.BOOK)
        CTAX.STATUS = "NON.EXEMPT"
    CASE CTAX.RECOVERABLE EQ "NO"  AND SAM.CTAX.STATUS EQ "NON.EXEMPT"
        CTAX.STATUS = "NON.EXEMPT"
    CASE CTAX.RECOVERABLE EQ "" AND SAM.CTAX.STATUS EQ "NON.EXEMPT"
        CTAX.STATUS = "NON.EXEMPT"
    CASE 1
        CTAX.STATUS = "EXEMPT"
    END CASE

    RETURN
*------------------------------------------------------------------------
CALC.TREASURY.CONSID.AMT:

    CAP.RATE = ""
    CAP.AMT = ""
    CONSID = ''
    FACTOR = ''
    PRICE = R.NEW(SC.SBS.TREASURY.PRICE)
    CALL SC.CALC.CONSID(R.NEW(SC.SBS.SECURITY.CODE),NO.NOM,PRICE,R.NEW(SC.SBS.VALUE.DATE),CONSID,CAP.RATE,CAP.AMT,FACTOR)
    CALL SC.FORMAT.CCY.AMT(R.NEW(SC.SBS.TRADE.CCY),CONSID)

    RETURN
*------------------------------------------------------------------------
POST.MARKET.PL:

    TOT.BROK.COUNT = DCOUNT(R.NEW(SC.SBS.BROKER.NO),@VM)
    FOR AV = 1 TO TOT.BROK.COUNT
        NO.NOM = R.NEW(SC.SBS.BR.TOT.NOM)<1,AV>
        GOSUB CALC.TREASURY.CONSID.AMT
        MARKET.CAT = R.STD.SEC.TRADE<SC.SST.MARKET.PL.CAT>
        MARKET.PL.DB.CODE = R.STD.SEC.TRADE<SC.SST.MARKET.PL.DB.CODE>
        MARKET.PL.CR.CODE = R.STD.SEC.TRADE<SC.SST.MARKET.PL.CR.CODE>
        IF CONSID <> R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> THEN
            COMI4 = R.NEW(SC.SBS.BR.TRANS.CODE)<1,AV>
            GOSUB CHECK.TRANS
            IF COMI4 = 'DEBIT' THEN
                MARKET.PL.AMT = CONSID - R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV>
            END ELSE
                MARKET.PL.AMT = R.NEW(SC.SBS.BR.GROSS.AM.TRD)<1,AV> - CONSID
            END
            IF MARKET.PL.AMT GT 0 THEN
                CUST.COMMISSIONS<12,AV> = MARKET.PL.CR.CODE
            END ELSE
                CUST.COMMISSIONS<12,AV> = MARKET.PL.DB.CODE
            END
            CUST.COMMISSIONS<10,AV> = MARKET.CAT
            CUST.COMMISSIONS<11,AV> = MARKET.PL.AMT
            AUTO.SETT.FIELD = SC.SBS.AUTO.BROK.SETT
            ACC.FIELD = SC.SBS.BR.ACC.NO
            CUST.FLAG = 'BPL' ;* flag to call SC.SEC.TRADE.ACC accordingly
            GOSUB BUILD.ENTRIES
        END
    NEXT AV

    RETURN

*------------------------------------------------------------------------
POST.TREASURY.PL:

    TOT.CUST.COUNT = DCOUNT(R.NEW(SC.SBS.CUSTOMER.NO),@VM)
    FOR AV = 1 TO TOT.CUST.COUNT
        NO.NOM = R.NEW(SC.SBS.CUST.TOT.NOM)<1,AV>
        GOSUB CALC.TREASURY.CONSID.AMT
        TREASURY.CAT = R.STD.SEC.TRADE<SC.SST.TREASURY.PL.CAT>
        TREASURY.PL.DB.CODE = R.STD.SEC.TRADE<SC.SST.TREASURY.PL.DB.CDE>
        TREASURY.PL.CR.CODE = R.STD.SEC.TRADE<SC.SST.TREASURY.PL.CR.CDE>

        IF CONSID <> R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> THEN
            COMI4 = R.NEW(SC.SBS.CUST.TRANS.CODE)<1,AV>
            GOSUB CHECK.TRANS
            IF COMI4 = 'CREDIT' THEN
                TREASURY.PL.AMT = R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV> - CONSID
            END ELSE
                TREASURY.PL.AMT = CONSID - R.NEW(SC.SBS.CU.GROSS.AM.TRD)<1,AV>
            END
            IF TREASURY.PL.AMT GT 0 THEN
                CUST.COMMISSIONS<12,AV> = TREASURY.PL.CR.CODE
            END ELSE
                CUST.COMMISSIONS<12,AV> = TREASURY.PL.DB.CODE
            END
            CUST.COMMISSIONS<10,AV> = TREASURY.CAT
            CUST.COMMISSIONS<11,AV> = TREASURY.PL.AMT
            AUTO.SETT.FIELD = SC.SBS.AUTO.CUST.SETT
            ACC.FIELD = SC.SBS.CUST.ACC.NO
            CUST.FLAG = 'PL'
            GOSUB BUILD.ENTRIES
        END
    NEXT AV

    RETURN
*------------------------------------------------------------------------

FATAL.ERR:*=====
************
*
    TEXT = E
     
     
    CALL FATAL.ERROR('SEC.TRADE')
* 
END