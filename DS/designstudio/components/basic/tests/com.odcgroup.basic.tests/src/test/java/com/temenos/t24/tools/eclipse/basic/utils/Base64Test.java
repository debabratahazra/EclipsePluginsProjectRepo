package com.temenos.t24.tools.eclipse.basic.utils;

import junit.framework.TestCase;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Base64Test extends TestCase {

    private String file64 = "";
    protected final Logger log = LoggerFactory.getLogger(StringUtilTest.class);

    public Base64Test(String name) {
        super(name);
    }
    
    protected void setUp() throws Exception {
        super.setUp();
    }

    protected void tearDown() throws Exception {
        super.tearDown();
    }

    public void testGetText() {
        try {
            // URLEncoder ue = new URLEncoder();
            String eclipse64 = "UFJPR1JBTSBMVUlTLlRFU1QyDQogIENSVCAnSEVMTE8nDQpFTkQNCg==";
            String toolbox64 = "UFJPR1JBTSBMVUlTLlRFU1QyPEZNPiAgQ1JUICdIRUxMTyc8Rk0%2bRU5E";
            // System.out.println("Eclipse: " + decode(eclipse64));
            // System.out.println("Toolbox: " + decode(toolbox64));
        
            String toEncode = "1<FM>";
            //System.out.println(toEncode+": #"+encode64(toEncode)+"#");
            assertTrue(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void testDecode(){
        String fromBrowser = "CXg=";
        String decoded = decode64(fromBrowser); 
        System.out.println(decoded);
    }
    
    
    private String replace(String str){
        return str.replaceAll("\r\n", "<FM>");
    }
    
    private String encode64(String textNormal){
        //String file = this.getFileContents("LUIS.TEST2");
        return Base64.encodeBytes(textNormal.getBytes(), Base64.NO_OPTIONS);
    }
    

    private String decode64(String text64) {
        byte[] bytes = Base64.decode(text64);
        String text = new String(bytes);
        return text;
    }
}
