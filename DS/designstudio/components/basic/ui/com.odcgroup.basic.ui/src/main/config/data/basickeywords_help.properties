INDEX=bstring, occurrence)
SMUL=(string.number.1, string.number.2)
TTYGET=variable [FROM [file.variable | LPTR [n] | MTU [n]]]
IN2PG=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Programs Validation
$INCLUDE=[filename] program
BITXOR=(expression1, expression2)
IN2MATBL=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
ABORT=[message.number[, expression ...]]
CRC=
GES=(array1, array2)
IN2MNEM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
PRINTERR=[error.message]
STOP=[expression]
GET.SETTLEMENT.DEFAULTS=(YCUST, YCCY, YCCY.MKT, YAPPLN, YPORTFOLIO.NO, YORDER, YACCT, YCB.CUST, YCB.ACCT, YIB.CUST)<br/>Routine to get the default account and settlement details for a particular customer and application
CONTINUE=
IN2PV=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Programs Validation
SLEEP=[seconds]
FMTS=(dynamic.array, format)
IN2INT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
FFIX=(number)
SELECT=[variable] [TO list.number] [ON ERROR statements]
IN2FQU=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
ATKEY=
IN2SX=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
TRANSACTION.ABORT=Subroutine to cancel the current transaction and clear deferred writes and releases locks.
IN2HEX=uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2EFM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
KEYIN=( )
LEN=(string)
TAN=(expression)
GETUSERGROUP=
IN2NOMAMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
IN2PRIFMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2CUS=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Customer Validation
GO=
LOCATE=]
WRITEBLK=expression ON file.variable
IN2NOSANT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
INS=expression BEFORE dynamic.array (field# [,value#])
MATBUILD=dynamic.array FROM array [,start [,end]] [USING
SDIV=(string.number.1, string.number.2 [,precision])
FIELD=(string, delimiter, occurrence [,num.substr] )
EXP=(expression)
GE=
IN2LAUNCH=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Programs Validation
IN2.MCPLINT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
DECRYPT=
IN2VER=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
WRITESEQF=expression [ON | TO] file.variable THEN | ELSE statements [ON ERROR]
RANDOMIZE=(expression)
IN2MNE=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2A=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
GET.NARRATIVE=(STMT.ID, STMT.REC, NARR)<br/>Subroutine to return calculated statement narrative
GARBAGECOLLECT=
INPUT=variable [,length] [:] [_]
IN2TLX=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
TRIMBS=(dynamic.array)
DOWNCASE=(expression)
LCK=TEXT (from I_COMMON)<br/>Displays record locked message
IN2MCACC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
LIMIT.GET.PRODUCT=(YR.SYSTEM, YCUST.NO, YCCY, YPRODUCT)<br/>This subroutine is used by applications to validate and default the Limit<br/>eference used in a given transaction. It is called as part of the cross-validation processing.
IN2SSS=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
FLOAT=
COL2=( )
UNLOCK=[expression]
ERROR=
MAXIMUM=(dynamic.array)
OPENDEV=device TO file.variable [LOCKED statements]
CHECKSUM=(string)
OR=false (0), can be used to make a decision regarding
READBLK=variable FROM file.variable, blocksize
IN2LINE=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
EB.LOCREF.SETUP=(APP.NAME, LOC.REF.ARRAY)<br/>This routine will return the local reference data of a specified application.
LIMIT.CURR.CONV=(PCCY.FROM, PAMT.FROM, PCCY.TO, YAMT.TO, YPROC.FLAG)<br/>Program to convert a currency amount to another currency
RELEASE=[file.variable [,record.ID]] [ON ERROR statements]
FMT=(expression, format)
DEFC=
DIETER.DATE=(T24.DATE, INTERNAL.DATE, CONVERSION)<br/>This routine converts dates from the format used throughout T24 (YYYMMDD) to the standard jBASE format (either internal or external. External dates formatted as per jBASE CONVERSIONs)
CALCULATE.CHARGE=(CUSTOMER, DEAL.AMOUNT, DEAL.CURRENCY, CURRENCY.MARKET, CROSS.RATE, CROSS.CURRENCY, DRAWDOWN.CCY, T.DATA, CUST.COND, TOT.CHARGE.LCCY, TOT.CHARGE.FCCY)<br/>Calculates charges, commission and tax amounts and returns enough information to raise the accounting entries.
IN2FQF=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
IN2S=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
STORE.OVERRIDE=(CURR.RECORD.NO) also uses AF, AV, AS, TEXT (All from I_COMMON)<br/>Prompts for an override and stores the message in the main file record if the user replies 'Y'.
MATCHFIELD=(string, pattern, field)
EXIT=
ENCRYPT=
SUM=y)
FROM=
PRINTER=[ON | OFF | RESET]
DELETE=[file.variable ,] record.ID [ON ERROR statements]
IN2TIME=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
SUMMATION=(dynamic.array)
DO=
DISPLAY=[print.list]
LIMIT.CHECK=e is used by applications both online and end of day to verify and update the limits system
WEOFSEQ=file.variable [ON ERROR statements]
IN2SS=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2TAX=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Charges, Commissions and Tax Validation
HUSH=[ON | OFF | expression] [SETTING status]
IN2.AYM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
STR=(string, repeat)
IN2LETT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
REUSE=(expression)
MODS=(array1, array2)
F.MATREADU=(F.FILE.NAME, ID, MAT.ARRAY, ARRAY.SIZE, F.FILE.VAR, YERR, RETRY)<br/>Reads a dimensioned array from a file with a lock
CAPTURING=
IN2DXEM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
F.WRITE=(F.FILE.NAME, ID, RECORD.VAR)<br/>Wites a record to a file
SUBR=(name, [argument [,argument...]] )
FMUL=(number1, number2)
TTYSET=dynamic.array [ON [file.variable | LPTR [n] | MTU[n]]]
IN2DESK=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IF=expression [THEN statements [ELSE statements] | ELSE]
CALL=
FOR=variable = start TO end [STEP increment]
F.DELETE=(F.FILE.NAME, ID)<br/>Deletes a record from a file
CFQ=ate and a frequency code.
BEFORE=
DEBUG=
IN2PRODCAT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Category Validation
NEG=r)
NOT=(expression)
MAT=array = expression
MATWRITE=array ON [ variable,]expression [SETTING setvar] [ON ERROR statements]
CRT=[print.list]
CLEARSELECT=[ALL | list.number]
ITYPE=(i.type)
EREPLACE=(expression, substring, replacement [,occurrence
TRIMS=(dynamic.array)
UNASSIGNED=(variable)
FILEINFO=(file.variable , key)
AND=
FUNCTION=[name] [( [MAT] variable [, [MAT] variable ...] )]
SOUNDEX=(expression)
GTS=(array1, array2)
DATE=( )
XTD=(string)
IN2CUST.BIC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Customer Validation
DEL=dynamic.array ( field# [,value# [,subvalue#]] )
PROCWRITE=string
SC.CALC.YIELD=(SECURITY.ID, CALC.ONLY, R.SECURITY.SUPP)<br/>Calculates yields, yield to maturity, duration and modified duration for all bonds and optionally updates SECURITY.SUPP file.
AT=
CALC.ERATE.LOCAL=(YLCL.AMT, YFOR.CCY, YFOR.AMT, YEXCH.RATE)<br/>This routine calculates an exchange rate given a foreign amount and local currency equivalent.
#IFNDEF=identifier
CLEARINPUT=
TRIMB=(expression)
GROUPSTORE=new.string IN string USING start, n [,delimiter]
IN2REC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2DXCM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
INPUTERR=[error.message]
GETX=
ICONVS=(dynamic.array, conversion)
DATA=expression [,expression ...]
IN2STAT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
DIVS=(array1, array2)
IN2.ACCD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
GET.STANDARD.SELECTION.DETS=(STANDARD.SEL.ID, SS.REC.VAR)<br/>The routine reads the STANDARD.SELECTION record and merges the SYS and USR fields together
BITSET=(expression, bit#)
BITCHECK=
SPLICE=(array1, expression, array2)
GETUSERNAME=
BITCHANGE=
IN2HOOK=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Programs Validation
CASE=
BYTELEN=(expression)
IN2SPT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2DEF=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
FIND=element IN dynamic.array [,occurrence]
NES=(array1, array2)
IN2DFMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
CALLC=
IN2SEC=tion
DROUND=
LOCK=expression [THEN statements] [ELSE statements]
CREATE=file.variable [THEN statements [ELSE statements]
CUSTRATE=(CCY.MARKETS, BUY.CCY,BUY.AMT,SELL.CCY,SELL.AMT,BASE.CCY,TREASURY.RATE,CUST.RATE,CUST.SPREAD,SPREAD.PCT,LOCAL.CCY.BUY,LOCAL.CCY.SELL,RETURN.CODE)<br/>Performs all the tasks involved in foreign exchange of two currencies on a buy or sell basis
PRINTER.OFF=Redirects output from the print unit to the screen
#ELSE=
OCONV=(string, conversion)
ARG.=
PST=(ACTION)<br/>Opens/closes printer for output and defines headers
IN2FWDR=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Rates Validation
IN2MD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
CDT=(REGION, DATE, DAYS)<br/>Calculates forward or previous date from a start date using the number of days.
PAGE=[ON print.channel] [page#]
IN2RR=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Rates Validation
TRANS=([DICT] filename, record.ID, field#, control.code)
IN2.AD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
IN2MNELC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2SWI=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
TRIMF=(expression)
#INCLUDE=[filename] program
IN2COMPFQU=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
UPCASE=(expression)
EXEC=
RECORDLOCKED=(file.variable, record.ID)
INDICES=(file.variable [,indexname])
MULS=(array1, array2)
IN2D=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
IN2API=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Programs Validation
SIN=(expression)
RG.GET.LOCAL.TEXT=(LOCAL.TABLE.NO, VET.TABLE.ENTRY, LOCAL DESC)<br/>Repgen subroutine will get the description from REMARK field of a LOCAL.TABLE record
IN2.YM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
GROUP=(string, delimiter, occurrence [,num.substr] )
ASSIGN=
BITAND=(expression1, expression2)
TXT= 10%
FOLD=(string, length )
IN2AAA=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2FNO=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2DAO=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dept Account Officer Validation
IN2SORT.CODE=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
READT=[UNIT (mtu)] variable
STORE.END.ERROR=AF, AV, AS, ETEXT (All from I_COMMON)<br/>Routine to store error messages by field, to be displayed at the end of validation processing.
BLOB=
PERFORM=command
REM=(dividend, divisor)
TIMEDATE=( )
HEADING=[ON print.channel] heading
APPENDING=
SEEK=file.variable [, offset [, relto]]
DIM=
LN=(expression)
IN2.ALLACCVAL=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
IN2.D=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
DIMENSION=
ABS=(expression)
COMPARE=(string1, string2 [,justification])
NUM=(expression)
F.LIVE.MATWRITE=(F.FILE.NAME, ID, MAT.ARRAY, ARRAY.SIZE)<br/>Writes a dimensioned array (record) to a file, Audit fields are updated on the LIVE file record and History updates are done automatically
CLOSE=[file.variable] [ON ERROR statements]
SELECTE=TO list.variable
IN2SER=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
F.MATREAD=(F.FILE.NAME, ID, MAT.ARRAY, ARRAY.SIZE, F.FILE.VAR, YERR)<br/>Reads a dimensioned array from a file
FT.NULLS.CHK=Routine to check for a particular field, if the field has been expanded with extra multi- or sub-values, and if there are any null values.
EQS=(array1, array2)
CLEARFILE=[file.variable] [ON ERROR statements] [LOCKED
CLEARCOMMON=
LTS=(array1, array2)
END=
OPENSEQ=filename, record.ID TO file.variable [USING
IFS=(dynamic.array, true.array, false.array)
IN2SAM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Securities Validation
IN2FQUAZ=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
CONTROLCHAR=
#ENDIF=
FCMP=
LOAD.COMPANY=(COMPANY) - Key to F.COMPANY<br/>Builds and loads a company profile into I COMMON. This routine must be called for a change of company.
SELECTINFO=(list, key)
DCOUNT=(string, delimiter)
IN2R=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Rates Validation
DQUOTE=(expression)
SQUOTE=(expression )
COLLECTDATA=
ON=expression GOSUB statement.label [:]
GOSUB=statement.label [:]
IN2CHG=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Charges, Commissions and Tax Validation
INPUTTRAP=[trap.chars] [GOTO | GOSUB] label [,label ...]
WEOF=[UNIT (mtu)] [THEN statements [ELSE statements]
GET=
ECHO=[ON | OFF | expression]
E.GET.LOCAL.AMT=O.DATA from I_ENQUIRY.COMMON<br/>Enquiry Subroutine to calculate the local currency equivalent using MIDDLE.RATE.CONV.CHECK.
CHARS=(dynamic.array)
CHANGE=(expression, substring, replacement [,occurrence])
PWR=(expression, power)
SYSTEM=(expression)
SUBROUTINE=[name] [( [MAT] variable [, [MAT] variable...] )]
MATWRITEU=array ON [ variable,]expression [SETTING setvar] [ON ERROR statements]
IN2PLANT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
IN2DXMATDT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
CHANGETIMESTAMP=
IN2ALL=MON<br/>Account Numner Validation
IN2DS=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
DECLARE=
IN2ACC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
REWIND=[UNIT (mtu)]
TRIM=(expression [,character [,option]])
ASSIGNED=(variable)
DUP=Checks for duplicate occurrences of values in multi and sub-valued fields at cross-validation
OPENPATH=pathname [TO file.variable] [ON ERROR statements]
IN2AMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
IN2SW=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2ANY=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
MATPARSE=array FROM dynamic.array [,delimiter]
CHAIN=command
GETCWD=
IN2NOSACC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
TIME=( )
F.READU=(F.FILE.NAME, ID, RECORD.VAR, FILE.VAR, YERR, RETRY)<br/>Reads a record from a file with a lock
CAT=
ELSE=
COMMON=
STRS=(dynamic.array, repeat)
READSEQ=variable FROM file.variable [ON ERROR statements]
SEQ=(expression)
COUNT=(string, substring)
OVE=TEXT (from I_COMMON)<br/>Prompts for an override and validates Y/N input.
B.UPDATE.BATCH=(PROCESS, RUN.DATE, FREQ, PRINTER, DATA, JOB.NAME)<br/>Adds a batch job to an existing batch process. Enables application programs to initiate ad hoc jobs in the overnight run.
ERR=E, ECOMI (both from I_COMMON)<br/>Displays error message on the same line as the input field or on line 22 if running under a multi-line version. Can be used only within the confines of a template program.
IN2RPT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
F.MATWRITE=(F.FILE.NAME, ID, MAT.ARRAY, ARRAY.SIZE)<br/>Writes a dimensioned array (record) to a file
SADD=(string.number.1, string.number.2)
TRIMFS=(dynamic.array)
IN2CCYDEC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
IN2.CCYD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
IN2RF=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
EB.FORMAT.RATE=(RATE)<br/>Formats rate values depending upon the system settings.
FSUB=(number1, number2)
CHDIR=
DEFB=
COL1=( )
IN2.ANTD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
SEQS=(dynamic.array)
WRITESEQ=expression [ON | TO] file.variable THEN | ELSE statements [ON ERROR]
ERRTEXT=
EXECUTE=commands [CAPTURING variable]
RND=(expression)
GOTO=
MOD=(dividend, divisor)
IN2GMF=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2ENQ=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
FINDSTR=substring IN dynamic.array [,occurrence]
IN2DDMM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
NEGS=(dynamic.array)
BY=
ASCII=(expression)
CLEAR=[COMMON]
CLOSESEQ=file.variable [ON ERROR statements]
EQU=
IN2AA=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
INT=(expression)
IN2T= Validation
EXISTING=
SUBS=(array1, array2)
IN2CCY=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Currency Validation
F.READ=(F.FILE.NAME, ID, RECORD.VAR, FILE.VAR, YERR)<br/>Reads a record from a file
MIDDLE.RATE.CONV.CHECK=s passed but not a foreign.<br/>Calculates an exchange rate when both a foreign and local amount is passed.<br/>Recalculates foreign and local amounts and returns the difference.<br/>Calculates a percentage exchange rate difference when a rate is passed.<br/>Note: The middle rate is used for all calculations unless a rate is explicitly passed.
ATAN=(expression)
OPF=(FILE.NAME, FILE.VAR)<br/>File open routine. Handles company modification of file name hence, it must be called for all file opens.
ACOS=(expression)
IN2COM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Company Validation
IN2TEXT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
IN2NOSALL=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Account Numner Validation
ASIN=(expression)
PRO=(MESSAGE)<br/>Outputs a message to the protocol file for audit or exception purposes.
LENSDP=(dynamic.array, [, mapname] )
CLEARDATA=
LES=(array1, array2)
ALPHA=(expression)
REMOVE=(dynamic.array, variable)
FILEUNLOCK=[file.variable] [ON ERROR statements]
SQRT=(expression)
ADDS=(DynArr1, DynArr2)
PRECISION=expression
FOOTING=[ON print.channel] footing
IN2PRD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
FORMLIST=[variable] [TO list.number] [ON ERROR statements]
COUNTS=(dynamic.array, substring)
NEXT=[variable]
ORS=(array1, array2)
PRINT=[ON print.channel] [print.list]
READNEXT=dynamic.array [,value [,subvalue]] [FROM list]
RETURN=(expression)
CDD=(REGION, DATE1, DATE2, DAYS)<br/>Calculates the difference, in days, between two supplied dates
FADD=(number1, number2)
WRITELIST=dynamic.array ON listname
XLATE=([DICT] filename, record.ID, field#, control.code)
DEFFUN=function [([MAT] argument [, [MAT] argument...])]
GETLIST=listname [TO list.number] [SETTING variable]
READ=variable FROM [file.variable2,] expression [SETTING setvar] [ON ERROR statements] THEN|ELSE statements
SPOOL.REPORT=("" , NAME, TREE.NAME, "", "", "")<br/>Spools a report, which has not been created, by the report control system
IN2EBFMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
IN2PASSWD=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
CALLJ=
BITLOAD=
IN2DIR=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
COS=(expression)
NOTS=(dynamic.array)
STATUS=( )
LENDP=(string, [,mapname] )

	=
INCLUDE=[filename] program
RIGHT=(string, n)
WRITET=[UNIT (mtu)] variable
ICONV=(string, conversion)
FDIV=(number1, number2)
IN2ATT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Alphanumeric Validation
PROMPT=character
BITRESET=(expression, bit#)
CACHE.READ=(F.FILENAME, ID,RECORD.VAR ,YERR)<br/>Used to access frequently used static records in the database.
FFLT=(number)
SPACE=(expression)
IN2BMT=unts Validation
IN2BIC=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Customer Validation
CHAR=(expression)
FATAL.ERROR=ort: displays an error message, exits from 'EX' and updates the PROTOCOL file. Should be called for all 'fatal' errors in both on-line mode and batch.
EQ=
LOOP=
WRITE=variable1 ON|TO [ variable2,] expression [SETTING setvar] [ON ERROR statements]
PRINTER.CLOSE=(NAME, UNIT, USER.NAME)<br/>Spools report as directed by the report control system
$INSERT=[filename]
IN2RELTIME=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
LOWER=(expression)
SCMP=(string.number.1, string.number.2)
IN2FQO=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
ENTER=subroutine
EBCDIC=(expression)
FLUSH=file.variable [THEN statements [ELSE statements]
SELECTINDEX=index [,alt.key] FROM file.variable [TO
OPEN=[dict,] filename [TO file.variable]
BREAK=[KEY] ON
E.GET.STMT.NARRATIVE=Subroutine to return a calculated statement entry narrative for enquiry purposes. 
DELETESEQ	=
READLIST=dynamic.array [FROM list.number]
DIV=(dividend, divisor)
ABSS=(dynamic.array)
INSERT=(dynamic.array, field#, value#, subvalue#, expression)
PRINTER.ON=(NAME, UNIT)<br/>Sets up the printer environment for the report and directs output to the print unit.
WRITEPU=
IN2CAT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Category Validation
INMAT=( [array] )
FIELDS=(dynamic.array, delimiter, occurrence [,num.substr] )
EXCHRATE=(CCY.MKT,BUY.CCY,BUY.AMT,SELL.CCY, SELL.AMT,BASE.CCY,EXCHANGE.RATE, DIFFERENCE,LCY.AMT,RETURN.CODE)<br/>Performs all the tasks involved in foreign exchange of two currencies
SSUB=(string.number.1, string.number.2)
CATS=(array1, array2)
ANDS=(array1, array2)
MATREAD=array FROM [file.variable,] record.ID [ON ERROR]
SPACES=(dynamic.array)
REBUILD.SCREEN=Invokes MATRIX.ALTER to reset screen pointers for automatically expanded multi-values.
EQUATE=
IN2MATLMM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
DELETEU=
MINIMUM=(dynamic.array)
EB.READLIST=(SELECT.STATEMENT, KEY.LIST, LIST.NAME, SELECTED, SYSTEM.RETURN.CODE)<br/>Routine to return a list of keys from a select statement.
IN2LAMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
BITNOT=(expression [,bit#])
IN2=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
IN2MENU=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
EB.CLEAR.FILE=(FILE.NAME, FILE.VAR)<br/>Clears a file
IN2R.AMT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Amounts Validation
MSK=(N1, T1) - Also uses COMI from I_COMMON<br/>Masks input to a specified format.
TTYCTL=file.variable, code#
DELETELIST=listname
TIMEOUT=[file.variable | link.number], time
F.LIVE.WRITE=, ID, RECORD.VAR)<br/>Writes a record to a file, Audit fields are updated and History updates are done automatically
BITOR=
DTX=(number [,size] )
IN2YM=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Dates Validation
NUMS=(dynamic.array)
LEFT=(string, n)
NOBUF=file.variable [THEN statements [ELSE statements]
PROCREAD=variable [THEN statements [ELSE statements]
GETENV=
ACCOUNT.SUSPENSE=(ACCOUNT.ID, TYPE, ERR)<br/>Routine to suspend or remove the suspension from an account.
FILELOCK=[file.variable] [,lock.type]
SEND=output.expr [:] TO device
APP.STATIC.TEXT=(MAT.ARRAY, ID of F.STATIC.TEXT record)<br/>Returns array of application messages from the static text translation file. The messages are defined by the application and their translations (entered by the user) are read in at run time.
SENTENCE=( )
DEFCPP=
LENS=(dynamic.array)
SSELECT=[variable] [TO list.number] [ON ERROR statements]
IN2DXPRI=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
SUBSTRINGS=(dynamic.array, start, length)
DIR=
REPLACE=(expression, field#, value#, subvalue# [, | ;])
APPEND=
QUOTE=(expression)
BEGIN=
FCY.CONVERT.CHECK=(FAMT, FCY, RATE, RATE.TYPE, LAMT, DIF.AMT, DIF.RATE)<br/>Performs the following functions:<br/>Converts a foreign amount to a local amount when a foreign amount is passed but not a local.<br/>Converts a local amount to a foreign amount when a local amount is passed but not a foreign.<br/>Calculates an exchange rate when both a foreign and local amount is passed.<br/>Recalculates foreign and local amounts and returns the difference.<br/>Calculates a percentage exchange rate difference when a rate is passed.
CONVERT=(expression1, expression2, variable)
JULDATE=(GREGORIAN.DATE,JULIAN.DATE)<br/>Convert from Julian to Gregorian date format and vice versa
EXTRACT=(dynamic.array, field# [,value# [,subvalue#]])
RAISE=(expression)
EB.ROUND.AMOUNT=(CURRENCY.ID, AMOUNT, CAL, CUSTOMER.ID)<br/>Formats amount according to currency definition
IN2VAULT=(N1, T1) - Also uses COMI from I_COMMON, modifies V$DISPLAY from I_COMMON<br/>Miscellaneous Validation
COM=
INPUTNULL=character
OCONVS=(dynamic.array, conversion)
