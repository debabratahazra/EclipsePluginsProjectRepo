# Properties file used by the T24Basic Plug-in
#
# When adding, removing or modifying properties keep in mind the following; 
# the plug-in reads this file each time it starts up and compare it with the deployed properties
# file, which can typically be found under <ECLIPSE_WORKSPACE>\.metadata\.plugin\com.temenos.t24.tools.eclipse.basic.plugin,
# It will be an xml file. 
# 
# The plug-in then iterates through the properties in the provided new properties file (aka newProps),
# and checks whether they already exist or not in the existing deployed properties file (aka oldProps). 

#     1) If a property from newProps doesn't exist in oldProps then ADD it, (<== used for adding new properties) 
#     2) If a property from newProps exist in oldProps then don't do anything (don't overwrite it).
#     3) If a property from oldProps doesn't exist in newProps then remove it from the deployed properties file.
#	  (no 3 rule is used for removing deprecated properties)
#

# properties version. This will be populated by the plug-in, taking the 
# value from the MANIFEST.MF file (Bundle-Version)
t24.basic.editor.properties.ver=

# ****************************************************************************
# Global variables
# ****************************************************************************
# some key values comprise multiple elements separated by a "record separator"
t24.key.record.separator=<<NR>>

# ****************************************************************************
# Remote server
# ****************************************************************************
# server director used by the Server VIEWs. These directories may be different to 
# t24.remote.server.directory. I.e. They are used only for the VIEWS.
t24.server.view.remote.server.directory=GLOBUS.BP
t24.server.view.second.remote.server.directory=GLOBUS.BP


# Browsing files in the remote server may require an operatio (e.g. LK (like), GT, LT) and a pattern (e.g. ACCT...)
t24.remote.server.browse.operation=
t24.remote.server.browse.pattern=
t24.remote.server.second.browse.operation=
t24.remote.server.second.browse.pattern=

# Channel => Browser may have more than one channel (T24 server) available,
# so the user can switch over them. This variable holds the default channel.
# Initially by default is DEFAULT
t24.remote.channel.name=DEFAULT
t24.remote.second.channel.name=DEFAULT

# ****************************************************************************
# User Signon login variables
# ****************************************************************************
local.user.login=
local.user.password=
# Remember flag: if true => next time the user tries to sign on, the login info will be taken from this file.
# else, the user will have to enter it through a GUI sign on dialog. 
local.user.rememberlogin.flag=false

# ****************************************************************************
# Compilation result
# ****************************************************************************
# The following property is used to store the last compilation response (in xml format)
# The structure of this property is:
# "isLocal<<NR>>local_work_space<<NR>>file_name.b<<NR>>xml_compile_output"
t24.remote.compile.xml.response=


# ****************************************************************************
# Macros
# ****************************************************************************
#The value of a macro has the following structure (items are separated by <<NR>> New Record:
#"macro.item.key<<NR>>macro_name<<NR>>macro_prompt?[;macro_prompt?]<<NR>>macro_body"
t24.macro.system.1=t24.macro.system.1<<NR>>CACHE.READ<<NR>>Filename<<NR>>CALL CACHE.READ('F.<<1>>',<<1>>.ID,R.<<1>>,YERR)
t24.macro.system.2=t24.macro.system.2<<NR>>DELETE.RECORD<<NR>>File name to delete<<NR>>CALL F.DELETE(FN.<<1>>,<<1>>.ID)
t24.macro.system.3=t24.macro.system.3<<NR>>F.WRITE<<NR>>File name?<<NR>>CALL F.WRITE(FN.<<1>>,<<1>>.ID,R.<<1>>)
t24.macro.system.4=t24.macro.system.4<<NR>>LOOP.REMOVE<<NR>>Control Variable for list?<<NR>>LOOP\r\nREMOVE <<1>>.ID FROM <<1>>.LIST SETTING <<1>>.MARK\r\nWHILE <<1>>.ID : <<1>>.MARK\r\nREPEAT
t24.macro.system.5=t24.macro.system.5<<NR>>MATREAD.LOCK.RECORD<<NR>>Name of file to read from?;Field name for array size<<NR>>MAT R.<<1>> = ""\r\nYERR = ''\r\nRETRY = "P" ; * prompt the user after a lock\r\nSIZE = <<2>>\r\nCALL F.MATREADU(FN.<<1>>, <<1>>.ID,MAT R.<<1>>,SIZE,F.<<1>>,YERR,RETRY)
t24.macro.system.6=t24.macro.system.6<<NR>>MATREAD.RECORD<<NR>>Name of file to read from?;Field name for array size<<NR>>MAT R.<<1>> = ""\r\nSIZE = <<2>>\r\nYERR = ''\r\nCALL F.MATREAD(FN.<<1>>, <<1>>.ID,MAT R.<<1>>,SIZE,F.<<1>>,YERR)
t24.macro.system.7=t24.macro.system.7<<NR>>MATWRITE.RECORD<<NR>>File name to write?;Field name for array size?<<NR>>SIZE = <<2>>\r\nCALL F.MATWRITE(FN.<<1>>,<<1>>.ID,MAT R.<<1>>, SIZE)
t24.macro.system.8=t24.macro.system.8<<NR>>OPEN.FILE<<NR>>File name?<<NR>>FN.<<1>> = 'F.<<1>>'\r\nF.<<1>> = ''\r\nCALL OPF(FN.<<1>>,F.<<1>>)
t24.macro.system.9=t24.macro.system.9<<NR>>READ.LOCK.RECORD<<NR>>Name of file to read from?<<NR>>R.<<1>> = ""\r\nYERR = ''\r\nRETRY = "P" ; * prompt the user after a lock\r\nCALL F.READU(FN.<<1>>, <<1>>.ID,R.<<1>>,F.<<1>>,YERR,RETRY)
t24.macro.system.10=t24.macro.system.10<<NR>>READ.RECORD<<NR>>Name of file to read from?<<NR>>R.<<1>> = ''\r\nYERR = ''\r\nCALL F.READ(FN.<<1>>,<<1>>.ID,R.<<1>>,F.<<1>>,YERR)
t24.macro.system.11=t24.macro.system.11<<NR>>RELEASE.RECORD<<NR>>File name to release<<NR>>CALL F.RELEASE(FN.<<1>>,<<1>>.ID,F.<<1>>)
t24.macro.system.12=t24.macro.system.12<<NR>>SELECT<<NR>>File name?<<NR>>SELECT.STATEMENT = 'SELECT ':FN.<<1>>\r\n<<1>>.LIST = ''\r\nLIST.NAME = ''\r\nSELECTED = ''\r\nSYSTEM.RETURN.CODE = ''\r\nCALL EB.READLIST(SELECT.STATEMENT,<<1>>.LIST,LIST.NAME,SELECTED,SYSTEM.RETURN.CODE)

# ****************************************************************************
# Templates
# ****************************************************************************
# The value of a template has the following structure (items are separated by <<NR>> New Record:
#
# t24.template.system.TEMPLATE.XYZ.v4=t24.template.system.TEMPLATE.XYZ.v4<<NR>>TEMPLATE.XYZ<<NR>>* Template body ...
#
t24.template.system.TEMPLATE.v5=t24.template.system.TEMPLATE.v5<<NR>>TEMPLATE<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-13</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>\r\n*-----------------------------------------------------------------------------\r\n*<doc>\r\n* TODO add a description of the application here.\r\n* @author youremail@temenos.com\r\n* @stereotype Application\r\n* @package TODO define the product group and product, e.g. infra.eb\r\n* </doc>\r\n*-----------------------------------------------------------------------------\r\n* TODO - You MUST write a .FIELDS routine for the field definitions\r\n*-----------------------------------------------------------------------------\r\n* Modification History :\r\n*-----------------------\r\n* 19/10/07 - EN_10003543\r\n*            New Template changes\r\n* ----------------------------------------------------------------------------\r\n* <region name= Inserts>\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_Table\r\n* </region>\r\n*-----------------------------------------------------------------------------\r\n    Table.name = '<<PREFIX>>.<<TEMPLATE_NAME>>'        ;* Full application name including product prefix\r\n    Table.title = '<<PREFIX>> <<TEMPLATE_NAME>>'       ;* Screen title\r\n    Table.stereotype = 'H'    ;* H, U, L, W or T\r\n    Table.product = '<<PREFIX>>'      ;* Must be on EB.PRODUCT\r\n    Table.subProduct = ''     ;* Must be on EB.SUB.PRODUCT\r\n    Table.classification = 'INT'        ;* As per FILE.CONTROL\r\n    Table.systemClearFile = 'Y'         ;* As per FILE.CONTROL\r\n    Table.relatedFiles = ''   ;* As per FILE.CONTROL\r\n    Table.isPostClosingFile = ''        ;* As per FILE.CONTROL\r\n    Table.equatePrefix = 'XX.YY'        ;* Use to create I_F.EB.LOG.PARAMETER\r\n*-----------------------------------------------------------------------------\r\n    Table.idPrefix = ''       ;* Used by EB.FORMAT.ID if set\r\n    Table.blockedFunctions = ''         ;* Space delimeted list of blocked functions\r\n    Table.trigger = ''        ;* Trigger field used for OPERATION style fields\r\n*-----------------------------------------------------------------------------\r\n\r\n    RETURN\r\nEND\r\n
t24.template.system.TEMPLATE.AUTHORISE.v5=t24.template.system.TEMPLATE.AUTHORISE.v5<<NR>>TEMPLATE.AUTHORISE<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-22</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.AUTHORISE\r\n*-----------------------------------------------------------------------------\r\n!** Simple AUTHORISE template\r\n* @author youremail@temenos.com\r\n* @stereotype subroutine\r\n* @package infra.eb\r\n*!\r\n\r\n*** <region name= PROGRAM DESCRIPTION>\r\n*** <desc>Program description</desc>\r\n*-----------------------------------------------------------------------------\r\n* Program Description\r\n*** </region>\r\n\r\n*** <region name= MODIFICATION HISTORY>\r\n*** <desc>Modification history</desc>\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n*-----------------------------------------------------------------------------\r\n*** </region>\r\n\r\n*** <region name= INSERTS>\r\n*** <desc>Inserts</desc>\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= MAIN PROCESS LOGIC>\r\n*** <desc>Main process logic</desc>\r\n      GOSUB INITIALISE\r\n      GOSUB PROCESS\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= PROCESS>\r\n*** <desc>Process</desc>\r\nPROCESS:\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= INITIALISE>\r\n*** <desc>Initialise</desc>\r\nINITIALISE:\r\n\r\n      RETURN\r\n*** </region>\r\nEND\r\n
t24.template.system.TEMPLATE.FIELDS.v5=t24.template.system.TEMPLATE.FIELDS.v5<<NR>>TEMPLATE.FIELDS<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-7</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.FIELDS\r\n*-----------------------------------------------------------------------------\r\n*<doc>\r\n* Template for field definitions routine <<PREFIX>>.<<TEMPLATE_NAME>>.FIELDS\r\n*\r\n* @author tcoleman@temenos.com\r\n* @stereotype fields template\r\n* @uses Table\r\n* @public Table Creation\r\n* @package infra.eb\r\n* </doc>\r\n*-----------------------------------------------------------------------------\r\n* Modification History :\r\n*\r\n* 19/10/07 - EN_10003543\r\n*            New Template changes\r\n*\r\n* 14/11/07 - BG_100015736\r\n*            Exclude routines that are not released\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Header>\r\n*** <desc>Inserts and control logic</desc>\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_DataTypes\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n    CALL Table.defineId("TABLE.NAME.ID", T24_String) ;* Define Table id\r\n*-----------------------------------------------------------------------------\r\n    CALL Table.addField(fieldName, fieldType, args, neighbour) ;* Add a new fields\r\n    CALL Field.setCheckFile(fileName)        ;* Use DEFAULT.ENRICH from SS or just field 1\r\n    CALL Table.addFieldDefinition(fieldName, fieldLength, fieldType, neighbour) ;* Add a new field\r\n    CALL Table.addFieldWithEbLookup(fieldName,virtualTableName,neighbour) ;* Specify Lookup values\r\n    CALL Field.setDefault(defaultValue) ;* Assign default value\r\n*-----------------------------------------------------------------------------\r\n    CALL Table.setAuditPosition ;* Poputale audit information\r\n*-----------------------------------------------------------------------------\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nEND\r\n
t24.template.system.TEMPLATE.FUNCTION.v5=t24.template.system.TEMPLATE.FUNCTION.v5<<NR>>TEMPLATE.FUNCTION<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-22</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.FUNCTION\r\n*-----------------------------------------------------------------------------\r\n!** Simple FUNCTION template\r\n* @author youremail@temenos.com\r\n* @stereotype subroutine\r\n* @package infra.eb\r\n*!\r\n*** <region name= PROGRAM DESCRPTION>\r\n*** <desc>Program description</desc>\r\n*-----------------------------------------------------------------------------\r\n* Program Description\r\n*-----------------------------------------------------------------------------\r\n*** </region>\r\n\r\n*** <region name= MODIFICATION HISTORY>\r\n*** <desc>Modification History</desc>\r\n* Modification History:\r\n*-----------------------------------------------------------------------------\r\n*** </region>\r\n\r\n*** <region name= INSERTS>\r\n*** <desc>Inserts</desc>\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= MAIN PROCESS LOGIC>\r\n*** <desc>Main process logic</desc>\r\n      GOSUB INITIALISE\r\n      GOSUB PROCESS\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= PROCESS>\r\n*** <desc>process</desc>\r\nPROCESS:\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n\r\n*** <region name= INITIALISE>\r\n*** <desc>initialise</desc>\r\nINITIALISE:\r\n\r\n      RETURN\r\n*** </region>\r\nEND\r\n
t24.template.system.TEMPLATE.ID.v5=t24.template.system.TEMPLATE.ID.v5<<NR>>TEMPLATE.ID<<NR>>      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.ID\r\n*-----------------------------------------------------------------------------\r\n!** FIELD definitions FOR <<PREFIX>>.<<TEMPLATE_NAME>>\r\n*!\r\n* @author youremail@temenos.com\r\n* @stereotype id\r\n* @package infra.eb\r\n* @uses E\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*-----------------------------------------------------------------------------\r\n* TODO Add logic to validate the id\r\n* TODO Create an EB.ERROR record if you are creating a new error code\r\n*-----------------------------------------------------------------------------\r\n      E = 'EB-NOT.VALID.ID'\r\n      RETURN\r\n\r\nEND\r\n
t24.template.system.TEMPLATE.INITIALISE.v5=t24.template.system.TEMPLATE.INITIALISE.v5<<NR>>TEMPLATE.INITIALISE<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-22</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.INITIALISE\r\n*------------------------------------------------------------------------\r\n!** Simple INITIALISE template\r\n* @author youremail@temenos.com\r\n* @stereotype subroutine\r\n* @package infra.eb\r\n*!\r\n*** <region name= PROGRAM DESCRIPTION>\r\n***\r\n*\r\n*** </region>\r\n\r\n*** <region name= MODIFICATION HISTORY>\r\n*------------------------------------------------------------------------\r\n* Modification History :\r\n*\r\n*------------------------------------------------------------------------\r\n*** </region>\r\n\r\n*** <region name= INSERTS>\r\n***\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n$INSERT I_METHODS.AND.PROPERTIES\r\n*** </region>\r\n\r\n*** <region name= MAIN PROCESS LOGIC>\r\n***\r\n      GOSUB INITIALISE\r\n      IF NOT(E) THEN\r\n         GOSUB PROCESS\r\n      END\r\n*\r\n      RETURN\r\n*** </region>\r\n\r\n*** <region name= PROCESS>\r\n*------------------------------------------------------------------------\r\nPROCESS:\r\n*\r\n*\r\n      RETURN\r\n*\r\n*** </region>\r\n*** <region name= INIT>\r\n*------------------------------------------------------------------------\r\nINITIALISE:\r\n*\r\n*\r\n      RETURN\r\n*\r\n*** </region>\r\n\r\n   END\r\n
t24.template.system.TEMPLATE.OVERRIDE.v5=t24.template.system.TEMPLATE.OVERRIDE.v5<<NR>>TEMPLATE.OVERRIDE<<NR>>* Version 3 15/11/00  GLOBUS Release No. 200508 30/06/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>51</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.OVERRIDE\r\n*-----------------------------------------------------------------------------\r\n!** Template FOR override routines\r\n* @author youremail@temenos.com\r\n* @stereotype validator\r\n* @package infra.eb\r\n*!\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Modification History>\r\n*-----------------------------------------------------------------------------\r\n* \r\n\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Main section>\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n      GOSUB INITIALISE\r\n      GOSUB OVERRIDES\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\nOVERRIDES:\r\n* TODO Add your override here\r\n* Set TEXT to be the key to the override you want to use form the OVERRIDE table\r\n* Set AF/AV/AS to be the field that is relevant to the override.\r\n*\r\n* AF = <<PREFIX>>.RETURN.FIELD\r\n* TEXT = "SAMPLE.OVERRIDE.KEY"\r\n* GOSUB DO.OVERRIDE\r\n*\r\n      RETURN\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Add an override>\r\n*** \r\nDO.OVERRIDE:\r\n      CALL STORE.OVERRIDE(CURR.NO)\r\n      IF TEXT = 'NO' THEN\r\n         GOTO EXIT.SUB\r\n      END\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Initialise>\r\n*** \r\nINITIALISE:\r\n      CURR.NO = 0\r\n      CALL STORE.OVERRIDE(CURR.NO)\r\n\r\n      RETURN\r\n\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Exit>\r\n*** \r\nEXIT.SUB:\r\n      RETURN TO EXIT.SUB\r\n      RETURN\r\n*** </region>*-----------------------------------------------------------------------------\r\n*\r\n   END\r\n
t24.template.system.TEMPLATE.PROCESS.v5=t24.template.system.TEMPLATE.PROCESS.v5<<NR>>TEMPLATE.PROCESS<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-22</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.PROCESS\r\n*------------------------------------------------------------------------\r\n!** Simple PROCESS template\r\n* @author youremail@temenos.com\r\n* @stereotype subroutine\r\n* @package infra.eb\r\n*!\r\n\r\n*** <region name= PROGRAM DESCRIPTION>\r\n*** <desc>Program description</desc>\r\n*------------------------------------------------------------------------\r\n* Program Description\r\n\r\n*** </region>\r\n\r\n*** <region name= MODIFICATION HISTORY>\r\n*** <desc>Modification History</desc>\r\n*------------------------------------------------------------------------\r\n* Modification History :\r\n*------------------------------------------------------------------------\r\n*** </region>\r\n\r\n*** <region name= INSERTS>\r\n*** <desc>Inserts</desc>\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*** </region>\r\n*------------------------------------------------------------------------\r\n\r\n*** <region name= MAIN PROCESS LOGIC>\r\n*** <desc>Main process logic</desc>\r\n\r\n      GOSUB INITIALISE\r\n      GOSUB PROCESS\r\n\r\n      RETURN\r\n*** </region>\r\n\r\n*------------------------------------------------------------------------\r\n\r\n*** <region name= PROCESS>\r\n*** <desc>Process</desc>\r\nPROCESS:\r\n\r\n\r\n      RETURN\r\n*** </region>\r\n\r\n*------------------------------------------------------------------------\r\n\r\n*** <region name= INITIALISE>\r\n*** <desc>Initialise</desc>\r\nINITIALISE:\r\n\r\n\r\n      RETURN\r\n*** </region>\r\n\r\n   END\r\n
t24.template.system.TEMPLATE.RECORD.v5=t24.template.system.TEMPLATE.RECORD.v5<<NR>>TEMPLATE.RECORD<<NR>>* Version 9 16/05/01  GLOBUS Release No. 200511 31/10/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>-34</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.RECORD\r\n*-----------------------------------------------------------------------------\r\n!** Simple SUBROUTINE template\r\n* @author youremail@temenos.com\r\n* @stereotype recordcheck\r\n* @package infra.eb\r\n* @uses E\r\n* @uses AF\r\n*!\r\n*----------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n\r\n* Check if the record is okay to input to...\r\n      GOSUB CHECK.RECORD\r\n      IF E = '' THEN\r\n         GOSUB SET.ENRICHMENTS\r\n         GOSUB POPULATE.COMMONS\r\n      END\r\n\r\n      RETURN\r\n*-----------------------------------------------------------------------\r\nPOPULATE.COMMONS:\r\n      RETURN\r\n*-----------------------------------------------------------------------------\r\nSET.ENRICHMENTS:\r\n      CALL EB.SET.FIELD.ENRICHMENT(FIELD.NUMBER, FIELD.ENRICHMENT)\r\n      RETURN\r\n*--------------------------------------------------------------------\r\nCHECK.RECORD:\r\n* Input not allowed for matured contracts!\r\n      IF V$FUNCTION MATCHES 'I' : VM : 'R' THEN\r\n* TODO add specific checks for blocking functions if required,\r\n*         IF NOT(R.NEW(MY.RECORD.STATUS) EQ 'INAU') AND R.NEW(MY.CONTRACT.STATUS) = 'LIQ' THEN\r\n*            E ='SAMPLE.ERROR.CODE'\r\n*         END\r\n      END\r\n      RETURN\r\n*-----------------------------------------------------------------------------\r\nEND\r\n
t24.template.system.TEMPLATE.SUBROUTINE.v5=t24.template.system.TEMPLATE.SUBROUTINE.v5<<NR>>TEMPLATE.SUBROUTINE<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-20</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.SUBROUTINE\r\n*-----------------------------------------------------------------------------\r\n!** Simple SUBROUTINE template\r\n* @author youremail@temenos.com\r\n* @stereotype subroutine\r\n* @package infra.eb\r\n*!\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*-----------------------------------------------------------------------------\r\n      GOSUB INITIALISE\r\n      GOSUB PROCESS\r\n      RETURN\r\n*-----------------------------------------------------------------------------\r\nPROCESS:\r\n\r\n      RETURN\r\n*-----------------------------------------------------------------------------\r\nINITIALISE:\r\n\r\n      RETURN\r\n\r\nEND\r\n
t24.template.system.TEMPLATE.VALIDATE.v5=t24.template.system.TEMPLATE.VALIDATE.v5<<NR>>TEMPLATE.VALIDATE<<NR>>* Version 2 02/06/00  GLOBUS Release No. G11.0.00 29/06/00\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.VALIDATE\r\n*-----------------------------------------------------------------------------\r\n!** Template FOR validation routines\r\n* @author youremail@temenos.com\r\n* @stereotype validator\r\n* @package infra.eb\r\n*!\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Modification History>\r\n*-----------------------------------------------------------------------------\r\n* 07/06/06 - BG_100011433\r\n*            Creation\r\n*-----------------------------------------------------------------------------\r\n*** </region>\r\n*** <region name= Main section>\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n\r\n    GOSUB INITIALISE\r\n    GOSUB PROCESS.MESSAGE\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\nVALIDATE:\r\n* TODO - Add the validation code here.\r\n* Set AF, AV and AS to the field, multi value and sub value and invoke STORE.END.ERROR\r\n* Set ETEXT to point to the EB.ERROR.TABLE\r\n\r\n*      AF = MY.FIELD.NAME                 <== Name of the field\r\n*      ETEXT = 'EB-EXAMPLE.ERROR.CODE'    <== The error code\r\n*      CALL STORE.END.ERROR               <== Needs to be invoked per error\r\n\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Initialise>\r\nINITIALISE:\r\n***\r\n\r\n*\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Process Message>\r\nPROCESS.MESSAGE:\r\n    BEGIN CASE\r\n    CASE MESSAGE EQ ''        ;* Only during commit...\r\n        BEGIN CASE\r\n        CASE V$FUNCTION EQ 'D'\r\n            GOSUB VALIDATE.DELETE\r\n        CASE V$FUNCTION EQ 'R'\r\n            GOSUB VALIDATE.REVERSE\r\n        CASE OTHERWISE        ;* The real VALIDATE...\r\n            GOSUB VALIDATE\r\n        END CASE\r\n    CASE MESSAGE EQ 'AUT' OR MESSAGE EQ 'VER'     ;* During authorisation and verification...\r\n        GOSUB VALIDATE.AUTHORISATION\r\n    END CASE\r\n*\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= VALIDATE.DELETE>\r\nVALIDATE.DELETE:\r\n* Any special checks for deletion\r\n\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= VALIDATE.REVERSE>\r\nVALIDATE.REVERSE:\r\n* Any special checks for reversal\r\n\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= VALIDATE.AUTHORISATION>\r\nVALIDATE.AUTHORISATION:\r\n* Any special checks for authorisation\r\n\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\nEND\r\n
t24.template.system.XX.ACCOUNTING.v5=t24.template.system.XX.ACCOUNTING.v5<<NR>>XX.ACCOUNTING<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-158</Rating>\r\n*-----------------------------------------------------------------------------\r\n* Version 2 29/09/00  GLOBUS Release No. 200508 30/06/05\r\n*\r\n      SUBROUTINE <<PREFIX>>.ACCOUNTING\r\n*\r\n************************************************************************\r\n*  Insert files.\r\n******************\r\n*\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n$INSERT I_F.ACCOUNT\r\n$INSERT I_F.DATES\r\n$INSERT I_F.STMT.ENTRY\r\n*\r\n*************************************************************************\r\n*\r\n      GOSUB INITIALISATION\r\n*\r\n      GOSUB PRODUCE.ENTRIES\r\n*\r\n      RETURN                             ; * main return\r\n*\r\n*************************************************************************\r\n*                                                                       *\r\n*  Local subroutines.                                                   *\r\n*                                                                       *\r\n*************************************************************************\r\n*\r\n****************\r\nPRODUCE.ENTRIES:\r\n****************\r\n*\r\n* Set the corresponding variabls here,\r\n* then a call to the specific item...\r\n*\r\n!!>Set entries here\r\n*\r\n* These are an example ONLY!\r\n*\r\n\r\n      LCY.AMOUNT = 100\r\n      FCY.AMOUNT = ''\r\n      EXCH.RATE = ''\r\n      ACCOUNT.NO = '123456'\r\n      GOSUB RAISE.AC.ENTRY\r\n\r\n      GOSUB REVERSE.AMOUNTS\r\n      PL.CATEGORY = 50000\r\n      GOSUB RAISE.CATEG.ENTRY\r\n\r\n      RETURN\r\n***************\r\nINITIALISATION:\r\n***************\r\n*\r\n*  Open files.\r\n*\r\n      IF VALUE.DATE = "" THEN\r\n         VALUE.DATE = TODAY\r\n      END\r\n*\r\n*  Set process date. HERE\r\n*\r\n!!>Define process date\r\n\r\n      IF PROCESS.DATE = "" THEN\r\n         PROCESS.DATE = TODAY\r\n      END\r\n\r\n!!>Set Deal currency\r\n      DEAL.CURRENCY = ""\r\n*\r\n      REVERSAL = 0\r\n      FORWARD.ENTRY = 0\r\n\r\n      IF PROCESS.DATE > R.DATES(EB.DAT.PERIOD.END) THEN\r\n         FORWARD.ENTRY = 1\r\n      END\r\n*\r\n      MULTI.ENTRIES = ''\r\n      MULTI.FORWARD.ENTRIES = ''\r\n*\r\n      AMOUNT = ''\r\n      CRF.TYPE = ''\r\n      CRF.TXN.CODE = ''\r\n      CRF.MAT.DATE = ''\r\n      RETURN                             ; * to main\r\n*\r\n****************\r\nRAISE.AC.ENTRY:\r\n****************\r\n*\r\n      GOSUB BUILD.BASE.ENTRY\r\n*\r\n      ENTRY<AC.STE.AMOUNT.LCY> = LCY.AMOUNT\r\n      ENTRY<AC.STE.AMOUNT.FCY> = FCY.AMOUNT\r\n      ENTRY<AC.STE.EXCHANGE.RATE> = EXCH.RATE\r\n      ENTRY<AC.STE.ACCOUNT.NUMBER> = ACCOUNT.NO\r\n*\r\n      GOSUB APPEND.ENTRIES\r\n*\r\n      RETURN\r\n\r\n****************\r\nRAISE.CRF.ENTRY:\r\n****************\r\n*\r\n      GOSUB BUILD.BASE.ENTRY\r\n*\r\n      ENTRY<AC.STE.AMOUNT.LCY> = LCY.AMOUNT\r\n      ENTRY<AC.STE.AMOUNT.FCY> = FCY.AMOUNT\r\n      ENTRY<AC.STE.EXCHANGE.RATE> = EXCH.RATE\r\n      ENTRY<AC.STE.CRF.TYPE> = CRF.TYPE\r\n      ENTRY<AC.STE.CRF.TXN.CODE> = CRF.TXN.CODE\r\n      ENTRY<AC.STE.CRF.MAT.DATE> =CRF.MAT.DATE\r\n*\r\n      GOSUB APPEND.ENTRIES\r\n*\r\n      RETURN\r\n*\r\n******************\r\nRAISE.CATEG.ENTRY:\r\n******************\r\n*\r\n*  Only live categ.entry\r\n*\r\n      GOSUB BUILD.BASE.ENTRY\r\n*\r\n      ENTRY<AC.STE.AMOUNT.LCY> = LCY.AMOUNT\r\n      ENTRY<AC.STE.PL.CATEGORY> = PL.CATEGORY\r\n      ENTRY<AC.STE.AMOUNT.FCY> = FCY.AMOUNT\r\n      ENTRY<AC.STE.EXCHANGE.RATE> = EXCH.RATE\r\n*\r\n      GOSUB APPEND.LIVE.ENTRIES\r\n*\r\n      RETURN\r\n***************\r\nAPPEND.ENTRIES:\r\n***************\r\n*\r\n      IF FORWARD.ENTRY THEN\r\n         GOSUB APPEND.FORWARD.ENTRIES\r\n      END ELSE\r\n         GOSUB APPEND.LIVE.ENTRIES\r\n      END\r\n*\r\n      RETURN\r\n*\r\n********************\r\nAPPEND.LIVE.ENTRIES:\r\n***********************************************************\r\n*  Append accounting and crf entries to an array of       *\r\n*  entries.\r\n*  If REVERSAL is set then reverse the sign of the Local  *\r\n*  and Foreign CCY amounts.                               *\r\n***********************************************************\r\n*\r\n      IF REVERSAL THEN\r\n         ENTRY<AC.STE.AMOUNT.LCY> = -ENTRY<AC.STE.AMOUNT.LCY>\r\n         IF ENTRY<AC.STE.AMOUNT.FCY> THEN\r\n            ENTRY<AC.STE.AMOUNT.FCY> = -ENTRY<AC.STE.AMOUNT.FCY>\r\n         END\r\n      END\r\n*\r\n      MULTI.ENTRIES<-1> = LOWER(ENTRY)\r\n*\r\n      RETURN\r\n*\r\n***********************\r\nAPPEND.FORWARD.ENTRIES:\r\n***********************\r\n*\r\n***********************************************************\r\n*  Append forward entries to an array of entries          *\r\n*  If REVERSAL is set then reverse the sign of the Local  *\r\n*  and Foreign CCY amounts.                               *\r\n***********************************************************\r\n*\r\n      IF REVERSAL THEN\r\n         ENTRY<AC.STE.AMOUNT.LCY> = -ENTRY<AC.STE.AMOUNT.LCY>\r\n         IF ENTRY<AC.STE.AMOUNT.FCY> THEN\r\n            ENTRY<AC.STE.AMOUNT.FCY> = -ENTRY<AC.STE.AMOUNT.FCY>\r\n         END\r\n      END\r\n*\r\n      MULTI.FORWARD.ENTRIES<-1> = LOWER(ENTRY)\r\n*\r\n      RETURN\r\n*\r\n*************************************************************************\r\nDETERMINE.CCY.AMOUNTS:\r\n**********************\r\n*\r\n*  Foreign CCY / Local CCY Conversion.\r\n*\r\n      IF DEAL.CCY = LCCY THEN\r\n         LCY.AMOUNT = AMOUNT\r\n         FCY.AMOUNT = ""\r\n      END ELSE\r\n         FCY.AMOUNT = AMOUNT\r\n         CALL MIDDLE.RATE.CONV.CHECK(FCY.AMOUNT,DEAL.CCY,EXCH.RATE,"1",LCY.AMOUNT,"","")\r\n         CALL EB.ROUND.AMOUNT(LCCY,LCY.AMOUNT,"","")\r\n      END\r\n\r\n      RETURN\r\n*\r\n****************\r\nREVERSE.AMOUNTS:\r\n****************\r\n*\r\n*  Revese signs of lcy.amount and fcy.amount\r\n*\r\n      LCY.AMOUNT = -LCY.AMOUNT\r\n      IF FCY.AMOUNT THEN\r\n         FCY.AMOUNT = -FCY.AMOUNT\r\n      END\r\n*\r\n      RETURN\r\n*\r\n**************\r\nRESET.AMOUNTS:\r\n**************\r\n*\r\n*  Lcy.amount and fcy.amount should be unsigned\r\n*\r\n      LCY.AMOUNT = ABS(LCY.AMOUNT)\r\n      IF FCY.AMOUNT THEN\r\n         FCY.AMOUNT = ABS(FCY.AMOUNT)\r\n      END\r\n*\r\n      RETURN\r\n*****************\r\nBUILD.BASE.ENTRY:\r\n*****************\r\n*\r\n***********************************************************\r\n*  Build base STMT.ENTRY entry fields.                    *\r\n***********************************************************\r\n*\r\n      ENTRY = ""\r\n*\r\n      ENTRY<AC.STE.ACCOUNT.NUMBER> = ""\r\n      ENTRY<AC.STE.COMPANY.CODE> = ID.COMPANY\r\n      ENTRY<AC.STE.AMOUNT.LCY> = 0\r\n      ENTRY<AC.STE.TRANSACTION.CODE> = ''\r\n      ENTRY<AC.STE.THEIR.REFERENCE> = ID.NEW\r\n      ENTRY<AC.STE.NARRATIVE> = ""\r\n      ENTRY<AC.STE.PL.CATEGORY> = ""\r\n      ENTRY<AC.STE.CUSTOMER.ID> = ''     ; * Set a value here\r\n      ENTRY<AC.STE.ACCOUNT.OFFICER> = ''           ; * Set a value here\r\n      ENTRY<AC.STE.PRODUCT.CATEGORY> = ''          ; * Set a value here\r\n      ENTRY<AC.STE.VALUE.DATE> = VALUE.DATE\r\n      ENTRY<AC.STE.CURRENCY> = LCCY      ; * Set a value here\r\n      ENTRY<AC.STE.AMOUNT.FCY> = ""\r\n      ENTRY<AC.STE.EXCHANGE.RATE> = ""\r\n      ENTRY<AC.STE.POSITION.TYPE> = 'TR'\r\n      ENTRY<AC.STE.OUR.REFERENCE> = ID.NEW\r\n      ENTRY<AC.STE.CURRENCY.MARKET> = '1'\r\n      ENTRY<AC.STE.DEPARTMENT.CODE> = ''           ; * Set a value here\r\n      ENTRY<AC.STE.SYSTEM.ID> = <<PREFIX>>\r\n      ENTRY<AC.STE.BOOKING.DATE> = TODAY\r\n      ENTRY<AC.STE.CRF.TYPE> = ""\r\n      ENTRY<AC.STE.CRF.TXN.CODE> = ""\r\n      ENTRY<AC.STE.CRF.MAT.DATE> = ""\r\n*\r\n      IF REVERSAL THEN\r\n         ENTRY<AC.STE.REVERSAL.MARKER> = "R"\r\n      END ELSE\r\n         ENTRY<AC.STE.REVERSAL.MARKER> = ""\r\n      END\r\n*\r\n      RETURN\r\n\r\n*************************************************************************\r\n*                                                                       *\r\n*  Error Handling                                                       *\r\n*                                                                       *\r\n*************************************************************************\r\n*\r\n************\r\nFATAL.ERROR:\r\n************\r\n*\r\n      TEXT = ETEXT\r\n      CALL FATAL.ERROR("<<PREFIX>>.ACCOUNTING")\r\n*\r\n      RETURN\r\n*\r\n*************************************************************************\r\n*\r\n   END\r\n
t24.template.system.XX.CROSSVAL.v5=t24.template.system.XX.CROSSVAL.v5<<NR>>XX.CROSSVAL<<NR>>* Version 2 02/06/00  GLOBUS Release No. G11.0.00 29/06/00\r\n*-----------------------------------------------------------------------------\r\n* <Rating>-71</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.CROSSVAL\r\n************************************************************************\r\n* Cross validation for XX\r\n* TODO - Replace XX with table name\r\n************************************************************************\r\n*** <region name= Modification History>\r\n***\r\n************************************************************************\r\n* Modification History:\r\n*\r\n* 15/03/06 - EN_10002859 - New Template Programming\r\n*            Changing XX.CROSSVAL to suit the new template prograaming. The new templates\r\n*            do not have check.fields.\r\n*            Ref:SAR-2006-03-07-0001\r\n*-----------------------------------------------------------------------------\r\n*** </region>\r\n*** <region name= Inserts>\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*$INSERT I_F.XX  ; * the insert of the template\r\n*** </region>\r\n*** <region name= Main section>\r\n      GOSUB INITIALISE\r\n      \r\n      GOSUB PROCESS.CROSSVAL\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= INIT>\r\nINITIALISE:\r\n***\r\n\r\n*\r\n      RETURN\r\n*** </region>\r\n\r\n*-----------------------------------------------------------------------------\r\n*** <region name= PROCESS.CROSSVAL>\r\nPROCESS.CROSSVAL:\r\n***\r\n      IF MESSAGE EQ '' THEN     ;* Only during commit...\r\n         BEGIN CASE\r\n            CASE V$FUNCTION EQ 'D'\r\n               GOSUB DELETE.CROSSVAL\r\n            CASE V$FUNCTION EQ 'R'\r\n               GOSUB REVERSE.CROSSVAL\r\n            CASE 1      ;* The real crossval...\r\n               GOSUB REAL.CROSSVAL\r\n         END CASE\r\n      END\r\n*\r\n      IF MESSAGE EQ 'AUT' OR MESSAGE EQ 'VER' THEN  ;* During authorisation and verification...\r\n         GOSUB AUTH.CROSSVAL\r\n      END\r\n*\r\n      IF MESSAGE EQ 'ERROR' THEN          ;* During delivery preview and default...\r\n\r\n      END\r\n*\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= REAL CROSSVAL>\r\nREAL.CROSSVAL:\r\n*\r\n* Real cross validation goes here....\r\n*\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= DELETE.CROSSVAL>\r\nDELETE.CROSSVAL:\r\n***\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= REVERSE.CROSSVAL>\r\nREVERSE.CROSSVAL:\r\n***\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= AUTH.CROSSVAL>\r\nAUTH.CROSSVAL:\r\n***\r\n\r\n      RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n   END\r\n
t24.template.system.XX.EOD.v5=t24.template.system.XX.EOD.v5<<NR>>XX.EOD<<NR>>* Version 1 13/04/00  GLOBUS Release No. 200508 30/06/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.EOD(ID)\r\n*-----------------------------------------------------------------------------\r\n* Mutli-threaded Close of Business routine\r\n*\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n*\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n$INSERT I_<<PREFIX>>.EOD.COMMON\r\n*-----------------------------------------------------------------------------\r\n* Perform the transaction/contract processing in this routine. All files & standard\r\n* variables should be setup in XX.EOD.LOAD and passed using the named common I_<<PREFIX>>.EOD.COMMON\r\n\r\n      RETURN\r\n   END\r\n 
t24.template.system.XX.EOD.LOAD.v5=t24.template.system.XX.EOD.LOAD.v5<<NR>>XX.EOD.LOAD<<NR>>* Version 1 13/04/00  GLOBUS Release No. 200508 30/06/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.EOD.LOAD\r\n*-----------------------------------------------------------------------------\r\n* Load routine to setup the common area for the multi-threaded Close of Business\r\n* job <<PREFIX>>.EOD\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n$INSERT I_<<PREFIX>>.EOD.COMMON\r\n*-----------------------------------------------------------------------------\r\n* Open files to be used in the XX.EOD routine as well as standard variables.\r\n\r\n      FN.EOD.FILE = 'F.EOD.FILE'\r\n      F.EOD.FILE = ''\r\n      CALL OPF(FN.EOD.FILE,F.EOD.FILE)\r\n\r\n      R.EOD.FILE = ''\r\n      YERR = ''\r\n      CALL F.READ(FN.EOD.FILE,'SYSTEM',R.EOD.FILE,F.EOD.FILE,YERR)\r\n\r\n      RETURN\r\n   END\r\n
t24.template.system.XX.EOD.SELECT.v5=t24.template.system.XX.EOD.SELECT.v5<<NR>>XX.EOD.SELECT<<NR>>* Version 1 13/04/00  GLOBUS Release No. 200508 30/06/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>-6</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.EOD.SELECT\r\n*-----------------------------------------------------------------------------\r\n* Select routine to setup the common area for the multi-threaded Close of Business\r\n* job <<PREFIX>>.EOD\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n$INSERT I_BATCH.FILES\r\n$INSERT I_<<PREFIX>>.EOD.COMMON\r\n*-----------------------------------------------------------------------------\r\n* Setup the parameters for BATCH.BUILD.LIST\r\n* LIST.PARAMETERS<1> = blank, this is the list file name, NEVER enter a value here\r\n* LIST.PARAMETERS<2> = the filename to be selected, e.g. F.ACCOUNT, BATCH.BUILD.LIST will open it\r\n* LIST.PARAMETERS<3> = selection criteria for file, e.g. CURRENCY EQ "GBP", this first WITH is not required\r\n*                      and will be added by BATCH.BUILD.LIST\r\n* ID.LIST = predefined list, for example from a CONCAT file record.\r\n*           ID.LIST will take precedence over LIST.PARAMETERS\r\n* CONTROL.LIST = common list used by BATCH.JOB.CONTROL\r\n\r\n      IF CONTROL.LIST = '' THEN\r\n*        Set any values for CONTROL.LIST here, this is not mandatory.\r\n*        This can be used when the select routine must be called repeatedly\r\n*        for example\r\n*        CONTROL.LIST = TODAY:@FM:NEXT.WORKING.DAY\r\n      END\r\n\r\n      LIST.PARAMETERS = '' ; ID.LIST = ''\r\n\r\n*     LIST.PARAMETERS<2> = 'F.SEC.TRADE'\r\n*     LIST.PARAMETERS<3> = 'TRADE.CCY EQ "USD"'\r\n\r\n      CALL BATCH.BUILD.LIST(LIST.PARAMETERS,ID.LIST)\r\n\r\n      RETURN\r\n   END\r\n 
t24.template.system.XX.SUBROUTINE.v5=t24.template.system.XX.SUBROUTINE.v5<<NR>>XX.SUBROUTINE<<NR>>* Version 3 02/06/00  GLOBUS Release No. 200508 30/06/05\r\n*-----------------------------------------------------------------------------\r\n* <Rating>-10</Rating>\r\n*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<PREFIX>>.SUBROUTINE\r\n*-----------------------------------------------------------------------------\r\n*\r\n*-----------------------------------------------------------------------------\r\n* Modification History :\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n*-----------------------------------------------------------------------------\r\n\r\n      GOSUB INITIALISE\r\n\r\n      RETURN\r\n\r\n*\r\n*-----------------------------------------------------------------------------\r\n*\r\n\r\nINITIALISE:\r\n\r\n      RETURN\r\n\r\n*\r\n*-----------------------------------------------------------------------------\r\n*\r\n   END\r\n
t24.template.system.CONV.FILE.ROUTINE.TEMPLATE.v5=t24.template.system.CONV.FILE.ROUTINE.TEMPLATE.v5<<NR>>CONV.FILE.ROUTINE.TEMPLATE<<NR>>*\r\n      SUBROUTINE <<TEMPLATE_NAME>>\r\n*-----------------------------------------------------------------------------\r\n* Template file routine, to be used as a basis for building a FILE.ROUTINE\r\n* to be run as part of the CONVERSION.DETAILS record.\r\n* This routine should only be used to do such things as change record keys etc\r\n* where ever possible use the RECORD.ROUTINE to convert/populate record data fields.\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n*\r\n*\r\n*-----------------------------------------------------------------------------\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n\r\n* Equate field numbers to position manually, do no use $INSERT\r\n      EQU SUFFIXES TO 3\r\n      EQU FILE.CONTROL.CLASS TO 6\r\n\r\n      SAVE.ID.COMPANY = ID.COMPANY\r\n\r\n      GOSUB INITIALISATION   ; * open files etc\r\n\r\n      GOSUB GET.FILE.CLASSIFICATION   ; * get file classification\r\n\r\n      LOOP\r\n         REMOVE K.COMPANY FROM COMPANIES SETTING MORE.COMPANIES\r\n      WHILE K.COMPANY:MORE.COMPANIES\r\n\r\n         IF K.COMPANY NE ID.COMPANY THEN\r\n            CALL LOAD.COMPANY(K.COMPANY)\r\n         END\r\n\r\n         GOSUB COMPANY.INITIALISATION   ; * specific COMPANY initialisation\r\n\r\n         GOSUB PROCESS.FILE   ; * perform required action on company file\r\n\r\n         IF UNAUTH.REQD THEN\r\n            F.FILENAME = F.FILENAME$NAU\r\n            GOSUB PROCESS.FILE   ; * perform required action on company file\r\n         END\r\n\r\n         IF HIST.REQD THEN\r\n            F.FILENAME = F.FILENAME$HIS\r\n            GOSUB PROCESS.FILE   ; * perform required action on company file\r\n         END\r\n\r\n      REPEAT\r\n\r\n      IF ID.COMPANY NE SAVE.ID.COMPANY THEN\r\n         CALL LOAD.COMPANY(SAVE.ID.COMPANY)\r\n      END\r\n\r\n      RETURN\r\n\r\n*-----------------------------------------------------------------------------\r\nPROCESS.FILE:\r\n* perform required action on company specific file\r\n\r\n* do not use EB.READLIST as large volumes can cause hanging\r\n      SELECT F.FILENAME\r\n      END.OF.LIST = 0\r\n\r\n      LOOP\r\n         READNEXT K.ID ELSE END.OF.LIST = 1\r\n      UNTIL END.OF.LIST\r\n\r\n* use READ, not F.READ\r\n         READ R.RECORD FROM F.FILENAME,K.ID THEN\r\n* preform specific file conversion here\r\n\r\n            WRITE R.RECORD ON F.FILENAME,K.ID\r\n\r\n         END\r\n\r\n      REPEAT\r\n\r\n      RETURN\r\n\r\n*-----------------------------------------------------------------------------\r\nCOMPANY.INITIALISATION:\r\n* specific COMPANY initialisation\r\n* open files and read records specific to each company\r\n\r\n      UNAUTH.REQD = 0\r\n      HIST.REQD = 0\r\n\r\n      F.FILENAME = ''\r\n      CALL OPF(ID,F.FILENAME)\r\n\r\n      LOCATE "$NAU" IN R.FILE.CONTROL<SUFFIXES,1> SETTING YPOS THEN\r\n         UNAUTH.REQD = 1\r\n         F.FILENAME$NAU = ''\r\n         ID.NAU = ID:"$NAU"\r\n         CALL OPF(ID.NAU,F.FILENAME$NAU)\r\n      END\r\n\r\n      LOCATE "$HIS" IN R.FILE.CONTROL<SUFFIXES,1> SETTING YPOS THEN\r\n         HIST.REQD = 1\r\n         F.FILENAME$HIS = ''\r\n         ID.HIS = ID:"$HIS"\r\n         CALL OPF(ID.HIS,F.FILENAME$HIS)\r\n      END\r\n\r\n      RETURN\r\n\r\n*-----------------------------------------------------------------------------\r\nGET.FILE.CLASSIFICATION:\r\n* get file classification\r\n* read from FILE.CONTROL and get list of companies to be converted\r\n\r\n      R.FILE.CONTROL = ''\r\n      READ R.FILE.CONTROL FROM F.FILE.CONTROL,PGM.NAME ELSE\r\n         CALL FATAL.ERROR('<<PREFIX>>')\r\n      END\r\n\r\n      CLASSIFICATION = R.FILE.CONTROL<FILE.CONTROL.CLASS>\r\n      CALL GET.CONVERSION.COMPANIES(CLASSIFICATION,PGM.NAME,COMPANIES)\r\n\r\n      RETURN\r\n\r\n*-----------------------------------------------------------------------------\r\nINITIALISATION:\r\n* open files etc\r\n\r\n      PGM.NAME = 'FILENAME'   ; * set the name of the application to be converted\r\n      ID = 'F.':PGM.NAME   ; * set the name of the file to be converted, without prefix\r\n\r\n      RETURN\r\n\r\n   END\r\n
t24.template.system.I_XX.EOD.COMMON.v5=t24.template.system.I_XX.EOD.COMMON.v5<<NR>>I_XX.EOD.COMMON<<NR>>* Version 1 13/04/00  GLOBUS Release No. G14.0.01 14/08/03\r\n*\r\n* Common area for XX.EOD multi-threaded Close of Business job\r\n* This will contain things such as filename, file variables and standard variables.\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n*\r\n*-----------------------------------------------------------------------------\r\n      COMMON /<<PREFIX>>.EOD/ R.EOD.FILE,\r\n         FN.EOD.FILE, F.EOD.FILE\r\n
t24.object.template=*<doc><<OBJ_DESCRIPTION>>\r\n*@public\r\n<<OBJ_LINK>>\r\n<<OBJ_PACKAGE>>\r\n<<OBJ_AUTHOR>>\r\n*</doc>\r\n<<OBJ_DEFFUN>>\r\n
t24.method.template=<<MTH>>\r\n*<doc><<MTH_DESC>>\r\n*@public\r\n<<MTH_PARAM>><<MTH_RETURN>>\r\n<<MTH_LINK>>\r\n<<MTH_PACKAGE>>\r\n<<MTH_AUTHOR>>\r\n*</doc>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Modifications>\r\n***\r\n* Modification History:\r\n*\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Inserts>\r\n***\r\n$INSERT I_COMMON\r\n$INSERT I_EQUATE\r\n<<MTH_INSERT>>\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n!** TODO\r\n    \r\n    RETURN <<MTH_FINAL_RETURN>>\r\nEND\r\n
t24.unittest.template=*-----------------------------------------------------------------------------\r\n      SUBROUTINE <<TESTFILENAME>>\r\n*-----------------------------------------------------------------------------\r\n\r\n*<doc>\r\n*<desc>Enter description here </desc>\r\n*@public\r\n*@link subroutineName\r\n*@author youremail@temenos.com\r\n*</doc>\r\n\r\n*** <region name= Inserts>\r\n*** <desc>Insert files </desc>\r\n\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n\r\n*** </region>\r\n\r\n*** <region name= Process>\r\n*** <desc>Processing </desc>\r\n\r\n    GOSUB initialise\r\n    GOSUB executeTestCases\r\n    RETURN\r\n\r\n*** </region>\r\n \r\n*** <region name= initialise>\r\n    initialise:\r\n*** <desc> </desc>\r\n** TODO Initialisation\r\n\r\n    tResult = ''\r\n    tErrorMessage = ''\r\n    RETURN\r\n\r\n*** </region>\r\n\r\n*** <region name= executeTestCases>\r\n    executeTestCases:\r\n*** <desc> </desc>\r\n \r\n    GOSUB testCase1\r\n    GOSUB testCase2\r\n    RETURN\r\n\r\n*** </region>\r\n\r\n*** <region name= testCase1>\r\n    testCase1:\r\n*** <desc> </desc>\r\n** TODO Initialise expected results\r\n** TODO Invoke the suboutine/function under test here with proper arguments\r\n** TODO Compare the results\r\n** TODO load tResult and tErrorMessage variables\r\n\r\n    tResult = 'passed' ;* Example\r\n\r\n** Build report\r\n\r\n    CALL T24UNIT.BUILD.REPORT(tResult,tErrorMessage)\r\n    RETURN\r\n\r\n*** </region>\r\n\r\n*** <region name= testCase2>\r\n    testCase2:\r\n*** <desc> </desc>\r\n** TODO Initialise expected results\r\n** TODO Invoke the suboutine/function under test here with proper arguments\r\n** TODO Compare the results\r\n** TODO load tResult and tErrorMessage variables\r\n\r\n    tResult = 'failed' ;* Example\r\n    tErrorMessage = 'Not yet implemented' ;* Example\r\n\r\n** Build report\r\n\r\n    CALL T24UNIT.BUILD.REPORT(tResult,tErrorMessage)\r\n    RETURN\r\n\r\n*** </region>\r\n\r\nEND\r\n\r\n
t24.template.system.Table.addAmountField.v5=t24.template.system.Table.addAmountField.v5<<NR>>Table.addAmountField<<NR>>*-----------------------------------------------------------------------------\r\n * <Rating>-11</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addAmountField(fieldName, currencyFieldName,args, neighbour)\r\n *----------------------------------------------------------------------------- \r\n* <doc> \r\n* Adds and amount field to the application. Amoutns are held by currency for validation\r\n * and formatting - this requires that the name of the field that is used to hold the currency\r\n * is supplied in the currencyFieldName parameter. \r\n* @param fieldName  The name of the field to add. The old "F" array item\r\n * @param currencyFieldName  The name of the field that holds the currency that the amount is held in\r\n * @param args		Any arguments (mandatory, no input, etc.) \r\n* @param neighbour  Reserved for future use. \r\n* @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @component Contract \r\n* @link I_DataTypes \r\n* </doc> \r\n$INSERT I_COMMON\r\n $INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n 	CALL Table.processArgs(args, nArrayItem, tArrayItem)\r\n    CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n  \r\n   RETURN\r\n  \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n* \r\n* Find the field position of the currency field by looping through the F array\r\n * \r\n   ccyFieldNumber = 0\r\n    i = 1 \r\n   LOOP \r\n   UNTIL F(i) = '' OR ccyFieldNumber <> 0 OR currencyFieldName = ''\r\n  \r\n      BEGIN CASE\r\n          CASE F(i) = currencyFieldName\r\n             ccyFieldNumber = i \r\n         CASE F(i)[4,99] = currencyFieldName\r\n             ccyFieldNumber = i \r\n         CASE F(i)[7,99] = currencyFieldName\r\n             ccyFieldNumber = i \r\n      END CASE \r\n      i ++; \r\n \r\n   REPEAT\r\n  \r\n   nArrayItem = "19"\r\n    tArrayItem = "AMT" \r\n   IF ccyFieldNumber THEN \r\n      tArrayItem<2,2> = ccyFieldNumber\r\n    END \r\n   RETURN \r\n
 t24.template.system.Table.addDeliveryReferenceField.v5=t24.template.system.Table.addDeliveryReferenceField.v5<<NR>>Table.addDeliveryReferenceField<<NR>>*-----------------------------------------------------------------------------\r\n * <Rating>-10</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addDeliveryReferenceField(neighbour) \r\n*-----------------------------------------------------------------------------\r\n * <doc> \r\n* Adds a standard delivery reference field to the application.\r\n * @param neighbour  Reserved for future use. \r\n* @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @component Contract \r\n* </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n 		 \r\n   CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n     \r\n   RETURN\r\n  \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n   fieldName = "XX.DELIVERY.REF"\r\n    nArrayItem = "35" \r\n   tArrayItem = "" \r\n   tArrayItem<3> = 'NOINPUT'\r\n    neighbour = "" \r\n    \r\n   RETURN\r\n 
t24.template.system.Table.addLocalReferenceField.v5=t24.template.system.Table.addLocalReferenceField.v5<<NR>>Table.addLocalReferenceField<<NR>>*----------------------------------------------------------------------------- \r\n* <Rating>-10</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addLocalReferenceField(neighbour) \r\n* <doc> \r\n* Adds a local reference field to the application\r\n * @param neighbour  Reserved for future use. \r\n* @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @component Contract \r\n* </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n$INSERT I_DataTypes \r\n$INSERT I_Table \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n \r\n   CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n    IF checkFileItem THEN \r\n      CALL Field.setCheckFile(checkFileItem)\r\n    END \r\n   RETURN \r\n \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n   fieldName = "XX.LOCAL.REF"\r\n    nArrayItem = "35" \r\n   tArrayItem = "A" \r\n   checkFileItem = '' \r\n   neighbour = "" \r\n   RETURN \r\n
t24.template.system.Table.addOptionsField.v5=t24.template.system.Table.addOptionsField.v5<<NR>>Table.addOptionsField<<NR>>*-----------------------------------------------------------------------------\r\n  <Rating>-10</Rating> \r\n-----------------------------------------------------------------------------\r\n   SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addOptionsField(fieldName, options, args, neighbour) \r\n <doc> \r\n Adds a field with a pre-defined list of options\r\n @param fieldName The name of the field to add.  Same as Table.addField\r\n @param options	The list of valid options, delimited by _ \r\n@param args	Any arguments to be used. Same as Table.addField \r\n@param neighbour Reserved for future use \r\n* @author tcoleman@temenos.com \r\n@public Application Development \r\n @component Contract \r\n </doc> \r\n-----------------------------------------------------------------------------\r\nINSERT I_COMMON \r\n$INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n \r\n   GOSUB setFieldType\r\n    CALL Table.processArgs(args, nArrayItem, tArrayItem)\r\n    CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n  \r\n   RETURN\r\n \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n   nArrayItem = "35"\r\n    tArrayItem = "" \r\n   tArrayItem<2> = options\r\n    RETURN \r\n
t24.template.system.Table.addOverrideField.v5=t24.template.system.Table.addOverrideField.v5<<NR>>Table.addOverrideField<<NR>>*-----------------------------------------------------------------------------\r\n * <Rating>-10</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addOverrideField \r\n*-----------------------------------------------------------------------------\r\n * <doc> \r\n* Adds an override field to the application\r\n * @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @component Contract \r\n* </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n 		 \r\n   CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n     \r\n   RETURN\r\n  \r\n \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n   fieldName = "XX.OVERRIDE"\r\n    nArrayItem = "35" \r\n   tArrayItem = "" \r\n   tArrayItem<3> = 'NOINPUT'\r\n    neighbour = "" \r\n   \r\n   RETURN\r\n 
t24.template.system.Table.addReservedField.v5=t24.template.system.Table.addReservedField.v5<<NR>>Table.addReservedField<<NR>>*-----------------------------------------------------------------------------\r\n * <Rating>-10</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addReservedField(fieldName) \r\n* <doc> \r\n* Adds a reserved field to the application\r\n * @param	fieldName The name of the reserved field to add. Must be unique.\r\n *----------------------------------------------------------------------------- \r\n* </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n$INSERT I_Table \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n 		 \r\n   CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n     \r\n   RETURN\r\n  \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n    \r\n   nArrayItem = "35"\r\n    tArrayItem = "" \r\n   tArrayItem<3> = 'NOINPUT'\r\n    neighbour = "" \r\n    \r\n   RETURN\r\n 
t24.template.system.Table.addStatementNumbersField.v5=t24.template.system.Table.addStatementNumbersField.v5<<NR>>Table.addStatementNumbersField<<NR>>*-----------------------------------------------------------------------------\r\n * <Rating>-10</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addStatementNumbersField(neighbour) \r\n* <doc> \r\n* Adds a statement numbers field to the application\r\n * @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @package core.infra.contract \r\n* @param neighbour (optional) Reserved for future used.\r\n * </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n  \r\n   GOSUB setFieldType\r\n 		 \r\n   CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n     \r\n   RETURN\r\n  \r\n*-----------------------------------------------------------------------------\r\n setFieldType: \r\n   fieldName = "XX.STMT.NOS"\r\n    nArrayItem = "35" \r\n   tArrayItem = "" \r\n   tArrayItem<3> = 'NOINPUT'\r\n   \r\n     \r\n    \r\n   RETURN\r\n 
t24.template.system.Table.addVirtualTableField.v5=t24.template.system.Table.addVirtualTableField.v5<<NR>>Table.addVirtualTableField<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\nSUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addVirtualTableField(fieldName, table,args, neighbour) \r\n* <doc>\r\n* Adds a field with a virtual table to the application. The virtual table is defined in EB.LOOKUP.\r\n* This is used to create a field with a finite list of options, but where the list of options\r\n* needs to be configurable, e.g. title (Mr. Mrs. etc.)\r\n* @author tcoleman@temenos.com\r\n* @public Application Development\r\n* @component Contract\r\n* @param fieldName The name of the field to add\r\n* @param table The name of the virtual table. As defined in EB.LOOKUP.\r\n* @param args (optional) Additional arguments (mandatory, noinput, etc.)\r\n* @param neighbour (optional) Reserved for future used.\r\n* @link Table.addField\r\n* @link EB.LOOKUP\r\n* </doc> \r\n$INSERT I_COMMON\r\n $INSERT I_EQUATE \r\n \r\n   CALL EB.LOOKUP.LIST(table)\r\n    tArrayItem = table \r\n   nArrayItem = '35' \r\n   CALL Table.processArgs(args, nArrayItem, tArrayItem)\r\n    CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n  \r\nRETURN\r\n
t24.template.system.Table.addYesNoField.v5=t24.template.system.Table.addYesNoField.v5<<NR>>Table.addYesNoField<<NR>>*----------------------------------------------------------------------------- \r\n* <Rating>-11</Rating> \r\n*-----------------------------------------------------------------------------\r\n     SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addYesNoField(fieldName, args, neighbour) \r\n* <doc> \r\n* Adds a simple field that only holds YES or blank.\r\n * @author tcoleman@temenos.com \r\n* @public Application Development \r\n* @component Contract \r\n* @param fieldName The name of the field to add\r\n * @param args (optional) Additional arguments (mandatory, noinput, etc.)\r\n * @param neighbour (optional) Reserved for future used. \r\n* @link Table.addField \r\n* </doc> \r\n*-----------------------------------------------------------------------------\r\n     $INSERT I_COMMON \r\n    $INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n      \r\n    GOSUB setFieldType\r\n     CALL Table.processArgs(args, nArrayItem, tArrayItem)\r\n     CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n      \r\n    RETURN\r\n      \r\n*-----------------------------------------------------------------------------\r\n setFieldType:  \r\n    nArrayItem = "3"\r\n     tArrayItem = "" \r\n    tArrayItem<2> = 'YES_'\r\n      \r\n*TODO handle args\r\n      \r\nRETURN\r\n 
t24.template.system.Table.defineIdProperties.v5=t24.template.system.Table.defineIdProperties.v5<<NR>>Table.defineIdProperties<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-2</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.defineIdProperties(idName, dataType)\r\n*-----------------------------------------------------------------------------\r\n * <doc>\r\n * @param idName The name of the key. The old "ID.F" array item\r\n * @param dataType The data type of the key\r\n * @public Table Creation\r\n * </doc>\r\n*--------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_DataTypes\r\n*-----------------------------------------------------------------------------\r\n    ID.F = idName\r\n    ID.CONCATFILE = ''        ;* initialsie\r\n\r\n    LOCATE dataType IN DataType.list<1> SETTING fieldTypePos THEN\r\n        ID.N = DataType.nArrays<fieldTypePos>\r\n        ID.T = RAISE(DataType.tArrays<fieldTypePos>)\r\n    END ELSE\r\n        ID.N = dataType<2>    ;* might be like 16.1\r\n        ID.T = RAISE(dataType<3>)       ;* might set ID.T like ID.T = '' ; ID.T<2> = 'SYSTEM'\r\n    END\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nEND\r\n
t24.template.system.Table.processArgs.v5=t24.template.system.Table.processArgs.v5<<NR>>Table.processArgs<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-4</Rating>\r\n*-----------------------------------------------------------------------------\r\nSUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.processArgs(args, nArrayItem, tArrayItem) \r\n* <doc> \r\n* @param nArrayItem  The N array item to process\r\n * @param tArrayItem  The F array item to process \r\n* @param args  Any arguments (mandatory, no input, etc.)\r\n * </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n$INSERT I_Table\r\n$INSERT I_DataTypes\r\n *-----------------------------------------------------------------------------\r\n \r\nCONVERT ',' TO FM IN args\r\n  \r\n   LOOP\r\n       REMOVE arg FROM args SETTING argMark\r\n    WHILE arg : argMark \r\n \r\n      BEGIN CASE\r\n          CASE ',':arg = Field_NoChange OR ',':arg = Field_NoInput\r\n             tArrayItem<3> = arg \r\n         CASE ',':arg = Field_Mandatory\r\n             nArrayItem := '.1'\r\n         CASE ',':arg = Field_AllowNegative ; * Should only be for amounts really\r\n          tArrayItem<2,1> = '-'    \r\n         CASE ',':arg = Field_Unique ; * Needs to do a call to DUP\r\n             Table.validationFields<1,-1> = Table.currentFieldPosition \r\n         CASE ',':arg = Field_NoNulls ; * Needs to do a call to FT.NULLS.CHECK\r\n             Table.validationFields<2,-1> = Table.currentFieldPosition \r\n      END CASE \r\n \r\n \r\n   REPEAT\r\n  \r\n   RETURN\r\n
t24.template.system.Table.setAttributeOnFields.v5=t24.template.system.Table.setAttributeOnFields.v5<<NR>>Table.setAttributeOnFields<<NR>> *-----------------------------------------------------------------------------\r\n * <Rating>-2</Rating> \r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.setAttributeOnFields(attribute, fieldList) \r\n \r\n*-----------------------------------------------------------------------------\r\n * <doc> \r\n* Routine to set a number of fields to be NOINPUT, NOINPUT or iputtable.\r\n * Loops through each field in fieldList and sets the atribute in the third field of the T array.\r\n * @public Application Development \r\n* @component Contract \r\n* @param attribute The attribute to set. One of NOINPUT, NOCHANGE or ""\r\n * @param fieldList The list of fields to set the attribute on. These are field numbers\r\n * </doc> \r\n*-----------------------------------------------------------------------------\r\n $INSERT I_COMMON \r\n$INSERT I_EQUATE \r\n*-----------------------------------------------------------------------------\r\n    LOOP \r\n      REMOVE field FROM fieldList SETTING fieldMark\r\n    WHILE field : fieldMark \r\n      T(field)<3> = attribute ; * NOINPUT, NOCHANGE\r\n    REPEAT \r\n   RETURN \r\n
t24.template.system.Table.setTriggerField.v5=t24.template.system.Table.setTriggerField.v5<<NR>>Table.setTriggerField<<NR>> *-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\n   SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.setTriggerField(field, inputs, noinputs) \r\n* <doc> \r\n* Designates a specifc field as a triger field, e.g. OPERATION\r\n * Only one trigger field may be defined per Table. \r\n* @param field The field number to set as a trigger field.\r\n * @param inputs The list of fields that will be made inputtable\r\n * @param noinputs The list of fields that will be made noinput \r\n* @link Table \r\n* @author tcoleman@temenos.com\r\n* @public Application Development\r\n* @component Contract \r\n* @uses E \r\n* @uses ETEXT \r\n* </doc> \r\n$INSERT I_COMMON\r\n $INSERT I_EQUATE \r\n$INSERT I_Table \r\n   Table.triggerField = field\r\n    Table.noInputFields = noinputs\r\n    Table.inputtableFields = inputs \r\n   RETURN \r\n
t24.template.system.Field.setCheckFile.v5=t24.template.system.Field.setCheckFile.v5<<NR>>Field.setCheckFile<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.Field.setCheckFile(tableName)\r\n*\r\n* Turn tableName into a checkfile argument using the default\r\n* enrichment field set on standard selection\r\n*\r\n* Modification History:\r\n*-----------------------------------------------------------------------------\r\n* 10/08/07 - EN_10003538\r\n*            Creation\r\n*\r\n* 03/12/07 - BG_100015805\r\n*            Enrichment doesn't appear when Default enrichment is blank\r\n*\r\n* 27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*\r\n*-----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_Table\r\n    $INSERT I_F.STANDARD.SELECTION\r\n\r\n    rStandardSelection = ''\r\n    CALL GET.STANDARD.SELECTION.DETS(tableName, rStandardSelection)\r\n    enrichFieldName = rStandardSelection<SSL.DEFAULT.ENRICH>\r\n    enrichmentField = 0\r\n    LOCATE enrichFieldName IN rStandardSelection<SSL.SYS.FIELD.NAME,1> SETTING pos THEN\r\n        enrichmentField = rStandardSelection<SSL.SYS.FIELD.NO,pos>\r\n    END\r\n    IF NOT(enrichmentField) THEN\r\n        enrichmentField = 1\r\n    END\r\n\r\n    checkFileitem = tableName\r\n\r\n    CHECKFILE(Table.currentFieldPosition) = checkFileitem : FM : enrichmentField\r\n    RETURN\r\n
t24.template.system.Table.addField.v5=t24.template.system.Table.addField.v5<<NR>>Table.addField<<NR>> *-----------------------------------------------------------------------------\r\n* <Rating>-20</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.addField(fieldName, fieldType, args, neighbour)\r\n*-----------------------------------------------------------------------------\r\n* <doc>\r\n* Adds a standard field to the application. The standard field types\r\n* are defined in I_DataTypes along with the arguments.\r\n* @param fieldName  The name of the field to add. The old "F" array item\r\n* @param fieldType  The standard T24 data type of the field\r\n* @param args  Any arguments (mandatory, no input, etc.)\r\n* @param neighbour  Reserved for future use.\r\n* @author tcoleman@temenos.com\r\n* @public Application Development\r\n* @component Contract\r\n* @link I_DataTypes\r\n* </doc>\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n* --------------------\r\n*  EN_10003543\r\n*  Creation.\r\n*\r\n* 27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*            Gosub processArgs changed to call Table.processArgs\r\n*\r\n*-----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_DataTypes\r\n    $INSERT I_Table\r\n*-----------------------------------------------------------------------------\r\n    GOSUB init\r\n\r\n    GOSUB findFieldType\r\n\r\n    CALL Table.processArgs(args, nArrayItem, tArrayItem)\r\n    CALL Table.addFieldDefinition(fieldName, nArrayItem, tArrayItem,neighbour)\r\n    IF checkFileItem THEN\r\n        CALL Field.setCheckFile(checkFileItem)\r\n    END\r\n    RETURN\r\n\r\n*-----------------------------------------------------------------------------\r\nfindFieldType:\r\n    nArrayItem = ""\r\n    tArrayItem = ""\r\n    checkFileItem = ''\r\n\r\n\r\n    LOCATE fieldType IN DataType.list<1> SETTING fieldTypePos THEN\r\n       nArrayItem = DataType.nArrays<fieldTypePos>\r\n        tArrayItem = RAISE(DataType.tArrays<fieldTypePos>)\r\n        checkFileItem = RAISE(DataType.checkFiles<fieldTypePos>)\r\n    END\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\ninit:\r\n\r\n    IF NOT(DataType.list) THEN\r\n        CALL Table.loadFieldTypes\r\n    END\r\n\r\n    RETURN\r\n
t24.template.system.Table.defineId.v5=t24.template.system.Table.defineId.v5<<NR>>Table.defineId<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>0</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.defineId(idName, dataType)\r\n*-----------------------------------------------------------------------------\r\n* <doc>\r\n* @param idName The name of the key. The old "ID.F" array item\r\n* @param dataType The data type of the key\r\n* @public Table Creation\r\n* </doc>\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n* --------------------\r\n*  EN_10003543\r\n*  Creation.\r\n*\r\n*  27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*             Allow custom ID definition by calling defineIdProperties\r\n*\r\n*----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_DataTypes\r\n*-----------------------------------------------------------------------------\r\n    CALL Table.defineIdProperties(idName, dataType)\r\n\r\n    RETURN\r\n
t24.template.system.Table.setAuditPosition.v5=t24.template.system.Table.setAuditPosition.v5<<NR>>Table.setAuditPosition<<NR>> *-----------------------------------------------------------------------------\r\n* <Rating>-14</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.setAuditPosition\r\n*-----------------------------------------------------------------------------\r\n* <doc>\r\n* Sets the position of the audit fields when defining the field definitions for a table.\r\n* @author tcoleman@temenos.com\r\n* @public Application Development\r\n* @component Contract\r\n* @use V\r\n* @link     Table\r\n* @link  MATRIX.UPDATE\r\n* @stereotype subroutine\r\n* </doc>\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n* --------------------\r\n*\r\n*  27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*             For live templates offset set to 0\r\n*\r\n*----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_Table\r\n\r\n    offSet = 9      ;* Set this by the type of the table....\r\n    IF Table.stereotype = 'L' THEN\r\n        offset = 0\r\n    END\r\n    IF NOT(Table.currentFieldPosition) THEN\r\n        GOSUB findCurrentPosition\r\n    END\r\n    V = Table.currentFieldPosition + offSet\r\n    CALL ADD.COMMON.FIELDS\r\n    Table.auditFieldsAdded  = 1         ;* So that MATRIX.UPDATE doesn't do it twice\r\n    Table.currentFieldPosition = Table.currentFieldPosition + offSet  ;* So the next field is after the audit fields...\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nfindCurrentPosition:\r\n* Loop through the F array until it is blank to find the last position\r\n    Table.currentFieldPosition = 1\r\n    LOOP\r\n\r\n    UNTIL F(Table.currentFieldPosition) = ''\r\n        Table.currentFieldPosition +=1\r\n    REPEAT\r\n\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\n
t24.template.system.TableUtil.loadFieldTypes.v5=t24.template.system.TableUtil.loadFieldTypes.v5<<NR>>TableUtil.loadFieldTypes<<NR>>*-----------------------------------------------------------------------------\r\n* <Rating>-64</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>.Util.loadFieldTypes\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n* --------------------\r\n*  EN_10003543\r\n*  Creation.\r\n*\r\n* 13/11/07 - BG_100015805\r\n*            Incorrect customer and account field lengths\r\n*\r\n* 24/01/08 - BG_100016792\r\n*            New data type T24.TEXT.WIDE introduced\r\n*\r\n* 27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*            New data type T24.INTERNAL.ACCOUNT added\r\n*\r\n* 19/09/08 - BG_100020031\r\n*            Change the datatype for T24.ACCOUNT\r\n*            REF:TTS0803495\r\n*\r\n*----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_DataTypes\r\n    $INSERT I_F.EB.OBJECT\r\n\r\n    IF NOT(DataType.list) THEN\r\n        GOSUB init\r\n        GOSUB loadFieldTypes\r\n    END\r\n\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\ninit:\r\n    DataType.list = ''\r\n    DataType.nArrays = ''\r\n    DataType.tArrays = ''\r\n    DataType.checkFiles = ''\r\n    typePos = 0\r\n\r\n    GOSUB loadBasicTypes\r\n\r\n    FN.EB.OBJECT = 'F.EB.OBJECT'\r\n    F.EB.OBJECT = ''\r\n    CALL OPF(FN.EB.OBJECT,F.EB.OBJECT)\r\n\r\n    SELECT.STATEMENT = 'SELECT ':FN.EB.OBJECT\r\n    EB.OBJECT.LIST = ''\r\n\r\n    CALL EB.READLIST(SELECT.STATEMENT,EB.OBJECT.LIST,'','','')        ;* TODO replace with DAS\r\n\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nloadFieldTypes:\r\n\r\n    LOOP\r\n        REMOVE EB.OBJECT.ID FROM EB.OBJECT.LIST SETTING EB.OBJECT.MARK\r\n    WHILE EB.OBJECT.ID : EB.OBJECT.MARK\r\n        CALL CACHE.READ('F.EB.OBJECT',EB.OBJECT.ID,R.EB.OBJECT,YERR)\r\n        GOSUB addType\r\n    REPEAT\r\n\r\n\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nloadBasicTypes:\r\n*\r\n* Load the basic types that we always want to be available\r\n*  T24_String TO 'T24.STRING'\r\n*  T24_BigString TO 'T24.BIG.STRING'\r\n*  T24_Text TO 'T24.TEXT'\r\n*  T24_TextWide TO 'T24.TEXT.WIDE'\r\n*  T24_Numeric TO 'T24.NUMERIC'\r\n*  T24_Date TO 'T24.DATE'\r\n*  T24_Portfolio TO 'T24.PORTFOLIO'\r\n*  T24_Account TO 'T24.ACCOUNT'\r\n*  T24_Customer TO 'T24.CUSTOMER'\r\n*\r\n    id = "T24.STRING"\r\n    length = 35\r\n    type = "A"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.BIG.STRING"\r\n    length = 50\r\n    type = "A"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.TEXT"\r\n    length = 35\r\n    type = "A"\r\n    type<7> = "TEXT"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.TEXT.WIDE"\r\n    length = 80\r\n    type = "A"\r\n    type<7> = "TEXT"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n\r\n    id = "T24.NUMERIC"\r\n    length = 35\r\n    type = ""\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.DATE"\r\n    length = 11\r\n    type = "D"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.PORTFOLIO"\r\n    length = 35\r\n    type = "SAM"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.ACCOUNT"\r\n    length = 19\r\n    type = "ANT"    ;*change the datatype from ACC to ANT\r\n    file = 'ACCOUNT'\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.INTERNAL.ACCOUNT"\r\n    length = 35\r\n    type = "ANT"\r\n    file = 'ACCOUNT'\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.CUSTOMER"\r\n    length = 10\r\n    type = "CUS"\r\n    file = 'CUSTOMER'\r\n    GOSUB addBasicType\r\n\r\n    id = "T24.FREQUENCY"\r\n    length = 16\r\n    type = "FQU"\r\n    file = ''\r\n    GOSUB addBasicType\r\n\r\n\r\n\r\n    RETURN\r\n*\r\n*-----------------------------------------------------------------------------\r\n*\r\naddBasicType:\r\n    typePos +=1\r\n    DataType.list<typePos> = id\r\n    DataType.nArrays<typePos> = length\r\n    DataType.tArrays<typePos> = LOWER(type)\r\n    DataType.checkFiles<typePos> = file\r\n    RETURN\r\n\r\n*\r\n*-----------------------------------------------------------------------------\r\n*\r\naddType:\r\n    typePos +=1\r\n    DataType.list<typePos> = EB.OBJECT.ID\r\n    DataType.nArrays<typePos> = R.EB.OBJECT<EB.OBJ.MAX.LENGTH>\r\n    DataType.tArrays<typePos> = LOWER(R.EB.OBJECT<EB.OBJ.VAL.ROUTINE>[4,99])    ;* Ignore the IN2 part...\r\n    DataType.checkFiles<typePos> = R.EB.OBJECT<EB.OBJ.CHECKFILE>\r\n    RETURN\r\n*-----------------------------------------------------------------------------\r\nEND\r\n
t24.template.system.THE.TEMPLATE.v5=t24.template.system.THE.TEMPLATE.v5<<NR>>THE.TEMPLATE<<NR>>\r\n\r\n* Version 9 15/11/00  GLOBUS Release No. G11.1.01 11/12/00\r\n*-----------------------------------------------------------------------------\r\n* <Rating>-307</Rating>\r\n*-----------------------------------------------------------------------------\r\n    SUBROUTINE <<PREFIX>>.<<TEMPLATE_NAME>>\r\n******************************************************************\r\n* Core template routine that is called BY all new applications\r\n* which are based on BLANK.TEMPLATE. This routine runs the application by calling\r\n* all the associated routines like <APPL.NAME>.FIELDS,<APPL.NAME>.ID,\r\n* <APPL.NAME>.VALIDATE, etc... based on the values set in the array C_METHODS\r\n* inside the application routine.\r\n*\r\n* Some behaviour is also defined in the C_PROPERTIES array\r\n*\r\n* @see BLANK.TEMPLATE\r\n* @see TEMPLATE.FIELDS\r\n* @see I_METHODS.AND.PROPERTIES\r\n*\r\n* Allows actions to be run against a template similar to the V function\r\n* Identified as an M(Method) function\r\n* but without the display management\r\n* this will allow standard validation and construction of R.NEW etc\r\n* An Action is run as FUNCTION = M\r\n* If Function = M then V$ACTION must be defined. This will be picked\r\n* up from RECORDID.FUNCTION\r\n*\r\n* @author Tony Coleman\r\n*-----------------------------------------------------------------------------\r\n* Modifications:\r\n*-----------------------------------------------------------------------------\r\n* 15/03/06 - EN_10002859 - New Template Programming - Tony Coleman\r\n*            Creation\r\n*            Ref:SAR-2006-03-07-0001\r\n*\r\n* 10/05/06 - BG_100010883\r\n*            Additions / changes:\r\n*            1. Operations processing\r\n*            2. Default method added\r\n*            3. CROSSVAL method renamed to VALIDATE\r\n* 29/09/06 - BG_100012146\r\n*            For blocked functions, template throws error message and allows us to proceed.\r\n*\r\n* 12/01/07 - EN_10003196\r\n*            Add M function to the Template\r\n*\r\n* 13/03/07 - BG_100013344\r\n*            In GTS show the actual error message\r\n*\r\n* 08/07/07 - BG_100014560\r\n*            If GTSERROR is set we should use this to return the error\r\n*\r\n* 28/07/07 - EN_10003420\r\n*            Remove the code for ACTION related update to ACTION.RECORD.WRITE\r\n*\r\n* 22/08/07 - BG_100014957\r\n*            User can reverse a record in a V4 template application\r\n*            despite this being a blocked function.\r\n*\r\n* 19/10/07 - EN_10003543\r\n*            New template changes\r\n*\r\n* 02/11/07 - BG_100015676\r\n*            AA Product condition problem with new template changes\r\n*\r\n* 07/11/07 - BG_100015736\r\n*            1. Added the missing code for AA functionality in the new template.\r\n*            2. Do the field defintions every time.\r\n*\r\n* 09/05/08 - BG_100018407\r\n*            Allow workfiles to have overrides.\r\n*\r\n* 27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*            Clear common variables to do MATRIX.UPDATE properly for next template\r\n*\r\n* 12/03/09 - BG_100022634\r\n*            Allow verify 'V' function by checking OS.GET.VERIFY.APPS\r\n*\r\n* 01/07/09 - BG_100024338\r\n*            Fields to reflect logical order\r\n*\r\n* 20/07/09 - BG_100024579\r\n*            Enabled .PREVIEW method in the template\r\n*            REF:TTS0908460\r\n*-----------------------------------------------------------------------------\r\n    $INSERT I_COMMON\r\n    $INSERT I_EQUATE\r\n    $INSERT I_F.OFS.SOURCE\r\n    $INSERT I_F.OFS.STATUS.FLAG\r\n    $INSERT I_GTS.COMMON\r\n    $INSERT I_Table\r\n    $INSERT I_DataTypes\r\n*-----------------------------------------------------------------------------\r\n    GOSUB init      ;* Calls the .FIELDS routine if required.\r\n\r\n*For people who use neighbours read this:\r\n\r\n\r\n*The whole stuff works that when it comes to core display/INPUT routines we use logical order for F/T/N/R.NEW/R.OLD but when we hand over to application routines\r\n*the physical unauth stuff etc. we show the logical orders.\r\n*physical order - is what is written on the disk i.e. the position as per the layout\r\n*logical order - is what you want to see in the screen and in the programs etc.\r\n*V will be the actual number of fields when the control is in core (i.e. MATRIX.ALTER/MATRIX.UPDATE/T.FIELD.INPUT etc.(\r\n*V will be the acutal AUDIT.DATE.TIME when the control is in application/unauth.record.write/auth.record.write because we do that V-3,V-9 etc.\r\n\r\n\r\n    IF LEN(V$FUNCTION) <= 1 THEN        ;* If we only want the field definition part, length of function is greater than one\r\n*\r\n* [REFACTOR] - We might be able to not call MATRIX.UPDATE if the we are using the same VERSION in the same\r\n* COMPANY - but this is one for the future.\r\n        GOSUB ARRANGE.LIST    ;*Arrange the Table.orderFieldList properly to reflect logical order\r\n        GOSUB LOGICAL.FIELDS  ;*Go and get the F/N/T etc. in logical order for MATRIX.UPDATE to set T.FIELDNO\r\n        CALL MATRIX.UPDATE\r\n        GOSUB PHYSICAL.FIELDS ;*Let us go back and reflect the physical order as we are into hooks\r\n        GOSUB MAIN.LOOP       ;* The main processing loop\r\n    END\r\n\r\n    Table.lastApplication = Table.name  ;* so that we can check if we re-run the last application.\r\n    Table.lastCompany = ID.COMPANY      ;* so we don't have to call MATRIX.ALTER again if same company and same application\r\n    Table.name = '' ;* All done here...\r\n\r\n*Table.currentFieldPosition = ''     ;* clear the common variables so that MATRIX.UPDATE is done correctly for next template\r\n\r\n    RETURN          ;* From main program\r\n\r\n*************************************************************************\r\n*                      S u b r o u t i n e s                            *\r\n*************************************************************************\r\n* <sub>\r\n* Initialisation routine. Takes care of some items that were previously in every .FIELDS routine.\r\n* </sub>\r\ninit:\r\n    ERROR.FLAG = 0  ;* Our controlling flag for error processing\r\n*\r\n* If we are using the newer "Object Based" templates then set the methods array from there\r\n*\r\n    IF NOT(Table.name) THEN\r\n        CALL TableUtil.fromMethods\r\n    END\r\n    IF NOT(Table.name) THEN\r\n        TEXT = "Required initialisation not correct."\r\n        CALL FATAL.ERROR("THE.TEMPLATE")\r\n    END\r\n*\r\n* If we are the same application as last time, then we do not need to clear the arrays and reload the field definitions.\r\n* This especially helps with data take on and where we have EB.LOOKUPs defined.\r\n*\r\n* For now we load the fields everytime and do not care about what Table.lastApplication is.\r\n*\r\n    DIM SAVE.F(C$SYSDIM)\r\n    DIM SAVE.N(C$SYSDIM)\r\n    DIM SAVE.T(C$SYSDIM)\r\n    DIM SAVE.CHECKFILE(C$SYSDIM)\r\n    DIM SAVE.CONCATFILE(C$SYSDIM)\r\n    DIM SAVE.R.NEW(500)\r\n    DIM SAVE.R.NEW.LAST(500)\r\n    DIM SAVE.R.OLD(500)\r\n\r\n    Physical.fieldOrderList = ''\r\n    MAT SAVE.R.NEW = ''\r\n    MAT SAVE.R.NEW.LAST = '\r\n'    MAT SAVE.R.OLD = ''\r\n    MAT SAVE.CHECKFILE = ''\r\n    MAT SAVE.CONCATFILE = ''\r\n    MAT SAVE.F = ''\r\n    MAT SAVE.T  = ''\r\n    MAT SAVE.N = ''\r\n\r\n\r\n    IF Table.name <> '' THEN  ;* if Table.name is set\r\n        Table.auditFieldsAdded = ''\r\n        Table.currentFieldPosition = ''\r\n        Table.validationFields = ''\r\n        MAT Table.fieldNeighbourArray = ''\r\n        Table.triggerField = ''\r\n        Table.noInputFields = ''\r\n        Table.inputtableFields = ''\r\n        Table.orderedFieldList = ''\r\n        Table.defaultFieldNumbers = ''\r\n        Table.defaultFieldValues = ''\r\n        MAT F = ""\r\n        MAT N = ""\r\n        MAT T = ""\r\n        MAT CHECKFILE = ""\r\n        MAT CONCATFILE = ""\r\n        ID.CHECKFILE = ""\r\n        ID.CONCATFILE = ""\r\n\r\n        IF NOT(DataType.list) THEN\r\n            CALL TableUtil.loadFieldTypes\r\n        END\r\n\r\n        GOSUB DO.INITIALISE   ;* Initialisation\r\n        GOSUB DO.FIELDS       ;* Field definitions\r\n\r\n    END\r\n    BROWSER.PREVIEW.ON = (OFS$MESSAGE='PREVIEW')  ;* Set when preview icon is clicked from Browser\r\n\r\n    RETURN\r\n*** <region name= Process Fields>\r\n***\r\nPROCESS.FIELDS:\r\n*   Input or display the record fields.\r\n    LOOP\r\n        BEGIN CASE\r\n        CASE Table.stereotype = 'T'     ;* Table applications go a completely different route!\r\n            CALL TABLE.DISPLAY\r\n*\r\n**  for actions we don't need a display at all\r\n**  Should not call field display at all\r\n*\r\n        CASE V$ACTION\r\n            MESSAGE = "METHOD"\r\n        CASE SCREEN.MODE EQ 'MULTI'\r\n            IF FILE.TYPE EQ 'I' THEN\r\n                CALL FIELD.MULTI.INPUT\r\n            END ELSE\r\n                CALL FIELD.MULTI.DISPLAY\r\n            END\r\n        CASE OTHERWISE\r\n            IF FILE.TYPE EQ 'I' THEN\r\n                CALL FIELD.INPUT\r\n            END ELSE\r\n                CALL FIELD.DISPLAY\r\n            END\r\n        END CASE\r\n    WHILE NOT(MESSAGE)\r\n\r\n        IF T.SEQU NE '' THEN\r\n            T.SEQU<-1> = A + 1\r\n        END\r\n\r\n    REPEAT\r\n\r\n    RETURN\r\n*** </region>\r\n*************************************************************************\r\n*** <region name= Process Message>\r\n***\r\nPROCESS.MESSAGE:\r\n* Processing after exiting from field input - i.e. at commit time\r\n\r\n    IF BROWSER.PREVIEW.ON THEN          ;* when Delivery preview option is clicked\r\n        MESSAGE = "PREVIEW"   ;* Set Message to PREVIEW\r\n        BROWSER.PREVIEW.ON = 0          ;* Do it once\r\n    END\r\n\r\n\r\n    IF MESSAGE = 'DEFAULT' THEN         ;* Default processing invokes crossval and then comes back\r\n        MESSAGE = 'ERROR'     ;* Force the processing back\r\n        IF V$FUNCTION <> 'D' AND V$FUNCTION <> 'R' THEN\r\n            GOSUB DO.DEFAULT\r\n        END\r\n    END\r\n\r\n    IF MESSAGE = 'PREVIEW' THEN         ;* Delivery preview\r\n        MESSAGE = 'ERROR'     ;* Force the processing back\r\n        IF V$FUNCTION <> 'D' AND V$FUNCTION <> 'R' THEN\r\n            GOSUB DO.VALIDATE\r\n            IF NOT(ERROR.FLAG) THEN\r\n                GOSUB DO.PREVIEW        ;* Activate print preview\r\n            END\r\n        END\r\n    END\r\n*\r\n* Commit processing on input functions (I,C,D,R etc.)\r\n*\r\n** Actions could require overrides\r\n** DO.PROCESS should actually invoke the main action process\r\n*\r\n    IF MESSAGE = 'METHOD' THEN\r\n        GOSUB DO.ACTION\r\n        CALL ACTION.RECORD.WRITE(ERROR.FLAG)\r\n    END\r\n\r\n    IF MESSAGE EQ 'VAL'  THEN\r\n        MESSAGE = ''\r\n        IF NOT(V$ACTION) THEN\r\n            GOSUB DO.VALIDATE ;* Special Cross Validation\r\n            IF NOT(ERROR.FLAG) AND V$FUNCTION NE 'D' AND V$FUNCTION NE 'R' THEN\r\n                GOSUB DO.OVERRIDES\r\n            END\r\n        END\r\n        IF NOT(ERROR.FLAG) THEN\r\n            GOSUB DO.PROCESS  ;* Special Processing before unauth write\r\n        END\r\n        IF NOT(ERROR.FLAG) THEN\r\n            IF Table.stereotype EQ 'W' THEN\r\n* For input of type W, there is not $NAU file so we cannot write to it.\r\n* The write will be to the live file.\r\n                IF NOT(OFS.VAL.ONLY) THEN\r\n*... Need this to stop writing to disk on verify.\r\n                    MESSAGE = 'AUT'\r\n                END\r\n            END ELSE\r\n                CALL UNAUTH.RECORD.WRITE\r\n            END\r\n        END\r\n    END\r\n*\r\n* And now for authorisation and verification\r\n*\r\n    IF MESSAGE EQ 'AUT' OR MESSAGE EQ 'VER' THEN\r\n        IF NOT(V$ACTION) THEN\r\n            GOSUB DO.VALIDATE ;* Special Cross Validation\r\n        END\r\n        IF NOT(ERROR.FLAG) THEN\r\n            GOSUB DO.AUTHORISE          ;* Special Processing before write\r\n        END\r\n        IF NOT(ERROR.FLAG) THEN\r\n            CALL AUTH.RECORD.WRITE\r\n        END\r\n        IF NOT(ERROR.FLAG) AND V$FUNCTION = 'V' THEN        ;* Verify the record\r\n            GOSUB DO.RUN      ;* update using RUN\r\n        END\r\n    END\r\n\r\n    RETURN\r\n*** </region>\r\n*\r\n*************************************************************************\r\n*** <region name= Id>\r\n***\r\nDO.ID:\r\n* Validation and changes of the ID entered.  Set ERROR to 1 if in error.\r\n    THE.PREFIX = Table.idPrefix\r\n    IF THE.PREFIX THEN\r\n        CALL EB.FORMAT.ID(THE.PREFIX)\r\n    END\r\n\r\n    IF E THEN\r\n        CALL ERR\r\n        ERROR.FLAG = 1\r\n    END ELSE\r\n        routineExtension = ".ID"\r\n        GOSUB CALL.ROUTINE\r\n    END\r\n    RETURN\r\n*** </region>\r\n*************************************************************************\r\n*** <region name= Record>\r\n***\r\nDO.RECORD:\r\n* Validation and changes of the record.\r\n* Determine if we are the first time through - browser invokes the template\r\n* several times so check that we really are the first time in\r\n    firstTime = 0\r\n\r\n    BEGIN CASE\r\n    CASE OFS$SOURCE.REC<OFS.SRC.SOURCE.TYPE> = 'SESSION'\r\n        IF OFS$STATUS<STAT.FLAG.FIRST.TIME> AND  R.NEW(V-8) ='' THEN\r\n            firstTime = 1\r\n        END\r\n    CASE OTHERWISE\r\n        IF R.NEW(V-8) = '' THEN\r\n            firstTime = 1\r\n        END\r\n    END CASE\r\n*\r\n* If there are any default field values set then add them into\r\n* R.NEW here - but only if we are the first time through\r\n*\r\n    IF Table.defaultFieldNumbers AND firstTime THEN\r\n        i=0\r\n        LOOP\r\n            i+=1\r\n        WHILE Table.defaultFieldNumbers<i>\r\n            fno = Table.defaultFieldNumbers<i>\r\n            IF R.NEW(fno) = '' THEN     ;* Just in case...\r\n                R.NEW(fno) = Table.defaultFieldValues<i>\r\n            END\r\n        REPEAT\r\n    END\r\n\r\n\r\n    IF Table.triggerField THEN\r\n        GOSUB PROCESS.OPERATION.FIELDS  ;*\r\n    END\r\n    routineExtension = ".RECORD"\r\n    GOSUB CALL.ROUTINE\r\n\r\n    RETURN\r\n*** </region>\r\n*************************************************************************\r\n*** <region name= validation>\r\n***\r\nDO.VALIDATE:\r\n*\r\n    ERROR.FLAG = ''\r\n    ETEXT = ''\r\n    TEXT = ''\r\n*\r\n    uniqueFieldList = Table.validationFields<1>\r\n    noNullsFieldList = Table.validationFields<2>\r\n    LOOP\r\n        REMOVE field FROM uniqueFieldList SETTING fieldMark\r\n    WHILE field : fieldMark\r\n        AF = field\r\n        CALL DUP\r\n    REPEAT\r\n\r\n    LOOP\r\n        REMOVE field FROM noNullsFieldList SETTING fieldMark\r\n    WHILE field : fieldMark\r\n        AF = field\r\n        CALL FT.NULLS.CHK\r\n    REPEAT\r\n\r\n    routineExtension = ".VALIDATE"\r\n    GOSUB CALL.ROUTINE\r\n*\r\n* If END.ERROR has been set then a cross validation error has occurred\r\n*\r\n    IF END.ERROR THEN\r\n        A = 1\r\n        LOOP\r\n        UNTIL T.ETEXT<A> <> ""\r\n            A+=1\r\n        REPEAT\r\n        T.SEQU = "D"\r\n        T.SEQU<-1> = A\r\n        ERROR.FLAG = 1\r\n        MESSAGE = 'ERROR'\r\n    END\r\n\r\n    RETURN          ;* Back to field input via UNAUTH.RECORD.WRITE\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Overrides>\r\n***\r\nDO.OVERRIDES:\r\nETEXT = ''\r\n    TEXT = ''\r\n    routineExtension = ".OVERRIDES"\r\n    GOSUB CALL.ROUTINE\r\n*\r\n    IF TEXT = "NO" THEN       ;* Said NO to override\r\n        ERROR.FLAG = 1\r\n        MESSAGE = "ERROR"     ;* Back to field input\r\n    END\r\n\r\n    RETURN\r\n*** </region>\r\n\r\n*** <region name= Preview>\r\n*** <desc>Run the Preview processing</desc>\r\n*************************************************************************\r\nDO.PREVIEW:\r\n    routineExtension = ".PREVIEW"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n*** </region>\r\n*** <region name= Process>\r\n*** <desc>Run the Process code</desc>\r\n*************************************************************************\r\nDO.PROCESS:\r\n*\r\n*  Contract processing code should reside here.\r\n*\r\n    routineExtension = ".PROCESS"\r\n    GOSUB CALL.ROUTINE\r\n\r\n    IF TEXT = "NO" THEN       ;* Said No to override\r\n        CALL TRANSACTION.ABORT          ;* Cancel current transaction\r\n        ERROR.FLAG = 1\r\n        MESSAGE = "ERROR"     ;* Back to field input\r\n        RETURN\r\n    END\r\n    RETURN\r\n\r\n*** </region>\r\n*************************************************************************\r\n\r\n*** <region name= Authorise>\r\n*** <desc>Run the Authorise processing</desc>\r\nDO.AUTHORISE:\r\n    routineExtension = ".AUTHORISE"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n\r\n*** </region>*\r\n*-----------------------------------------------------------------------------\r\n*************************************************************************\r\n*** <region name= Check Function is Valid>\r\n***\r\nDO.FUNCTION:\r\n* Validation of function entered.\r\n*\r\n    CHECK.VERIFY = ''         ;*flag to check we need to allow verify function for this application\r\n    CALL OS.GET.VERIFY.APPS(CHECK.VERIFY)         ;* routine which sets the flag to allow "V" function for this application\r\n\r\n    IF CHECK.VERIFY ELSE      ;* if the routine approves the "V" function, no need of any other validations\r\n        IF INDEX(V$FUNCTION,'V',1) AND Table.stereotype <> 'W' THEN\r\n            E = 'EB.RTN.FUNT.NOT.ALLOWED.APP'\r\n        END\r\n    END\r\n* If we have the property BLOCKED.FUNCTIONS set, THEN throw an error.\r\n    IF INDEX(Table.blockedFunctions,V$FUNCTION,1) AND Table.blockedFunctions THEN\r\n        E = 'EB.RTN.FUNT.NOT.ALLOWED.APP'\r\n    END\r\n\r\n    IF E THEN\r\n        ERROR.FLAG = 1        ;* Need to signal the problem\r\n        CALL ERR\r\n    END ELSE\r\n        routineExtension = ".FUNCTION"  ;* Set E if there is an error\r\n        GOSUB CALL.ROUTINE\r\n    END\r\n\r\n    IF ERROR.FLAG THEN        ;* ERROR.FLAG is checked since E is cleared after callling ERR\r\n        V$FUNCTION = ''       ;* Set FUNCTION to null if in error\r\n    END\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= CALL.ROUTINE>\r\nCALL.ROUTINE:\r\n*** <desc>Invoke the routine</desc>\r\n* Check to see if the routine exists. If it does, then call it.\r\n*\r\n    routineName = Table.name : routineExtension\r\n    routineExists = ''\r\n    CALL CHECK.ROUTINE.EXIST(routineName, routineExists, '')\r\n    IF routineExists THEN\r\n        ERROR.FLAG = 0\r\n        E = ''\r\n        CALL @routineName\r\n        IF E THEN\r\n            ERROR.FLAG = 1\r\n            CALL ERR\r\n        END\r\n    END\r\n\r\n    RETURN\r\n*** </region>\r\n*\r\n*-----------------------------------------------------------------------------\r\nMAIN.LOOP:\r\n*** <desc>The main processing loop</desc>\r\n    LOOP\r\n\r\n        CALL RECORDID.INPUT\r\n        GOSUB ARRANGE.LIST\r\n\r\n    UNTIL (MESSAGE EQ 'RET')\r\n\r\n        ERROR.FLAG = ''\r\n\r\n        IF MESSAGE EQ 'NEW FUNCTION' THEN\r\n\r\n            GOSUB DO.FUNCTION ;* Special Editing of Function\r\n\r\n            IF V$FUNCTION EQ 'E' OR V$FUNCTION EQ 'L' THEN\r\n                CALL FUNCTION.DISPLAY\r\n                V$FUNCTION = ''\r\n            END\r\n            IF V$FUNCTION EQ 'V' THEN\r\n                FILE.TYPE = "I"\r\n            END\r\n\r\n*\r\n** For the M Function get the method name\r\n*\r\n            IF V$FUNCTION = "M" THEN\r\n                GOSUB GET.ACTION\r\n            END ELSE\r\n                V$ACTION = '' ;* Action only valid for M function\r\n            END\r\n\r\n        END ELSE\r\n\r\n            GOSUB DO.ID       ;* Special Editing of ID\r\n            IF NOT(ERROR.FLAG) THEN\r\n                GOSUB PROCESS.RECORD    ;*\r\n                GOSUB PHYSICAL.FIELDS   ;*Go back and take the physical order\r\n            END\r\n        END\r\n\r\n    REPEAT\r\n    RETURN\r\n*** </region>\r\n*\r\n*-----------------------------------------------------------------------------\r\n*** <region name= PROCESS.RECORD>\r\nPROCESS.RECORD:\r\n***\r\n    CALL RECORD.READ\r\n    IF MESSAGE NE 'REPEAT' THEN\r\n        GOSUB DO.RECORD       ;* Special Editing of Record\r\n        GOSUB LOGICAL.FIELDS  ;*Now user interaction is over we are into display and screen go to logical F\r\n        GOSUB LOGICAL.RECORD  ;*The R.NEW should match the logical F/T as otherwise OVERRIDE will be the first field!!!!\r\n        CALL MATRIX.ALTER\r\n        IF NOT(ERROR.FLAG) THEN\r\n            LOOP\r\n                GOSUB PROCESS.FIELDS    ;* ) For Input\r\n                GOSUB PHYSICAL.FIELDS   ;*User interaction/display all are over am into application so go to physical order\r\n                GOSUB PHYSICAL.RECORD   ;*Convert it to physical order in terms of record\r\n                GOSUB PROCESS.MESSAGE   ;* ) Applications\r\n                GOSUB LOGICAL.FIELDS    ;*Error/override/just validation now you may go to screen go back to LOGICAL.ORDER\r\n                GOSUB LOGICAL.RECORD    ;*Oh sorry one last time go back to LOGICAL.ORDER\r\n            WHILE (MESSAGE EQ 'ERROR') REPEAT\r\n        END\r\n    END\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Utility>\r\n*** <desc>Invoke the work routine</desc>\r\nDO.RUN:\r\n    routineExtension = ".RUN"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Default>\r\n*** <desc>Invoke the work routine</desc>\r\nDO.DEFAULT:\r\n    routineExtension = ".DEFAULT"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Process the operation>\r\nPROCESS.OPERATION.FIELDS:\r\n***\r\n* Here we work out if we have any operation trigger fields set...\r\n    TRIGGER.FIELD = Table.triggerField\r\n    TRIGGER.VALUE = R.NEW(TRIGGER.FIELD)<1,1,1>\r\n    IF TRIGGER.VALUE <> '' THEN\r\n        SEARCH.LIST = T(TRIGGER.FIELD)<2>\r\n        CONVERT '_' TO FM IN SEARCH.LIST\r\n        LOCATE TRIGGER.VALUE IN SEARCH.LIST<1> SETTING TRIGGER.INDEX ELSE TRIGGER.INDEX = 0         ;* Shouldnt be 0!\r\n*\r\n* Loop through the T array and make the fields input / noinput\r\n* Either the Table.inputtableFields array or the Table.noInputFields array may be populated, but not both.\r\n* If both are set, ignore Table.noInputFields.\r\n*\r\n        DEFAULT.SETTING = ''\r\n        CHANGED.SETTING = ''\r\n        FIELD.LIST = ''\r\n        IF Table.noInputFields<TRIGGER.INDEX> THEN\r\n            CHANGED.SETTING = 'NOINPUT'\r\n            FIELD.LIST = Table.noInputFields<TRIGGER.INDEX>\r\n        END\r\n        IF Table.inputtableFields<TRIGGER.INDEX> THEN\r\n            DEFAULT.SETTING = 'NOINPUT'\r\n            FIELD.LIST = Table.inputtableFields<TRIGGER.INDEX>\r\n        END\r\n*\r\n* First setting all the items to the default setting\r\n* If we are processing a NOINPUTS list, then any field that is already defined as\r\n* NOINPUT, NOCHANGE, etc. will retain that definition to prevent reserved fields,\r\n* etc. being made inputtable!\r\n*\r\n        FOR I = 1 TO V - 9\r\n            IF NOT(CHANGED.SETTING = 'NOINPUT' AND T(I)<3>) THEN\r\n                T(I)<3> = DEFAULT.SETTING\r\n            END\r\n        NEXT I\r\n*\r\n* And then change the items to the new settings for the specified fields...\r\n*\r\n        LOOP\r\n            REMOVE FIELD.ID FROM FIELD.LIST SETTING FIELD.MARK\r\n        WHILE FIELD.ID : FIELD.MARK\r\n            T(FIELD.ID)<3> = CHANGED.SETTING\r\n        REPEAT\r\n    END\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= DO.FIELDS>\r\nDO.FIELDS:\r\n*** <desc>Field definitions</desc>\r\n    routineExtension = ".FIELDS"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= DO.INITIALISE>\r\nDO.INITIALISE:\r\n*** <desc>Initialisation</desc>\r\n    routineExtension = ".INITIALISE"\r\n    GOSUB CALL.ROUTINE\r\n    RETURN\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Action>\r\n***\r\nDO.ACTION:\r\n*\r\n** Call the ACTION routine\r\n*\r\n    routineExtension = ".":V$ACTION\r\n    GOSUB CALL.ROUTINE\r\n    IF END.ERROR THEN\r\n        ERROR.FLAG = 1\r\n    END\r\n    IF TEXT = "NO" THEN\r\n        ERROR.FLAG = 1\r\n    END\r\n*\r\n    RETURN          ;* Back to field input via UNAUTH.RECORD.WRITE\r\n*** </region>\r\n*-----------------------------------------------------------------------------\r\n*** <region name= Get Action>\r\n*** <desc>Get the action details</desc>\r\nGET.ACTION:\r\n*\r\n    LOOP\r\n        CALL EB.GET.ACTION\r\n    WHILE MESSAGE = 'ERROR'\r\n        IF E THEN\r\n            ERROR.FLAG = 1\r\n            CALL ERR\r\n        END\r\n    REPEAT\r\n*\r\n    RETURN\r\n*\r\n\r\n*** </region>*-----------------------------------------------------------------------------\r\nLOGICAL.FIELDS:\r\n\r\n    IF NEIGHBOUR.TABLE EQ '' THEN       ;*This is not a new style template so why this botheration\r\n        RETURN      ;*Go back and live in the world of Beatles and BoneyM\r\n    END\r\n\r\n    FOR idx = 1 TO upperLimit ;*The total field length\r\n        LOCATE idx IN Table.orderedFieldList<1> SETTING POS.FOUND ELSE          ;*What is the position in the logical order\r\n            CONTINUE          ;*Odd but what to do life has to carry on\r\n        END\r\n        Physical.fieldOrderList<idx> = POS.FOUND  ;*A new array to store the physical order (should be 1 2 3 4 5  but have it)\r\n        SAVE.F(POS.FOUND) = F(idx)      ;*F in a logical order\r\n       SAVE.T(POS.FOUND) = T(idx)      ;*T in a logical order\r\n        SAVE.N(POS.FOUND) = N(idx)      ;*N in a logical order\r\n        SAVE.CHECKFILE(POS.FOUND) = CHECKFILE(idx)          ;*Checkfile in a logical order\r\n        SAVE.CONCATFILE(POS.FOUND) = CONCATFILE(idx)        ;*CONCATFILE (who is using this still!!!) in a logical order\r\n    NEXT idx        ;*Next field\r\n    MAT F = MAT SAVE.F        ;*Logical F is ready\r\n    MAT T = MAT SAVE.T        ;*Logical T is ready\r\n    MAT N = MAT SAVE.N        ;*N follows\r\n    MAT CHECKFILE = MAT SAVE.CHECKFILE  ;*CHECKFILE just sneaks in\r\n    MAT CONCATFILE = MAT SAVE.CONCATFILE          ;*Contactfile mmmm let us also make it logical\r\n    SAVE.V = V      ;*Save the original V i.e the position of AUDIT.DATE.TIME physically\r\n    V = upperLimit  ;*The revised V whenever we are in logical order\r\n    RETURN\r\n*-------------------------------------------------------------------------------------------\r\nLOGICAL.RECORD:\r\n\r\n    IF NEIGHBOUR.TABLE EQ '' THEN       ;*This is a template that does not use neighbours\r\n        RETURN      ;*Dont do much am not a much required table that goes through changes\r\n    END\r\n\r\n    FOR idx = 1 TO upperLimit ;*The whole field length\r\n        LOCATE idx IN Table.orderedFieldList<1> SETTING POS.FOUND ELSE          ;*Find in the logical order\r\n            CONTINUE          ;*Is something wrong terribly\r\n        END\r\n        Physical.fieldOrderList<idx> = POS.FOUND  ;*build this again\r\n        SAVE.R.NEW(POS.FOUND) = R.NEW(idx)        ;*The current record\r\n        SAVE.R.NEW.LAST(POS.FOUND) = R.NEW.LAST(idx)        ;*The last unauth one\r\n        SAVE.R.OLD(POS.FOUND) = R.OLD(POS.FOUND)  ;*The last authorized one\r\n    NEXT idx        ;*Next one\r\n    MAT R.NEW = MAT SAVE.R.NEW          ;*New record for display/input/viewing/printout etc.etc.\r\n    MAT R.NEW.LAST = MAT SAVE.R.NEW.LAST          ;*The last unauthorised one\r\n    MAT R.OLD = MAT SAVE.R.OLD          ;*Old one\r\n    RETURN\r\n*----------------------------------------------------------------------------------------------------\r\nPHYSICAL.FIELDS:\r\n\r\n\r\n    IF NEIGHBOUR.TABLE EQ '' THEN       ;*I  still think that we are in the world of shillings\r\n        RETURN      ;*Go back\r\n    END\r\n\r\n    FOR idx = 1 TO upperLimit ;*The whole limit\r\n        LOCATE idx IN Physical.fieldOrderList<1> SETTING POS.FOUND ELSE         ;*The physical position\r\n            CONTINUE\r\n        END\r\n        SAVE.F(POS.FOUND) = F(idx)      ;*Getting physical... just the F\r\n        SAVE.T(POS.FOUND) = T(idx)      ;*The T is being restored to physical position\r\n        SAVE.N(POS.FOUND) = N(idx)      ;*The N is being restored to physical position\r\n        SAVE.CHECKFILE(POS.FOUND) = CHECKFILE(idx)          ;*Checkfiles\r\n        SAVE.CONCATFILE(POS.FOUND) = CONCATFILE(idx)        ;*And the concat files\r\n    NEXT idx\r\n    MAT F = MAT SAVE.F        ;*let me be my original self\r\n    MAT T = MAT SAVE.T        ;*yes right NOINPUT will be set the application coders\r\n    MAT N = MAT SAVE.N        ;*Will someone change it but still\r\n    MAT CHECKFILE = MAT SAVE.CHECKFILE  ;*The checks\r\n    MAT CONCATFILE = MAT SAVE.CONCATFILE          ;*Concats\r\n    V = SAVE.V      ;*Now I am telling the world where my audit position is in case they want to do V-9,V-3 etc\r\n\r\n    RETURN\r\n\r\n*------------------------------------------------------------------------------------------------------------------------------\r\nPHYSICAL.RECORD:\r\n\r\n\r\n    IF NEIGHBOUR.TABLE EQ '' THEN       ;*old style templates\r\n        RETURN      ;*go and be in maintenance mode\r\n    END\r\n    FOR idx = 1 TO upperLimit ;*The final limit\r\n        LOCATE idx IN Physical.fieldOrderList<1> SETTING POS.FOUND ELSE         ;*Actual physical location\r\n            CONTINUE          ;*are you cheating\r\n        END\r\n        SAVE.R.NEW(POS.FOUND) = R.NEW(idx)        ;*The physical position so that people can write crossvals\r\n        SAVE.R.NEW.LAST(POS.FOUND) = R.NEW.LAST(idx)        ;*The logical position\r\n        SAVE.R.OLD(POS.FOUND) = R.OLD(POS.FOUND)  ;*The logical oldie...\r\n    NEXT idx\r\n    MAT R.NEW = MAT SAVE.R.NEW          ;*The physical\r\n    MAT R.NEW.LAST = MAT SAVE.R.NEW.LAST          ;*The one that is on the disk\r\n    MAT R.OLD = MAT SAVE.R.OLD          ;*The one that will takes us towards next century\r\n    RETURN\r\n*-------------------------------------------------------------------------------------------------------------\r\nARRANGE.LIST:\r\n\r\n\r\n    Table.orderedFieldList = ''\r\n    IF Table.currentFieldPosition GT V THEN       ;*More fields than V\r\n        upperLimit = Table.currentFieldPosition   ;*This is the maximum length\r\n    END ELSE\r\n        upperLimit = V        ;*Old style V\r\n    END\r\n    NEIGHBOUR.TABLE = ''\r\n    auditFieldList = ''\r\n    FOR i = 1 TO upperLimit\r\n        neighbour = Table.fieldNeighbourArray(i)  ;*Are we having neighbours\r\n        BEGIN CASE\r\n        CASE i >= V-8 AND i <= V        ;* we have added the audit fields and it's a audit field\r\n            auditFieldList<-1> = i\r\n        CASE neighbour\r\n*\r\n* Allow for nested neighbours....\r\n*\r\n            NEIGHBOUR.TABLE = 1         ;*Set this flag\r\n            LOOP\r\n            UNTIL Table.fieldNeighbourArray(neighbour) = ''\r\n                neighbour = Table.fieldNeighbourArray(neighbour)\r\n            REPEAT\r\n            Table.orderedFieldList<neighbour>:= '!' : i     ;*Get a ordered list\r\n        CASE OTHERWISE        ;*No neighbours\r\n            Table.orderedFieldList<-1> = i        ;*Same position\r\n        END CASE\r\n    NEXT i\r\n    CONVERT '!' TO FM IN Table.orderedFieldList   ;*Convert to field markers\r\n\r\n    Table.orderedFieldList := FM : auditFieldList ;*And the audits\r\n*\r\n    RETURN\r\n*---------------------------------------------------------------------------------------------------------\r\nEND\r\n \r\n \r\n
t24.template.system.I_DataTypes.v5=t24.template.system.I_DataTypes.v5<<NR>>I_DataTypes<<NR>>\r\n\r\n*-----------------------------------------------------------------------------\r\n* Modification History:\r\n* --------------------\r\n*  EN_10003543\r\n*  Creation.\r\n*\r\n* 24/01/08 - BG_100016792\r\n*            New data type introduced for wider text box.\r\n*\r\n* 27/08/08 - EN_10003800 (SAR-2008-07-31-0002)\r\n*            New datatype T24.INTERNAL.ACCOUNT added\r\n*            Field_AllowNegative added\r\n*----------------------------------------------------------------------------\r\n\r\n    EQU T24_String TO 'T24.STRING'\r\n    EQU T24_BigString TO 'T24.BIG.STRING'\r\n    EQU T24_Text TO 'T24.TEXT'\r\n    EQU T24_TextWide TO 'T24.TEXT.WIDE'\r\n    EQU T24_Numeric TO 'T24.NUMERIC'\r\n    EQU T24_Date TO 'T24.DATE'\r\n    EQU T24_Portfolio TO 'T24.PORTFOLIO'\r\n    EQU T24_Account TO 'T24.ACCOUNT'\r\n    EQU T24_InternalAccount TO 'T24.INTERNAL.ACCOUNT'\r\n    EQU T24_Customer TO 'T24.CUSTOMER'\r\n    EQU T24_Frequency TO 'T24.FREQUENCY'\r\n\r\n\r\n    EQU Field_Mandatory TO ',mandatory'\r\n    EQU Field_NoInput TO ',NOINPUT'\r\n    EQU Field_NoChange TO ',NOCHANGE'\r\n    EQU Field_Unique TO ',UNIQUE'\r\n    EQU Field_NoNulls TO ',NONULLS'\r\n    EQU Field_AllowNegative TO ',ALLOW.NEGATIVE'\r\n\r\n    COMMON/DataTypeCommon/DataType.list,\r\n    DataType.nArrays,\r\n    DataType.tArrays,\r\n    DataType.checkFiles\r\n \r\n
r09.key=!@updtest1
r10.key=!@#r10upd2