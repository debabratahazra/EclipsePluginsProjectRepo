«IMPORT mdf»

«EXTENSION com::odcgroup::mdf::generation::java»

«DEFINE Actions FOR List[MdfDomain]»
	«EXPAND Actions FOREACH this»
«ENDDEFINE»

«DEFINE Actions FOR MdfDomain»
	«REM»Only for datasets in a first time...«ENDREM»
	«EXPAND Actions FOREACH datasets»
«ENDDEFINE»

«DEFINE Actions FOR MdfEntity»
	«EXPAND CreateAction FOR this»
	«EXPAND SaveAction FOR this»
	«EXPAND RemoveAction FOR this»
	«EXPAND FindByIDAction FOR this»
	«REM» «EXPAND FindByQueryAction FOR this» «ENDREM»
«ENDDEFINE»

«DEFINE CreateAction FOR MdfEntity»
	«FILE (getODCBasePackage().toPath() + "/wui/module/cdm/components/ds/crud/" + name + "Create.java")»
		package «getODCBasePackage()».wui.module.cdm.components.ds.crud;
		
		import «getPackage()».«name»;
		import «getPackage()».services.delegates.«name»ServiceDelegate;
		import com.odcgroup.uif.context.model.Scope;
		import com.odcgroup.uif.workflow.HTTPParameters;
		import com.odcgroup.uif.workflow.Workflow;
		import com.odcgroup.uif.workflow.exception.ProcessExecutionException;
		import com.odcgroup.uif.workflow.process.ProcessResult;
		import com.odcgroup.wui.module.cdm.components.CdmAbstractProcess;
		
		public class «name»Create extends CdmAbstractProcess {
		
			/**
			 * Name of the scope key to which the bean must be created
			 */
			private final static String BEANNAME = "BEANNAME";
		
			/**
			 * @{inheritDoc}
			 */
			public ProcessResult doProcess(Scope scope, HTTPParameters httpparameters, Workflow workflow)
					throws ProcessExecutionException, Exception {
		
				// Get the bean scope key
				String beanName = getProperty(BEANNAME);
				if (beanName == null) {
					beanName = "«name.lowerCase()»";
				} else {
					beanName = beanName.trim();
				}
				if (beanName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + BEANNAME + "' Must be defined.");
				}
				
				// Call delegate to create bean
				«name»ServiceDelegate delegate = new «name»ServiceDelegate();
				«name» bean = delegate.create();
				
				// Set bean in scope
				scope.set(beanName, bean);
				
				return new ProcessResult();
			}
		
			/**
			 * Method getProperty.
			 * 
			 * @param propertyName
			 *            the name of the property for which value is expected
			 * @return the value related to the given Property name or null if nothing
			 *         has been found
			 */
			private String getProperty(String propertyName) {
				if (getProperties().getProperty(propertyName) != null) {
					return getProperties().getProperty(propertyName);
				}
				if (getHttpparameters().getParameterValue(propertyName) != null) {
					return getHttpparameters().getParameterValue(propertyName);
				}
				if (getHttpparameters().getRequest().getAttribute(propertyName) != null) {
					return getHttpparameters().getRequest().getAttribute(propertyName).toString();
				}
				return null;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«DEFINE SaveAction FOR MdfEntity»
	«FILE (getODCBasePackage().toPath() + "/wui/module/cdm/components/ds/crud/" + name + "Save.java")»
		package com.odcgroup.wui.module.cdm.components.ds.crud;
	
		import «getPackage()».«name»;
		import «getPackage()».services.delegates.«name»ServiceDelegate;
		import com.odcgroup.uif.context.model.Scope;
		import com.odcgroup.uif.workflow.HTTPParameters;
		import com.odcgroup.uif.workflow.Workflow;
		import com.odcgroup.uif.workflow.exception.ProcessExecutionException;
		import com.odcgroup.uif.workflow.process.ProcessResult;
		import com.odcgroup.wui.module.cdm.components.CdmAbstractProcess;

		public class «name»Save extends CdmAbstractProcess {
		
			/**
			 * Name of the scope key to which the bean to be saved is
			 */
			private final static String BEANNAME = "BEANNAME";
		
			/**
			 * @{inheritDoc}
			 */
			public ProcessResult doProcess(Scope scope, HTTPParameters httpparameters, Workflow workflow)
					throws ProcessExecutionException, Exception {
		
				// Get the bean scope key
				String beanName = getProperty(BEANNAME);
				if (beanName == null) {
					beanName = "«name.lowerCase()»";
				} else {
					beanName = beanName.trim();
				}
				if (beanName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + BEANNAME + "' Must be defined.");
				}
		
				// Get the bean from scope
				«name» bean = («name») scope.get(beanName);
				if (bean == null) {
					throw new RuntimeException("Not able to find a correct «name» bean in key " + beanName + ".");
				}
		
				// Call delegate to save bean
				«name»ServiceDelegate delegate = new «name»ServiceDelegate();
				bean = delegate.save(bean);
				
				// Set bean back in scope
				scope.set(beanName, bean);
		
				return new ProcessResult();
			}
		
			/**
			 * Method getProperty.
			 * 
			 * @param propertyName
			 *            the name of the property for which value is expected
			 * @return the value related to the given Property name or null if nothing
			 *         has been found
			 */
			private String getProperty(String propertyName) {
				if (getProperties().getProperty(propertyName) != null) {
					return getProperties().getProperty(propertyName);
				}
				if (getHttpparameters().getParameterValue(propertyName) != null) {
					return getHttpparameters().getParameterValue(propertyName);
				}
				if (getHttpparameters().getRequest().getAttribute(propertyName) != null) {
					return getHttpparameters().getRequest().getAttribute(propertyName).toString();
				}
				return null;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«DEFINE RemoveAction FOR MdfDataset»
	«FILE (getODCBasePackage().toPath() + "/wui/module/cdm/components/ds/crud/" + name + "Remove.java")»
		package com.odcgroup.wui.module.cdm.components.ds.crud;

		import «getPackage()».«name»;
		import «getPackage()».«baseClass.name»Ref;
		import com.odcgroup.cdm.bean.WrapPropertyUtils;
		import «getPackage()».services.delegates.«name»ServiceDelegate;
		import com.odcgroup.uif.context.model.Scope;
		import com.odcgroup.uif.workflow.HTTPParameters;
		import com.odcgroup.uif.workflow.Workflow;
		import com.odcgroup.uif.workflow.exception.ProcessExecutionException;
		import com.odcgroup.uif.workflow.process.ProcessResult;
		import com.odcgroup.wui.module.cdm.components.CdmAbstractProcess;
		
		public class «name»Remove extends CdmAbstractProcess {
		
			/**
			 * Name of the scope key to which the bean must be create
			 */
			private final static String BEANNAME = "BEANNAME";
		
			/**
			 * Name of the scope key containing the entity uuid
			 */
			private final static String FIELD = "FIELD";
		
			/**
			 * @{inheritDoc}
			 */
			public ProcessResult doProcess(Scope scope, HTTPParameters httpparameters, Workflow workflow)
					throws ProcessExecutionException, Exception {
		
				// Get the bean scope key
				String beanName = getProperty(BEANNAME);
				if (beanName == null) {
					beanName = "«name.lowerCase()»";
				} else {
					beanName = beanName.trim();
				}
				if (beanName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + BEANNAME + "' Must be defined.");
				}
		
				// Get bean
				«name» bean = null;
				if (getHttpparameters().getRequest().getAttribute(beanName) != null) {
					bean = («name») getHttpparameters().getRequest().getAttribute(beanName);
				} else if (scope.existsKey(beanName) == true) {
					bean = («name») scope.get(beanName);
				} 
				if (bean == null) {
					throw new RuntimeException("Not able to find a correct «name» bean in key " + beanName + ".");
				}
		
				// Get the field name scope key
				String fieldName = getProperty(FIELD);
				if (fieldName == null) {
					fieldName = "";
				} else {
					fieldName = fieldName.trim();
				}
				if (fieldName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + FIELD + "' Must be defined");
				}
				String uuid = null;
				try {
					uuid = (String) WrapPropertyUtils.getProperty(bean, fieldName);
				} catch (Exception e) {
					throw new RuntimeException("Invalid path defined : '" + fieldName + "' for the bean : '" + beanName
							+ "') : " + bean + ".");
				}
		
				// Get the ref
				«baseClass.name»Ref ref = new «baseClass.name»Ref(uuid);
				if (ref == null) {
					throw new RuntimeException("Not able to find a correct «baseClass.name»Ref in key" + fieldName + ".");
				}
				
				// Call delegate to remove bean
				«name»ServiceDelegate delegate = new «name»ServiceDelegate();
				delegate.remove(ref);
				
				// Also remove bean from scope
				scope.remove(beanName);
		
				return new ProcessResult();
			}
		
			/**
			 * Method getProperty.
			 * 
			 * @param propertyName
			 *            the name of the property for which value is expected
			 * @return the value related to the given Property name or null if nothing
			 *         has been found
			 */
			private String getProperty(String propertyName) {
				if (getProperties().getProperty(propertyName) != null) {
					return getProperties().getProperty(propertyName);
				}
				if (getHttpparameters().getParameterValue(propertyName) != null) {
					return getHttpparameters().getParameterValue(propertyName);
				}
				if (getHttpparameters().getRequest().getAttribute(propertyName) != null) {
					return getHttpparameters().getRequest().getAttribute(propertyName).toString();
				}
				return null;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«DEFINE RemoveAction FOR MdfEntity»
«ENDDEFINE»
«DEFINE FindByIDAction FOR MdfDataset»
	«FILE (getODCBasePackage().toPath() + "/wui/module/cdm/components/ds/crud/" + name + "FindByID.java")»
		package com.odcgroup.wui.module.cdm.components.ds.crud;

		import «getPackage()».«name»;
		import «getPackage()».«baseClass.name»Ref;
		import «getPackage()».services.delegates.«name»ServiceDelegate;
		import com.odcgroup.uif.context.model.Scope;
		import com.odcgroup.uif.workflow.HTTPParameters;
		import com.odcgroup.uif.workflow.Workflow;
		import com.odcgroup.uif.workflow.exception.ProcessExecutionException;
		import com.odcgroup.uif.workflow.process.ProcessResult;
		import com.odcgroup.wui.module.cdm.components.CdmAbstractProcess;
		
		public class «name»FindByID extends CdmAbstractProcess {
		
			/**
			 * Name of the scope key to which the bean must be create
			 */
			private final static String BEANNAME = "BEANNAME";
		
			/**
			 * Name of the parameter used to get the entity uuid
			 */
			private final static String ATTRIBUTENAME = "ATTRIBUTENAME";
		
			/**
			 * @{inheritDoc}
			 */
			public ProcessResult doProcess(Scope scope, HTTPParameters httpparameters, Workflow workflow)
					throws ProcessExecutionException, Exception {
		
				// Get the bean scope key
				String beanName = getProperty(BEANNAME);
				if (beanName == null) {
					beanName = "«name.lowerCase()»";
				} else {
					beanName = beanName.trim();
				}
				if (beanName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + BEANNAME + "' Must be defined.");
				}
		
				// Get the ref scope key
		    	String attributeName = getProperty(ATTRIBUTENAME);
				if (attributeName == null) {
					attributeName = "DSReference";
				} else {
					attributeName = attributeName.trim ();
				}
				if (attributeName.length() == 0) {
					throw new RuntimeException ("PROPERTY '" + ATTRIBUTENAME + "' Must be defined.");
				}
				
				// Get bean ref
				«baseClass.name»Ref ref = null;
		    	ref = («baseClass.name»Ref) httpparameters.getRequest().getAttribute(attributeName);
			    if (ref == null) {
			    	throw new RuntimeException ("Attribute '" + attributeName + "' not found.");
			    } 
			    
				// Call delegate to find bean
				«name»ServiceDelegate delegate = new «name»ServiceDelegate();
		    	«name» bean = delegate.findById(ref);

				// Set bean in scope
		    	scope.set(beanName, bean);
		    			
				return new ProcessResult();
			}
		
			/**
			 * Method getProperty.
			 * 
			 * @param propertyName
			 *            the name of the property for which value is expected
			 * @return the value related to the given Property name or null if nothing
			 *         has been found
			 */
			private String getProperty(String propertyName) {
				if (getProperties().getProperty(propertyName) != null) {
					return getProperties().getProperty(propertyName);
				}
				if (getHttpparameters().getParameterValue(propertyName) != null) {
					return getHttpparameters().getParameterValue(propertyName);
				}
				if (getHttpparameters().getRequest().getAttribute(propertyName) != null) {
					return getHttpparameters().getRequest().getAttribute(propertyName).toString();
				}
				return null;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«DEFINE FindByIDAction FOR MdfEntity»
«ENDDEFINE»
«DEFINE FindByQueryAction FOR MdfDataset»
	«FILE (getODCBasePackage().toPath() + "/wui/module/cdm/components/ds/crud/" + name + "FindByQuery.java")»
		package com.odcgroup.wui.module.cdm.components.ds.crud;

		import java.util.HashMap;
		import java.util.List;
		import java.util.Map;
		
		import «getPackage()».«name»;
		import «getPackage()».services.delegates.«name»ServiceDelegate;
		import com.odcgroup.uif.context.model.Scope;
		import com.odcgroup.uif.workflow.HTTPParameters;
		import com.odcgroup.uif.workflow.Workflow;
		import com.odcgroup.uif.workflow.exception.ProcessExecutionException;
		import com.odcgroup.uif.workflow.process.ProcessResult;
		import com.odcgroup.wui.module.cdm.components.CdmAbstractProcess;
		
		public class «name»FindByQuery extends CdmAbstractProcess {
		
			/**
			 * Name of the scope key to which the bean must be created
		     * 
		     * default is '«name.lowerCase()»'
			 */
			private final static String BEANNAME = "BEANNAME";
		
		    /**
		     * Name of the query which must be given to the query as argument
		     * 
		     * default is ''
		     */
		    private final static String REFQUERY = "REFQUERY";
			
		    /**
		     * Name of the operation which must be given to the query as argument
		     * 
		     * default is 'FINDBYQUERY'
		     */
		    private final static String OPERATION = "OPERATION";
			
		    /**
		     * Name of the scope key which indicates if only the first result must be considered as result
		     * 
		     * default is ''
		     */
		    private final static String INDEX = "INDEX";
		
			/**
			 * @{inheritDoc}
			 */
			public ProcessResult doProcess(Scope scope, HTTPParameters httpparameters, Workflow workflow)
					throws ProcessExecutionException, Exception {
		
				// Get the bean scope key
				String beanName = getProperty(BEANNAME);
				if (beanName == null) {
					beanName = "«name.lowerCase()»";
				} else {
					beanName = beanName.trim();
				}
				if (beanName.length() == 0) {
					throw new RuntimeException("PROPERTY '" + BEANNAME + "' Must be defined");
				}
		
				// Get the operation scope key
				String operation = getProperty(OPERATION);
				if (operation == null) {
					operation = com.odcgroup.cdm.ds.common.DataGatheringConst.FINDBYQUERY;
				} else {
					operation = operation.trim();
				}
				if (operation.length() == 0) {
					throw new RuntimeException ("PROPERTY '" + OPERATION + "' Must be defined");
				}

				// Get the query scope key
				String refQuery = getProperty(REFQUERY);
				if (refQuery == null) {
					refQuery = "";
				} else {
					refQuery = refQuery.trim();
				}
				if (refQuery.length() == 0) {
					throw new RuntimeException ("PROPERTY '" + REFQUERY + "' Must be defined");
				}
				
				// Build query
				Map queryMap = new HashMap(); 
				queryMap.put("OPERATION", operation);
				String [] requestQuery = refQuery.split(";");
				for (int i=0; i<requestQuery.length; i++) {
					Object query = null;
					String[] reqArr = requestQuery [i].split ("=");
					String keymap = reqArr[0];
					String keyscope = reqArr[reqArr.length > 1 ? 1 : 0];
					if (getHttpparameters().getRequest().getAttribute(keyscope) != null) {
						query = getHttpparameters().getRequest().getAttribute(keyscope);
					} else if (scope.existsKey (keyscope) == true) {
						query = scope.get (keyscope);
					} else query = keyscope;
					queryMap.put (keymap, query);
				}

				// Call delegate to execute query
				«name»ServiceDelegate delegate = new «name»ServiceDelegate();
				List result = delegate.findByQuery(queryMap);

				// Format result if needed 
				String index = getProperty(INDEX);
				if (index == null) {
					index = "";
				} else {
					index = index.trim();
				}
				
				// No index provided, so set beans list in scope
				if (index.length() == 0) {
				    scope.set(beanName, result.toArray(new «name» [result.size()]));
			    	return new ProcessResult(0);
				}

				// Index provided
				int ndx = 0;
				try {
					ndx = Integer.valueOf(index).intValue ();
				} catch (NumberFormatException ex) {
					// Index is not a number: remove bean from scope
					scope.remove(beanName);
			    	return new ProcessResult(2);
				}
				if (ndx >= result.size ()) {
					// Index greater than beans list size: remove bean from scope
					scope.remove(beanName);
			    	return new ProcessResult(1);
				}

				// Index ok: set corresponding bean in scope
				scope.set (beanName, result.get(ndx));
				
		    	return new ProcessResult(0);
			}
		
			/**
			 * Method getProperty.
			 * 
			 * @param propertyName
			 *            the name of the property for which value is expected
			 * @return the value related to the given Property name or null if nothing
			 *         has been found
			 */
			private String getProperty(String propertyName) {
				if (getProperties().getProperty(propertyName) != null) {
					return getProperties().getProperty(propertyName);
				}
				if (getHttpparameters().getParameterValue(propertyName) != null) {
					return getHttpparameters().getParameterValue(propertyName);
				}
				if (getHttpparameters().getRequest().getAttribute(propertyName) != null) {
					return getHttpparameters().getRequest().getAttribute(propertyName).toString();
				}
				return null;
			}
		}
	«ENDFILE»
«ENDDEFINE»
«DEFINE FindByQueryAction FOR MdfEntity»
«ENDDEFINE»