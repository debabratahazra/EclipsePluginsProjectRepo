«IMPORT mdf»
«EXTENSION com::odcgroup::cdm::generation::java»

«DEFINE DatasetGeneration FOR List[MdfDomain]»
	«EXPAND ManualAttributeDescriptor FOREACH this»
	«EXPAND DatasetAttributeDescriptor FOREACH this»
	«EXPAND DatasetBean FOREACH this»
«ENDDEFINE»

«DEFINE ManualAttributeDescriptor FOR MdfDomain»
	«FILE (getPackage().toPath() + "/dataset/impl/" + "ManualAttributeDescriptor.java")»
		package «getPackage()».dataset.impl;
		
		public class ManualAttributeDescriptor {
		
			private String attributeName;
			private boolean isViewable;
			private boolean isUpdateable;
				
			public ManualAttributeDescriptor(String attributeName, boolean isViewable, 
					boolean isUpdateable) {
				this.attributeName = attributeName;
				this.isViewable = isViewable;
				this.isUpdateable = isUpdateable;
			}
	
			public boolean isViewable() {
				return this.isViewable;
			}
	
			public boolean isUpdateable() {
				return this.isUpdateable;
			}			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE DatasetAttributeDescriptor FOR MdfDomain»
	«FILE (getPackage().toPath() + "/dataset/impl/" + "DatasetAttributeDescriptor.java")»
		package «getPackage()».dataset.impl;
		
		import java.util.HashMap;
		import java.util.Map;

		import com.odafs.framework.descriptor.AttributeDescriptor;

		public class DatasetAttributeDescriptor implements AttributeDescriptor {
			/**
			 * Serial version UID.
			 */
			private static final long serialVersionUID = -2373165818680254700L;
		
			private Map datasetAttributeNameToCDMBeanAttributeDescriptor;
			private Map datasetAttributeNameToGCLName;
			private Map manualAttributeDescriptors = new HashMap();
		
			public DatasetAttributeDescriptor(
					Map datasetAttributeNameToCDMBeanAttributeDescriptor,
					Map datasetAttributeNameToGCLName) {
		
				this.datasetAttributeNameToCDMBeanAttributeDescriptor = datasetAttributeNameToCDMBeanAttributeDescriptor;
				this.datasetAttributeNameToGCLName = datasetAttributeNameToGCLName;
			}
		
			public Object getSecurityAnnotation(String key) {
				return null;
			}
		
			public boolean isActionAllowed(String action) {
				return false;
			}
		
			public boolean isAttributeKnown(String attribute) {
				if (manualAttributeDescriptors.containsKey(attribute)) {
					return true;
				} else {
					return datasetAttributeNameToGCLName.containsKey(attribute);
				}
			}
		
			public boolean isAttributeUpdatable(String attribute) {
			
				if (manualAttributeDescriptors.containsKey(attribute)) {
					return ((ManualAttributeDescriptor) manualAttributeDescriptors.get(attribute)).isUpdateable();
				} else {
					boolean attributeisAttributeUpdatable = ((AttributeDescriptor) datasetAttributeNameToCDMBeanAttributeDescriptor
							.get(attribute))
							.isAttributeUpdatable((String) datasetAttributeNameToGCLName
									.get(attribute));
			
					return attributeisAttributeUpdatable;
				}
			}
		
			public boolean isAttributeViewable(String attribute) {
			
				if (manualAttributeDescriptors.containsKey(attribute)) {
					return ((ManualAttributeDescriptor) manualAttributeDescriptors.get(attribute)).isViewable();
				} else {
					boolean attributeViewable = ((AttributeDescriptor) datasetAttributeNameToCDMBeanAttributeDescriptor
							.get(attribute))
							.isAttributeViewable((String) datasetAttributeNameToGCLName
									.get(attribute));
			
					return attributeViewable;
				}
			}
			
			public void setManualAttributeDescriptor(String attribute, boolean isViewable, boolean isUpdateable) {
				ManualAttributeDescriptor manualAttributeDescriptor = 
						new ManualAttributeDescriptor(attribute, isViewable, isUpdateable);			
				manualAttributeDescriptors.put(attribute, manualAttributeDescriptor);
			}
		
			public void merge(AttributeDescriptor ad) {
				throw new RuntimeException("Not implemented");
			}
		
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE DatasetBean FOR MdfDomain»
	«EXPAND Dataset::DatasetBean FOREACH datasets»
«ENDDEFINE»

«DEFINE DatasetBean FOR MdfDataset»
	«FILE (getPackage().toPath() + "/dataset/impl/" + name + "DatasetImpl.java")»
		package «getPackage()».dataset.impl;

		import java.io.Serializable;
		import java.util.HashMap;
		import java.util.Map;
		
		import com.odafs.framework.descriptor.AttributeDescriptor;
		import com.odafs.mirage.businessComponent.accountModel.*;
		import com.odafs.mirage.businessComponent.globalUtil.*;
		import com.odafs.mirage.businessComponent.partyModel.*;
		import com.odafs.mirage.businessComponent.supportModel.*;
		import com.odcgroup.mdf.core.DomainObject;
		import com.odcgroup.mdf.core.ObjectId;
		import com.odcgroup.mdf.metamodel.MdfName;
		import «getPackage()».«name»;
		
		public class «name»DatasetImpl implements «name», Protectable, Serializable {

			/**
			 * Serial version UID.
			 */
			private static final long serialVersionUID = 1L;
	
			«getDatasetImplAttributesDeclaration()»

    		private DatasetAttributeDescriptor attributeDescriptor;
    		
    		«EXPAND attributes FOREACH properties»
    	
    		«getDatasetImplConstructor()»
    	
    		«getDatasetImplAttributesAccessorMethodsDeclaration()»
    		
    		«EXPAND gettersAndSetters FOREACH properties»

			// Begin of implementation of DomainObject.
			
			/**
			 * {@inheritDoc}
			 */
			public MdfName getEntityName() {
				return null;
			}
			
			// End of implementation of DomainObject.

			// Begin of implementation of ReferenceableDomainObject.

			/**
			 * {@inheritDoc}
			 */
			public DomainObject getDomainObject() {
			    return null;
			}

			/**
			 * {@inheritDoc}
			 */
			public ObjectId getObjectId() {
			    return null;
			}
			
			/**
			 * {@inheritDoc}
			 */
			public Object get_oid() {
			    return null;
			}
			
			// End of implementation of ReferenceableDomainObject.

			// Begin of implementation of Protectable.

			/**
			 * {@inheritDoc}
			 */
			public AttributeDescriptor getAttributeDescriptor() {
				return attributeDescriptor;
    		}

			/**
			 * {@inheritDoc}
			 */
			public boolean isActionAllowed(String action) {
				return attributeDescriptor.isActionAllowed(action);
			}

			/**
			 * {@inheritDoc}
			 */
			public boolean isAttributeUpdatable(String attribute) {
				return attributeDescriptor.isAttributeUpdatable(attribute);
			}

			/**
			 * {@inheritDoc}
			 */
			public boolean isAttributeViewable(String attribute) {
				return attributeDescriptor.isAttributeViewable(attribute);
			}

			/**
			 * {@inheritDoc}
			 */
			public void setAttributeDescriptor(AttributeDescriptor attributeDescriptor) {
			}

			// End of implementation of Protectable.
			
			private Map initDatasetAttributeNameToCDMBeanAttributeDescriptorMap() {
				Map datasetAttributeNameToCDMBeanAttributeDescriptor = new HashMap();
				
				«EXPAND datasetToCdmAttributeMapping FOREACH properties»
				
				return datasetAttributeNameToCDMBeanAttributeDescriptor;
			}

    		private Map initDatasetAttributeNameToGCLNameMap() {
				Map datasetAttributeNameToGCLName = new HashMap();
				
				«EXPAND cdmToGclAttributeMapping FOREACH properties»
				
				return datasetAttributeNameToGCLName;
			}
    		
    		private void initializeAttributeDescriptor() {
				Map datasetAttributeNameToCDMBeanAttributeDescriptor = initDatasetAttributeNameToCDMBeanAttributeDescriptorMap();
				Map datasetAttributeNameToGCLName = initDatasetAttributeNameToGCLNameMap();

				if («this.baseClass.name.toFirstLower()».getAttributeDescriptor() != null) {
					this.attributeDescriptor = new DatasetAttributeDescriptor(datasetAttributeNameToCDMBeanAttributeDescriptor, datasetAttributeNameToGCLName);
				}
			}	
			
			public void setManualAttributeDescriptor(String attribute, 
						boolean isViewable, boolean isUpdateable) {
				attributeDescriptor.setManualAttributeDescriptor(attribute, isViewable, isUpdateable);
			}
			

		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE attributes FOR MdfDatasetProperty»
«ENDDEFINE»

«REM»Only Multi-valued Mapped Dataset Properties need attributes«ENDREM»
«DEFINE attributes FOR MdfDatasetMappedProperty»
    «IF this.isMultiValued()»
    	private java.util.List «this.name»;
    «ENDIF»
«ENDDEFINE»

«DEFINE attributes FOR MdfDatasetDerivedProperty»
    «IF this.isMultiValued()»
    	private java.util.List «this.name»;
    «ELSE»
    	«IF this.getDefaultValue() != null»
        private «this.getJavaType()» «this.name» = «this.getDefaultAttributeValue()»;
        «ELSE»
        private «this.getJavaType()» «this.name»;        
        «ENDIF»
    «ENDIF»
«ENDDEFINE»

«REM»The Getters and Setters«ENDREM»
«DEFINE gettersAndSetters FOR MdfDatasetProperty»
«ENDDEFINE»

«DEFINE gettersAndSetters FOR MdfDatasetMappedProperty»
	«IF this.isCustomField()»
	    /**
         * {@inheritDoc}
         */
        public «this.getJavaType()» get«this.name.toFirstUpper()»() {
			try {
  					return («this.getJavaType()») «this.getSourceBeanName()».getCustomFieldsContainer().getValue("«this.getSourceBeanAttributeName()»");
			} catch (Exception e) {
  					throw new RuntimeException("Problem while retrieving custom field «this.name»", e);
			}
		}
	
		/**
         * {@inheritDoc}
         */
        public void set«this.name.toFirstUpper()»(«this.getJavaType()» «this.getSourceBeanAttributeName()») {
			try {
				«this.getSourceBeanName()».getCustomFieldsContainer().setValue("«this.getSourceBeanAttributeName()»", «this.getSourceBeanAttributeName()»);
			} catch (Exception e) {
  					throw new RuntimeException("Problem while setting custom field «this.name»", e);
			}
		}
	«ELSE»
		/**
         * {@inheritDoc}
         */
        public «this.getJavaType()» get«this.name.toFirstUpper()»() {
			«this.getGetterInstruction()»
		}
	
		/**
         * {@inheritDoc}
         */
        public void set«this.name.toFirstUpper()»(«this.getJavaType()» «this.getAttributeName()») {
			«this.beforeSetterInstruction()»«this.getSetterInstruction()»
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE gettersAndSetters FOR MdfDatasetDerivedProperty»
		/**
	      * {@inheritDoc}
	      */
	    public «this.getJavaType()» get«this.name.toFirstUpper()»() {
			return «this.name»;
		}
			
		/**
	     * {@inheritDoc}
	     */
		public void set«this.name.toFirstUpper()»(«this.getJavaType()» «this.name») {
			this.«this.name» = «this.name»;
		}
«ENDDEFINE»

«REM»The GCL Security«ENDREM»
«DEFINE datasetToCdmAttributeMapping FOR MdfDatasetProperty»
«ENDDEFINE»

«DEFINE datasetToCdmAttributeMapping FOR MdfDatasetMappedProperty»
	«IF this.addAttributeDescriptor()»
		datasetAttributeNameToCDMBeanAttributeDescriptor.put("«this.name»", «this.getSourceBeanName()» != null ? «this.getSourceBeanName()».getAttributeDescriptor() : null);
	«ENDIF»
«ENDDEFINE»

«DEFINE cdmToGclAttributeMapping FOR MdfDatasetProperty»
«ENDDEFINE»

«DEFINE cdmToGclAttributeMapping FOR MdfDatasetMappedProperty»
	«IF this.addAttributeDescriptor()»
		datasetAttributeNameToGCLName.put("«this.name»", "«(this.getCDMName()=="") ? (this.isCustomField() ? this.name : this.getCDMName()) : this.getCDMName()»");
	«ENDIF»
«ENDDEFINE»
