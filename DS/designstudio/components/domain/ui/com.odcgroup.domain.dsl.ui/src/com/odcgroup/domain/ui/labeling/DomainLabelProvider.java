/*
 * generated by Xtext
 */
package com.odcgroup.domain.ui.labeling;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.resource.CompositeImageDescriptor;
import org.eclipse.jface.viewers.DecoratingLabelProvider;
import org.eclipse.jface.viewers.ILabelDecorator;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.ui.PlatformUI;

import com.google.inject.Inject;
import com.odcgroup.domain.ui.DomainUtils;
import com.odcgroup.mdf.editor.MdfPlugin;
import com.odcgroup.mdf.editor.ui.editors.providers.MdfItemProviderAdapterFactory;
import com.odcgroup.mdf.metamodel.MdfAssociation;
import com.odcgroup.mdf.metamodel.MdfAttribute;
import com.odcgroup.mdf.metamodel.MdfBusinessType;
import com.odcgroup.mdf.metamodel.MdfClass;
import com.odcgroup.mdf.metamodel.MdfDataset;
import com.odcgroup.mdf.metamodel.MdfDatasetDerivedProperty;
import com.odcgroup.mdf.metamodel.MdfDatasetProperty;
import com.odcgroup.mdf.metamodel.MdfDomain;
import com.odcgroup.mdf.metamodel.MdfEntity;
import com.odcgroup.mdf.metamodel.MdfEnumValue;
import com.odcgroup.mdf.metamodel.MdfEnumeration;
import com.odcgroup.mdf.metamodel.MdfModelElement;
import com.odcgroup.mdf.metamodel.MdfPrimitive;
import com.odcgroup.mdf.metamodel.MdfReverseAssociation;
import com.odcgroup.mdf.metamodel.MdfReverseAssociationWrapper;
import com.odcgroup.mdf.model.util.ModelVisitor;
import com.odcgroup.mdf.model.util.ModelWalker;
import com.odcgroup.workbench.core.repository.ModelURIConverter;
import com.odcgroup.workbench.core.repository.OfsResourceHelper;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class DomainLabelProvider extends DecoratingLabelProvider implements ILabelProvider{

	private static Image mdfAssociation1 = createImage("/icons/MdfAssociation.gif");
	private static Image mdfAssociation2 = createImage("/icons/value.gif");
	private static Image mdfAttribute = createImage("/icons/MdfAttribute.gif");
	private static Image mdfPrimaryKeyAttribute = createImage("/icons/icon_key.gif");
	private static Image mdfBusinessKeyAttribute = createImage("/icons/bkey.gif");
	private static Image mdfBT = createImage("/icons/btype.gif");
	private static Image mdfClass = createImage("/icons/MdfClass.gif");
	private static Image mdfDataset = createImage("/icons/MdfDataset.gif");
	private static Image mdfDomain = createImage("/icons/MdfDomain.gif");
	private static Image mdfEnumeration = createImage("/icons/MdfEnumeration.gif");
	private static Image mdfDSDerived = createImage("/icons/sum.gif");
	private static Image mdfEnumValue = createImage("/icons/nvpair.gif");
	private static Image mdfRevAssoc = createImage("/icons/MdfReverseAssociation.gif");
	private static Image error = createImage("/icons/error.gif");
	private static Image warning = createImage("/icons/warning.gif");
	
	private final static String MARKER_TYPE = "com.odcgroup.workbench.validation.ProblemMarker";

	static protected ComposedAdapterFactory adapterFactory = null;
	static private ILabelDecorator decorator = PlatformUI.getWorkbench()
			.getDecoratorManager().getLabelDecorator();

	@Inject
	public DomainLabelProvider(AdapterFactoryLabelProvider provider) {
		super(getProvider(), decorator);
	}

	static AdapterFactoryLabelProvider getProvider() {
		List<AdapterFactoryImpl> factories = new ArrayList<AdapterFactoryImpl>();
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new MdfItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());
		adapterFactory = new ComposedAdapterFactory(factories);
		return new AdapterFactoryLabelProvider(adapterFactory);
	}

	private static Image overlayImage(final Image base, final Image overlay) {
		CompositeImageDescriptor cid = new CompositeImageDescriptor() {

			@Override
			protected void drawCompositeImage(int width, int height) {
				drawImage(base.getImageData(), 0, 0);
				if(overlay.equals(error) || overlay.equals(warning)) {
					drawImage(overlay.getImageData(), 0, 8);
				}
				else {
					drawImage(overlay.getImageData(), 0, 0);
				}
			}

			@Override
			protected Point getSize() {
				return new Point(base.getImageData().width,
						base.getImageData().height);
			}

		};
		return cid.createImage();
	}

	protected static Image createImage(String name) {
		return DomainUtils.getImageDescriptor(name).createImage();
	}

	@Override
	public Image getImage(Object modelElement) {
		Image resultImage = null;
		if (modelElement instanceof MdfDomain) {
			resultImage = mdfDomain;
		} else if (modelElement instanceof MdfClass) {
			resultImage = mdfClass;
		} else if (modelElement instanceof MdfAttribute) {
			MdfAttribute attr = (MdfAttribute) modelElement;
			if (attr.isPrimaryKey()) {
				resultImage = overlayImage(mdfAttribute, mdfPrimaryKeyAttribute);
				if(attr.isBusinessKey()) {
					resultImage = overlayImage(resultImage, mdfBusinessKeyAttribute);
				}
			} else if (attr.isBusinessKey()) {
				resultImage = overlayImage(mdfAttribute,
						mdfBusinessKeyAttribute);
			} else {
				resultImage = mdfAttribute;
			}
		} else if (modelElement instanceof MdfBusinessType) {
			resultImage = mdfBT;
		} else if (modelElement instanceof MdfDataset) {
			resultImage = mdfDataset;
		} else if (modelElement instanceof MdfEnumeration) {
			resultImage = mdfEnumeration;
		} else if (modelElement instanceof MdfAssociation) {
			MdfAssociation assoc = (MdfAssociation) modelElement;
			Image img = null;
			if (assoc.getContainment() == 0) {
				img = mdfAssociation2;
			} else if (assoc.getContainment() == 1) {
				img = mdfAssociation1;
			}
			if (assoc.isBusinessKey()) {
				img = overlayImage(img, mdfBusinessKeyAttribute);
			}
			resultImage = img;
		} else if (modelElement instanceof MdfDatasetProperty) {
			MdfEntity type = ((MdfDatasetProperty) modelElement).getType();
			Image img = null;
			if (type instanceof MdfPrimitive) {
				img = mdfAttribute;
			} else {
				img = mdfAssociation1;
			}
			if (modelElement instanceof MdfDatasetDerivedProperty) {
				img = overlayImage(img, mdfDSDerived);
			}
			resultImage = img;
		} else if (modelElement instanceof MdfEnumValue) {
			return mdfEnumValue;
		} else if (modelElement instanceof MdfReverseAssociation) {
			return mdfRevAssoc;
		}
		

        if ((modelElement instanceof MdfModelElement)
                && (modelElement instanceof EObject)) {
            MdfModelElement model = (MdfModelElement) modelElement;
            Resource eRes = ((EObject)modelElement).eResource();
            
            if(eRes==null || !ModelURIConverter.isModelUri(eRes.getURI())) {
            	return resultImage;
            }
            
            if (model instanceof MdfReverseAssociationWrapper) {
            	model = ((MdfReverseAssociationWrapper) model).getInnerReverse();
            }

            // collect children URIs
            final Set<String> uris = new HashSet<String>(50);
            uris.add(getElementUri((EObject)modelElement));
			ModelVisitor mv = new ModelVisitor() {
				public boolean accept(MdfModelElement model) {
					uris.add(getElementUri((EObject)model));
					return true;
				}
			};
            new ModelWalker(mv).visit(model);
            
    		Resource res = ((EObject)modelElement).eResource();
    		if(res==null) return resultImage;
    		
    		IResource resource = OfsResourceHelper.getFile(res, res.getURI());
    		if (resource == null || !resource.exists())	return null;
    		
    		IMarker[] markers = null;
    		try {
    			markers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);
    		} catch (CoreException ex) {
    			String message = "Error while retrieving validation markers for "+model.getQualifiedName();  //$NON-NLS-1$
    			IStatus status = new Status(IStatus.ERROR, MdfPlugin.getDefault().getBundle().getSymbolicName(),
    					IStatus.OK, message, ex);
    			MdfPlugin.getDefault().getLog().log(status);
    		}
    		if (markers == null || markers.length == 0) {
    			return resultImage;
    		}            
            
    		for (int i = 0; i < markers.length; i++) {
    			IMarker marker = markers[i];
    			String markerURI = marker.getAttribute(EValidator.URI_ATTRIBUTE, "");
    			if (uris.contains(markerURI)) {//$NON-NLS-1$
    				int nextSeverity = marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO);
	                switch (nextSeverity) {
	                  case IMarker.SEVERITY_ERROR:
	                      resultImage = overlayImage(resultImage, error);
	                      break;
	                  case IMarker.SEVERITY_WARNING:
	                	  resultImage = overlayImage(resultImage, warning);
	                      break;
                    }
	                break;
    			}
    		}

        }
		return resultImage;
	}
	
	/**
	 * @param eObj
	 * @return String
	 */
	private String getElementUri(EObject eObj) {
		URI widgetURI = EcoreUtil.getURI(eObj);
		String elementUri = null;
		if (widgetURI.isPlatform()) {
			elementUri = ModelURIConverter.toResourceURI(widgetURI).toString();
		} else {
			elementUri = widgetURI.toString(); 
		}
		return elementUri;
	}    
}
