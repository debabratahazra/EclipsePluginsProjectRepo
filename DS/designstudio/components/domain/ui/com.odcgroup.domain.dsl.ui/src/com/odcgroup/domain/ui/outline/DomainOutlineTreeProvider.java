/*
 * generated by Xtext
 */
package com.odcgroup.domain.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.utils.TextStyle;
import org.eclipse.xtext.ui.label.StylerFactory;

import com.google.inject.Inject;
import com.odcgroup.mdf.metamodel.MdfAnnotation;
import com.odcgroup.mdf.metamodel.MdfAssociation;
import com.odcgroup.mdf.metamodel.MdfAttribute;
import com.odcgroup.mdf.metamodel.MdfBusinessType;
import com.odcgroup.mdf.metamodel.MdfClass;
import com.odcgroup.mdf.metamodel.MdfConstants;
import com.odcgroup.mdf.metamodel.MdfDataset;
import com.odcgroup.mdf.metamodel.MdfDatasetDerivedProperty;
import com.odcgroup.mdf.metamodel.MdfDatasetMappedProperty;
import com.odcgroup.mdf.metamodel.MdfDatasetProperty;
import com.odcgroup.mdf.metamodel.MdfDomain;
import com.odcgroup.mdf.metamodel.MdfEntity;
import com.odcgroup.mdf.metamodel.MdfEnumValue;
import com.odcgroup.mdf.metamodel.MdfModelElement;
import com.odcgroup.mdf.metamodel.MdfName;
import com.odcgroup.mdf.metamodel.MdfProperty;
import com.odcgroup.mdf.metamodel.MdfReverseAssociation;
import com.odcgroup.mdf.metamodel.MdfReverseAssociationWrapper;

/**
 * customization of the default outline structure
 * 
 */
public class DomainOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Override
	protected void _createChildren(IOutlineNode parentNode, EObject modelElement) {
		for (EObject childElement : modelElement.eContents()) {
			if (!(childElement instanceof MdfAnnotation)) {
				createNode(parentNode, childElement);
				if (childElement instanceof MdfClass) {
					MdfClass klass1 = (MdfClass) childElement;
					MdfClass klass2 = ((MdfClass) childElement).getBaseClass();
					if (klass2 != null) {
						for (IOutlineNode node : parentNode.getChildren()) {
							String text1 = node.getText().toString();
							String text2 = klass1.getName() + " ("
									+ klass1.getParentDomain().getName() + ":"
									+ klass2.getName() + ")";
							if (text1.equals(text2))
								createNode(node, (EObject) klass2);
						}
					}
				}
			}
		}
	}

	@Override
	protected boolean _isLeaf(EObject modelElement) {
		if (modelElement instanceof MdfEnumValue) {
			MdfEnumValue element = (MdfEnumValue) modelElement;
			if (element.getDocumentation() == null) {
				return true;
			}
		} else if (modelElement instanceof MdfBusinessType
				|| modelElement instanceof MdfAttribute
				|| modelElement instanceof MdfReverseAssociation
				||modelElement instanceof MdfDatasetProperty) {
			return true;
		} else if (modelElement instanceof MdfClass) {
			MdfClass element = (MdfClass) modelElement;
			if (element.getProperties().size() == 0) {
				return true;
			}
		} else if (modelElement instanceof MdfDataset) {
			MdfDataset element = (MdfDataset) modelElement;
			if (element.getProperties().size() == 0) {
				return true;
			}
		} else if (modelElement instanceof MdfAssociation) {
			MdfAssociation element = (MdfAssociation) modelElement;
			if (element.getReverse() == null) {
				return true;
			}
		}
		return false;
	}

	protected TextStyle getTypeTextStyle() {
		TextStyle textStyle = new TextStyle();
		textStyle.setStyle(SWT.ITALIC);
		FontData fd = new FontData("Segoe UI", 9, SWT.ITALIC);
		textStyle.setFontData(fd);
		return textStyle;
	}

	@Inject
	private StylerFactory stylerFactory;

	@Override
	protected Object _text(Object element) {
		StringBuffer prefixBuffer = new StringBuffer();
		StringBuffer suffixBuffer = new StringBuffer();
		String elementText = "";
		if (element instanceof MdfModelElement) {
			elementText = ((MdfModelElement) element).getName();
		}
		if (element instanceof MdfClass) {
			MdfClass klass = (MdfClass) element;
			if (klass.getBaseClass() != null) {
				MdfName mdfName = klass.getBaseClass().getQualifiedName();
				suffixBuffer
						.append(" (")
						.append(mdfName != null ? mdfName.toString() : " ")
						.append(')');
			}
			if (klass.isAbstract()) {
				return new StyledString(
						klass.getName(),
						stylerFactory
								.createXtextStyleAdapterStyler(getTypeTextStyle()));
			}
		} else if (element instanceof MdfProperty) {
			MdfEntity type = ((MdfProperty) element).getType();
			if (type != null) {
				suffixBuffer.append(" (");
				if (element instanceof MdfReverseAssociationWrapper) {
					MdfReverseAssociation rAssoc = (MdfReverseAssociation) element;
					suffixBuffer.append(type.getQualifiedName().toString());
					suffixBuffer.append(" reverse of ");
					suffixBuffer.append(rAssoc.getAssociation().getName());
				} else {
					MdfName mdfName = type.getQualifiedName();
					suffixBuffer.append(mdfName != null ? mdfName.toString() : " ");
				}
				suffixBuffer.append(')');
			}

			MdfProperty p = (MdfProperty) element;
			prefixBuffer.append(p.isRequired() ? "[1-" : "[0-");
			if (p.getMultiplicity() == MdfConstants.MULTIPLICITY_ONE) {
				prefixBuffer.append("1] ");
			} else {
				prefixBuffer.append("n] ");
			}

		} else if (element instanceof MdfEnumValue) {
			String value = ((MdfEnumValue) element).getValue();
			suffixBuffer.append(" = ").append(value);
		} else if (element instanceof MdfDomain) {
			suffixBuffer.append(" (")
					.append(((MdfDomain) element).getNamespace()).append(')');
		} else if (element instanceof MdfDataset) {
			MdfDataset dataset = (MdfDataset) element;
			if (dataset.getBaseClass() != null) {
				suffixBuffer
						.append(" (")
						.append(dataset.getBaseClass().getQualifiedName()
								.toString()).append(')');
			}
		} else if (element instanceof MdfDatasetDerivedProperty) {
			MdfEntity type = ((MdfDatasetProperty) element).getType();

			if (type != null && type.getQualifiedName() != null) {
				suffixBuffer.append(" (")
						.append(type.getQualifiedName().toString()).append(')');
			}

			MdfDatasetProperty p = (MdfDatasetProperty) element;
			prefixBuffer.append("[0-");
			if (p.getMultiplicity() == MdfConstants.MULTIPLICITY_ONE) {
				prefixBuffer.append("1] ");
			} else {
				prefixBuffer.append("n] ");
			}
		} else if (element instanceof MdfDatasetMappedProperty) {
			MdfEntity type = ((MdfDatasetProperty) element).getType();

			if (type != null && type.getQualifiedName() != null) {
				suffixBuffer.append(" (")
						.append(type.getQualifiedName().toString()).append(')');
			}

			MdfDatasetProperty p = (MdfDatasetProperty) element;
			prefixBuffer.append("[0-");
			if (p.getMultiplicity() == MdfConstants.MULTIPLICITY_ONE) {
				prefixBuffer.append("1] ");
			} else {
				prefixBuffer.append("n] ");
			}
		}
		prefixBuffer.append(elementText + suffixBuffer.toString());
		String result = prefixBuffer.toString();

		return result;
	}

}
