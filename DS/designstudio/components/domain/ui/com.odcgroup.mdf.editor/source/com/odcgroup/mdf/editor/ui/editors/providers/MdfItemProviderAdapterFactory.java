/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.odcgroup.mdf.editor.ui.editors.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.odcgroup.mdf.ecore.util.MdfAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MdfItemProviderAdapterFactory extends MdfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MdfItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfDomainItemProvider mdfDomainItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfDomainAdapter() {
		if (mdfDomainItemProvider == null) {
			mdfDomainItemProvider = new MdfDomainItemProvider(this);
		}

		return mdfDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfClassItemProvider mdfClassItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfClassAdapter() {
		if (mdfClassItemProvider == null) {
			mdfClassItemProvider = new MdfClassItemProvider(this);
		}

		return mdfClassItemProvider;
	}
	
	protected MdfBusinessTypeItemProvider mdfBusinessTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfBusinessType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfBusinessTypeAdapter() {
		if (mdfBusinessTypeItemProvider == null) {
			mdfBusinessTypeItemProvider = new MdfBusinessTypeItemProvider(this);
		}
		return mdfBusinessTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfAttributeItemProvider mdfAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfAttributeAdapter() {
		if (mdfAttributeItemProvider == null) {
			mdfAttributeItemProvider = new MdfAttributeItemProvider(this);
		}

		return mdfAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfAssociationItemProvider mdfAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfAssociationAdapter() {
		if (mdfAssociationItemProvider == null) {
			mdfAssociationItemProvider = new MdfAssociationItemProvider(this);
		}

		return mdfAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfReverseAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfReverseAssociationItemProvider mdfReverseAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfReverseAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfReverseAssociationAdapter() {
		if (mdfReverseAssociationItemProvider == null) {
			mdfReverseAssociationItemProvider = new MdfReverseAssociationItemProvider(this);
		}

		return mdfReverseAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfPrimitive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfPrimitiveItemProvider mdfPrimitiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfPrimitive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfPrimitiveAdapter() {
		if (mdfPrimitiveItemProvider == null) {
			mdfPrimitiveItemProvider = new MdfPrimitiveItemProvider(this);
		}

		return mdfPrimitiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfEnumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfEnumerationItemProvider mdfEnumerationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfEnumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfEnumerationAdapter() {
		if (mdfEnumerationItemProvider == null) {
			mdfEnumerationItemProvider = new MdfEnumerationItemProvider(this);
		}

		return mdfEnumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfEnumValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfEnumValueItemProvider mdfEnumValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfEnumValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfEnumValueAdapter() {
		if (mdfEnumValueItemProvider == null) {
			mdfEnumValueItemProvider = new MdfEnumValueItemProvider(this);
		}

		return mdfEnumValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfDataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfDatasetItemProvider mdfDatasetItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfDataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfDatasetAdapter() {
		if (mdfDatasetItemProvider == null) {
			mdfDatasetItemProvider = new MdfDatasetItemProvider(this);
		}

		return mdfDatasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfAnnotationItemProvider mdfAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfAnnotationAdapter() {
		if (mdfAnnotationItemProvider == null) {
			mdfAnnotationItemProvider = new MdfAnnotationItemProvider(this);
		}

		return mdfAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfAnnotationProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfAnnotationPropertyItemProvider mdfAnnotationPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfAnnotationProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfAnnotationPropertyAdapter() {
		if (mdfAnnotationPropertyItemProvider == null) {
			mdfAnnotationPropertyItemProvider = new MdfAnnotationPropertyItemProvider(this);
		}

		return mdfAnnotationPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfDatasetDerivedProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfDatasetDerivedPropertyItemProvider mdfDatasetDerivedPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfDatasetDerivedProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfDatasetDerivedPropertyAdapter() {
		if (mdfDatasetDerivedPropertyItemProvider == null) {
			mdfDatasetDerivedPropertyItemProvider = new MdfDatasetDerivedPropertyItemProvider(this);
		}

		return mdfDatasetDerivedPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.mdf.metamodel.MdfDatasetMappedProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MdfDatasetMappedPropertyItemProvider mdfDatasetMappedPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.mdf.metamodel.MdfDatasetMappedProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMdfDatasetMappedPropertyAdapter() {
		if (mdfDatasetMappedPropertyItemProvider == null) {
			mdfDatasetMappedPropertyItemProvider = new MdfDatasetMappedPropertyItemProvider(this);
		}

		return mdfDatasetMappedPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mdfDomainItemProvider != null) mdfDomainItemProvider.dispose();
		if (mdfClassItemProvider != null) mdfClassItemProvider.dispose();
		if (mdfAttributeItemProvider != null) mdfAttributeItemProvider.dispose();
		if (mdfAssociationItemProvider != null) mdfAssociationItemProvider.dispose();
		if (mdfReverseAssociationItemProvider != null) mdfReverseAssociationItemProvider.dispose();
		if (mdfPrimitiveItemProvider != null) mdfPrimitiveItemProvider.dispose();
		if (mdfEnumerationItemProvider != null) mdfEnumerationItemProvider.dispose();
		if (mdfEnumValueItemProvider != null) mdfEnumValueItemProvider.dispose();
		if (mdfDatasetItemProvider != null) mdfDatasetItemProvider.dispose();
		if (mdfAnnotationItemProvider != null) mdfAnnotationItemProvider.dispose();
		if (mdfAnnotationPropertyItemProvider != null) mdfAnnotationPropertyItemProvider.dispose();
		if (mdfDatasetDerivedPropertyItemProvider != null) mdfDatasetDerivedPropertyItemProvider.dispose();
		if (mdfDatasetMappedPropertyItemProvider != null) mdfDatasetMappedPropertyItemProvider.dispose();
	}

}
