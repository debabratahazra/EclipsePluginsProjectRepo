package com.odcgroup.edge.t24.generation.languagemaps;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;

import org.slf4j.Logger;

import com.acquire.util.StringUtils;
import com.odcgroup.edge.t24.generation.util.GenLogger;
import com.odcgroup.edge.t24.generation.util.ResourcesUtil;
import com.temenos.connect.BrowserConstants;

/**
 * <code>TargetTranslationLanguageSet</code> is a singleton set of {@link Language}(s) representing the set for which edgeConnect language maps are to be generated by the edge Version
 * and Enquiry IFP-generator Design Studio cartridges.<p>
 * 
 * The set is load automatically loaded from resource: "/template/language.properties" on class load.<p>
 * 
 * @author Simon Hayes
 */
public class TargetTranslationLanguageSet {
	private static final ISOLanguageCode BASE_LANGUAGE_ISO_CODE = new ISOLanguageCode(BrowserConstants.DEFAULT_ISO_LANGUAGE_CODE);
    private static final Logger LOGGER = GenLogger.getLogger(TargetTranslationLanguageSet.class);
	private static final Map<String,Language> LANGUAGE_BY_ISO_LANGUAGE_CODE_STR = new TreeMap<String,Language>();
	
	static
	{
		tryLoadLanguageSet();
	}
	
	public static boolean isEmpty()
	{
		return LANGUAGE_BY_ISO_LANGUAGE_CODE_STR.isEmpty();
	}
	
	public int size()
	{
		return LANGUAGE_BY_ISO_LANGUAGE_CODE_STR.size();
	}
	
	public static Iterator<Language> iterator()
	{
		return LANGUAGE_BY_ISO_LANGUAGE_CODE_STR.values().iterator();
	}
	
	public static Language getTargetTranslationLanguageByISOCode(String p_isoLanguageCode)
	{
		return LANGUAGE_BY_ISO_LANGUAGE_CODE_STR.get(p_isoLanguageCode);
	}
	
	public static ISOLanguageCode getTargetTranslationISOCode(String p_isoLanguageCode)
	{
	    if ( p_isoLanguageCode.equals( BASE_LANGUAGE_ISO_CODE.value ) )
	    {
	        return BASE_LANGUAGE_ISO_CODE;
	    }
	    
	    Language targetTranslationLanguageByISOCode = getTargetTranslationLanguageByISOCode( p_isoLanguageCode );
	    
	    if ( targetTranslationLanguageByISOCode != null )
	    {
	        return targetTranslationLanguageByISOCode.isoCode;
	    }
	    
	    return null;
	}
	
	public static ISOLanguageCode getBaseISOLanguageCode()
    {
        return BASE_LANGUAGE_ISO_CODE;
    }
	
	private static void tryLoadLanguageSet()
	{
		InputStream languagePropsInputStream = null;
		
		try {
			final URL languagePropsURL = ResourcesUtil.getMandatoryPlugInResource("/templates/language.properties");
			languagePropsInputStream = languagePropsURL.openStream();
			final Properties props = new Properties();
			
			props.load(languagePropsInputStream);
			final Iterator<Map.Entry<Object,Object>> propEntryIter = props.entrySet().iterator();
			
			while(propEntryIter.hasNext())
			{
				final Map.Entry<Object,Object> entry = propEntryIter.next();
				final String isoLanguageCodeStr = StringUtils.trimEmptyToNull((String) entry.getKey());
				
				// Q. Should generate en anyway, so US can have their own spellings?
				//
				if (BASE_LANGUAGE_ISO_CODE.value.equals(isoLanguageCodeStr))
				{
					LOGGER.warn("[" + languagePropsURL + "] ignoring entry for ISO code: \"" + isoLanguageCodeStr + "\" (English is the base language)");
					continue;
				}
				
				if (isoLanguageCodeStr.length() < ISOLanguageCode.MIN_LENGTH)
				{
					LOGGER.warn("[" + languagePropsURL + "] Invalid language ISO code: \"" + isoLanguageCodeStr + "\" (min length is: " + ISOLanguageCode.MIN_LENGTH + ")");
					continue;
				}
				
				if (isoLanguageCodeStr.length() > ISOLanguageCode.MAX_LENGTH)
				{
					LOGGER.warn("[" + languagePropsURL + "] Invalid language ISO code: \"" + isoLanguageCodeStr + "\" (max length is: " + ISOLanguageCode.MAX_LENGTH + ")");
					continue;
				}
					
				String languageName = StringUtils.trimEmptyToNull((String) entry.getValue());
				
				if (languageName == null)
				{
					LOGGER.warn('[' + new File(languagePropsURL.toURI()).getPath() + "] Missing language name for ISO code: \"" + isoLanguageCodeStr + "\" (will use \"" + isoLanguageCodeStr + "\")");
					languageName = isoLanguageCodeStr;
				}
				
				LANGUAGE_BY_ISO_LANGUAGE_CODE_STR.put(isoLanguageCodeStr, new Language(new ISOLanguageCode(isoLanguageCodeStr), languageName));
			}
		}
		
		catch (Exception e)
		{
			LOGGER.error(e.getMessage() == null ? e.toString() : e.getMessage());
		}
		
		finally
		{
			if (languagePropsInputStream != null)
			{
				try {
					languagePropsInputStream.close();
				}
				
				catch (IOException ioe)
				{
					// Shhh !
				}
			}
		}
	}
}
