domain hothouse {
	use common.HTTPEvents.*
	use common.CoreCommands.*
	use common.ODataCommands.*
	use common.T24Events.*
	use common.T24Commands.*

	// profile resources are used to establish user and system settings	
	use hothouse.Profile.*
	// the navigation menu's
	use hothouse.Menu.*
	
	// auto generated by T24 introspection
	use hothouse.Customers.*
	use hothouse.SecOpenOrders.*

	use ST.Customers.*
	use AC.Accounts.*
	use FT.FundsTransfers.*
	use ST.Currencies.*
	use TT.Tellers.*
	
	rim Hothouse {

		command GETSearchResults

		command CurrencyFieldExpression
		command DebitAccFieldExpression
		command GETField
		command BindQueryParameters
		// command MuleViewCommand
			
		initial resource ServiceDocument {
			type: item
			entity: ServiceDocument
			view: GETServiceDocument
			path: "/"
			
			// The main entry point for Hothouse interaction services
			GET -> root
			GET -> Errors
			
			// Hothouse Profile resources
			GET -> Users
			GET -> HolidayDetailss
		
		    // there is a bug that means resources only used in the link condition aren't created in resources states
		    // https://github.com/temenostech/IRIS/issues/43
		    GET -> hacktoinitialiseconditionalresources
		
		    // Enrichment resources
		    GET -> CustomerEnrichments
		    GET -> FundsTransferEnrichments
		
		    // Validation resources
		    GET -> FundsTransferValidations
		    GET -> TellerValidations
		
		    // Teller entity sets
		    GET -> SetCustVarss
		    GET -> Customer_Inputs
		    GET -> Account_HotOpens
		    GET -> TellerPositions
		    GET -> Teller_Cashinls
		    GET -> AccountPreviews

			// T24 data services
			GET -> CountryLists
			GET -> Countrys
			GET -> Sectors

			// Hothouse reference model bank test resources
			GET -> FundsTransfer_Edges
			GET -> hothouse.CustomerEdges.CustomerEdges
			GET -> hothouse.CustAcctEdges.CustAcctEdges
			GET -> CustomerInfos
			GET -> CustomerNaus
			GET -> Customers
			GET -> NostroPositions
		
		
			//AA resources
			GET -> Mortgages
			GET -> AaProductCatalogProductGroupss
			GET -> AaProductCatalogProductss
			GET -> AA_Arrangement
			
			//Metadata resources
			GET -> T24FieldMetadata
			GET -> T24AAPropertyMetadata
			GET -> StmtEntBooks
			
			//BPM resources
			GET -> hothouse.BPM.ProcessDefinitions
			GET -> hothouse.BPM.Tasks // without this it didn't work (https://github.com/temenostech/IRIS/issues/63)
			GET -> hothouse.BPM.ProcessInstances
		}
		
		exception resource InteractionException {
			type: item
			entity: InteractionException
			view: GETException
		}
		
		resource root {
			type: item
			entity: User
			view: NoopGET
			path: "/root"
			GET -> profile
			GET -> menu
		    GET -> search
		}
		
		
		resource Errors {
			type: collection
			entity: Errors
			view: NoopGET
		}
		
		resource AA_Arrangement {
			type: item
			entity: Menu
			view: NoopGET
			relations [ "http://www.temenos.com/rels/aa" ]
			GET -> AaProductCatalogProductGroupss
			GET -> AaProductCatalogProductss
		}
		
		resource search {
		    type: collection
			entity: Search
		    view: GETSearchResults
		    relations [ "http://www.temenos.com/rels/search" ]
		    GET *-> ST.Customers.customer_input {
				parameters [ id="{id}" ]
			}
		}

		resource StmtEntBooks {
			type: collection
			entity: StmtEntBook
			view: GetLiveEntities {
				properties [ filter=filter ]
			}
			path: "/StmtEntBooks()"
	
		}
		
		resource CountryLists {
			type: collection
			entity: CountryList
			view: GetLiveEntities {
				properties [ filter=filter ]
			}
			path: "/CountryLists()"
			GET *-> country {
				parameters [ id="{Id}" ]
			}
		}

		resource country {
			type: item
			entity: Country
			view: GetLiveEntity
			path: "/Countrys('{id}')"
		}
		
		resource Countrys {
			type: collection
			entity: Country
			view: GetLiveEntities {
				properties [ filter=filter ]
			}
			path: "/Countrys()"
		}
		
		resource Sectors {
			type: collection
			entity: Sector
			view: GetLiveEntities {
				properties [ filter=filter ]
			}
			path: "/Sectors()"
		}

		//
		// Users
		// TODO - move these into T24 module hierarchy of RIMs
		//

		resource Users {
			type: collection
			entity: User
			view: GETEntities
			path: "/Users()"
			GET *-> user {
				parameters [ id="{Id}" ]
			}
		}
		
		resource user {
			type: item
			entity: User
			view: GETEntity
			path: "/Users('{id}')"
		}
				
		
		// Get the Weather forecasts
		/*
		resource Forecasts
		    type: collection
			entity: Forecast
		    view { MuleViewCommand }
		    path: "/Forecasts"
		}
		
		// Get the Weather forecast
		resource Forecast
		    type: item
			entity: Forecast
		    view { MuleViewCommand }
		    path: "/Forecasts/{postcode}"
		}
		 */
		
		// Resources to get CUSTOMER field level enrichments
		resource CustomerEnrichments {
		    type: collection
			entity: Enrichment
		    view: T24Enrichments {
		    	properties [ entity="Customer" ]
		    }
		    relations [ "http://www.temenos.com/rels/enrichments" ]
		    // client needs to form a url /CustomerEnrichments()?RelationCode=14
		    path: "/CustomerEnrichments()"
		    GET *-> CustomerEnrichment {
		    	parameters [ id="{Property}" ]
		    }
		}
		
		resource CustomerEnrichment {
		    type: item
			entity: Enrichment
		    view: T24Enrichment {
		    	properties [ entity="Customer" ]
		    }
		    relations [ "http://www.temenos.com/rels/enrichment" ]
		    // client needs to form url /CustomerEnrichments('RelationCode')?value=14
		    path: "/CustomerEnrichments('{id}')"
		}
		
		// Resources to get FT field level enrichments
		resource FundsTransferEnrichments {
		    type: collection
			entity: FTEnrichment
		    view: T24Enrichments {
		    	properties [ entity="FundsTransfer_Edge" ]
		    }
		    relations [ "http://www.temenos.com/rels/enrichments" ]
		    // client needs to form a url /FundsTransferEnrichments()?CreditCurrency=USD
		    path: "/FundsTransferEnrichments()"
		    GET *-> FundsTransferEnrichment {
		    	parameters [ id="{Property}" ]
		    }
		}
		
		resource FundsTransferEnrichment {
		    type: item
			entity: FTEnrichment
		    view: T24Enrichment {
		    	properties [ entity="FundsTransfer_Edge" ]
		    }
		    relations [ "http://www.temenos.com/rels/enrichment" ]
		    // client needs to form url /FundsTransferEnrichments('CreditCurrency')?value=USD
		    path: "/FundsTransferEnrichments('{id}')"
		}
		
		
		// Resource to validate FTs
		resource FundsTransferValidations {
		    type: collection
			entity: FTValidation
		    view: GETEntities {
		    	properties [ entity="FundsTransfer_Edge" ]
		    }
		    path: "/FundsTransferValidations()"
		}
		resource FundsTransferValidation {
		    type: item
			entity: FTValidation
		    actions [ T24Validation  {
		    	properties [ entity="FundsTransfer_Edge" ]
		    } ]
		    relations [ "http://www.temenos.com/rels/validation" ]
		    // client needs to POST their proposed new entry
		    path: "/FundsTransferValidations({id})"
		}
		
		// Resource to validate Teller deals
		resource TellerValidations {
		    type: collection
			entity: TellerValidation
		    view: GETEntities {
		    	properties [ entity="Teller_Cashinl" ]
		    }
		    path: "/TellerValidations()"
		    VALIDATE *-> TellerValidation
		}
		resource TellerValidation {
		    type: item
			entity: TellerValidation
		    actions [ T24Validation {
		    	properties [ entity="Teller_Cashinl" ]
		    } ]
		    relations [ "http://www.temenos.com/rels/validation" ]
		    // client needs to POST their proposed new entry
		    path: "/TellerValidations({id})"
		}
		
		
		// TELLER
		resource SetCustVarss {
		    type: collection
			entity: SetCustVars
		    view: GETEntities{
		    	properties [ filter=filter ]
		    }
		    path: "/SetCustVarss()"
		    GET *-> setcustvars {
		    	parameters [ id="{ShowAcct}" ]
		    }
		}
		
		resource setcustvars {
		    type: item
			entity: SetCustVars
		    view: GETEntity
		    path: "/SetCustVarss('{id}')"
//		    GET -> CustomerInfos {
//		    	title: "CustomerInfos"
//		    	parameters [ myfilter="CusNo eq '{Customer}'" ]
//		    }
		    // these are query parameters rather than the usual linkage parameters
		    GET -> TellerRetailHome {
		    	title: "Teller Retail Home"
		    	parameters [ customer="{Customer}", account="{ShowAcct}", teller="7777" ]
		    }
		}
		
		// "composite screen" resource TT.MAIN.INPUT
		resource TellerRetailHome {
		    type: item
			entity: Field
		    view: BindQueryParameters
		//    path: "/TellerRetailHome"
		    GET -> TellerPositions {
		    	parameters [ myfilter="TellerId eq '{teller}'" ]
		    }
		    GET -> AccountPreviews {
		    	parameters [ myfilter="CustomerCode eq '{customer}'" ]
		    }
		    
		    // These will of course be defaulted from OS.NEW.DEAL
		    NEW -> teller_cashinl_new {
		    	parameters [ Currency1="USD", Account1="USD100011001", ValueDate2="2012-01-26", TransactionCode="10", WaiveCharges="YES" ]
		   	}
		}
		
		// the cash in my till
		resource TellerPositions {
		    type: collection
			entity: TellerPosition
		    view: GETEntities {
		    	properties [ filter=myfilter ]
		    }
		    path: "/TellerPositions()"
//		    GET *-> currency {
//		    	parameters [ id="{KCurrency}" ]
//		    }
		}
		
		// view the customers accounts
		resource AccountPreviews {
		    type: collection
			entity: AccountPreview
		    view: GETEntities {
		    	properties [ filter=myfilter ]
		    }
		    path: "/AccountPreviews()"
		    GET *-> accountpreview {
		    	parameters [ id="{AccountNumber}" ]
		    }
		}
		
		resource accountpreview {
		    type: item
			entity: AccountPreview
		    view: GETEntity
		    path: "/AccountPreviews('{id}')"
		}
		

		// A resource to get additional information for a specific field (a context enquiry)
		resource FundsTransfers_info {
		    type: item
			entity: Field
		    view: GETField
		    relations [ "http://www.temenos.com/rels/info" ]
		    // client needs to form url /FundsTransfers/info?Name=currency&Value=USD
		    path: "/FundsTransfers/info"
//		    GET -> currency {
//		        title: "Exchange rate"
//		        condition: OK(CurrencyField)
//		        parameters [ id="{value}"]
//		    }
		    // TODO not linking to the correct enquiries at the moment
//		    GET -> CustEntTodays {
//		    	title: "Available Balance Today" 
//		        condition: OK(DebitAccountField)
//		        parameters [ id="{value}"]
//		    }
//		    GET -> CustEntLasts {
//		    	title: "Unauthorised Entries"
//		        condition: OK(DebitAccountField) 
//		        parameters [ id="{value}"]
//		    }
//		    GET -> customeredge {
//		    	title: "Customer's Signature"
//		        condition: OK(DebitAccountField)
//		        parameters [ id="{value}"]
//		    }
		}
		
		// implement expression Field.name = "currency"
		resource CurrencyField {
		    type: item
			entity: Field
		    view: CurrencyFieldExpression
		}
		
		// implement expression Field.name = "debitAcc"
		resource DebitAccountField {
		    type: item
			entity: Field
		    view: DebitAccFieldExpression
		}
		
		// this hack simple loads the conditional resource states
		resource hacktoinitialiseconditionalresources {
		    type: item
			entity: Field
		    view: NoopGET
		    GET -> CurrencyField
		    GET -> DebitAccountField
		}
		
		resource Mortgages {
			type: collection
			entity: Mortgage
			view: GETEntities {
				properties [ filter=filter ]
			}
			path: "/Mortgages()"
			SEE *-> mortgage {
				parameters [ id="{ArrSequence}" ]
			}
		}
		
		resource mortgage {
			type: item
			entity: Mortgage
			view: GetLiveEntity
			path: "/Mortgages('{id}')"
		}
		
		resource Mortgages_new {
			type: item
			entity: Mortgage
			actions [ CreateEntity ]
			relations [ "http://www.temenos.com/rels/new" ]
			path: "/Mortgages()/new"
			INPUT -> Mortgages_input
		}
		
		resource Mortgages_input {
			type: item
			entity: Mortgage
			actions [ T24AANewArrangementCommand ]
		    relations [ "http://www.temenos.com/rels/input" ]
			path: "/Mortgages()"
			SEE --> mortgage {
				condition: OK(mortgage)
				parameters [ id="{ArrSequence}" ]
			}
		}
		
		resource T24FieldMetadata {
		    type: collection
			entity: T24FieldMetadata
		    actions [T24FieldMetadata]
		    relations [ "http://www.temenos.com/rels/metadata" ]
		    path: "/T24FieldMetadata()"
		}
		
		resource T24AAPropertyMetadata {
		    type: collection
			entity: T24AAPropertyMetadata
		    view: T24AAPropertyMetadata
		    relations [ "http://www.temenos.com/rels/t24/aaPropertyMetadata" ]
		    path: "/T24AAPropertyMetadata()"
		}

		resource AaProductCatalogProductGroupss {
			type: collection
			entity: AaProductCatalogProductGroups
			view: GetLiveEntities {
				properties [ filter=filter ]
			}
			path: "/AaProductCatalogProductGroupss()"
			
		}
		
		resource AaProductCatalogProductss {
			type: collection
			entity: AaProductCatalogProducts
			view: GETEntities {
				properties [ filter=filter ]
			}
			relations [ "http://schemas.microsoft.com/ado/2007/08/dataservices/related/AaProductCatalogProductss" ]
			path: "/AaProductCatalogProductss()"
			
		}
		
		resource NostroPositions {
			type: collection
			entity: NostroPosition
			view: GETEntities {
				properties [ filter=filter ]
			}
			relations [ "http://schemas.microsoft.com/ado/2007/08/dataservices/related/NostroPositions" ]
		}
		
	}
}
