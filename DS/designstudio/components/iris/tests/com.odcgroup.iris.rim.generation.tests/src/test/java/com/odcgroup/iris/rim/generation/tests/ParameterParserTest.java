package com.odcgroup.iris.rim.generation.tests;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

import com.odcgroup.iris.generator.Resource.RESOURCE_TYPE;
import com.odcgroup.iris.rim.generation.ParameterParser;
import com.odcgroup.iris.rim.generation.ParameterParserResult;

/**
 * TODO: Document me!
 *
 * @author mlambert
 *
 */
public class ParameterParserTest {

	@Test
	public void test() {
		class Test {
			private final RESOURCE_TYPE m_resourceTypeInput;
			
			private final String
				m_t24ResourceNameInput,
				m_t24ParametersInput,
				m_expectedResourceNameOutput,
				m_expectedParamsOutput;
			
			Test(RESOURCE_TYPE p_resourceTypeInput, String p_T24ResourceNameInput, String p_t24ParametersInput, String p_expectedResourceNameOutput, String p_expectedParamsOutput) {
				m_resourceTypeInput = p_resourceTypeInput;
				m_t24ResourceNameInput = p_T24ResourceNameInput;
				m_t24ParametersInput = p_t24ParametersInput;
				m_expectedResourceNameOutput = p_expectedResourceNameOutput;
				m_expectedParamsOutput = p_expectedParamsOutput;
			}
			
			int execute(int p_testNumber) {
				final ParameterParserResult result = ParameterParser.getResourceName(m_resourceTypeInput, m_t24ResourceNameInput, m_t24ParametersInput);
				final boolean isExpectedResourceNameOutput = testStringEquality(result.getResourceName(), m_expectedResourceNameOutput);
				final boolean isExpectedParamsOutput = testStringEquality(result.getParameters(), m_expectedParamsOutput);
				
				if (isExpectedResourceNameOutput && isExpectedParamsOutput) {
					System.out.println(p_testNumber + ". PASS " + this);
					return 1;
				}
				
				System.out.println(p_testNumber + ". FAIL " + this);
				
				if (! isExpectedResourceNameOutput) {
					System.out.println("- resource name mismatch:");
					System.out.println("  - expected: " + m_expectedResourceNameOutput);
					System.out.println("  - but got : " + result.getResourceName());
				}
				
				if (! isExpectedParamsOutput) {
					System.out.println("- parameters mismatch:");
					System.out.println("  - expected: " + m_expectedParamsOutput);
					System.out.println("  - but got : " + result.getParameters());
				}
				
				return 0;
			}
			
			boolean testStringEquality(String s1, String s2) {
				return (
					((s1 == null) == (s2 == null)) &&
					((s1 == null) || s1.equals(s2))
				);
			}
			
			@Override
            public String toString() {
				final StringBuilder sb = new StringBuilder();
				
				sb.append("[resourceType: ");
				sb.append(m_resourceTypeInput);
				
				sb.append(", t24ResourceName: ");
				sb.append(m_t24ResourceNameInput);
				
				sb.append(", t24Params: ");
				sb.append(m_t24ParametersInput);
				
				sb.append(']');
				
				return sb.toString();
			}
		}
		
		int numTestsExecuted = 0;
		int numTestsPassed = 0;
		
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "MY.FIELD gt MY.VALUE, FIELD < VALUE, I F3, NONE", "verMyVersion_new", "parameters [ filter=\"MyField gt '{MyValue}'\" , Value = \"{Field}\" , HideToolbar = \"true\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "MY.FIELD eq 'ABC'", "enqMyEnquirys", "parameters [ filter=\"MyField eq 'ABC'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "MY.VAR > 'ABC'", "enqMyEnquirys", "parameters [ MyVar = \"ABC\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "'ABC' < MY.VAR", "enqMyEnquirys", "parameters [ MyVar = \"ABC\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "S \"12345\"", "verMyVersion_see", "parameters [ id = \"12345\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "S '12345'", "verMyVersion_see", "parameters [ id = \"12345\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "S AN.ID", "verMyVersion_see", "parameters [ id = \"{AnId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "MY.FIELD gt MY.VALUE, FIELD < VALUE, I F3", "verMyVersion_new", "parameters [ filter=\"MyField gt '{MyValue}'\" , Value = \"{Field}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "MY.FIELD gt MY.VALUE, MY.OTHER.FIELD le MY.OTHER.VALUE, FIELD < VALUE, I F3", "verMyVersion_new", "parameters [ filter=\"MyField gt '{MyValue}' and MyOtherField le '{MyOtherValue}'\" , Value = \"{Field}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "MY.COMPOSITE", "InputSectorNumber={InputSectorNumber}", "cosMyComposite", "").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "FIELD.ONE eq VALUE, FIELD.TWO LT OTHER.VALUE", "enqMyEnquirys", "parameters [ filter=\"FieldOne eq '{Value}' and FieldTwo lt '{OtherValue}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", null, "enqMyEnquirys", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "MY.COMPOSITE", null, "cosMyComposite", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "MY.COMPOSITE", "CURRENT.ACCOUNT > @ID, USER < CURRENT.USER", "cosMyComposite", "parameters [ CurrentAccount = \"{Id}\" , CurrentUser = \"{User}\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "MY.COMPOSITE", "< MY.VARIABLE", "cosMyComposite", "parameters [ MyVariable = \"{MyVariable}\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "MY.TABBED", null, "cosMyTabbed", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", null, "verMyVersionEntry", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "I", "verMyVersions", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "I   'SYSTEM'", "verMyVersion", "parameters [ id = \"SYSTEM\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "I VAR", "verMyVersion", "parameters [ id = \"{Var}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MY.VERSION", "I F3", "verMyVersion_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.menu, "MY.MENU", "I FIELD", "mnuMyMenu", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "NONE", "enqMyEnquirys", "parameters [ HideToolbar = \"true\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "MY.ENQUIRY", "@ID EQ CURRENT.CUSTOMER", "enqMyEnquirys", "parameters [ filter=\"Id eq '{CurrentCustomer}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LMM.CHARGE.CONDITIONS,ADMIN.INPUT", "I @ID", "verLmmChargeConditions_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LMM.CHARGE.CONDITIONS,ADMIN.INPUT", "I", "verLmmChargeConditions_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,AUTH", "A ID", "verAcChargeRequest_Auth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,DEL", "D ID", "verAcChargeRequest_Del_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "STMT.GEN.CONDITION,ADMIN.INPUT", "I @ID", "verStmtGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "STMT.GEN.CONDITION,ADMIN.INPUT", "I", "verStmtGenCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MODEL.PORT.REBUILD,INP", "I @ID", "verAmModelPortRebuild_Inp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.TRANSFER,INPUT", "I SEC.TXFR.ID", "verSecurityTransfer_Input", "parameters [ id = \"{SecTxfrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PW.ACTIVITY.TXN,MAIN.HP", "S @ID", "verPwActivityTxn_MainHp_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PW.ACTIVITY.TXN,MAIN.HP", "I @ID", "verPwActivityTxn_MainHp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "DE.MSG.SUM", "DeliveryRef eq DelRef", "enqDeMsgSums", "parameters [ filter=\"DeliveryRef eq '{DelRef}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,590", "S @ID", "verAcChargeRequest_590_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "I @ID", "verAcCashPool_AaAcpo", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "D @ID", "verAcCashPool_AaAcpo_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "S @ID", "verAcCashPool_AaAcpo_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.MESSAGE.IN", "", "enqAiMessageIns", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.MASTER,INP", "S SEC.NO", "verSecurityMaster_Inp_see", "parameters [ id = \"{SecNo}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.PLEDGE.COLL.AL", "I ID", "cosAaDetailsPledgeCollAl", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.AM.CCY.GRID", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbAmCcyGrids", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VALUATION.MATRIX", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValuationMatrixs", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VALUATION.RPT", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValuationRpts", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValCharts", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VAL.MULTIPIE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqAmValMultipies", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.NEW", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartNews", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.LINE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartLines", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.BAR", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartBars", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.COST", "SecurityAcc eq Portfolio , OnlineYno eq 'Y'", "enqScValCosts", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq 'Y'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.MARGIN", "SecurityAcc eq Portfolio , OnlineYno eq Oyno", "enqScValMargins", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.PL", "SecurityAcc eq Portfolio", "enqScValPls", "parameters [ filter=\"SecurityAcc eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.AM.PORT.HOLDINGS", "SecurityAccount eq Portfolio", "enqGbAmPortHoldingss", "parameters [ filter=\"SecurityAccount eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.RUNNER,AA.SIM.RUN", "A @ID", "verAaSimulationRunner_AaSimRun_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.RUNNER,AA.SIM.RUN", "D @ID", "verAaSimulationRunner_AaSimRun_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.DOCUMENTS.AR", "I ARR.ID", "cosAaDetailsDocumentsAr", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.STATEMENT,INPUT", "A @ID", "verAccountStatement_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.STATEMENT,INPUT", "D @ID", "verAccountStatement_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INTERIM.CAP,INPUT", "A @ID", "verAcctInterimCap_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INTERIM.CAP,INPUT", "D @ID", "verAcctInterimCap_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.FILE.UPLOAD,INPUT", "S @ID", "verEbFileUpload_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.WEALTH.ALERTS", "", "cosAiWealthAlerts", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.WEALTH.AC.ALERTS", "Alert eq 'Balance-Alerts'", "cosAiWealthAcAlerts", "parameters [ filter=\"Alert eq 'Balance-Alerts'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SEC.MOVEMENTS.BY.PORTFOLIO", "SecurityAccount eq DispSamNo , SecurityNumber eq InstNo", "enqSecMovementsByPortfolios", "parameters [ filter=\"SecurityAccount eq '{DispSamNo}' and SecurityNumber eq '{InstNo}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "I @ID", "verAmMatrix_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "S @ID", "verAmMatrix_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "I", "verAmMatrix_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,AMEND.SCV", "I CARD.ISSUE", "verCardIssue_AmendScv", "parameters [ id = \"{CardIssue}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,AUTH.HP", "A ACCOUNT.NUMBER", "verAccount_AuthHp_IAuth", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,DELETE.HP", "D ACCOUNT.NUMBER", "verAccount_DeleteHp_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,DELETE.HP", "S ACCOUNT.NUMBER", "verAccount_DeleteHp_see", "parameters [ id = \"{AccountNumber}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "S CARD.ISSUE", "verCardIssue_Input_see", "parameters [ id = \"{CardIssue}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "I CARD.ISSUE", "verCardIssue_Input", "parameters [ id = \"{CardIssue}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SEGMENTS,INPUT", "I @ID", "verAmSegments_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I @ID", "verCategory_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I", "verCategory_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DOC.IMAGES.VIEW", "Id eq Id", "enqAaDocImagesViews", "parameters [ filter=\"Id eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "IM.DOCUMENT.IMAGE,AA.EDIT", "I ID", "verImDocumentImage_AaEdit", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DOC.IMAGE.REVERSE", "Id eq Id", "enqAaDocImageReverses", "parameters [ filter=\"Id eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.STATUS,ADMIN.INPUT", "I @ID", "verSlStatus_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.STATUS,ADMIN.INPUT", "I", "verSlStatus_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.DEBIT.LIMIT,CREATE", "A @ID", "verAccountDebitLimit_Create_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.DEBIT.LIMIT,CREATE", "D @ID", "verAccountDebitLimit_Create_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.CAPITALISATION,INPUT", "A @ID", "verAcctCapitalisation_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.CAPITALISATION,INPUT", "D @ID", "verAcctCapitalisation_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VIOLATION", "ViolationCode eq ScViolation", "enqAmViolations", "parameters [ filter=\"ViolationCode eq '{ScViolation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.SCHEDULE.DETAILS", "ArrangementId eq ArrId , DateDue eq DueDate", "enqAaScheduleDetailss", "parameters [ filter=\"ArrangementId eq '{ArrId}' and DateDue eq '{DueDate}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.CAPITALISATION,INPUT", "A @ID", "verAcctCapitalisation_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.CAPITALISATION,INPUT", "D @ID", "verAcctCapitalisation_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.COMP.Q", "CompNo eq CompositeId , StartDate eq LinkStart , EndDate eq LinkEnd , Benchmark eq DispBench , CalcMethod eq PerfMethod , GrossOrNet eq DispGOrN", "enqAmPerfCompQs", "parameters [ filter=\"CompNo eq '{CompositeId}' and StartDate eq '{LinkStart}' and EndDate eq '{LinkEnd}' and Benchmark eq '{DispBench}' and CalcMethod eq '{PerfMethod}' and GrossOrNet eq '{DispGOrN}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "LIAB", "LiabilityNumber eq FldCu", "enqLiabs", "parameters [ filter=\"LiabilityNumber eq '{FldCu}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "CUSTOMER.POSITION", "CustomerNo eq FldCu", "enqCustomerPositions", "parameters [ filter=\"CustomerNo eq '{FldCu}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VALUATION.MATRIX", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValuationMatrixs", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.COST", "SecurityAcc eq Portfolio , OnlineYno eq 'Y'", "enqScValCosts", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq 'Y'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.MARGIN", "SecurityAcc eq Portfolio , OnlineYno eq 'Y'", "enqScValMargins", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq 'Y'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.PL", "SecurityAcc eq Portfolio , OnlineYno eq 'Y'", "enqScValPls", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq 'Y'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA", "S ACT.ID", "verAaArrangementActivity_Aa_see", "parameters [ id = \"{ActId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MANDATE,INPUT", "S MANDATE.RECORD", "verEbMandate_Input_see", "parameters [ id = \"{MandateRecord}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MANDATE,INPUT", "I MANDATE.RECORD", "verEbMandate_Input", "parameters [ id = \"{MandateRecord}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "S CUSTID", "verAccount_CaMandate_see", "parameters [ id = \"{Custid}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "I CUSTID", "verAccount_CaMandate", "parameters [ id = \"{Custid}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.EXPECTED.RECS,AUTO", "S ID", "verAcExpectedRecs_Auto_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.AA.PAYMENT.SCHEDULES", "ArrangementId eq Id", "enqAiAaPaymentScheduless", "parameters [ filter=\"ArrangementId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FOREX,PVT.BANKING", "S @ID", "verForex_PvtBanking_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "REPO.UNAU.ENTRY.LIST", "ContractId eq Id", "enqRepoUnauEntryLists", "parameters [ filter=\"ContractId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "AccountNumber eq Id , I F3", "verAcLockedEvents_InputScv_new", "parameters [ filter=\"AccountNumber eq '{Id}'\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.COLLATERAL.DETS", "CollateralRight substringof Id", "enqAmCollateralDetss", "parameters [ filter=\"substringof(CollateralRight, Id)\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "ACCOUNT.DETAILS", "I @ID", "cosAccountDetails", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER,INPUT", "S CUSTOMER.ID", "verCustomer_Input_see", "parameters [ id = \"{CustomerId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.EXTERNAL.USER,AMEND", "S EXT.ID", "verEbExternalUser_Amend_see", "parameters [ id = \"{ExtId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I @ID", "verCategory_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I", "verCategory_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,NAU.AMEND", "S ACCOUNT.NUMBER", "verAccount_NauAmend_see", "parameters [ id = \"{AccountNumber}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,NAU.AMEND", "I ACCOUNT.NUMBER", "verAccount_NauAmend", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,NAU.AMEND", "D ACCOUNT.NUMBER", "verAccount_NauAmend_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BASIC.RATE.TEXT,ADMIN.INPUT", "I @ID", "verBasicRateText_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BASIC.RATE.TEXT,ADMIN.INPUT", "I", "verBasicRateText_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VAL.DETAIL.DURATION", "SamId eq PortfolioId", "enqAmValDetailDurations", "parameters [ filter=\"SamId eq '{PortfolioId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GEN.CONDITION,ADMIN.INPUT", "I @ID", "verFtGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GEN.CONDITION,ADMIN.INPUT", "I", "verFtGenCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MANDATE,INPUT", "S MANDATE.RECORD", "verEbMandate_Input_see", "parameters [ id = \"{MandateRecord}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "S CUSTID", "verAccount_CaMandate_see", "parameters [ id = \"{Custid}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.AA.ARRANGEMENTS.LIST", "Id eq AaArrIds", "enqAaAaArrangementsLists", "parameters [ filter=\"Id eq '{AaArrIds}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CP.GROUP.PARAM,SUBGROUPS", "A @ID", "verAcCpGroupParam_Subgroups_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CP.GROUP.PARAM,SUBGROUPS", "D @ID", "verAcCpGroupParam_Subgroups_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH.HP", "A ACCOUNT.NUMBER", "verAccountClosure_AuthHp_IAuth", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH.HP", "D ACCOUNT.NUMBER", "verAccountClosure_AuthHp_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH.HP", "S ACCOUNT.NUMBER", "verAccountClosure_AuthHp_see", "parameters [ id = \"{AccountNumber}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MODEL.PORT.REBUILD,INPUT", "I @ID", "verAmModelPortRebuild_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.TXN.TYPE.CONDITION,ADMIN.INPUT", "I Id", "verBlTxnTypeCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.TXN.TYPE.CONDITION,ADMIN.INPUT", "I Id", "verBlTxnTypeCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.PERFORMANCE.FEES,AUTH", "I DET.ID", "verAmPerformanceFees_Auth", "parameters [ id = \"{DetId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LETTER.OF.CREDIT,AI.IMPORTMODIFY", "I @ID", "verLetterOfCredit_AiImportmodify", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.SECURE.MESSAGE,AI.APPLY", "I F3", "verEbSecureMessage_AiApply_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FACILITY,AMEND", "I @ID", "verFacility_Amend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "I ARRANGEMENT", "verAcCashPool_AaAcpo", "parameters [ id = \"{Arrangement}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,VIEW", "S @ID", "verCardIssue_View_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.BENCHMARK,INPUT", "I @ID", "verAmBenchmark_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.BENCHMARK,INPUT", "S @ID", "verAmBenchmark_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.BENCHMARK,INPUT", "I", "verAmBenchmark_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "S CARD.ISSUE", "verCardIssue_Input_see", "parameters [ id = \"{CardIssue}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "I CARD.ISSUE", "verCardIssue_Input", "parameters [ id = \"{CardIssue}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "D CARD.ISSUE", "verCardIssue_Input_delete", "parameters [ id = \"{CardIssue}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SCV.CONTACT.DET", "ClientContactLog eq Id", "enqScvContactDets", "parameters [ filter=\"ClientContactLog eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CR.CONTACT.LOG,SCV.UPD", "I @ID", "verCrContactLog_ScvUpd", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I @ID", "verCategory_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I", "verCategory_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.GROUP.CONDITION,ADMIN.INPUT", "I Id", "verBlGroupCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.GROUP.CONDITION,ADMIN.INPUT", "I Id", "verBlGroupCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEPT.ACCT.OFFICER,ADMIN.INPUT", "I @ID", "verDeptAcctOfficer_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEPT.ACCT.OFFICER,ADMIN.INPUT", "I", "verDeptAcctOfficer_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.BULK.MASTER,AI.INPUT", "I @ID", "verFtBulkMaster_AiInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.OVERDUE.STATS,DETAILS", "S @ID", "verAaOverdueStats_Details_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA", "S ACT.ID", "verAaArrangementActivity_Aa_see", "parameters [ id = \"{ActId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,SB.AMEND", "I @ID", "verAccount_SbAmend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "ACCOUNT.MAINTENANCE", "I @ID", "cosAccountMaintenance", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValCharts", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VAL.MULTIPIE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqAmValMultipies", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.NEW", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartNews", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.LINE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartLines", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.BAR", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartBars", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.COST", "SecurityAcc eq Portfolio , OnlineYno eq 'Y'", "enqScValCosts", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq 'Y'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.MARGIN", "SecurityAcc eq Portfolio , OnlineYno eq Oyno", "enqScValMargins", "parameters [ filter=\"SecurityAcc eq '{Portfolio}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.VAL.PL", "SecurityAcc eq Portfolio", "enqScValPls", "parameters [ filter=\"SecurityAcc eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.AM.PORT.HOLDINGS", "SecurityAccount eq Portfolio", "enqGbAmPortHoldingss", "parameters [ filter=\"SecurityAccount eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I @ID", "verCategory_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I", "verCategory_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ARC.AUTH", "A REF.NO", "verFundsTransfer_ArcAuth_IAuth", "parameters [ id = \"{RefNo}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,AI.UTIL.AMEND", "I @ID", "verBeneficiary_AiUtilAmend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,AI.UTIL.DEL", "R @ID", "verBeneficiary_AiUtilDel_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,CP.SWEEPS", "I @ID", "verAcCashPool_CpSweeps", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.MASTER,INP", "SecurityCode eq Security , S SECURITY", "verSecurityMaster_Inp_see", "parameters [ filter=\"SecurityCode eq '{Security}'\" , id = \"{Security}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.DD.ITEM.DISPLAY", "MandateRef eq Id", "enqAiDdItemDisplays", "parameters [ filter=\"MandateRef eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,STANDALONE.CANCEL", "I @ID", "verDdDdi_StandaloneCancel", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SOURCE.CALC.TYPE,AA", "S @ID", "verAaSourceCalcType_Aa_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SOURCE.CALC.TYPE,AA", "I @ID", "verAaSourceCalcType_Aa", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA", "S ACT.ID", "verAaArrangementActivity_Aa_see", "parameters [ id = \"{ActId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.EXPECTED.RECS,MATCH", "I ID", "verAcExpectedRecs_Match", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.OVERDUE.STATS,DETAILS", "S @ID", "verAaOverdueStats_Details_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.D.1M", "SamNo eq DispPortfolio , StartDate eq LinkStart , EndDate eq LinkEnd , CalcMethod eq CMethod , DecimalRange eq DRange , PerfType eq GOrNet , Benchmark eq BMark", "enqAmPerfPrtD1ms", "parameters [ filter=\"SamNo eq '{DispPortfolio}' and StartDate eq '{LinkStart}' and EndDate eq '{LinkEnd}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}' and PerfType eq '{GOrNet}' and Benchmark eq '{BMark}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SC.AGENT.PLACE,INPUT", "I @ID", "verScAgentPlace_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.MESSAGE.READ.SENT", "Id eq MsgId", "enqAiMessageReadSents", "parameters [ filter=\"Id eq '{MsgId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.NEW.ACTIVITIES", "Arrangement eq Id", "enqAaDetailsNewActivitiess", "parameters [ filter=\"Arrangement eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "A @ID", "verFundsTransfer_Auth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "D @ID", "verFundsTransfer_Auth_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE", "ArrangementId eq ArrId , SimRef eq Sim", "enqAaDetailsSchedules", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.OVERVIEW.MARGIN", "I ARRANGEMENT", "cosAaOverviewMargin", "parameters [ id = \"{Arrangement}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.TODAY", "AccountNo eq Acc", "enqStmtEntTodays", "parameters [ filter=\"AccountNo eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.LAST", "", "enqStmtEntLasts", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.CAPTURE,AA", "I SIM.CAPTURE.REF", "verAaSimulationCapture_Aa", "parameters [ id = \"{SimCaptureRef}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE", "ArrangementId eq ArrId , SimRef eq Sim", "enqAaDetailsSchedules", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,SWIFTAUTH", "A @ID", "verAcChargeRequest_Swiftauth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,SWIFTAUTH", "D @ID", "verAcChargeRequest_Swiftauth_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,AI.NEW.LOCAL", "I F3", "verBeneficiary_AiNewLocal_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,AI.NEW.LOCAL.OB", "I F3", "verBeneficiary_AiNewLocalOb_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,AI.NEW.INTERNATIONAL", "I F3", "verBeneficiary_AiNewInternational_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "LD.BALANCES.FULL", "ContractId eq ContractNo", "enqLdBalancesFulls", "parameters [ filter=\"ContractId eq '{ContractNo}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,STANDALONE", "S @ID", "verDdDdi_Standalone_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,STANDALONE", "I @ID", "verDdDdi_Standalone", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,CANCEL", "CurrentStatus < Dummy1 , I @ID", "verDdDdi_Cancel", "parameters [ Dummy1 = \"{CurrentStatus}\" , id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.NEW.ACTIVITIES", "Arrangement eq Id", "enqAaDetailsNewActivitiess", "parameters [ filter=\"Arrangement eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DENOM.TYPE,ADMIN.INPUT", "I @ID", "verDenomType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DENOM.TYPE,ADMIN.INPUT", "I", "verDenomType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.CHARGE.ACTIVITY,ADMIN.INPUT", "I @ID", "verSlChargeActivity_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.CHARGE.ACTIVITY,ADMIN.INPUT", "I", "verSlChargeActivity_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INACTIVE.RESET,INPUT", "A ID", "verAcctInactiveReset_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INACTIVE.RESET,INPUT", "D ID", "verAcctInactiveReset_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER.DENOMINATION,ADMIN.INPUT", "I @ID", "verTellerDenomination_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER.DENOMINATION,ADMIN.INPUT", "I", "verTellerDenomination_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLASS,ADMIN.INPUT", "I @ID", "verAccountClass_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLASS,ADMIN.INPUT", "I", "verAccountClass_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER.STATUS,ADMIN.INPUT", "I @ID", "verCustomerStatus_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER.STATUS,ADMIN.INPUT", "I", "verCustomerStatus_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY.INTERNATIONAL", "I F3", "verFundsTransfer_AiBeneficiaryInternational_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "COLLATERAL.TYPE,ADMIN.INPUT", "I @ID", "verCollateralType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "COLLATERAL.TYPE,ADMIN.INPUT", "I", "verCollateralType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.RUNNER,AA", "I SIMULATION", "verAaSimulationRunner_Aa", "parameters [ id = \"{Simulation}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.SUB.AC", "A @ID", "verAccount_IcaSubAc_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.SUB.AC", "D @ID", "verAccount_IcaSubAc_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC,SB.LCY", "I F3", "verAc_SbLcy_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC,SB.FCY", "I F3", "verAc_SbFcy_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC,CA.OPEN", "I F3", "verAc_CaOpen_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCOUNT.STATEMENT.SCRN", "SelectAccount eq Id , StmtDate eq StatementDates , StmtFreq eq '1'", "enqAccountStatementScrns", "parameters [ filter=\"SelectAccount eq '{Id}' and StmtDate eq '{StatementDates}' and StmtFreq eq '1'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TARGET,ADMIN.INPUT", "I @ID", "verTarget_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TARGET,ADMIN.INPUT", "I", "verTarget_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TAX.TYPE,ADMIN.INPUT", "I @ID", "verTaxType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TAX.TYPE,ADMIN.INPUT", "I", "verTaxType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.RECOMMENDATION,AM", "I RECOMMENDATION.NO", "verAmRecommendation_Am", "parameters [ id = \"{RecommendationNo}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.MASTER,INP", "S SECURITY", "verSecurityMaster_Inp_see", "parameters [ id = \"{Security}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.SUPP,INPUT", "S SECURITY", "verSecuritySupp_Input_see", "parameters [ id = \"{Security}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,BUILD", "I DDOWN.ID", "verAmDynamicModel_Build", "parameters [ id = \"{DdownId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,INPUT", "D LIST.ID", "verAmDynamicModel_Input_delete", "parameters [ id = \"{ListId}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH", "S ACCOUNT.NUMBER", "verAccountClosure_Auth_see", "parameters [ id = \"{AccountNumber}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH", "I ACCOUNT.NUMBER", "verAccountClosure_Auth", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH", "D ACCOUNT.NUMBER", "verAccountClosure_Auth_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "STANDING.ORDER,AI.CANCEL", "R STANDING.ORDER", "verStandingOrder_AiCancel_RAuth", "parameters [ id = \"{StandingOrder}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GROUP.CONDITION,ADMIN.INPUT", "I @ID", "verFtGroupCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GROUP.CONDITION,ADMIN.INPUT", "I", "verFtGroupCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "STO,AI.CANCEL", "R STANDING.ORDER", "verSto_AiCancel_RAuth", "parameters [ id = \"{StandingOrder}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.ACTIVITY.LOG.FIN", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsActivityLogFins", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.ACTIVITY.LOG.FINANCIAL.FIN", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsActivityLogFinancialFins", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.ACTIVITY.LOG.USER.FIN", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsActivityLogUserFins", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.ACTIVITY.LOG.SYSTEM.FIN", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsActivityLogSystemFins", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ATTACH.LIMIT", "A @ID", "verAccount_AttachLimit_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ATTACH.LIMIT", "D @ID", "verAccount_AttachLimit_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA", "S ACT.ID", "verAaArrangementActivity_Aa_see", "parameters [ id = \"{ActId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,CP.SWEEPS", "A @ID", "verAcCashPool_CpSweeps_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,CP.SWEEPS", "D @ID", "verAcCashPool_CpSweeps_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.SWEEP.TYPE,ADMIN.INPUT", "I", "verAcSweepType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.SWEEP.TYPE,ADMIN.INPUT", "I @ID", "verAcSweepType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.PRICE.CHANGE", "I SM", "cosAiPriceChange", "parameters [ id = \"{Sm}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.QUERIES.ANSWERS,STAFF", "S @ID", "verEbQueriesAnswers_Staff_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.ALERT.REQUEST,AI.INHERIT", "I ID", "verEbAlertRequest_AiInherit", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.COMPOSITE,INPUT", "I @ID", "verAmComposite_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.COMPOSITE,INPUT", "S @ID", "verAmComposite_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.COMPOSITE,INPUT", "I", "verAmComposite_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "COLLATERAL,INP", "S @ID", "verCollateral_Inp_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLASS,ADMIN.INPUT", "I", "verAccountClass_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLASS,ADMIN.INPUT", "I @ID", "verAccountClass_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GROUP.CONDITION,ADMIN.INPUT", "I @ID", "verFtGroupCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.GROUP.CONDITION,ADMIN.INPUT", "I", "verFtGroupCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO.SAVED,SEE", "S @ID", "verAmScenarioSaved_See_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.DEBIT.INT,DR.MAIN", "A @ID", "verAccountDebitInt_DrMain_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.DEBIT.INT,DR.MAIN", "D @ID", "verAccountDebitInt_DrMain_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INACTIVE.RESET,INPUT", "I @ID", "verAcctInactiveReset_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FOREX,INPUT", "I @ID", "verForex_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.ADVICE.TEXT,AI.CUSTOMER.AMEND", "I @ID", "verLcAdviceText_AiCustomerAmend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.TYPE,ADMIN.INPUT", "I Id", "verBlType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.DISP.PERF.CORR.TOOL", "Portfolio eq PortId , Date eq PerfDate , Instrument eq InstrId", "enqAmDispPerfCorrTools", "parameters [ filter=\"Portfolio eq '{PortId}' and Date eq '{PerfDate}' and Instrument eq '{InstrId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GEN.CONDITION,ADMIN.INPUT", "I @ID", "verAcctGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GEN.CONDITION,ADMIN.INPUT", "I", "verAcctGenCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "REPO.TYPE,INPUT", "I @ID", "verRepoType_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "REPO.TYPE,INPUT", "I", "verRepoType_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "AccountNumber eq '!CURRENT.ACCOUNT' , I F3", "verAcLockedEvents_InputScv_new", "parameters [ filter=\"AccountNumber eq '!CURRENT.ACCOUNT'\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.CONTRACT.BALANCES,AC", "I @ID", "verEbContractBalances_Ac", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MANDATE,INPUT", "S MANDATE.RECORD", "verEbMandate_Input_see", "parameters [ id = \"{MandateRecord}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MANDATE,INPUT", "I MANDATE.RECORD", "verEbMandate_Input", "parameters [ id = \"{MandateRecord}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "S CUSTID", "verAccount_CaMandate_see", "parameters [ id = \"{Custid}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "I CUSTID", "verAccount_CaMandate", "parameters [ id = \"{Custid}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CP.GROUP.PARAM,GROUPS", "S GROUP.ID", "verAcCpGroupParam_Groups_see", "parameters [ id = \"{GroupId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEALER.DESK,ADMIN.INPUT", "I @ID", "verDealerDesk_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEALER.DESK,ADMIN.INPUT", "I", "verDealerDesk_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.QUERIES.ANSWERS,ASSIGN", "I @ID", "verEbQueriesAnswers_Assign", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.TODAY", "AccountNo eq Acc", "enqStmtEntTodays", "parameters [ filter=\"AccountNo eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.LAST", "", "enqStmtEntLasts", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "NOSTRO.FWD.BAL", "AccountId eq Acc", "enqNostroFwdBals", "parameters [ filter=\"AccountId eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCT.STMT.HIST", "StmtAccountNo eq Acc", "enqAcctStmtHists", "parameters [ filter=\"StmtAccountNo eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.CONTRACT.BALANCES,AC", "S ACC", "verEbContractBalances_Ac_see", "parameters [ id = \"{Acc}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.BULK.MASTER,REJ", "I @ID", "verFtBulkMaster_Rej", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ACTR.NOST.FTHP", "I F3", "verFundsTransfer_ActrNostFthp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ACTTR.NOST.FTHP", "I F3", "verFundsTransfer_ActtrNostFthp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.WM.BENCHMARK.CHART", "Id substringof IndDot", "enqAiWmBenchmarkCharts", "parameters [ filter=\"substringof(Id, IndDot)\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.CLAUSES,ADMIN.INPUT", "I @ID", "verLcClauses_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.CLAUSES,ADMIN.INPUT", "I", "verLcClauses_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.CAPTURE,AA.DATA.CAPTURE", "A @ID", "verAaSimulationCapture_AaDataCapture_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.CAPTURE,AA.DATA.CAPTURE", "D @ID", "verAaSimulationCapture_AaDataCapture_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CP.GROUP.PARAM,GROUPS", "A @ID", "verAcCpGroupParam_Groups_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CP.GROUP.PARAM,GROUPS", "D @ID", "verAcCpGroupParam_Groups_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "S @ID", "verAcLockedEvents_InputScv_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "I @ID", "verAcLockedEvents_InputScv", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "R @ID", "verAcLockedEvents_InputScv_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LETTER.OF.CREDIT,AI.IMPORTLC.INTERNAL", "I @ID", "verLetterOfCredit_AiImportlcInternal", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY.OTHERBANK", "I F3", "verFundsTransfer_AiBeneficiaryOtherbank_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FD.FIDUCIARY,NOTICEPL", "FidType eq 'NOTICE' , I @ID", "verFdFiduciary_Noticepl", "parameters [ filter=\"FidType eq 'NOTICE'\" , id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.SIM.DETAIL.DURATION", "AmPosId eq PortId", "enqAmSimDetailDurations", "parameters [ filter=\"AmPosId eq '{PortId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.PARAMETERS,ADMIN.INPUT", "I @ID", "verFxParameters_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.PWM.ACCT.ALERT", "Alert eq Pwm , AccountNo eq Id", "enqAiPwmAcctAlerts", "parameters [ filter=\"Alert eq '{Pwm}' and AccountNo eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.PWM.PORT.ALERTS", "Alert eq Pwm , PortfolioNo eq Portfolio", "enqAiPwmPortAlertss", "parameters [ filter=\"Alert eq '{Pwm}' and PortfolioNo eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.COMPARE,INP", "I F3", "verAmCompare_Inp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.MATRIX.GROUP", "SamNo eq GrpId , ValuationCcy eq ValCurrency", "enqGbValMatrixGroups", "parameters [ filter=\"SamNo eq '{GrpId}' and ValuationCcy eq '{ValCurrency}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.GRP.MONTH.PERF.SCV", "GroupNo eq GrpId , StartDate eq '!TODAY-365C' , Benchmark eq Benchmk", "enqAmGrpMonthPerfScvs", "parameters [ filter=\"GroupNo eq '{GrpId}' and StartDate eq '!TODAY-365C' and Benchmark eq '{Benchmk}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.DETAIL.GRP", "PerfDetGrpId substringof GrpId", "enqAmPerfDetailGrps", "parameters [ filter=\"substringof(PerfDetGrpId, GrpId)\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "S @ID", "verTeller_CashentTt_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "I @ID", "verTeller_CashentTt", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "D @ID", "verTeller_CashentTt_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.MANDATE", "I CUSTID", "verAccount_CaMandate", "parameters [ id = \"{Custid}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FD.FIDUCIARY,FIXEDPL", "FidType eq 'FIXED' , I @ID", "verFdFiduciary_Fixedpl", "parameters [ filter=\"FidType eq 'FIXED'\" , id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.CHARGE.WAIVE", "I ARR.ID", "cosAaDetailsChargeWaive", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.DOCUMENTS", "ArrangementId eq ArrId , I ARR.ID", "cosAaDetailsDocuments", "parameters [ filter=\"ArrangementId eq '{ArrId}'\" , id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE", "ArrangementId eq ArrId , SimRef eq Sim", "enqAaDetailsSchedules", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.SIMULATIONS.AD", "I ARR.ID", "cosAaDetailsSimulationsAd", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.OVERVIEW.PR", "I D.LINK.ARR", "cosAaOverviewPr", "parameters [ id = \"{DLinkArr}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.AA.LOANS.OVERVIEW", "I @ID", "cosAiAaLoansOverview", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.AA.PAYMENT.SCHEDULES", "I @ID", "cosAiAaPaymentSchedules", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "APPL.GEN.CONDITION,ADMIN.INPUT", "I Id", "verApplGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.POS,DETAIL", "S POS.CODE", "verAmPos_Detail_see", "parameters [ id = \"{PosCode}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO,INPUT", "S SCENARIO.CODE", "verAmScenario_Input_see", "parameters [ id = \"{ScenarioCode}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO,INPUT", "I SCENARIO.CODE", "verAmScenario_Input", "parameters [ id = \"{ScenarioCode}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PROPOSED.ORDER", "", "enqAmProposedOrders", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.FWD.CANCEL", "R REF.NO", "verFundsTransfer_AiFwdCancel_RAuth", "parameters [ id = \"{RefNo}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.CORP.STMT.ENT.TODAY", "AcctId eq Id", "enqAiCorpStmtEntTodays", "parameters [ filter=\"AcctId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.CORP.STMT.ENT.BOOK", "AcctId eq Id", "enqAiCorpStmtEntBooks", "parameters [ filter=\"AcctId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MT.TSA.SERVICE.CONSOLE,MAINTAIN", "I @ID", "verMtTsaServiceConsole_Maintain", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MT.TSA.SERVICE.CONSOLE,EXECUTE", "I @ID", "verMtTsaServiceConsole_Execute", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.MAIN.AC", "A @ID", "verAccount_IcaMainAc_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.MAIN.AC", "D @ID", "verAccount_IcaMainAc_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,AUTO", "S @ID", "verAmDynamicModel_Auto_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,DEACTIVATE", "I @ID", "verAmDynamicModel_Deactivate", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.STATUS,ADMIN.INPUT", "I Id", "verBlStatus_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PW.ACTIVITY,SETUP", "S @ID", "verPwActivity_Setup_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PW.ACTIVITY,SETUP", "I @ID", "verPwActivity_Setup", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.MAPPING.SOURCE,SETUP", "S MAPPING.ID", "verEbMappingSource_Setup_see", "parameters [ id = \"{MappingId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.MASTER,INP", "S SEC.NO", "verSecurityMaster_Inp_see", "parameters [ id = \"{SecNo}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.GEN.CONDITION,ADMIN.INPUT", "I @ID", "verFxGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.GEN.CONDITION,ADMIN.INPUT", "I", "verFxGenCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.REPORT.LOAN", "ArrangementId eq ArrId", "enqAaReportLoans", "parameters [ filter=\"ArrangementId eq '{ArrId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "CUST.ALERT.SUBSCRIPTION", "", "cosCustAlertSubscription", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.TODAY", "AccountNo eq Acct", "enqStmtEntTodays", "parameters [ filter=\"AccountNo eq '{Acct}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCOUNT.STATEMENT", "StatementId eq Acct", "enqAccountStatements", "parameters [ filter=\"StatementId eq '{Acct}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCT.STMT.HIST", "StmtAccountNo eq Acct", "enqAcctStmtHists", "parameters [ filter=\"StmtAccountNo eq '{Acct}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.LAST", "Account eq Acct", "enqStmtEntLasts", "parameters [ filter=\"Account eq '{Acct}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "NOSTRO.FWD.BAL", "AccountId eq Acct , LongPosSign eq Lps", "enqNostroFwdBals", "parameters [ filter=\"AccountId eq '{Acct}' and LongPosSign eq '{Lps}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,TELLER.HP", "I @ID", "verAccountClosure_TellerHp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AC.CLOSURE.HP", "I @ID", "verAccountClosure_AcClosureHp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.SECURE.MESSAGE,AI.DEL.NEW", "R MSG.ID", "verEbSecureMessage_AiDelNew_RAuth", "parameters [ id = \"{MsgId}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.VIRTUAL.BALANCE", "ArrangementId eq Arrangement , DrillDownEnq eq 'YES' , BalanceType eq BalType , SimRef eq Simulation", "enqAaDetailsVirtualBalances", "parameters [ filter=\"ArrangementId eq '{Arrangement}' and DrillDownEnq eq 'YES' and BalanceType eq '{BalType}' and SimRef eq '{Simulation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "DE.MSG.SUM", "DeliveryRef eq Id", "enqDeMsgSums", "parameters [ filter=\"DeliveryRef eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SEC.OPEN.ORDER,INPUT", "I @ID", "verSecOpenOrder_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AC.OVERVIEW.SCV", "I ACCT", "cosAcOverviewScv", "parameters [ id = \"{Acct}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.4Q", "SamNo eq DispPortfolio , StartDate eq LinkStart , EndDate eq LinkEnd , CalcMethod eq CMethod , DecimalRange eq DRange , PerfType eq GOrNet , Benchmark eq BMark", "enqAmPerfPrt4qs", "parameters [ filter=\"SamNo eq '{DispPortfolio}' and StartDate eq '{LinkStart}' and EndDate eq '{LinkEnd}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}' and PerfType eq '{GOrNet}' and Benchmark eq '{BMark}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.4Q", "SamNo eq DispPortfolio , StartDate eq LinkStart1 , EndDate eq LinkEnd1 , CalcMethod eq CMethod , DecimalRange eq DRange , PerfType eq GOrNet , Benchmark eq BMark", "enqAmPerfPrt4qs", "parameters [ filter=\"SamNo eq '{DispPortfolio}' and StartDate eq '{LinkStart1}' and EndDate eq '{LinkEnd1}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}' and PerfType eq '{GOrNet}' and Benchmark eq '{BMark}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MD.CLAUSES,ADMIN.INPUT", "I @ID", "verMdClauses_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MD.CLAUSES,ADMIN.INPUT", "I", "verMdClauses_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AI.CORPORATE.LOGIN,AMEND", "I ID", "verAiCorporateLogin_Amend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,OTHERS", "I REQUEST.ID", "verAcChargeRequest_Others", "parameters [ id = \"{RequestId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCOUNT.STATEMENT.SCRN", "SelectAccount eq Id , StmtDate eq StatementDates , StmtFreq eq '1'", "enqAccountStatementScrns", "parameters [ filter=\"SelectAccount eq '{Id}' and StmtDate eq '{StatementDates}' and StmtFreq eq '1'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ALT.ACCT.PARAMETER,ADMIN.INPUT", "I", "verAltAcctParameter_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ALT.ACCT.PARAMETER,ADMIN.INPUT", "I @ID", "verAltAcctParameter_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SEC.MOVEMENTS.BY.PORTFOLIO", "SecurityAccount eq PortDisp , SecurityNumber eq InstNo", "enqSecMovementsByPortfolios", "parameters [ filter=\"SecurityAccount eq '{PortDisp}' and SecurityNumber eq '{InstNo}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.PAYMENT.RULE.TYPE,AA", "S PAYMENT.RULE", "verAaPaymentRuleType_Aa_see", "parameters [ id = \"{PaymentRule}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.PAYMENT.RULE.TYPE,AA", "I PAYMENT.RULE", "verAaPaymentRuleType_Aa", "parameters [ id = \"{PaymentRule}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LN.ASSET.CLASS,ADMIN.INPUT", "I @ID", "verLnAssetClass_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LN.ASSET.CLASS,ADMIN.INPUT", "I", "verLnAssetClass_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CREDIT.INT,CR.MAIN", "A @ID", "verAccountCreditInt_CrMain_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CREDIT.INT,CR.MAIN", "D @ID", "verAccountCreditInt_CrMain_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.Y.10Y", "SamNo eq Sam , Benchmark eq Bmark", "enqAmPerfPrtY10ys", "parameters [ filter=\"SamNo eq '{Sam}' and Benchmark eq '{Bmark}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.TXNS.TODAY.LIST", "AcctId eq Acc", "enqAiTxnsTodayLists", "parameters [ filter=\"AcctId eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.LAST.N.TXNS.LIST", "AcctId eq Acc , InStartDate eq PastDate , InEndDate eq CurrentDate", "enqAiLastNTxnsLists", "parameters [ filter=\"AcctId eq '{Acc}' and InStartDate eq '{PastDate}' and InEndDate eq '{CurrentDate}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ACTR.FTHP", "I F3", "verFundsTransfer_ActrFthp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ACTR.NOST.FTHP", "I F3", "verFundsTransfer_ActrNostFthp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,ACTTR.NOST.FTHP", "I F3", "verFundsTransfer_ActtrNostFthp_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "I @ID", "verAmMatrix_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "S @ID", "verAmMatrix_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MATRIX,INPUT", "I", "verAmMatrix_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,INPUT", "I @ID", "verAmDynamicModel_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.GEN.CONDITION,ADMIN.INPUT", "I @ID", "verLcGenCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.GEN.CONDITION,ADMIN.INPUT", "I", "verLcGenCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.COMP.M", "CompNo eq DispComp , StartDate eq LinkStart , EndDate eq LinkEnd , Benchmark eq BenchName , CalcMethod eq DispMethod , GrossOrNet eq GOrN", "enqAmPerfCompMs", "parameters [ filter=\"CompNo eq '{DispComp}' and StartDate eq '{LinkStart}' and EndDate eq '{LinkEnd}' and Benchmark eq '{BenchName}' and CalcMethod eq '{DispMethod}' and GrossOrNet eq '{GOrN}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.PRD.DES.CHARGE,AA", "S CHARGE.ID", "verAaPrdDesCharge_Aa_see", "parameters [ id = \"{ChargeId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER,AI.PROFILE", "Id eq 'TXN.ID' , I @ID", "verCustomer_AiProfile", "parameters [ filter=\"Id eq 'TXN.ID'\" , id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "COLLATERAL.CODE,ADMIN.INPUT", "I @ID", "verCollateralCode_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "COLLATERAL.CODE,ADMIN.INPUT", "I", "verCollateralCode_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE", "ArrangementId eq ArrId , SimRef eq Sim", "enqAaDetailsSchedules", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.OVERDUE.STATS", "Id < ArrOd", "enqAaOverdueStatss", "parameters [ ArrOd = \"{Id}\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.ENTRY.PARAM,INPUT", "I @ID", "verAcEntryParam_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.ENTRY.PARAM,INPUT", "I", "verAcEntryParam_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,TELLER.HP", "I @ID", "verAccountClosure_TellerHp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AC.CLOSURE.HP", "I @ID", "verAccountClosure_AcClosureHp", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.UTLITYLIST", "", "cosAiUtlitylist", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.UTILITYPAYEE", "I F3", "verFundsTransfer_AiUtilitypayee_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC,SB.AMEND", "I @ID", "verAc_SbAmend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.BILL.DETAILS,AA", "S BILL.REF", "verAaBillDetails_Aa_see", "parameters [ id = \"{BillRef}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.ENTRY.PARAM,INPUT", "I @ID", "verAcEntryParam_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.ENTRY.PARAM,INPUT", "I", "verAcEntryParam_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "REPO,FLOAT.RATE.INPUT", "I @ID", "verRepo_FloatRateInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "REPO,FLOAT.RATE.INPUT", "D @ID", "verRepo_FloatRateInput_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.GRID.DETAILS", "GrpGridId eq LinkSelect", "enqAmGridDetailss", "parameters [ filter=\"GrpGridId eq '{LinkSelect}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "PORTFOLIO.LIST.TAB", "Id eq SecAccNo", "enqPortfolioListTabs", "parameters [ filter=\"Id eq '{SecAccNo}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "DE.MSG.SUM", "DeliveryRef eq DelRef", "enqDeMsgSums", "parameters [ filter=\"DeliveryRef eq '{DelRef}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,591", "S @ID", "verAcChargeRequest_591_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER,ACTIVE.WM", "I @ID", "verCustomer_ActiveWm", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER,PWM.PROSPECT", "R @ID", "verCustomer_PwmProspect_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LIMIT.REFERENCE,ADMIN.INPUT", "I @ID", "verLimitReference_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LIMIT.REFERENCE,ADMIN.INPUT", "I", "verLimitReference_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,INPUT", "I CARD.ISSUE", "verCardIssue_Input", "parameters [ id = \"{CardIssue}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AGENCY,INPUT", "A @ID", "verAgency_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AGENCY,INPUT", "D @ID", "verAgency_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "POSTING.RESTRICT,ADMIN.INPUT", "I @ID", "verPostingRestrict_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "POSTING.RESTRICT,ADMIN.INPUT", "I", "verPostingRestrict_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.CHARGE.DATE", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsChargeDates", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.CHARGE.TYPE", "ArrangementId eq ArrId , FileVer eq FVersion , SimRef eq SReference", "enqAaDetailsChargeTypes", "parameters [ filter=\"ArrangementId eq '{ArrId}' and FileVer eq '{FVersion}' and SimRef eq '{SReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.ROLES,ADMIN.INPUT", "I @ID", "verSlRoles_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.ROLES,ADMIN.INPUT", "I", "verSlRoles_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.AC", "I F3", "verFundsTransfer_AiAc_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY", "I F3", "verFundsTransfer_AiBeneficiary_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY.OTHERBANK", "I F3", "verFundsTransfer_AiBeneficiaryOtherbank_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY.INTERNATIONAL", "I F3", "verFundsTransfer_AiBeneficiaryInternational_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.AC.FX", "I F3", "verFundsTransfer_AiAcFx_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CUSTOMER,AI.PROFILE", "Id eq TxnId , I @ID", "verCustomer_AiProfile", "parameters [ filter=\"Id eq '{TxnId}'\" , id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.REPORT.DEPOSIT", "ArrangementId eq ArrId", "enqAaReportDeposits", "parameters [ filter=\"ArrangementId eq '{ArrId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.COMMISSION.TYPE,ADMIN.INPUT", "I @ID", "verFtCommissionType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.COMMISSION.TYPE,ADMIN.INPUT", "I", "verFtCommissionType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FOREX,AUTH.DEAL", "S @ID", "verForex_AuthDeal_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValCharts", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VAL.MULTIPIE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqAmValMultipies", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.NEW", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartNews", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.LINE", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartLines", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "GB.VAL.CHART.BAR", "SamNo eq Portfolio , ExtractDate eq Ed , SubAssetSa eq Sasa , HideZeroPos eq Hzp , OnlineYno eq Oyno", "enqGbValChartBars", "parameters [ filter=\"SamNo eq '{Portfolio}' and ExtractDate eq '{Ed}' and SubAssetSa eq '{Sasa}' and HideZeroPos eq '{Hzp}' and OnlineYno eq '{Oyno}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VIOLATION", "ViolationCode eq ScViolation", "enqAmViolations", "parameters [ filter=\"ViolationCode eq '{ScViolation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO,NEW", "I SCENARIO.CODE", "verAmScenario_New", "parameters [ id = \"{ScenarioCode}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I @ID", "verCategory_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CATEGORY,ADMIN.INPUT", "I", "verCategory_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "HISTORY.RATES", "CurrencyCode substringof Id", "enqHistoryRatess", "parameters [ filter=\"substringof(CurrencyCode, Id)\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,STANDALONE", "S TRANS.REFERENCE", "verDdDdi_Standalone_see", "parameters [ id = \"{TransReference}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.AC", "I F3", "verFundsTransfer_AiAc_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT", "I TRANSACTION.REF", "verAcLockedEvents_Input", "parameters [ id = \"{TransactionRef}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "WR.KYR.INFO,INPUT", "I @ID", "verWrKyrInfo_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT", "A @ID", "verAcLockedEvents_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT", "D @ID", "verAcLockedEvents_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.D.1M", "SamNo eq DispPortfolio , StartDate eq LinkStart , EndDate eq LastDate , CalcMethod eq DispMethod , DecimalRange eq DRange , PerfType eq DispGrossOrNet , Benchmark eq BenchName", "enqAmPerfPrtD1ms", "parameters [ filter=\"SamNo eq '{DispPortfolio}' and StartDate eq '{LinkStart}' and EndDate eq '{LastDate}' and CalcMethod eq '{DispMethod}' and DecimalRange eq '{DRange}' and PerfType eq '{DispGrossOrNet}' and Benchmark eq '{BenchName}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.CAPITALISATION,INPUT", "I @ID", "verAcctCapitalisation_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.DIARY.CODES,ADMIN.INPUT", "I @ID", "verSlDiaryCodes_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.DIARY.CODES,ADMIN.INPUT", "I", "verSlDiaryCodes_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "REPO.ENTRY.LIST", "ContractId eq Id", "enqRepoEntryLists", "parameters [ filter=\"ContractId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CARD.ISSUE,AA.AMEND", "I CARD.ISSUE", "verCardIssue_AaAmend", "parameters [ id = \"{CardIssue}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "%CHEQUES.PRESENTED", "ChqRegister eq Id", "enqChequesPresenteds", "parameters [ filter=\"ChqRegister eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.TYPES,ADMIN.INPUT", "I @ID", "verLcTypes_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.TYPES,ADMIN.INPUT", "I", "verLcTypes_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.MIFID.RISK.CLASS,INPUT", "I @ID", "verAmMifidRiskClass_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "A @ID", "verFundsTransfer_Auth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "D @ID", "verFundsTransfer_Auth_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "A @ID", "verAcCashPool_AaAcpo_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "D @ID", "verAcCashPool_AaAcpo_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.DE.MSG.SUM", "DeliveryRef eq Id", "enqAiDeMsgSums", "parameters [ filter=\"DeliveryRef eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.PERFORMANCE.DETAIL", "PortfolioId eq DispPortfolio , PerfDate eq 'LINK.DATE'", "enqScPerformanceDetails", "parameters [ filter=\"PortfolioId eq '{DispPortfolio}' and PerfDate eq 'LINK.DATE'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.DYN.MODEL.PORT.REVIEW", "", "enqAmDynModelPortReviews", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.DYN.MODEL.PORT.REVIEW", "", "enqAmDynModelPortReviews", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AP.PORTFOLIO.VALUATION", "SecurityAcc eq Id", "enqApPortfolioValuations", "parameters [ filter=\"SecurityAcc eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,CREATE", "I @ID", "verBeneficiary_Create", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER.FINANCIAL.SERVICES,BILL.PAYMENT", "Beneficiary < Id , I F3", "verTellerFinancialServices_BillPayment_new", "parameters [ Id = \"{Beneficiary}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,CREATE", "R @ID", "verBeneficiary_Create_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA", "S ACT.ID", "verAaArrangementActivity_Aa_see", "parameters [ id = \"{ActId}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.PERFORMANCE.DETAIL", "PerfDate eq Ddate , PortfolioId eq DispPortfolio", "enqScPerformanceDetails", "parameters [ filter=\"PerfDate eq '{Ddate}' and PortfolioId eq '{DispPortfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.TXN.TYPE.CONDITION,ADMIN.INPUT", "I @ID", "verFtTxnTypeCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.TXN.TYPE.CONDITION,ADMIN.INPUT", "I", "verFtTxnTypeCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.ENTITY,INPUT", "I @ID", "verAmEntity_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.ENTITY,INPUT", "S @ID", "verAmEntity_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.ENTITY,INPUT", "I", "verAmEntity_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INTERIM.CHG,INPUT", "A @ID", "verAcctInterimChg_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.INTERIM.CHG,INPUT", "D @ID", "verAcctInterimChg_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.FACILITY,ADMIN.INPUT", "I @ID", "verSlFacility_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.FACILITY,ADMIN.INPUT", "I", "verSlFacility_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.DYNAMIC.MODEL.HIS.MODEL", "PortfolioId eq FolioId", "enqAmDynamicModelHisModels", "parameters [ filter=\"PortfolioId eq '{FolioId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,AUTO", "I @ID", "verAmDynamicModel_Auto", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,AUTO", "S @ID", "verAmDynamicModel_Auto_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,DEACTIVATE", "I DM.ID", "verAmDynamicModel_Deactivate", "parameters [ id = \"{DmId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.DAILY.PERF", "SamNo eq FolioId , StartDate ge SDate , EndDate le '!TODAY'", "enqScDailyPerfs", "parameters [ filter=\"SamNo eq '{FolioId}' and StartDate ge '{SDate}' and EndDate le '!TODAY'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LD.TXN.TYPE.CONDITION,ADMIN.INPUT", "I @ID", "verLdTxnTypeCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LD.TXN.TYPE.CONDITION,ADMIN.INPUT", "I", "verLdTxnTypeCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.VIRTUAL.BALANCE", "ArrangementId eq Arrangement , DrillDownEnq eq 'YES' , BalanceType eq BalType , SimRef eq Simulation", "enqAaDetailsVirtualBalances", "parameters [ filter=\"ArrangementId eq '{Arrangement}' and DrillDownEnq eq 'YES' and BalanceType eq '{BalType}' and SimRef eq '{Simulation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.SUB.AC.REMOVE", "A @ID", "verAccount_IcaSubAcRemove_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.SUB.AC.REMOVE", "D @ID", "verAccount_IcaSubAcRemove_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.SCHEDULE.DETAILS", "ArrangementId eq ArrId , DateDue eq 'DUE.DATE'", "enqAaScheduleDetailss", "parameters [ filter=\"ArrangementId eq '{ArrId}' and DateDue eq 'DUE.DATE'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.CUST.DETAILS", "CustomerNo eq CustomerEnq , Category eq CatParam , InclJointInfo eq JointInfo , SortPosition eq SortPos , RebuildData eq 'NO'", "enqAiCustDetailss", "parameters [ filter=\"CustomerNo eq '{CustomerEnq}' and Category eq '{CatParam}' and InclJointInfo eq '{JointInfo}' and SortPosition eq '{SortPos}' and RebuildData eq 'NO'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.VIOLATION,SYSTEM", "I VIOLATION.CODE", "verAmViolation_System", "parameters [ id = \"{ViolationCode}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.VIOLATION,STAMP", "I VIOLATION.CODE", "verAmViolation_Stamp", "parameters [ id = \"{ViolationCode}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FOREX,AUTH.DEAL", "S @ID", "verForex_AuthDeal_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.DYNAMIC.MODEL.PERF", "PortfolioId eq Portfolio", "enqAmDynamicModelPerfs", "parameters [ filter=\"PortfolioId eq '{Portfolio}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.OPEN", "A CUSTOMERID", "verAccount_CaOpen_IAuth", "parameters [ id = \"{Customerid}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,CA.OPEN", "D CUSTOMERID", "verAccount_CaOpen_delete", "parameters [ id = \"{Customerid}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.MASTER,INP", "S @ID", "verSecurityMaster_Inp_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.AA.DEPOSITS.OVERVIEW", "I ARRANGEMENT", "cosAiAaDepositsOverview", "parameters [ id = \"{Arrangement}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GROUP.EVENT,INPUT", "S ID", "verAcctGroupEvent_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GROUP.EVENT,INPUT", "I ID", "verAcctGroupEvent_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GROUP.EVENT,INPUT", "I", "verAcctGroupEvent_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DR.DISCREPANT.TYPE,ADMIN.INPUT", "I @ID", "verDrDiscrepantType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DR.DISCREPANT.TYPE,ADMIN.INPUT", "I", "verDrDiscrepantType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.VIOLATION", "ViolationCode eq ScViolation", "enqAmViolations", "parameters [ filter=\"ViolationCode eq '{ScViolation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CR.OPPORTUNITY,AF.INPUT.PENDING", "I CR.OPPOR.ID", "verCrOpportunity_AfInputPending", "parameters [ id = \"{CrOpporId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "CR.OPPORTUNITY,AF.INPUT.REJECT", "I CR.OPPOR.ID", "verCrOpportunity_AfInputReject", "parameters [ id = \"{CrOpporId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.COMP.HIST.DET.WORK,", "I WORK.ID", "verAmCompHistDetWork", "parameters [ id = \"{WorkId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "S @ID", "verTeller_CashentTt_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "I @ID", "verTeller_CashentTt", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER,CASHENT.TT", "D @ID", "verTeller_CashentTt_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.TRANSACTION.TYPE,ADMIN.INPUT", "I @ID", "verFxTransactionType_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.TRANSACTION.TYPE,ADMIN.INPUT", "I", "verFxTransactionType_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AI.BENEFICIARY", "I F3", "verFundsTransfer_AiBeneficiary_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.TXN.DELIVERY", "TransactionRef substringof Id", "enqAiTxnDeliverys", "parameters [ filter=\"substringof(TransactionRef, Id)\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LETTER.OF.CREDIT,AI.IMPORT.VIEW", "S @ID", "verLetterOfCredit_AiImportView_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.IMAGE.DISPLAY", "ImageReference eq TransReference", "enqAiImageDisplays", "parameters [ filter=\"ImageReference eq '{TransReference}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.PROPERTY.CLASS.ACTION,AA", "S PROP.CLASS.ACTION", "verAaPropertyClassAction_Aa_see", "parameters [ id = \"{PropClassAction}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.PROPERTY.CLASS.ACTION,AA", "I PROP.CLASS.ACTION", "verAaPropertyClassAction_Aa", "parameters [ id = \"{PropClassAction}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "IM.DOCUMENT.IMAGE,REVERSE.DOCUMENT", "R @ID", "verImDocumentImage_ReverseDocument_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.CLAUSES,AI.CUSTOMER.AMEND", "I @ID", "verLcClauses_AiCustomerAmend", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.M", "SamNo eq DispPortfolio , StartDate eq LinkStart , EndDate eq LinkEnd , CalcMethod eq CMethod , DecimalRange eq DRange , PerfType eq GOrNet , Benchmark eq BMark", "enqAmPerfPrtMs", "parameters [ filter=\"SamNo eq '{DispPortfolio}' and StartDate eq '{LinkStart}' and EndDate eq '{LinkEnd}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}' and PerfType eq '{GOrNet}' and Benchmark eq '{BMark}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.WAIVE.CHARGE", "ArrangementId eq Id , BillId eq IdBill", "enqAaDetailsWaiveCharges", "parameters [ filter=\"ArrangementId eq '{Id}' and BillId eq '{IdBill}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AI.FT.FX", "", "cosAiFtFx", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH", "A ACCOUNT.NUMBER", "verAccountClosure_Auth_IAuth", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,AUTH", "D ACCOUNT.NUMBER", "verAccountClosure_Auth_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.TODAY", "", "enqStmtEntTodays", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.LAST", "", "enqStmtEntLasts", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "NOSTRO.FWD.BAL", "AccountId eq Acc", "enqNostroFwdBals", "parameters [ filter=\"AccountId eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "ACCT.STMT.HIST", "StmtAccountNo eq Acc", "enqAcctStmtHists", "parameters [ filter=\"StmtAccountNo eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,190", "I F3", "verAcChargeRequest_190_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,290", "I F3", "verAcChargeRequest_290_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PW.ACTIVITY.TXN,MAINTAIN", "I @ID", "verPwActivityTxn_Maintain", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FT.BULK.MASTER,AUTH", "A @ID", "verFtBulkMaster_Auth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.ADVICE.TEXT,ADMIN.INPUT", "I @ID", "verLcAdviceText_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "LC.ADVICE.TEXT,ADMIN.INPUT", "I", "verLcAdviceText_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.PRE.CLOSURE.DETAILS,INPUT", "I @ID", "verAcPreClosureDetails_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,INPUT", "I @ID", "verAccountClosure_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CLOSURE,TELLER.AC.CLOSURE", "I @ID", "verAccountClosure_TellerAcClosure", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.CONTRACT.BALANCES,AC", "S @ID", "verEbContractBalances_Ac_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CREDIT.INT,INPUT", "A @ID", "verAccountCreditInt_Input_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT.CREDIT.INT,INPUT", "D @ID", "verAccountCreditInt_Input_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.POSITION.MARGIN", "SecurityAccount eq Id", "enqScPositionMargins", "parameters [ filter=\"SecurityAccount eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,AUTH", "A ACCOUNT.NUMBER", "verAccount_Auth_IAuth", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,DELETE", "D ACCOUNT.NUMBER", "verAccount_Delete_delete", "parameters [ id = \"{AccountNumber}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PD.PARAMETER,ADMIN.INPUT", "I @ID", "verPdParameter_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PD.PARAMETER,ADMIN.INPUT", "I", "verPdParameter_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AB.OVERVIEW.ARRANGEMENTS", "I V.LINK.ARR", "cosAbOverviewArrangements", "parameters [ id = \"{VLinkArr}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.MAIN.AC", "I @ID", "verAccount_IcaMainAc", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "PAYMENT.STOP,DD", "I ACCOUNT", "verPaymentStop_Dd", "parameters [ id = \"{Account}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,AUTO", "A @ID", "verAmDynamicModel_Auto_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,AUTO", "D @ID", "verAmDynamicModel_Auto_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.WEALTH.CASH.FLOW", "PortId eq Id", "enqAiWealthCashFlows", "parameters [ filter=\"PortId eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEPT.LEVEL,ADMIN.INPUT", "I @ID", "verDeptLevel_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DEPT.LEVEL,ADMIN.INPUT", "I", "verDeptLevel_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER.TRANSACTION,ADMIN.INPUT", "I @ID", "verTellerTransaction_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "TELLER.TRANSACTION,ADMIN.INPUT", "I", "verTellerTransaction_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.ACCRUAL.PARAM,ADMIN.INPUT", "I @ID", "verEbAccrualParam_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.ACCRUAL.PARAM,ADMIN.INPUT", "I", "verEbAccrualParam_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "IM.DOCUMENT.IMAGE,REVERSE.DOCUMENT", "R @ID", "verImDocumentImage_ReverseDocument_RAuth", "parameters [ id = \"{Id}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SECURITY.TRANSFER,INPUT", "I SEC.TXFR.ID", "verSecurityTransfer_Input", "parameters [ id = \"{SecTxfrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SEC.OPEN.ORDER,AI.INPUT", "I F3", "verSecOpenOrder_AiInput_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DX.ORDER,AI.FUTURES", "I F3", "verDxOrder_AiFutures_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DX.ORDER,AI.OPTIONS", "I F3", "verDxOrder_AiOptions_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MF.ORDER,AI.INPUT", "I F3", "verMfOrder_AiInput_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.WM.PERF.SEG", "PortfolioNo eq Id , SegmentId eq 'PMBSECTOR'", "enqAiWmPerfSegs", "parameters [ filter=\"PortfolioNo eq '{Id}' and SegmentId eq 'PMBSECTOR'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.WM.PERF.CUR", "PortfolioNo eq Id , SegmentId eq 'PMBCUR'", "enqAiWmPerfCurs", "parameters [ filter=\"PortfolioNo eq '{Id}' and SegmentId eq 'PMBCUR'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.WEALTH.PORT.PERF", "SamNo eq Id", "enqAiWealthPortPerfs", "parameters [ filter=\"SamNo eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BENEFICIARY,SEE", "S @ID", "verBeneficiary_See_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCOUNT,ICA.SUB.AC", "I @ID", "verAccount_IcaSubAc", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.CONTRACT.BALANCES,AC", "S ACC", "verEbContractBalances_Ac_see", "parameters [ id = \"{Acc}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "D MASTER.AAA", "verAaArrangementActivity_AaNew_delete", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO,PW.INPUT", "I @ID", "verAmScenario_PwInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.PERSONAL.MESSAGE.IN", "", "enqAiPersonalMessageIns", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,BUILD", "I DDOWN.ID", "verAmDynamicModel_Build", "parameters [ id = \"{DdownId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.DYNAMIC.MODEL,INPUT", "D DDOWN.ID", "verAmDynamicModel_Input_delete", "parameters [ id = \"{DdownId}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SC.SETTLEMENT,ACT.SETT", "S TRAN.REF", "verScSettlement_ActSett_see", "parameters [ id = \"{TranRef}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.DEAL.METHOD,ADMIN.INPUT", "I @ID", "verFxDealMethod_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FX.DEAL.METHOD,ADMIN.INPUT", "I", "verFxDealMethod_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.CONTRACT.BALANCES,AC", "S ACC", "verEbContractBalances_Ac_see", "parameters [ id = \"{Acc}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AC.DETAILS.VIRTUAL.BALANCE", "ArrangementId eq Arrangement , DrillDownEnq eq 'YES' , BalanceType eq BalType , SimRef eq Simulation", "enqAcDetailsVirtualBalances", "parameters [ filter=\"ArrangementId eq '{Arrangement}' and DrillDownEnq eq 'YES' and BalanceType eq '{BalType}' and SimRef eq '{Simulation}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.PRT.M", "SamNo eq PortNo , StartDate eq LinkStartDate , EndDate eq LinkEndDate , CalcMethod eq CalcMetd", "enqAmPerfPrtMs", "parameters [ filter=\"SamNo eq '{PortNo}' and StartDate eq '{LinkStartDate}' and EndDate eq '{LinkEndDate}' and CalcMethod eq '{CalcMetd}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,CP.SWEEPS.CSM", "I @ID", "verAcCashPool_CpSweepsCsm", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.PURPOSE,ADMIN.INPUT", "I @ID", "verSlPurpose_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SL.PURPOSE,ADMIN.INPUT", "I", "verSlPurpose_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.MANDATE.LIST", "Id eq MandateRecord", "enqAiMandateLists", "parameters [ filter=\"Id eq '{MandateRecord}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.AA.FD.RATES", "RefCcyDate eq PiId", "enqAiAaFdRatess", "parameters [ filter=\"RefCcyDate eq '{PiId}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.BILLS", "Id eq ArrId , FileVersion eq Fv , SimulationRef eq Sim", "enqAaDetailsBillss", "parameters [ filter=\"Id eq '{ArrId}' and FileVersion eq '{Fv}' and SimulationRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.CHARGE.WAIVE", "I ARR.ID", "cosAaDetailsChargeWaive", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.DOCUMENTS", "I ARR.ID", "cosAaDetailsDocuments", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE", "ArrangementId eq ArrId , SimRef eq Sim", "enqAaDetailsSchedules", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{Sim}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.DETAILS.SIMULATIONS", "I ARR.ID", "cosAaDetailsSimulations", "parameters [ id = \"{ArrId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.OVERDUE.STATS", "Id < ArrOd", "enqAaDetailsOverdueStatss", "parameters [ ArrOd = \"{Id}\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "S TRANSACTION.REF", "verAcLockedEvents_InputScv_see", "parameters [ id = \"{TransactionRef}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "I TRANSACTION.REF", "verAcLockedEvents_InputScv", "parameters [ id = \"{TransactionRef}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.LOCKED.EVENTS,INPUT.SCV", "R TRANSACTION.REF", "verAcLockedEvents_InputScv_RAuth", "parameters [ id = \"{TransactionRef}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE.DETS", "ArrangementId eq ArrId , SimRef eq SimId , DateDue eq ScheduleDate", "enqAaDetailsScheduleDetss", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{SimId}' and DateDue eq '{ScheduleDate}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "STO,AI.CANCEL", "R STANDING.ORDER", "verSto_AiCancel_RAuth", "parameters [ id = \"{StandingOrder}\", t24Intent=\"Reverse\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.GROUP.ROLLING.D", "GroupId eq GroupNo", "enqAmGroupRollingDs", "parameters [ filter=\"GroupId eq '{GroupNo}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CASH.POOL,AA.ACPO", "S ARRANGEMENT", "verAcCashPool_AaAcpo_see", "parameters [ id = \"{Arrangement}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.AXIS,INPUT", "I @ID", "verAmAxis_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.AXIS,INPUT", "S @ID", "verAmAxis_Input_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.AXIS,INPUT", "I", "verAmAxis_Inputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.SCHEDULE.DETS", "ArrangementId eq ArrId , SimRef eq SimId , DateDue eq ScheduleDate", "enqAaDetailsScheduleDetss", "parameters [ filter=\"ArrangementId eq '{ArrId}' and SimRef eq '{SimId}' and DateDue eq '{ScheduleDate}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.TODAY", "AcctId eq Acc", "enqStmtEntTodays", "parameters [ filter=\"AcctId eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "STMT.ENT.LAST", "AcctId eq Acc", "enqStmtEntLasts", "parameters [ filter=\"AcctId eq '{Acc}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.GROUP.TIMESERIES", "GroupId eq Gno , PeriodCalculated eq P8 , DecimalRange eq Dsel , GrossOrNet eq DispGrossOrNet , CalcMethod eq DispCalcMethod , EndDate eq DispEndValue , StartDate eq DispStartValue", "enqAmGroupTimeseriess", "parameters [ filter=\"GroupId eq '{Gno}' and PeriodCalculated eq '{P8}' and DecimalRange eq '{Dsel}' and GrossOrNet eq '{DispGrossOrNet}' and CalcMethod eq '{DispCalcMethod}' and EndDate eq '{DispEndValue}' and StartDate eq '{DispStartValue}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "AA.OVERVIEW.AB", "I D.LINK.ARR", "cosAaOverviewAb", "parameters [ id = \"{DLinkArr}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MT.REPLICATE.CONSOLE,MAINTAIN", "I @ID", "verMtReplicateConsole_Maintain", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "MT.REPLICATE.CONSOLE,EXECUTE", "I @ID", "verMtReplicateConsole_Execute", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DEPOSIT.PRODUCTS", "Abc < Var1 , Field2 substringof Header , Field3 not_substringof 'ABC' , Field4 not_endswith 'ABC'", "enqAaDepositProductss", "parameters [ filter=\"substringof(Field2, Header) and not substringof(Field3, 'ABC') and not endswith(Field4, 'ABC')\" , Var1 = \"{Abc}\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GROUP.CONDITION,ADMIN.INPUT", "I @ID", "verAcctGroupCondition_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ACCT.GROUP.CONDITION,ADMIN.INPUT", "I", "verAcctGroupCondition_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "A @ID", "verFundsTransfer_Auth_IAuth", "parameters [ id = \"{Id}\", t24Intent=\"Authorize\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "FUNDS.TRANSFER,AUTH", "D @ID", "verFundsTransfer_Auth_delete", "parameters [ id = \"{Id}\", t24Intent=\"Delete\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.composite, "CUST.ALERT.SUBSCRIPTION", "", "cosCustAlertSubscription", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.PERF.DETAIL.GRP.MAN,INPUT", "I @ID", "verAmPerfDetailGrpMan_Input", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AA.DETAILS.WAIVE.CHARGE", "ArrangementId eq Id , BillId eq IdBill", "enqAaDetailsWaiveCharges", "parameters [ filter=\"ArrangementId eq '{Id}' and BillId eq '{IdBill}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.INSTRUMENT", "PortfolioNo eq DispPortfolio , StartDate eq LinkStart1 , EndDate eq LinkEnd1 , CalcMethod eq CMethod , DecimalRange eq DRange", "enqAmPerfInstruments", "parameters [ filter=\"PortfolioNo eq '{DispPortfolio}' and StartDate eq '{LinkStart1}' and EndDate eq '{LinkEnd1}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AM.PERF.SEGMENT", "PortfolioNo eq DispPortfolio , StartDate eq LinkStart1 , EndDate eq LinkEnd1 , CalcMethod eq CMethod , DecimalRange eq DRange , SegmentId eq 'PMBSECTOR'", "enqAmPerfSegments", "parameters [ filter=\"PortfolioNo eq '{DispPortfolio}' and StartDate eq '{LinkStart1}' and EndDate eq '{LinkEnd1}' and CalcMethod eq '{CMethod}' and DecimalRange eq '{DRange}' and SegmentId eq 'PMBSECTOR'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.ARRANGEMENT.ACTIVITY,AA.NEW", "I MASTER.AAA", "verAaArrangementActivity_AaNew", "parameters [ id = \"{MasterAaa}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "CUST.ACCOUNT.DD.SCV", "", "enqCustAccountDdScvs", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.DD.ITEM.DISPLAY", "MandateRef eq Id", "enqAiDdItemDisplays", "parameters [ filter=\"MandateRef eq '{Id}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,STANDALONE.CANCEL", "I @ID", "verDdDdi_StandaloneCancel", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AM.SCENARIO,NEW", "I @ID", "verAmScenario_New", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ALT.ACCT.PARAMETER,ADMIN.INPUT", "I @ID", "verAltAcctParameter_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "ALT.ACCT.PARAMETER,ADMIN.INPUT", "I", "verAltAcctParameter_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "AI.SC.POS.DET", "RefNo eq Data", "enqAiScPosDets", "parameters [ filter=\"RefNo eq '{Data}'\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "CUST.ACC.MANDATE.SME", "", "enqCustAccMandateSmes", null).execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "RELATION,ADMIN.INPUT", "I @ID", "verRelation_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		/*numTestsPassed += new Test(RESOURCE_TYPE.version, "RELATION,ADMIN.INPUT", "I", "verRelation_AdminInputs", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "EB.SECURE.MESSAGE,MSGS", "S @ID", "verEbSecureMessage_Msgs_see", "parameters [ id = \"{Id}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AA.SIMULATION.COMPARISON,AA", "I ARRANGEMENT.ID", "verAaSimulationComparison_Aa", "parameters [ id = \"{ArrangementId}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,191", "I F3", "verAcChargeRequest_191_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "AC.CHARGE.REQUEST,291", "I F3", "verAcChargeRequest_291_new", "parameters [ t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "DD.DDI,MANDATE.ARC.CANCEL", "I @ID", "verDdDdi_MandateArcCancel", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "BL.PARAMETER,ADMIN.INPUT", "I Id", "verBlParameter_AdminInput", "parameters [ id = \"{Id}\", t24Intent=\"Edit\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SEC.ACC.MASTER,INP.CUS", "S SAM.CODE", "verSecAccMaster_InpCus_see", "parameters [ id = \"{SamCode}\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.version, "SC_VALUATION_GROUP,INPUT", "S CVR_CURRENT.MASTER", "verScValuationGroup_Input_see", "parameters [ id = \"CVR_CURRENT_MASTER\", t24Intent=\"View\" ]").execute(++numTestsExecuted);
		numTestsPassed += new Test(RESOURCE_TYPE.enquiry, "SC.GRP.BREAK.VALUE", "PORTFOLIO.NO EQ CVR_CURRENT.PORTS, SUB.ASSET.TYPE EQ param1, SEL.CCY EQ param2", "enqScGrpBreakValues", "parameters [ filter=\"PortfolioNo eq 'CVR_CURRENT_PORTS' and SubAssetType eq '{param1}' and SelCcy eq '{param2}'\" ]").execute(++numTestsExecuted);
		*/		
		boolean someTestsFailed = (numTestsPassed < numTestsExecuted);
		
		System.out.println('\n' + (someTestsFailed ? "Only " + numTestsPassed + "/" + numTestsExecuted : "All " + numTestsExecuted) + " tests passed " + (someTestsFailed ? ":-(" : ":-)"));
		
		assertTrue(numTestsPassed == numTestsExecuted);
	}

}
