/*
 * generated by Xtext
 */
package com.odcgroup.page;

import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.linking.impl.Linker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parser.IEncodingProvider;
import org.eclipse.xtext.parser.IParser;
import org.eclipse.xtext.parsetree.reconstr.ITokenSerializer.ICrossReferenceSerializer;
import org.eclipse.xtext.resource.IFragmentProvider;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceFactory;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.service.SingletonBinding;
import org.eclipse.xtext.validation.IConcreteSyntaxValidator;

import com.google.inject.Provider;
import com.odcgroup.page.linking.PageCrossReferenceSerializer;
import com.odcgroup.page.linking.PageFragmentProvider;
import com.odcgroup.page.linking.PageLinkingService;
import com.odcgroup.page.resource.PageDSLResource;
import com.odcgroup.page.scoping.PageGlobalScopeProvider;
import com.odcgroup.page.scoping.PageQualifiedNameProvider;
import com.odcgroup.page.values.PageValueConverterService;
import com.odcgroup.workbench.dsl.resources.CommonDSLResourceServiceProvider;
import com.odcgroup.workbench.dsl.resources.DSLEncodingProviderProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 * 
 * DS-3929: We add "@SingletonBinding" to some bindings to reduce memory consumption
 */
public class PageRuntimeModule extends com.odcgroup.page.AbstractPageRuntimeModule {

	public static final String[] PAGE_FILE_EXTS = new String[] { "page", "module", "fragment" };

	@Override
	@SingletonBinding
	public Class<? extends IFragmentProvider> bindIFragmentProvider() {
		return PageFragmentProvider.class;
	}

	@Override
	@SingletonBinding
	public Class<? extends ILinker> bindILinker() {
		return Linker.class;
	}
	
	@Override
	public Class<? extends ResourceSet> bindResourceSet() {
		return ResourceSetImpl.class;
	}

	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return PageDSLResource.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IResourceFactory> bindIResourceFactory() {
		return XtextResourceFactory.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return PageValueConverterService.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return PageGlobalScopeProvider.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return PageQualifiedNameProvider.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends ILinkingService> bindILinkingService() {
		return PageLinkingService.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IConcreteSyntaxValidator> bindConcreteSyntaxValidator() {
		return super.bindConcreteSyntaxValidator();
	}

	public Class<? extends ICrossReferenceSerializer> bindICrossReferenceSerializer() {
		return PageCrossReferenceSerializer.class;
	}
	
	@Override
	@SingletonBinding
	public Class<? extends IParser> bindIParser() {
		return super.bindIParser();
	}

	@Override
	public Class<? extends Provider<IEncodingProvider>> provideIEncodingProvider() {
	    return DSLEncodingProviderProvider.class;
	}
	
	public Class<? extends IResourceServiceProvider> bindIResourceServiceProvider() {
		return CommonDSLResourceServiceProvider.class;
	}
}
