/*
 * generated by Xtext
 */
package com.odcgroup.page.scoping;

import org.apache.commons.lang.ArrayUtils;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.resource.ISelectable;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.ResourceSetGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.SelectableBasedScope;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.odcgroup.page.PageRuntimeModule;

/**
 * This class contains custom scoping description.
 * We simply create the scope based on the resourceset the model element is in.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class PageGlobalScopeProvider extends ResourceSetGlobalScopeProvider {

	/* 
	 *  In order to support the three different file extensions, we have to override
	 *  this method, which is otherwise a plain copy of the parent class
	 */
	@Override
	protected IScope createScopeWithQualifiedNames(IScope parent, Resource resource, com.google.common.base.Predicate<IEObjectDescription> filter, ResourceSet resourceSet, EClass type, boolean ignoreCase) {

		final Iterable<Resource> resources = Iterables.filter(resourceSet.getResources(), new Predicate<Resource>() {
			public boolean apply(Resource resource) {
				return ArrayUtils.contains(PageRuntimeModule.PAGE_FILE_EXTS, resource.getURI().fileExtension()) ? true : false;
			}
		});
		
		final Iterable<IResourceDescriptions> resourceDescriptions = Iterables.transform(resources, new Function<Resource, IResourceDescriptions>() {
			public IResourceDescriptions apply(Resource from) {
				return getResourceDescriptions(from);
			}
		});

		ISelectable compound = new ISelectable() {
			
			public boolean isEmpty() {
				for (ISelectable description: resourceDescriptions) {
					if (!description.isEmpty())
						return false;
				}
				return true;
			}
			
			public Iterable<IEObjectDescription> getExportedObjectsByType(final EClass type) {
				return Iterables.concat(Iterables.transform(resourceDescriptions, new Function<ISelectable, Iterable<IEObjectDescription>>() {
					public Iterable<IEObjectDescription> apply(ISelectable from) {
						return from.getExportedObjectsByType(type);
					}
				}));
			}
			
			public Iterable<IEObjectDescription> getExportedObjectsByObject(final EObject object) {
				return Iterables.concat(Iterables.transform(resourceDescriptions, new Function<ISelectable, Iterable<IEObjectDescription>>() {
					public Iterable<IEObjectDescription> apply(ISelectable from) {
						return from.getExportedObjectsByObject(object);
					}
				}));
			}
			
			public Iterable<IEObjectDescription> getExportedObjects(final EClass type, final QualifiedName name, final boolean ignoreCase) {
				return Iterables.concat(Iterables.transform(resourceDescriptions, new Function<ISelectable, Iterable<IEObjectDescription>>() {
					public Iterable<IEObjectDescription> apply(ISelectable from) {
						return from.getExportedObjects(type, name, ignoreCase);
					}
				}));
			}
			
			public Iterable<IEObjectDescription> getExportedObjects() {
				return Iterables.concat(Iterables.transform(resourceDescriptions, new Function<ISelectable, Iterable<IEObjectDescription>>() {
					public Iterable<IEObjectDescription> apply(ISelectable from) {
						return from.getExportedObjects();
					}
				}));
			}
		};
		return SelectableBasedScope.createScope(parent, compound, filter, type, ignoreCase);
	}
}
