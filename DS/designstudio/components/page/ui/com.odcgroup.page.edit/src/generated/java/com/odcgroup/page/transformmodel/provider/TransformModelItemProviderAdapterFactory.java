/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.odcgroup.page.transformmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.odcgroup.page.transformmodel.util.TransformModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TransformModelItemProviderAdapterFactory extends TransformModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TransformModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.TransformModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformModelItemProvider transformModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.TransformModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformModelAdapter() {
		if (transformModelItemProvider == null) {
			transformModelItemProvider = new TransformModelItemProvider(this);
		}

		return transformModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.Namespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamespaceItemProvider namespaceItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.Namespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamespaceAdapter() {
		if (namespaceItemProvider == null) {
			namespaceItemProvider = new NamespaceItemProvider(this);
		}

		return namespaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.ElementPropertyTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementPropertyTransformerItemProvider elementPropertyTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.ElementPropertyTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementPropertyTransformerAdapter() {
		if (elementPropertyTransformerItemProvider == null) {
			elementPropertyTransformerItemProvider = new ElementPropertyTransformerItemProvider(this);
		}

		return elementPropertyTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.ExtraParentWidgetTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraParentWidgetTransformerItemProvider extraParentWidgetTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.ExtraParentWidgetTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraParentWidgetTransformerAdapter() {
		if (extraParentWidgetTransformerItemProvider == null) {
			extraParentWidgetTransformerItemProvider = new ExtraParentWidgetTransformerItemProvider(this);
		}

		return extraParentWidgetTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.ElementNameWidgetTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementNameWidgetTransformerItemProvider elementNameWidgetTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.ElementNameWidgetTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementNameWidgetTransformerAdapter() {
		if (elementNameWidgetTransformerItemProvider == null) {
			elementNameWidgetTransformerItemProvider = new ElementNameWidgetTransformerItemProvider(this);
		}

		return elementNameWidgetTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.AttributeNamePropertyTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeNamePropertyTransformerItemProvider attributeNamePropertyTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.AttributeNamePropertyTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeNamePropertyTransformerAdapter() {
		if (attributeNamePropertyTransformerItemProvider == null) {
			attributeNamePropertyTransformerItemProvider = new AttributeNamePropertyTransformerItemProvider(this);
		}

		return attributeNamePropertyTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.GenericPropertyTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericPropertyTransformerItemProvider genericPropertyTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.GenericPropertyTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericPropertyTransformerAdapter() {
		if (genericPropertyTransformerItemProvider == null) {
			genericPropertyTransformerItemProvider = new GenericPropertyTransformerItemProvider(this);
		}

		return genericPropertyTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.GenericWidgetTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericWidgetTransformerItemProvider genericWidgetTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.GenericWidgetTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericWidgetTransformerAdapter() {
		if (genericWidgetTransformerItemProvider == null) {
			genericWidgetTransformerItemProvider = new GenericWidgetTransformerItemProvider(this);
		}

		return genericWidgetTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.NullWidgetTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullWidgetTransformerItemProvider nullWidgetTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.NullWidgetTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullWidgetTransformerAdapter() {
		if (nullWidgetTransformerItemProvider == null) {
			nullWidgetTransformerItemProvider = new NullWidgetTransformerItemProvider(this);
		}

		return nullWidgetTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.NullPropertyTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullPropertyTransformerItemProvider nullPropertyTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.NullPropertyTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullPropertyTransformerAdapter() {
		if (nullPropertyTransformerItemProvider == null) {
			nullPropertyTransformerItemProvider = new NullPropertyTransformerItemProvider(this);
		}

		return nullPropertyTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.EventTransformations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventTransformationsItemProvider eventTransformationsItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.EventTransformations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventTransformationsAdapter() {
		if (eventTransformationsItemProvider == null) {
			eventTransformationsItemProvider = new EventTransformationsItemProvider(this);
		}

		return eventTransformationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.EventTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventTransformationItemProvider eventTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.EventTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventTransformationAdapter() {
		if (eventTransformationItemProvider == null) {
			eventTransformationItemProvider = new EventTransformationItemProvider(this);
		}

		return eventTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.ChildrenWidgetTransformer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildrenWidgetTransformerItemProvider childrenWidgetTransformerItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.ChildrenWidgetTransformer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildrenWidgetTransformerAdapter() {
		if (childrenWidgetTransformerItemProvider == null) {
			childrenWidgetTransformerItemProvider = new ChildrenWidgetTransformerItemProvider(this);
		}

		return childrenWidgetTransformerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.SnippetTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnippetTransformationItemProvider snippetTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.SnippetTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnippetTransformationAdapter() {
		if (snippetTransformationItemProvider == null) {
			snippetTransformationItemProvider = new SnippetTransformationItemProvider(this);
		}

		return snippetTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.transformmodel.SnippetTransformations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnippetTransformationsItemProvider snippetTransformationsItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.transformmodel.SnippetTransformations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnippetTransformationsAdapter() {
		if (snippetTransformationsItemProvider == null) {
			snippetTransformationsItemProvider = new SnippetTransformationsItemProvider(this);
		}

		return snippetTransformationsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (transformModelItemProvider != null) transformModelItemProvider.dispose();
		if (namespaceItemProvider != null) namespaceItemProvider.dispose();
		if (elementNameWidgetTransformerItemProvider != null) elementNameWidgetTransformerItemProvider.dispose();
		if (attributeNamePropertyTransformerItemProvider != null) attributeNamePropertyTransformerItemProvider.dispose();
		if (elementPropertyTransformerItemProvider != null) elementPropertyTransformerItemProvider.dispose();
		if (extraParentWidgetTransformerItemProvider != null) extraParentWidgetTransformerItemProvider.dispose();
		if (genericPropertyTransformerItemProvider != null) genericPropertyTransformerItemProvider.dispose();
		if (genericWidgetTransformerItemProvider != null) genericWidgetTransformerItemProvider.dispose();
		if (nullWidgetTransformerItemProvider != null) nullWidgetTransformerItemProvider.dispose();
		if (nullPropertyTransformerItemProvider != null) nullPropertyTransformerItemProvider.dispose();
		if (eventTransformationsItemProvider != null) eventTransformationsItemProvider.dispose();
		if (eventTransformationItemProvider != null) eventTransformationItemProvider.dispose();
		if (childrenWidgetTransformerItemProvider != null) childrenWidgetTransformerItemProvider.dispose();
		if (snippetTransformationItemProvider != null) snippetTransformationItemProvider.dispose();
		if (snippetTransformationsItemProvider != null) snippetTransformationsItemProvider.dispose();
	}

}
