/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.odcgroup.page.uimodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.odcgroup.page.uimodel.util.UIModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UIModelItemProviderAdapterFactory extends UIModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UIModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.UIModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIModelItemProvider uiModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.UIModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIModelAdapter() {
		if (uiModelItemProvider == null) {
			uiModelItemProvider = new UIModelItemProvider(this);
		}

		return uiModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.Palette} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaletteItemProvider paletteItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.Palette}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaletteAdapter() {
		if (paletteItemProvider == null) {
			paletteItemProvider = new PaletteItemProvider(this);
		}

		return paletteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.PaletteGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaletteGroupItemProvider paletteGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.PaletteGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaletteGroupAdapter() {
		if (paletteGroupItemProvider == null) {
			paletteGroupItemProvider = new PaletteGroupItemProvider(this);
		}

		return paletteGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.PaletteGroupItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaletteGroupItemItemProvider paletteGroupItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.PaletteGroupItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaletteGroupItemAdapter() {
		if (paletteGroupItemItemProvider == null) {
			paletteGroupItemItemProvider = new PaletteGroupItemItemProvider(this);
		}

		return paletteGroupItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.Renderers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenderersItemProvider renderersItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.Renderers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenderersAdapter() {
		if (renderersItemProvider == null) {
			renderersItemProvider = new RenderersItemProvider(this);
		}

		return renderersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.RendererInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RendererInfoItemProvider rendererInfoItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.RendererInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRendererInfoAdapter() {
		if (rendererInfoItemProvider == null) {
			rendererInfoItemProvider = new RendererInfoItemProvider(this);
		}

		return rendererInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.Menus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenusItemProvider menusItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.Menus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenusAdapter() {
		if (menusItemProvider == null) {
			menusItemProvider = new MenusItemProvider(this);
		}

		return menusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.WidgetMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WidgetMenuItemProvider widgetMenuItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.WidgetMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWidgetMenuAdapter() {
		if (widgetMenuItemProvider == null) {
			widgetMenuItemProvider = new WidgetMenuItemProvider(this);
		}

		return widgetMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.ActionGroups} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionGroupsItemProvider actionGroupsItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.ActionGroups}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionGroupsAdapter() {
		if (actionGroupsItemProvider == null) {
			actionGroupsItemProvider = new ActionGroupsItemProvider(this);
		}

		return actionGroupsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.Actions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionsItemProvider actionsItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.Actions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionsAdapter() {
		if (actionsItemProvider == null) {
			actionsItemProvider = new ActionsItemProvider(this);
		}

		return actionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.ActionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionGroupItemProvider actionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.ActionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionGroupAdapter() {
		if (actionGroupItemProvider == null) {
			actionGroupItemProvider = new ActionGroupItemProvider(this);
		}

		return actionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.EditPolicyRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditPolicyRoleItemProvider editPolicyRoleItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.EditPolicyRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditPolicyRoleAdapter() {
		if (editPolicyRoleItemProvider == null) {
			editPolicyRoleItemProvider = new EditPolicyRoleItemProvider(this);
		}

		return editPolicyRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.page.uimodel.MenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemItemProvider menuItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.page.uimodel.MenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemAdapter() {
		if (menuItemItemProvider == null) {
			menuItemItemProvider = new MenuItemItemProvider(this);
		}

		return menuItemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (uiModelItemProvider != null) uiModelItemProvider.dispose();
		if (paletteItemProvider != null) paletteItemProvider.dispose();
		if (paletteGroupItemProvider != null) paletteGroupItemProvider.dispose();
		if (paletteGroupItemItemProvider != null) paletteGroupItemItemProvider.dispose();
		if (renderersItemProvider != null) renderersItemProvider.dispose();
		if (rendererInfoItemProvider != null) rendererInfoItemProvider.dispose();
		if (menusItemProvider != null) menusItemProvider.dispose();
		if (widgetMenuItemProvider != null) widgetMenuItemProvider.dispose();
		if (actionGroupsItemProvider != null) actionGroupsItemProvider.dispose();
		if (actionsItemProvider != null) actionsItemProvider.dispose();
		if (actionGroupItemProvider != null) actionGroupItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (editPolicyRoleItemProvider != null) editPolicyRoleItemProvider.dispose();
		if (menuItemItemProvider != null) menuItemItemProvider.dispose();
	}

}
