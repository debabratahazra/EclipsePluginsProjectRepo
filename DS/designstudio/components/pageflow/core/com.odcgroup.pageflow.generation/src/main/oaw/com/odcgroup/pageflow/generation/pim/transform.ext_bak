// first import the meta model to transform to
import pageflow;

// import the domain metamodel - this is what we transform from
import mdf;

extension com::odcgroup::pageflow::generation::ext::helper;

// on top level, we transform a domain model into a Set of Pageflows
Set[Pageflow] createCrudPageflows(MdfDomain m) :
		m.classes.createSearchPageflow().union(
		m.classes.createPopupPageflow());

// create the standard CRUD pageflow for an Class
Pageflow createSearchPageflow(MdfClass c) :
	let pf = new Pageflow :
		pf.setName("Search" + c.name) ->
		pf.setErrorView(createView("/page/common/OneModule?module=general/PageflowErrorModule")) ->
		pf.setAbortView(createView("/redirect/activity/ofscrm/crud/Intro")) ->
		pf.states.addAll(createSearchStates(pf, c)) ->
		c.properties.typeSelect(MdfAssociation).createSearchSubPageflow(pf) ->
		pf;

// create the search popup pageflow for a Class
Pageflow createPopupPageflow(MdfClass c) :
	let pf = new Pageflow :
		pf.setName("Popup" + c.name) ->
		pf.setErrorView(createView("/page/common/OneModule?module=general/PageflowErrorModule")) ->
		pf.states.addAll(createPopupStates(pf, c)) ->
		pf;

// create sub pageflow for adding new associations
createSearchSubPageflow(MdfAssociation a, Pageflow pf) :
	pf.states.addAll(createSubflowStates(a, pf)) ->
	pf.transitions.add(
		let t = createTransition(pf, a.parentClass, "initAdd" + a.type.name,  "view", "add" + a.type.name) :
			t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.InitAdd" + a.type.name)) ->
			t
	);

// create all states for the standard CRUD pageflow
Set[State] createSearchStates(Pageflow pf, MdfClass c) :
	{
		// first, create the init state
		let s = getState(pf, c, "init") :
			s.setDesc("The entry point of the pageflow") ->
			pf.transitions.add(
				let t = createTransition(pf, c, "initSearch", s.key, "search") :
					t.actions.addAll({
						createTransitionAction("com.odcgroup.uif.workflow.SetConfigurableURLProcess"),
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.InitSearch" + c.name)
					}) ->
				    t
			) ->
			s,

		// add the exit state (as it has a view, it is still a normal ViewState and no EndState
		let s = (ViewState) getState(pf, c, "exit") :
			s.setDesc("Exit the page flow") ->
			s.setView(createView("/redirect/activity/ofscrm/crud/Intro")) ->
			pf.transitions.add(createTransition(pf, c, "end", s.key, "end")) ->
			s,

		// add the logical end state
		let s = getState(pf, c, "end") :
			s.setDesc("Final state of the pageflow") ->
			s,

		// the state for the search form and the search results
		let s = (ViewState) getState(pf, c, "search") :
			s.setDesc("Search an entity") ->
			s.setView(createView("activity/ofscrm/crud/" + c.name + "/Search")) ->
			pf.transitions.addAll({
				let t = createTransition(pf, c, "search", s.key, "search") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Search" + c.name)) ->
					t,
				let t = createTransition(pf, c, "view", s.key, "view") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.View" + c.name)) ->
					t,
				createTransition(pf, c,"clear", s.key, "view"),
				let t = createTransition(pf, c,"cancel", s.key, "exit") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Clear" + c.name)) ->
					t,
				let t = createTransition(pf, c,"initAdd", s.key, "add") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.InitAdd" + c.name)) ->
					t
			}) ->
		    s,
		
		// state for adding an entity
		let s = (ViewState) getState(pf, c, "add") :
			s.setDesc("Add an entity") ->
			s.setView(createView("activity/ofscrm/crud/" + c.name + "/Add")) ->
			pf.transitions.addAll({
				let t = createTransition(pf, c, "add", s.key, "search") :
					t.actions.addAll({
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Add" + c.name),
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Search" + c.name)
					}) ->
					t,
				let t = createTransition(pf, c, "cancelAdd", s.key, "search") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Clear" + c.name)) ->
					t
			}) ->
			s,
		
		// state for viewing the entity
		let s = (ViewState) getState(pf, c, "view") :
			s.setDesc("View an entity") ->
			s.setView(createView("activity/ofscrm/crud/" + c.name + "/View")) ->
			pf.transitions.addAll({
				let t = createTransition(pf, c, "delete", s.key, "search") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Delete" + c.name)) ->
					t,
				createTransition(pf, c, "initUpdate", s.key, "update")
			}) ->
			s,
		
		// state for updating the entity
		let s = (ViewState) getState(pf, c, "update") :
			s.setDesc("Update an entity") ->
			s.setView(createView("activity/ofscrm/crud/" + c.name + "/Update")) ->
			pf.transitions.addAll({
				let t = createTransition(pf, c, "cancelUpdate", s.key, "view") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Clear" + c.name)) ->
					t,
				let t = createTransition(pf, c, "update", s.key, "view") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Update" + c.name)) ->
					t
			}) ->
			s
	};

// creates all states for the search popup pageflow
Set[State] createPopupStates(Pageflow pf, MdfClass c) :
	{
		// first, create the logical init state
		let s = getState(pf, c, "init") :
			s.setDesc("The entry point of the pageflow") ->
			pf.transitions.add(
				let t = createTransition(pf, c, "initSearch", s.key, "search") :
					t.actions.addAll({
						createTransitionAction("com.odcgroup.uif.workflow.SetConfigurableURLProcess"),
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.InitSearch" + c.name)
					}) ->
				    t
			) ->
			s,

		// add the logical end state
		let s = getState(pf, c, "end") :
			s.setDesc("Final state of the pageflow") ->
			s,

		// now create the only "real" state for the search form and the result list
		let s = (ViewState) getState(pf, c, "search") :
			s.setDesc("Search an entity") ->
			s.setView(createView("activity/ofscrm/crud/" + c.name + "/Search")) ->
			pf.transitions.addAll({
				let t = createTransition(pf, c, "search", s.key, "search") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Search" + c.name)) ->
					t
				// don't generate an "end" transition, so that search won't be marked as "terminal"
				//,createTransition(pf, c, "end", "end")
			}) ->
	    	s		
	};

/* This method allows to retrieve a state by name without knowing of what subtype it is. If the state
 * does not yet exist, it is automatically created. The "create" statements that are used below make
 * sure that there is always only one object with the same name created and subsequent calls just
 * return a reference.
*/
State getState(Pageflow pf, MdfClass c, String name) :
	name.startsWith("add")?createViewState(pf, c, name) : (
	name.matches("search")?createViewState(pf, c, "search") : (
	name.matches("view")?createViewState(pf, c, "view") : (
	name.matches("update")?createViewState(pf, c, "update") : (
	name.matches("exit")?createViewState(pf, c, "exit") : (
	name.matches("end")?createEndState(pf, c, "end") : (
	name.matches("init")?createInitState(pf, c, "init") 
	: null ))))));

create EndState this createEndState(Pageflow pf, MdfClass c, String key) :
	setKey(key);

create InitState this createInitState(Pageflow pf, MdfClass c, String key) :
	setKey(key);

create ViewState this createViewState(Pageflow pf, MdfClass c, String key) :
	setKey(key) ->
	// always create a reload transition for a ViewState
	pf.transitions.add(createTransition(pf, c, "reload", this, this));
	
create DecisionState this createActionState(Pageflow pf, MdfClass c, String key) :
	setKey(key);

// create a new transition with state passed as a string
createTransition(Pageflow pf, MdfClass c, String name, String fromState, String toState) :
	createTransition(pf, c, name, getState(pf, c, fromState), getState(pf, c, toState));

// create a new transition with state passed as a reference
createTransition(Pageflow pf, MdfClass c, String name, State fromState, State toState) :
	let t = new Transition :
		t.setName(name) ->
		t.setFromState(fromState) ->
		t.setToState(toState) ->
		t;

// create a new view to a given url
createView(String url) :
	let v = new View :
		v.setUrl(url) ->
		v;

// create a new transition action with a given uri as the action
createTransitionAction(String uri) :
	let ta = new TransitionAction :
		ta.setName("Transition Action") ->
		ta.setUri(uri) ->
		ta;

// create all additional states for the sub pageflow for handling associations
Set[State] createSubflowStates(MdfAssociation a, Pageflow pf) :
	{
		let s = createViewState(pf, a.parentClass, "add" + a.type.name) :
			s.setDesc("Add an entity to a collection") ->
			pf.transitions.addAll({
				let t = createTransition(pf, a.parentClass, "cancelAdd"  + a.type.name, s.key, "view") :
					t.actions.add(createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Clear" + a.type.name)) ->
				    t,
				let t = createTransition(pf, a.parentClass, "add" + a.name.toFirstUpper(), s.key, "view") :
					t.actions.addAll({
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Add" + a.type.name),
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.Add" + a.type.name + "To" + a.parentClass.name),
						createTransitionAction("com.odcgroup.wui.module.ofscrm.process.View" + a.parentClass.name)						
					}) ->
				    t
			}) ->
			s
	};
