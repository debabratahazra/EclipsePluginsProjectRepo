/**
 * ODCGROUP
 *
 * $Id$
 */
package com.odcgroup.pageflow.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.odcgroup.pageflow.model.util.PageflowAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PageflowItemProviderAdapterFactory extends PageflowAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "ODCGROUP";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PageflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.EndState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndStateItemProvider endStateItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.EndState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEndStateAdapter() {
		if (endStateItemProvider == null) {
			endStateItemProvider = new EndStateItemProvider(this);
		}

		return endStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.Pageflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageflowItemProvider pageflowItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.Pageflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPageflowAdapter() {
		if (pageflowItemProvider == null) {
			pageflowItemProvider = new PageflowItemProvider(this);
		}

		return pageflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.InitState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitStateItemProvider initStateItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.InitState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInitStateAdapter() {
		if (initStateItemProvider == null) {
			initStateItemProvider = new InitStateItemProvider(this);
		}

		return initStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.ViewState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewStateItemProvider viewStateItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.ViewState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createViewStateAdapter() {
		if (viewStateItemProvider == null) {
			viewStateItemProvider = new ViewStateItemProvider(this);
		}

		return viewStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.View} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewItemProvider viewItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.View}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createViewAdapter() {
		if (viewItemProvider == null) {
			viewItemProvider = new ViewItemProvider(this);
		}

		return viewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.DecisionState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionStateItemProvider decisionStateItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.DecisionState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDecisionStateAdapter() {
		if (decisionStateItemProvider == null) {
			decisionStateItemProvider = new DecisionStateItemProvider(this);
		}

		return decisionStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.TransitionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionActionItemProvider transitionActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.TransitionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTransitionActionAdapter() {
		if (transitionActionItemProvider == null) {
			transitionActionItemProvider = new TransitionActionItemProvider(this);
		}

		return transitionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.DecisionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionActionItemProvider decisionActionItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.DecisionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDecisionActionAdapter() {
		if (decisionActionItemProvider == null) {
			decisionActionItemProvider = new DecisionActionItemProvider(this);
		}

		return decisionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.SubPageflowState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubPageflowStateItemProvider subPageflowStateItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.SubPageflowState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSubPageflowStateAdapter() {
		if (subPageflowStateItemProvider == null) {
			subPageflowStateItemProvider = new SubPageflowStateItemProvider(this);
		}

		return subPageflowStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.odcgroup.pageflow.model.TransitionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionMappingItemProvider transitionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link com.odcgroup.pageflow.model.TransitionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTransitionMappingAdapter() {
		if (transitionMappingItemProvider == null) {
			transitionMappingItemProvider = new TransitionMappingItemProvider(this);
		}

		return transitionMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (endStateItemProvider != null) endStateItemProvider.dispose();
		if (pageflowItemProvider != null) pageflowItemProvider.dispose();
		if (initStateItemProvider != null) initStateItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (viewStateItemProvider != null) viewStateItemProvider.dispose();
		if (viewItemProvider != null) viewItemProvider.dispose();
		if (decisionStateItemProvider != null) decisionStateItemProvider.dispose();
		if (transitionActionItemProvider != null) transitionActionItemProvider.dispose();
		if (decisionActionItemProvider != null) decisionActionItemProvider.dispose();
		if (subPageflowStateItemProvider != null) subPageflowStateItemProvider.dispose();
		if (transitionMappingItemProvider != null) transitionMappingItemProvider.dispose();
	}

}
