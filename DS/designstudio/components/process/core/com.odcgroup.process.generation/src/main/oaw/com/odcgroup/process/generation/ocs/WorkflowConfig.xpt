«IMPORT process»

«EXTENSION com::odcgroup::process::generation::ocs::ext::workflowHelper» 

«DEFINE WorkflowConfigRoot FOR Process»
«FILE getWorkflowConfigFileName()-»
<?xml version="1.0" encoding="UTF-8"?>
<workflow:workflow xmlns:workflow="http://www.odcgroup.com/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.odcgroup.com/workflow workflow.xsd">
	<!-- 
	  *************************************************************************************
																DO NOT MODIFY THIS FILE!

		This file has been generated automatically  by Design Studio. 
		Any change will be lost when regenerated.
		*************************************************************************************		
										Design Studio information of Workflow model
		Project name     : «projectName()»
		Package          : «packageName()»
		Model name       : «getDisplayName()»
		Generation user  : «systemUser()»
		Generation date  : «currentDate()»
		DS version       : «getBuildID()»
		Description      : «getDescriptionForMetaInfo()»
		*************************************************************************************
	 -->
	<workflow:process name="«name»" displayName="«getDisplayName()»" description="«truncateEscapeString(getDescription())»">	
		<workflow:version-comment></workflow:version-comment>
	«EXPAND ProcessRoot FOREACH pools-»
	</workflow:process>	
</workflow:workflow>
«ENDFILE»
«ENDDEFINE»

«DEFINE WorkflowConfigRoot FOR Object»
«ENDDEFINE»

«DEFINE ProcessRoot FOR Pool-»
		«EXPAND TaskRoot FOREACH this.tasks-»
«ENDDEFINE»

«DEFINE TaskRoot FOR Task -»
		«LET  getTransitions().select(t|(t.source.metaType==StartEvent && t.target==this )) AS act-»
		«IF act != null && act.size > 0-»
		<workflow:activity name="«getTaskId()»" displayName="«getDisplayName()»" description="«truncateEscapeString(getDescription())»" initial="true" group="«getParentPoolID()»" >
		«ELSE-»
		<workflow:activity name="«getTaskId()»" displayName="«getDisplayName()»" description="«truncateEscapeString(getDescription())»" «isPersonalTask()? 'personal="true"' : ''» group="«getParentPoolID()»" >
		«ENDIF-»
		«ENDLET-»
		«IF this.metaType==UserTask-»
			«EXPAND ApplicationRoot FOR (UserTask)this -»
		«ELSE-»			
			«EXPAND ApplicationRoot FOR (ServiceTask)this -»
		«ENDIF-»	
			«EXPAND AssigneesRoot FOR getParentPool()-»
			«EXPAND TransitionRoot FOR (ProcessItem)this -»
			«EXPAND PreSelectorRoot FOREACH getReferencingGateways()-»			
		</workflow:activity>
«ENDDEFINE»

«DEFINE ApplicationRoot FOR UserTask -»	
			<workflow:application>	
			«IF this.pageflow != null-»			
					<workflow:url>«parseUserTaskURI(pageflow.URI, pageflow.property, isPageflowCallingWorkflow(this))»</workflow:url>
			«ELSEIF this.rule != null-»		
					«EXPAND RuleRoot FOR rule-»
			«ENDIF-»
			</workflow:application>
«ENDDEFINE»

«DEFINE ApplicationRoot FOR ServiceTask-»	
	«EXPAND ServiceRoot (getParentPool()) FOR service-»
«ENDDEFINE»

«DEFINE ServiceRoot (Pool parentPool) FOR Service-»
			<workflow:application>
				<workflow:service href="«name»" owner="«(parentPool.metaType==Pool)?((Pool)parentPool).assignee.first().name:''»">
				«FOREACH this.property AS pr-»
			      	<workflow:property name="«pr.name»">«escape(pr.value)»</workflow:property>
	      		«ENDFOREACH-»	
				</workflow:service>
			</workflow:application>
«ENDDEFINE»

«DEFINE AssigneesRoot FOR Pool»
		«IF assigneeByService != null-»
			<workflow:assignees>
				«EXPAND ServiceRoot FOR assigneeByService-»
			</workflow:assignees>
		«ENDIF-»			
		«IF (assignee != null && assignee.size > 0)-»
			<workflow:assignees>
				«FOREACH assignee AS assignee-»
				<workflow:assignee-ref name="«assignee.name»"/>
				«ENDFOREACH-»
			</workflow:assignees>
		«ENDIF-»			
«ENDDEFINE»

«DEFINE TransitionRoot FOR ProcessItem-»
	«IF (this.metaType==UserTask || this.metaType==ServiceTask)-»
		«EXPAND TransitionTaskRoot FOR (Task)this-»
	«ELSEIF (this.metaType==ParallelFork)-»		
		«EXPAND TransitionMergeRoot FOR (ParallelFork)this-»
	«ENDIF-»	
«ENDDEFINE»

«DEFINE TransitionTaskRoot FOR Task-»
		«FOREACH this.getTransitions() AS t-»
		«IF (t.source==this && t.target.metaType!=EndEvent 
			&& t.target.metaType!=ComplexGateway 
			&& t.target.metaType!=ExclusiveMerge 
			&& t.target.metaType!=ParallelFork 
			&& t.target.metaType!=ParallelMerge  )-»
			<workflow:next activity="«t.target.getId()»" unconditional="true"/>
		«ENDIF-»
		«IF (t.source==this  && t.target.metaType!=ComplexGateway && 
				( t.target.metaType==ExclusiveMerge 
					|| t.target.metaType==ParallelMerge ) )-»
			«EXPAND TransitionExclusiveMergeRoot FOR (Gateway)t.target-»
		«ENDIF-»
		«IF (t.source==this  && t.target.metaType==ComplexGateway) -»			
			«EXPAND TransitionComplexGatewayRoot FOR (ComplexGateway)t.target-»
		«ENDIF-»
		«IF (t.source==this  && t.target.metaType==ParallelFork) -»			
			«EXPAND TransitionMergeRoot FOR (ParallelFork)t.target-»
		«ENDIF-»
		«ENDFOREACH-»
«ENDDEFINE»

«DEFINE TransitionExclusiveMergeRoot FOR Gateway-»
	«FOREACH this.getTransitions() AS t-»
		«IF (t.source==this && t.target.metaType!=EndEvent && t.target.metaType != Gateway)-»	
			<workflow:next activity="«t.target.getId()»" />
		«ENDIF-»
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE TransitionComplexGatewayRoot FOR ComplexGateway-»
	«FOREACH this.getTransitions() AS t-»			
		«IF t.source==this && t.target.metaType != EndEvent-»
			<workflow:next activity="«t.target.getId()»" />
		«ENDIF-»
	«ENDFOREACH-»
	«IF this.isSelector() && !this.isPreSelector()-»
			<workflow:selector>
				«IF script != null-»
				<workflow:script language="«script.language»"><![CDATA[«script.value»]]></workflow:script>
				«ELSEIF rule != null-»
					«EXPAND RuleRoot FOR rule-»
				«ELSEIF service != null-»
					«EXPAND ServiceRoot FOR service-»				
				«ENDIF-»
			</workflow:selector>			
	«ENDIF-»
«ENDDEFINE»

«DEFINE TransitionMergeRoot FOR ParallelFork-»
	«FOREACH this.getTransitions() AS t-»				
		«IF (t.source==this)-»		
			<workflow:next activity="«t.target.getId()»" unconditional="true"/>			
		«ENDIF-»
	«ENDFOREACH-»			
«ENDDEFINE»

«DEFINE ServiceRoot FOR Service-»
				<workflow:service href="«name»">
				«FOREACH this.property AS pr-»
			      	<workflow:property name="«pr.name»">«escape(pr.value)»</workflow:property>
		      	«ENDFOREACH-»						
				</workflow:service>
«ENDDEFINE»

«DEFINE RuleRoot FOR Rule-»
				<workflow:service href="«name»">
				«FOREACH this.property AS pr-»
			      	<workflow:property name="«pr.name»">«escape(pr.value)»</workflow:property>
		      	«ENDFOREACH-»						
				</workflow:service>
«ENDDEFINE»

«DEFINE PreSelectorRoot FOR Gateway-»
	«IF (this.metaType == ParallelMerge || this.metaType == ExclusiveMerge)-»		
			<workflow:pre-selector>				
				«IF this.metaType == ParallelMerge-»
				<workflow:condition type="AND">
				«ELSEIF this.metaType == ExclusiveMerge-»
				<workflow:condition type="OR">
				«ENDIF-»
					«FOREACH getIncomingTransitions().source.typeSelect(Task) AS a-»
					<workflow:completed activity="«a.getTaskId()»"/>
					«ENDFOREACH-»
				</workflow:condition>
			</workflow:pre-selector>
	«ELSEIF this.metaType == ComplexGateway -»		
			«EXPAND PreSelectorRootForComplexGateway FOR (ComplexGateway)this-»			
	«ENDIF-»
«ENDDEFINE»

«DEFINE PreSelectorRootForComplexGateway FOR ComplexGateway-»
	«IF this.isPreSelector() && !this.isSelector()-»
			<workflow:pre-selector>	
				«IF this.rule != null-»
					«EXPAND RuleRoot FOR this.rule-»
				«ENDIF-»
				«IF this.service != null-»				
					«EXPAND ServiceRoot FOR this.service-»
				«ENDIF-»
			</workflow:pre-selector>			
	«ENDIF-»
«ENDDEFINE»
