#ifndef SOA_${service.getServiceAPIName().toUpperCase()}_H
\#define SOA_${service.getServiceAPIName().toUpperCase()}_H

#set($stdClsList = ${service.getStdClsRefListInInterface()})
#foreach($stdCls in $stdClsList)
\#include <${stdCls}>
#end
\#include <sstream>

\#include <SOAResponseDetail.h>
\#include <ContextCallback.h>

#set($temenosClsList = ${service.getTemenosClsRefListInInterface()})
#foreach($temenosCls in $temenosClsList)
\#include <${temenosCls}.h>
#end

#set( $userClassList = ${service.getUserClsRefListInInterface()})
#foreach($userClass in $userClassList)
\#include "${userClass}.h"
#end

#undef DLLEXPORT
#undef DLLIMPORT
#undef DLLDECL

#ifdef WIN32
\#define DLLEXPORT __declspec(dllexport)
\#define DLLIMPORT __declspec(dllimport)
\#else
\#define DLLEXPORT
\#define DLLIMPORT
#endif

#ifdef ${service.getComponentName().toUpperCase()}_LIB /*building ${service.getComponentName()} library*/ 
\#define DLLDECL DLLEXPORT
\#else
\#define DLLDECL DLLIMPORT
#endif

namespace temenos {${formatter.indent()}
  namespace soa {${formatter.indent()}
    namespace $service.getNamespace() {${formatter.indent()}	  
			class ${service.getServiceAPIName()} {${formatter.indent()}
			public:
${service.declareServiceDeconstructor()}

#set( $operationList = $service.getGenOperations())
#foreach($operation in $operationList)
${operation.getCppOperationComment()}
${operation.declareCppOperation(true)}

#end

        /*********************************************/
        /*Function : 	GetMetaData*/
        /*  retrieve service meta data*/
        /*********************************************/ 
        virtual std::string GetMetaData() = 0;

        /*********************************************/
        /*Function : SetContextCallback*/
        /*  set context call back to retrieve context, such as user name*/
        /*********************************************/
        virtual void SetContextCallback(
            temenos::soa::common::ContextCallback* contextCallback) = 0;

	    };${formatter.outdent()}

#ifdef __cplusplus
extern "C" {
#endif

${service.declareCreateCppServiceFunc()}

${service.declareDestroyCppServiceFunc()}

#ifdef __cplusplus
}
#endif
	  
	  }${formatter.outdent()}
  }${formatter.outdent()}
}${formatter.outdent()}



#endif