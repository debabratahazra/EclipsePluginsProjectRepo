\#include "${service.getServiceImplName()}.h"

\#include <VARObject.h>
\#include <Logger.h>
\#include <SOAException.h>
\#include <JBCVarHandler.h>
\#include <SOAResponseDetailHandler.h>
\#include <T24ContextHandler.h>

#set($temenosClassRefList = ${service.getTemenosClsRefListInAdaptorCpp()})
#foreach($temenosClassRef in $temenosClassRefList)
\#include "${temenosClassRef}.h"
#end

#set($userClassRefList = ${service.getUserClsRefListInAdaptorCpp()})
#foreach($userClassRef in $userClassRefList)
\#include "${userClassRef}.h"
#end


##ifdef __cplusplus
##extern "C" {
##endif
##set( $operationList = $service.getGenOperations())
##foreach($operation in $operationList)
##${operation.declareJBCImplCppRef()}
##end

##int JBC_${service.getServiceName()}_2EgetMetaData(
##    struct jBASEDataAreas* dp,
##    char* actualFlags,
##    VAR* metaDataXMLStringVar);


##ifdef __cplusplus
##}
##endif


namespace temenos {${formatter.indent()}
  namespace soa {${formatter.indent()}
    namespace ${service.getNamespace()} {${formatter.indent()}
${service.defineServiceImplConstructor()}

${service.defineServiceImplDeconstructor()}

	   void ${service.getServiceImplName()}::initSession() {
    	  session = new tafc::session::TAFCSession(&std::cin, &std::cout, &std::cerr);
    	  temenos::soa::common::T24ContextHandler::InitT24Context(session);
      }

      void ${service.getServiceImplName()}::cleanupSession () {
    	  using namespace temenos::soa::common;
    	  delete session;
      }

#set( $operationList = $service.getGenOperations())
#foreach($operation in $operationList)
${operation.defineCppOperation()}

#end

      std::string ${service.getServiceImplName()}::GetMetaData() {
        temenos::soa::common::VARObject metaDataVar(session);

        const std::string routineName("${service.getServiceName()}.getMetaData");
        
        // Create argument list.
        tafc::session::ArgList args;

        // Push return VAR
        args.push_back(metaDataVar.Get());

        tafc::session::ExecuteResult res =
			session->callSubroutine(routineName, &args);
        
		std::string metaDataString;
		
		// Check if call got any FATAL_ERROR, so that we can recreate TAFCSession.
		switch (res.status) {
			case tafc::session::EXITED_OK:
			case tafc::session::NON_FATAL_ERROR:
				// In both the above cases we can continue
				temenos::soa::common::JBCVarHandler::ConvertVarToPrimitive(
					session, metaDataVar.Get(), metaDataString);
				break;

			case tafc::session::FATAL_ERROR:
			default:
				// Reinitialise TAFCSession for next call
				cleanupSession();
				initSession();
				std::stringstream messageInfo;
				messageInfo << "FATAL_ERROR occurred while retreiving service metadata. TAFC erro code : " << res.code;
				metaDataString = messageInfo.str();
				break;
			}
		return metaDataString;
      }
	  
	  /****************************************************/
	  /* This method will actually invoke the jBC routine */
	  /* Add the Error response message if result code has*/
	  /* problem										  */
	  /****************************************************/
      void ${service.getServiceImplName()}::executeRoutine (
    		  const std::string routineName,
    		  tafc::session::ArgList& args,
    		  temenos::soa::common::SOAResponseDetail& responseDetail) {

		  tafc::session::ExecuteResult res =
			session->callSubroutine(routineName, &args);

		  // Check if call got any FATAL_ERROR, so that we can recreate TAFCSession.
		  switch (res.status) {
			case tafc::session::EXITED_OK:
				// Do nothing :-)
				break;

			case tafc::session::NON_FATAL_ERROR: {
				// At this stage we can re-use session, so add a warning message within responseDetail
				temenos::soa::common::SOAResponseMessage responseMessage;
				responseMessage.SetMessageCode(1);
				responseMessage.SetMessageType(temenos::soa::common::SOAResponseMessage::NON_FATAL_ERROR);
				std::stringstream messageInfo;
				messageInfo << "Error occurred while calling jBC routine '" << routineName << "'. TAFC Error code : " << res.code;
				responseMessage.SetMessageText(messageInfo.str());
				responseMessage.SetMessageInfo(messageInfo.str());
				responseDetail.AddResponseMessage(responseMessage);
				break;
			}

			case tafc::session::FATAL_ERROR:
			default:
				// Reinitialise TAFCSession for next call
				cleanupSession();
				initSession();
				std::stringstream messageInfo;
				messageInfo << "Fatal Error occurred while calling jBC routine '" << routineName << "'. TAFC has been re-initialised if you want to re-try. TAFC Error code : " << res.code; 
				temenos::soa::common::SOAException soaEx(
						"FATAL_ERROR",
						messageInfo.str(),
						messageInfo.str());
				soaEx.AppendContext(__FILE__, __LINE__);		
				throw soaEx;
				break;
			}
      }
	  
      void ${service.getServiceImplName()}::SetContextCallback(
            temenos::soa::common::ContextCallback* contextCallback) {        
        m_contextCallback = contextCallback;
      }

${service.defineCreateCppServiceFunc()}

${service.defineDestroyCppServiceFunc()} 

	  }${formatter.outdent()}
  }${formatter.outdent()}
}${formatter.outdent()}