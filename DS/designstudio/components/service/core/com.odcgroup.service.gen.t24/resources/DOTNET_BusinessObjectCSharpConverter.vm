## CSharpDataClassConverter.vm
using System;
using System.Collections.Generic;

// Temenos namespce
using com.jbase.jremote;
using temenos.soa.common;

namespace temenos
{
	namespace soa
	{
		namespace ${namespace}
		{
			/// <summary>
            /// Utility Class to convert ${umlClass.getDotNetClassName()} to and from JDynArray
            /// </summary>
			public class ${umlClass.getDotNetClassName()}Converter
			{
				/// <summary>
                /// Class Memebr Index Initialisation
                /// </summary>
#set($members = ${umlClass.getMembers()})
#foreach($member in $members)
		        private static int ${member.getCapitalisedName()}_INDEX = ${member.getIndex()}; 
#end		
	        
    	        /******************** To JDynArray ********************/
				/// <summary>
                /// Populate JDynArray from ${umlClass.getDotNetClassName()} Object
                /// </summary>
                /// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} object to convert</param>
                /// <returns>JDynArray</returns>
    			public JDynArray toJDyn(${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynArray jd = new JDynArray();
					toJDyn(jd, ${umlClass.getLowerCamelCaseName()});
	                return jd;
    			}
	
    			/// <summary>
                /// Populate provided JDynArray Fields from ${umlClass.getDotNetClassName()} Object
                /// </summary>
                /// <param name="jd">JDynArray to poulate</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} object to convert</param>
				public void toJDyn(JDynArray jd, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE")
		            jdUtils.setValue(jd, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#else
		            if (${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()} != null)
					{
						${member.getDotNetCSBaseType()}Converter ${member.getDotNetParaVarName()}ConverterObj = new ${member.getDotNetCSBaseType()}Converter();
						${member.getDotNetParaVarName()}ConverterObj.toJDyn(jd, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
					}
					else
					{
						jdUtils.setValue(jd, ${member.getCapitalisedName()}_INDEX, String.Empty);
					}
#end
#end
    			}
				
				/// <summary>
                /// Populate provided JDynArray Field with Multi-Value from ${umlClass.getDotNetClassName()} Object
                /// </summary>
                /// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">Field of JDynArray to populate</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} object to convert</param>
				public void toJDyn(JDynArray jd, int fieldNum, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE")
		            jdUtils.setValue(jd, fieldNum, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#else
	                if (${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()} != null)
					{
						${member.getDotNetCSBaseType()}Converter ${member.getDotNetParaVarName()}ConverterObj = new ${member.getDotNetCSBaseType()}Converter();
#if (${member.getCardinality()} == "SINGLE")
		                ${member.getDotNetParaVarName()}ConverterObj.toJDyn(jd, fieldNum, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#else
		                ## We can not have more level at this stage - So throw an exception
		                throw new InvalidNestLevelException("Attempt to lower to Objects beyond allowable range");
#end
		            }
					else
					{
						jdUtils.setValue(jd, fieldNum, ${member.getCapitalisedName()}_INDEX, String.Empty);
					}
#end
#end
    			}
    			
				/// <summary>
                /// Populate provided JDynArray Field,Multi-Value with Sub-Value from ${umlClass.getDotNetClassName()} Object
                /// </summary>
                /// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">Field of JDynArray</param>
				/// <param name="valueNum">Multi-Value of JDynArray to populate</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} object to convert</param>
    			public void toJDyn(JDynArray jd, int fieldNum, int valueNum, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#set($breakCheck = "false")
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE" && ${member.getCardinality()} == "SINGLE")
		            jdUtils.setValue(jd, fieldNum, valueNum, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#else
		            ## We can not have more level at this stage - So throw an exception
		            throw new InvalidNestLevelException("Attempt to lower to Objects beyond allowable range");
				}
#set($breakCheck = "true")
#break
#end
#end
#if($breakCheck == "false")
    			}
#end

	            /// <summary>
                /// Populate JDynArray from List<${umlClass.getDotNetClassName()}> Objects
				/// Each object in List will be represented as a Field of JDynArray
                /// </summary>
                /// <param name="${umlClass.getLowerCamelCaseName()}List">List of ${umlClass.getDotNetClassName()} objects to convert</param>
				/// <returns>JDynArray</returns>	
    			public JDynArray toJDyn(List<${umlClass.getDotNetClassName()}> ${umlClass.getLowerCamelCaseName()}List)
				{
					JDynArray jd = new JDynArray();
					toJDyn(jd, ${umlClass.getLowerCamelCaseName()}List);
					return jd;
				}

				/// <summary>
                /// Populate provided JDynArray from List<${umlClass.getDotNetClassName()}> Objects
				/// Each object in List will be represented as a Field of JDynArray
				/// Note: String.Empty will be inserted if List provided is null
                /// </summary>
				/// <param name="jd">JDynArray to populate</param>
                /// <param name="${umlClass.getLowerCamelCaseName()}List">List of ${umlClass.getDotNetClassName()} objects to convert</param>
				public void toJDyn(JDynArray jd, List<${umlClass.getDotNetClassName()}> ${umlClass.getLowerCamelCaseName()}List)
    			{
					if (${umlClass.getLowerCamelCaseName()}List != null && ${umlClass.getLowerCamelCaseName()}List.Count != 0)
					{
    					for (int i = 0; i < ${umlClass.getLowerCamelCaseName()}List.Count; i++)
    					{
    						toJDyn(jd, i+1, ${umlClass.getLowerCamelCaseName()}List[i]);
    					}
					}
					else
					{
						// Set an empty value at position one
						jd.insert(String.Empty, 1);
					}
				}
				
				/// <summary>
                /// Populate provided JDynArray Field with Multi-Values from List<${umlClass.getDotNetClassName()}> Objects
				/// Each object in List will be represented as a Multi-Value of JDynArray field
				/// Note: String.Empty will be inserted if List provided is null
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">Field of JDynArray to populate</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}List">List of ${umlClass.getDotNetClassName()} objects to convert</param>
    			public void toJDyn(JDynArray jd, int fieldNum, List<${umlClass.getDotNetClassName()}> ${umlClass.getLowerCamelCaseName()}List)
    			{
					if (${umlClass.getLowerCamelCaseName()}List != null && ${umlClass.getLowerCamelCaseName()}List.Count != 0)
					{
    					for (int i = 0; i < ${umlClass.getLowerCamelCaseName()}List.Count; i++)
    					{
    						toJDyn(jd, fieldNum, i+1, ${umlClass.getLowerCamelCaseName()}List[i]);
    					}
					}
					else
					{
						// Set an empty value at provided position
						jd.insert(String.Empty, fieldNum, 1);
					}
				}
				
				/******************** From JDynArray ********************/
				/// <summary>
                /// Populate ${umlClass.getDotNetClassName()} Object from JDynArray
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <returns>${umlClass.getDotNetClassName()}</returns>
    			public ${umlClass.getDotNetClassName()} fromJDyn(JDynArray jd)
    			{
					${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()} = new ${umlClass.getDotNetClassName()}();
					fromJDyn(jd, ${umlClass.getLowerCamelCaseName()});
					return ${umlClass.getLowerCamelCaseName()};
				}
				
    			/// <summary>
                /// Populate ${umlClass.getDotNetClassName()} Object from JDynArray
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} Object to populate</param>
				public void fromJDyn(JDynArray jd, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE")
## Get Base type information as JDynUtils have different method names
#set($baseType = "")
#if(${member.getDotNetCSBaseType()} == "int")
#set($baseType = "Integer")
#elseif(${member.getDotNetCSBaseType()} == "bool")
#set($baseType = "Boolean")                    
#else
#set($baseType = "String")     
#end
#if (${member.getCardinality()} == "SINGLE")
     		        ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()} = jdUtils.get${baseType}(jd, ${member.getCapitalisedName()}_INDEX);
#else
     		        jdUtils.get${baseType}List(jd, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#end	
#else
		            ${member.getDotNetCSBaseType()}Converter ${member.getDotNetParaVarName()}ConverterObj = new ${member.getDotNetCSBaseType()}Converter();
					${member.getDotNetParaVarName()}ConverterObj.fromJDyn(jd, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#end
#end
    			}
				
				/// <summary>
                /// Populate ${umlClass.getDotNetClassName()} Object from Provided JDynArray Field
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">JDynArray field to process</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} Object to populate</param>
    			public void fromJDyn(JDynArray jd, int fieldNum, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#set($breakCheck = "false")
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE")
## Get Base type information as JDynUtils have different method names
#set($baseType = "")
#if(${member.getDotNetCSBaseType()} == "int")
#set($baseType = "Integer")
#elseif(${member.getDotNetCSBaseType()} == "bool")
#set($baseType = "Boolean")                    
#else
#set($baseType = "String")     
#end
#if (${member.getCardinality()} == "SINGLE")
     		        ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()} = jdUtils.get${baseType}(jd, fieldNum, ${member.getCapitalisedName()}_INDEX);
#else
     		        jdUtils.get${baseType}List(jd, fieldNum, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#end	
#else
		            ${member.getDotNetCSBaseType()}Converter ${member.getDotNetParaVarName()}ConverterObj = new ${member.getDotNetCSBaseType()}Converter();
#if (${member.getCardinality()} == "SINGLE")
					${member.getDotNetParaVarName()}ConverterObj.fromJDyn(jd, fieldNum, ${member.getCapitalisedName()}_INDEX, ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()});
#else
		            ## We can not have more level at this stage - So throw an exception
		            throw new InvalidNestLevelException("Attempt to raise from Objects beyond allowable range");
				}
#set($breakCheck = "true")
#break
#end
#end
#end
#if ($breakCheck == "false")
    			}
#end
				
				/// <summary>
                /// Populate ${umlClass.getDotNetClassName()} Object from Provided JDynArray Field, Multi-Value
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">JDynArray field to process</param>
				/// <param name="valueNum">JDynArray multi-value to process</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}">${umlClass.getDotNetClassName()} Object to populate</param>
    			public void fromJDyn(JDynArray jd, int fieldNum, int valueNum, ${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()})
    			{
					JDynUtils jdUtils = new JDynUtils();
#set($members = ${umlClass.getMembers()})
#set($breakCheck = "false")
#foreach($member in $members)
#if (${member.getComplexity()} == "PRIMITIVE")
## Get Base type information as JDynUtils have different method names
#set($baseType = "")
#if(${member.getDotNetCSBaseType()} == "int")
#set($baseType = "Integer")
#elseif(${member.getDotNetCSBaseType()} == "bool")
#set($baseType = "Boolean")                    
#else
#set($baseType = "String")     
#end
#if (${member.getCardinality()} == "SINGLE")
     		        ${umlClass.getLowerCamelCaseName()}.${member.getDotNetPropertyName()} = jdUtils.get${baseType}(jd, fieldNum, valueNum, ${member.getCapitalisedName()}_INDEX);
#else
     		        ## We can not have more level at this stage - So throw an exception
					throw new InvalidNestLevelException("Attempt to raise from Objects beyond allowable range");
				}
#set($breakCheck = "true")				
#break
#end	
#else
		            ## We can not have more level at this stage - So throw an exception
		            throw new InvalidNestLevelException("Attempt to raise from Objects beyond allowable range");
				}
#set($breakCheck = "true")				
#break
#end
#end
#if($breakCheck == "false")
    			}
#end
	           
				/// <summary>
                /// Populate List<${umlClass.getDotNetClassName()}> from Provided JDynArray Fields.
				/// Each Field of JDynArray will be considered as an Object
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}List">List<${umlClass.getDotNetClassName()}> to populate</param>
    			public void fromJDyn(JDynArray jd, List<${umlClass.getDotNetClassName()}> ${umlClass.getLowerCamelCaseName()}List)
    			{
					for (int i = 0; i < jd.getNumberOfAttributes(); i++) 
					{
						${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()}Obj = new ${umlClass.getDotNetClassName()}();
						fromJDyn(jd, i+1, ${umlClass.getLowerCamelCaseName()}Obj);
						${umlClass.getLowerCamelCaseName()}List.Add(${umlClass.getLowerCamelCaseName()}Obj);
					}
				}
				
				/// <summary>
                /// Populate List<${umlClass.getDotNetClassName()}> from Provided JDynArray Field, Multi-Values.
				/// Each Multi-Values of JDynArray field will be considered as an Object
                /// </summary>
				/// <param name="jd">JDynArray</param>
				/// <param name="fieldNum">JDynArray field to process</param>
				/// <param name="${umlClass.getLowerCamelCaseName()}List">List<${umlClass.getDotNetClassName()}> to populate</param>
    			public void fromJDyn(JDynArray jd, int fieldNum, List<${umlClass.getDotNetClassName()}> ${umlClass.getLowerCamelCaseName()}List)
    			{
					for (int i = 0; i < jd.getNumberOfValues(fieldNum); i++) 
					{
						${umlClass.getDotNetClassName()} ${umlClass.getLowerCamelCaseName()}Obj = new ${umlClass.getDotNetClassName()}();
						fromJDyn(jd, fieldNum, i+1, ${umlClass.getLowerCamelCaseName()}Obj);
						${umlClass.getLowerCamelCaseName()}List.Add(${umlClass.getLowerCamelCaseName()}Obj);
					}
				}
			}
		}
	}
}