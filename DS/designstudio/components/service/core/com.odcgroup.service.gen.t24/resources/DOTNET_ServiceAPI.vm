#ifndef SOA_${service.getDotNetServiceAPIClassName().toUpperCase()}_H
\#define SOA_${service.getDotNetServiceAPIClassName().toUpperCase()}_H

#set($dotNetStdClassRefList = ${service.getDotNetStdClsRefList()})
#foreach($dotNetStdClassRef in $dotNetStdClassRefList)
using ${dotNetStdClassRef};
#end

using temenos::soa::common::ManagedSOAResponseDetail;
using temenos::soa::common::ManagedContextCallback;
#set($dotNetUserClassRefList = ${service.getDotNetUserClsRefList()})
#foreach($dotNetUserClassRef in $dotNetUserClassRefList)
using ${dotNetUserClassRef};
#end

namespace temenos {${formatter.indent()}
  namespace soa {${formatter.indent()}
    namespace ${service.getNamespace()} {${formatter.indent()}
    public interface class ${service.getDotNetServiceAPIClassName()} {${formatter.indent()}
    public:
		/****************************************************/
        /* Function 	: DisposeMe							*/
		/* Description	: This methid can be used to cleanup*/
		/* 				the Managed and Unmanaged resources */
		/****************************************************/
		virtual void DisposeMe();
		
#set( $operationList = $service.getGenOperations())
#foreach($operation in $operationList)
${operation.getDotNetOperationComment()}
${operation.declareDotNetOperationInAPI()}

#end	
${service.declareGetMetaDataMethod()}
${service.declareSetContextCallbackMethod()}        
      };${formatter.outdent()}
    }${formatter.outdent()}
  }${formatter.outdent()}
}${formatter.outdent()}


#endif