## DOTNET_WCFServiceBehavior.vm
// Standard Imports
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Web;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Description;

namespace temenos {${formatter.indent()}${formatter.indent()}
	namespace soa {${formatter.indent()}${formatter.indent()}
		namespace ${service.getNamespace()} {${formatter.indent()}${formatter.indent()}
			public class ${service.getComponentName()}Behavior : Attribute, IServiceBehavior
			{
				#region Private methods
				private void setConcurrencyMode(ServiceBehaviorAttribute behavior, string concurrencyMode)
				{
					switch (concurrencyMode.ToLower())
					{
						case "single":
							behavior.ConcurrencyMode = ConcurrencyMode.Single;
							break;
						case "mulitple":
							behavior.ConcurrencyMode = ConcurrencyMode.Multiple;
							break;
							
						case "reentrant":
							behavior.ConcurrencyMode = ConcurrencyMode.Reentrant;
							break;
                
						default:
							behavior.ConcurrencyMode = ConcurrencyMode.Multiple;
							break;
					}
				}
        
                private void setInstanceMode(ServiceBehaviorAttribute behavior, string instnaceMode)
                {
                    switch (instnaceMode.ToLower())
                    {
                        case "single":
                            behavior.InstanceContextMode = InstanceContextMode.Single;
                            break;
                        case "percall":
                            behavior.InstanceContextMode = InstanceContextMode.PerCall;
                            break;
                        case "persession":
                            behavior.InstanceContextMode = InstanceContextMode.PerSession;
                            break;
                        default:
                            behavior.InstanceContextMode = InstanceContextMode.Single;
                            break;
                    }
                }
                #endregion

                #region IServiceBehavior Members
                public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
                {
                    // Now setup the context stuff
                    var defaultBehavior = serviceHostBase.Description.Behaviors.Find<ServiceBehaviorAttribute>();
                    serviceHostBase.Description.Behaviors.Remove(defaultBehavior);
        
                    // Create a new one
                    ServiceBehaviorAttribute behavior = new ServiceBehaviorAttribute(); 
                    NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
                    string instnaceMode = appSettings["contextMode"];
                    string concurrencyMode = appSettings["concurrencyMode"];
                    setInstanceMode(behavior, instnaceMode);
                    setConcurrencyMode(behavior, concurrencyMode);
                    serviceHostBase.Description.Behaviors.Add(behavior);
                }
        
                public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters)
                {
                    // Do nothing
                }
        
                public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
                {
                    // Do nothing
                }
                #endregion
            }
		}${formatter.outdent()}
	}${formatter.outdent()}
}${formatter.outdent()}