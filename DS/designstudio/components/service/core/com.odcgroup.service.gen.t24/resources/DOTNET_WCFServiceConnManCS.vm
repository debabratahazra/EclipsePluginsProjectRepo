using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Timers;
using System.Net.Sockets;
using System.Diagnostics;

// jRemote Dependency
using com.jbase.jremote;
using com.jbase.jremote.io;

namespace temenos 
{
	namespace soa 
	{
		namespace ${service.getNamespace()} 
		{
			public class JConnectionManager
            {
                private const String PROPERTY_ENVIROMENT_VAR_PREFIX = "env.";
                private object _poolLock = new object();
                private Stack<JConnection> _pool;
                private int _activeJconnectionCount = 0;
                private System.Timers.Timer _idleTimer;
                
                private int _preferredServer = 0;       //Preferred server to which to connect
                private int _maxPoolSize = 20;
                private int _minPoolSize = 1;
                private int _idleTimeout = 300000;       //5 * 60 * 1000;
                private int _incrementFactor = 2;        //5
                private string _ofsId = string.Empty;
                private string _hostIP = "127.0.0.1-20002";   //"10.93.11.98-20002,10.44.5.129-51009";
                private bool _loadBalancing = true;
                private string _charset = "UTF-8";
                private int _actionTimeout = 90;
                private bool _ssl = false;
                private string _dn = "";
                private bool _compression;
                private int _compressionThreshold;
                private bool _allowInput;
                private string _envVariables;
                private string _agentUser;
                private string _agentPassword;
        
                /// <summary>
                /// Constructor
                /// </summary>
                public JConnectionManager()
                {
                    _pool = new Stack<JConnection>();
        
                    //Create a timer to detect if the connection pool is idle
                    _idleTimer = new System.Timers.Timer(_idleTimeout);
                    _idleTimer.Elapsed += new ElapsedEventHandler(idleTimer_Elapsed);
                }
        
                public string OfsSourceId
                {
                    get { return _ofsId; }
                    set { _ofsId = value; }
                }
        
                public int MaxPoolSize
                {
                    get { return _maxPoolSize; }
                    set { _maxPoolSize = value; }
                }
        
                public int MinPoolSize
                {
                    get { return _minPoolSize; }
                    set { _minPoolSize = value; }
                }
                public int IdleTimeout
                {
                    get { return _idleTimeout; }
                    set { _idleTimeout = value; }
                }
                public int IncrementFactor
                {
                    get { return _incrementFactor; }
                    set { _incrementFactor = value; }
                }
                public string HostIP
                {
                    get { return _hostIP; }
                    set { _hostIP = value; }
                }
                public bool LoadBalancing
                {
                    get { return _loadBalancing; }
                    set { _loadBalancing = value; }
                }
                public string Charset
                {
                    get { return _charset; }
                    set { _charset = value; }
                }
                public int ActionTimeout
                {
                    get { return _actionTimeout; }
                    set { _actionTimeout = value; }
                }
                public bool SSL
                {
                    get { return _ssl; }
                    set { _ssl = value; }
                }
                public string DN
                {
                    get { return _dn; }
                    set { _dn = value; }
                }
                public bool Compression
                {
                    get { return _compression; }
                    set { _compression = value; }
                }
                public int CompressionThreshold
                {
                    get { return _compressionThreshold; }
                    set { _compressionThreshold = value; }
                }
                public bool AllowInput
                {
                    get { return _allowInput; }
                    set { _allowInput = value; }
                }
                public string EnvironmentVariables
                {
                    get { return _envVariables; }
                    set { _envVariables = value; }
                }
                public string AgentUser
                {
                    get { return _agentUser; }
                    set { _agentUser = value; }
                }
                public string AgentPassword
                {
                    get { return _agentPassword; }
                    set { _agentPassword = value; }
                }
        
                /// <summary>
                /// Obtains the pooled connection
                /// Warning: This method is not thread-safe
                /// </summary>
                internal Stack<JConnection> PooledConnections
                {
                    get { return _pool; }
                }
        
                /// <summary>
                /// Initialise the connection pool
                /// </summary>
                public void Initialise()
                {
                    //Pre-fill connection pool
                    try
                    {
                        lock (_poolLock)
                        {
                            OpenJConnection(_minPoolSize);
        
                            //Start the idle timer
                            _idleTimer.Interval = _idleTimeout;
                            _idleTimer.Start();
                        }
                    }
                    catch (Exception e)
                    {
                        throw new Exception("Failed to pre-fill the connection pool: " + e.Message);
                    }
                }
        
                /// <summary>
                /// Obtains a connection from the pool.
                /// This method also increments the pool if required.
                /// </summary>
                /// <returns></returns>
                /// <exception cref="JRemoteException">Connection error</exception>
                /// <exception cref="Exception">Other type of error</exception>
                public JConnection GetJConnection()
                {
                    //Get a connection
                    JConnection conn = null;
                    while (conn == null)
                    {
                        Monitor.Enter(_poolLock);       //Enter critical section
                        try
                        {
                            //If we have reached maxPoolSize ==> wait for connection to become available
                            if (_pool.Count == 0 && _activeJconnectionCount == _maxPoolSize)
                            {
                                //Exit critical section and wait to allow other threads to proceed
                                Monitor.Exit(_poolLock);
                                Monitor.Enter(_pool);
                                try
                                {
                                    Monitor.Wait(_pool);
                                }
                                catch (ThreadInterruptedException te)
                                {
                                    throw te;
                                }
                                finally
                                {
                                    Monitor.Exit(_pool);
                                }
                                Monitor.Enter(_poolLock);
                            }
        
                            //Increment connection pool if necessasry
                            if (_pool.Count == 0 && _activeJconnectionCount < _maxPoolSize)
                            {
                                try
                                {
                                    OpenJConnection(_incrementFactor);
                                }
                                catch (JRemoteException re)
                                {
                                    throw re;
                                }
                            }
        
                            //Get connection from the pool
                            if (_pool.Count > 0)
                            {
                                conn = _pool.Pop();
                                if (conn != null)
                                {
                                    _activeJconnectionCount++;
                                    _idleTimer.Stop();
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }
                        finally
                        {
                            Monitor.Exit(_poolLock);    //Exit critical section
                        }
        
                        //Check if connection is alive
                        if (!IsAlive(conn))
                        {   //Connection is broken => Invalidate connection in order to get the next one from the pool
                            //_logger.logTrace("Removing broken T24 connection from connection pool.");
                            DisposeJConnection(conn);
                            conn = null;
                        }
                    }
                    return conn;
                }
        
        
                /// <summary>
                /// Return a connection back to the connection pool
                /// </summary>
                /// <param name="conn">Connection handle</param>
                public void CloseJConnection(JConnection conn)
                {
                    if (conn != null)
                    {
                        lock (_poolLock)
                        {
                            _pool.Push(conn);
                            _activeJconnectionCount--;
                            if (_activeJconnectionCount == 0)
                                _idleTimer.Start();
                            Monitor.Enter(_pool);
                            Monitor.Pulse(_pool);
                            Monitor.Exit(_pool);
                        }
                    }
                }
        
                /// <summary>
                /// Close and release all resources associated to a connection
                /// </summary>
                /// <param name="conn">Connection handle</param>
                public void DisposeJConnection(JConnection conn)
                {
                    if (conn != null)
                    {
                        lock (_poolLock)
                        {
                            conn.close();       //Close physical connection
                            _activeJconnectionCount--;
                            if (_activeJconnectionCount == 0)
                                _idleTimer.Start();
                            Monitor.Enter(_pool);
                            Monitor.Pulse(_pool);
                            Monitor.Exit(_pool);
                            //_logger.logTrace("T24 connection pool has been decreased to " + _pool.Count + " connections.");
                        }
                    }
                }
        
                /// <summary>
                /// Dispose the connection pool
                /// </summary>
                public void DisposeConnectionPool()
                {
                    lock (_poolLock)
                    {
                        while (_pool.Count > 0)
                        {
                            JConnection cx = _pool.Pop();
                            cx.close();                 //Close physical connection
                        }
                        //_logger.logTrace("T24 connection pool has been disposed.");
                    }
                }
        
                /// <summary>
                /// Add new connections to the connection pool.
                /// </summary>
                /// <param name="count">No. of connections to open</param>
                /// <exception cref="JRemoteException">Connection error</exception>
                /// <exception cref="Exception">Other type of error</exception>
                private void OpenJConnection(int count)
                {
                    lock (_poolLock)
                    {
                        JConnection conn;
                        do
                        {
                            conn = CreateJConnection();
                            _pool.Push(conn);
                            count--;
                        }
                        while (count > 0 && (_pool.Count + _activeJconnectionCount) < _maxPoolSize);
                        //_logger.logTrace("T24 connection pool has been increased to " + _pool.Count + " connections.");
                    }
                }
        
                /// <summary>
                /// Create a new JRemote connection
                /// </summary>
                /// <returns>JRemote connection</returns>
                /// <exception cref="JRemoteException">Connection error</exception>
                /// <exception cref="Exception">Other type of error</exception>
                protected JConnection CreateJConnection()
                {
                    JConnection conn = null;
                    if (!string.IsNullOrEmpty(_hostIP))
                    {
                        string[] hosts = _hostIP.Split(new char[] { ',' });      //list of hosts
                        int i = _preferredServer;
                        while (conn == null)
                        {
                            string[] host = hosts[i].Trim().Split(new char[] { '-' });     //current host
                            if (host.Length == 2)
                            {
                                string hostname = host[0];
                                int port = Convert.ToInt32(host[1]);
                                try
                                {
                                    //Connect to the specified jAgent instance
                                    conn = CreateJConnection(hostname, port);
                                }
                                catch (JRemoteException)
                                {
                                    i = (i + 1) % hosts.Length;
                                    conn = null;
                                    if (i == _preferredServer)
                                    {
                                        //We have tried all possible jAgent instances
                                        throw new JRemoteException("Unable to connect to remote jAgent instances " + _hostIP + ".");
                                    }
                                    //_logger.logWarning("Could not connect to jAgent instance " + _hostIP + " - " + e.Message);
                                }
                            }
                            else
                            {
                                throw new JRemoteException("Connection string to jAgent hosts is not valid.");
                            }
                        }
        
                        //Point preferred server to next server in the list if load-balancing is enabled
                        if (_loadBalancing)
                        {
                            _preferredServer = (i + 1) % hosts.Length;
                        }
                    }
                    else
                    {
                        throw new JRemoteException("Connection string to jAgent hosts is not valid.");
                    }
                    return conn;
        
                }
        
                /// <summary>
                /// Create a new jRemote connection to the specified host
                /// </summary>
                /// <param name="hostname">host name or IP</param>
                /// <param name="port">TCP port</param>
                /// <returns>jRemote connection</returns>
                protected virtual JConnection CreateJConnection(string hostname, int port)
                {
                    JConnection conn = null;
                    try
                    {
                        DefaultJConnectionFactory jConnectionFactory = new DefaultJConnectionFactory();
                        jConnectionFactory.Host = hostname;
                        jConnectionFactory.Port = port;
                        jConnectionFactory.CharSet = _charset;
                        jConnectionFactory.EnabledSSL = _ssl;
                        jConnectionFactory.CertificateDN = _dn;
                        NameValueCollection cxProps = new NameValueCollection();
                        cxProps.Add(JConnectionManager.PROPERTY_ENVIROMENT_VAR_PREFIX + "OFS_SOURCE", _ofsId);
                        cxProps.Add(JRemoteSocketConnection.ACTION_TIMEOUT_PROPERTY, Convert.ToString(_actionTimeout));
                        cxProps.Add(JRemoteSocketConnection.COMPRESSION_PROPERTY, _compression ? "true" : "false");
                        cxProps.Add(JRemoteSocketConnection.COMPRESSION_THRESHOLD_PROPERTY, Convert.ToString(_compressionThreshold));
                        cxProps.Add(JRemoteSocketConnection.ALLOW_INPUT, _allowInput ? "yes" : "no");
        
                        //Set environment variables
                        if (_envVariables != null)
                        {
                            string[] envVars = _envVariables.Split(new char[] { '^' });
                            for (int i = 0; i < envVars.Length; i++)
                            {
                                string env = envVars[i];
                                int eqIndex = env.IndexOf('=');
                                if (eqIndex > 0)
                                {
                                    String envName = env.Substring(0, eqIndex);
                                    String envValue = env.Substring(eqIndex + 1);
                                    cxProps.Add(JConnectionManager.PROPERTY_ENVIROMENT_VAR_PREFIX + envName, envValue);
                                }
                            }
                        }
                        _agentUser = (_agentUser != null ? _agentUser : "");
                        _agentPassword = (_agentPassword != null ? _agentPassword : "");
        
                        //Open connection
                        conn = jConnectionFactory.getConnection(_agentUser, _agentPassword, cxProps);
        
                        Stopwatch stconnection = new Stopwatch();
                        stconnection.Start();
                        //Initialise connection
                        JSubroutineParameters connectionResult = conn.call("JF.INITIALISE.CONNECTION", null);
                        stconnection.Stop();
                        //_logger.logTrace("Connection to " + hostname + ":" + Convert.ToString(port) + " has been opened successfully.");
                        //_logger.logTiming("Connection to " + hostname + ":" + Convert.ToString(port) + " has been created in : " + stconnection.ElapsedMilliseconds + " ms.");
                    }
                    catch (SocketException ex)
                    {
                        throw new JRemoteException(ex.Message);
                    }
                    return conn;
                }
        
                /// <summary>
                /// Test the physical connecion to jAgent
                /// </summary>
                /// <returns>true if connection is alive</returns>
                internal bool IsAlive(JConnection cx)
                {
                    //Send a time request to jAgent
                    if (cx != null)
                    {
                        try
                        {
                            cx.time();
                            return true;
                        }
                        catch (JRemoteException)
                        {
                            return false;
                        }
                    }
                    return false;
                }
        
                /// <summary>
                /// Timer callback to remove unused connections from the pool.
                /// </summary>
                /// <param name="sender"></param>
                /// <param name="e"></param>
                private void idleTimer_Elapsed(object sender, ElapsedEventArgs e)
                {
                    lock (_poolLock)
                    {
                        //_logger.logTrace("Idle timer: " + _activeJconnectionCount + " active connections, " + _pool.Count + " connections available in pool.");
                        if (_activeJconnectionCount == 0 && _pool.Count > _minPoolSize)
                        {
                            _idleTimer.Stop();
                            while (_pool.Count > _minPoolSize)
                            {
                                JConnection cx = _pool.Pop();
                                cx.close();       //Close physical connection
                                Monitor.Enter(_pool);
                                Monitor.Pulse(_pool);
                                Monitor.Exit(_pool);
                            }
                            //_logger.logInfo("T24 connection pool has been decreased to " + _pool.Count + " connections due to inactivity.");
                        }
                    }
                }
        
            }
		}
	}
}