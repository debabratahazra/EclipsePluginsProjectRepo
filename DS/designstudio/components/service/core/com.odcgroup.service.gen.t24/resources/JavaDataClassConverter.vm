## JavaDataClassConverter.vm
package ${service.getPackageName()}.data.converter;

// JVar [TAFJ] Imports
import com.temenos.soa.utils.JVarObject;
import com.temenos.soa.utils.JVarUtils;
import com.temenos.tafj.common.jVar;
import com.temenos.tafj.common.jVarFactory;
import com.temenos.tafj.api.client.impl.JVarClientObject;
import com.temenos.tafj.api.client.impl.JVarClientUtils;
import com.temenos.tafj.api.client.jVarClient;
import com.temenos.tafj.api.client.impl.jVarClientFactory;

// JDynArray [TAFC] Imports
import com.jbase.jremote.JDynArray;
import com.temenos.soa.utils.JDynObject;
import com.temenos.soa.utils.JDynUtils;

// Base Data Class Imports
import ${service.getPackageName()}.data.${classDescriptor.getName()};

// Exceptions - Imports
import com.temenos.soa.exceptions.InvalidNestLevelException;

// Collection - Imports
import java.util.List;
import java.util.ArrayList;
#if(${classDescriptor.ifContainsCollection()})
import java.util.Arrays;
import java.util.Collections;
#end

// Other Complex Classes - Imports (if any) involved
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)  
#if($attribute.getTypeName() != "String" && $attribute.getTypeName() != "Integer" && $attribute.getTypeName() != "Boolean" )
import ${service.getPackageName()}.data.$attribute.getTypeName();
#end 
#end

public class ${classDescriptor.getName()}Converter implements JVarObject, JVarClientObject, JDynObject {
	
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)  
    final int ${attribute.getCapitalisedName()}_INDEX = $velocityCount;
#end

#foreach($attribute in $attributeList)  
    private #if($attribute.getCardinality() == "MULTIPLE")List<${attribute.getTypeName()}>#else${attribute.getTypeName()}#end ${attribute.getName()};
#end
	
	// Constructor 
	public ${classDescriptor.getName()}Converter () {
		init();		// Initialise all the members
	}

	private void init() {
#foreach($attribute in $attributeList)
#if($attribute.getCardinality() == "MULTIPLE")
		this.${attribute.getName()} = new ArrayList<${attribute.getTypeName()}>();
#else
		this.${attribute.getName()} = $typeUtils.getEmptyTypeValue(${attribute.getTypeName()});
#end
#end
	}
	
	// jVar Constructor
	public ${classDescriptor.getName()}Converter (jVar jv) throws InvalidNestLevelException {
		init();
		this.fromJVar(jv);
	}
	
	// jVarClient Constructor
	public ${classDescriptor.getName()}Converter (jVarClient jv) throws InvalidNestLevelException {
		init();
		this.fromJVarClient(jv);
	}

	// jDyn Constructor
	public ${classDescriptor.getName()}Converter (JDynArray jd) throws InvalidNestLevelException {
		init();
		this.fromJDyn(jd);
	}
	
// Getters

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)  
    public ${attribute.getTypeName()}#if($attribute.getCardinality() == "MULTIPLE")[]#end get${attribute.getCamelCaseName()}(){
#if($attribute.getCardinality() == "MULTIPLE")
		return ${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{});
#else
        return ${attribute.getName()};
#end
    }
#end

//Setters

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList) 
    public void set${attribute.getCamelCaseName()}(${attribute.getTypeName()}#if($attribute.getCardinality() == "MULTIPLE")[]#end new${attribute.getCamelCaseName()}){
#if($attribute.getCardinality() == "MULTIPLE")
		${attribute.getName()}.clear();
		Collections.addAll(${attribute.getName()}, new${attribute.getCamelCaseName()});
#else
        ${attribute.getName()} = new${attribute.getCamelCaseName()};
#end
    }
#end

	/**************** Data Class to Converter Class *****************/
	
    public void dataToConverter(${classDescriptor.getName()} source, ${classDescriptor.getName()}Converter target) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
		target.set${attribute.getCamelCaseName()}(source.get${attribute.getCamelCaseName()}());
#end
	}
	
    public void dataFromConverter(${classDescriptor.getName()}Converter source, ${classDescriptor.getName()} target) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
		target.set${attribute.getCamelCaseName()}(source.get${attribute.getCamelCaseName()}());
#end
	}

    // List Conversion    
     public void dataListToConverterList(List<${classDescriptor.getName()}> sourceList, List<${classDescriptor.getName()}Converter> targetList) throws InvalidNestLevelException {
    	for (int i=0 ; i < sourceList.size(); i++) {
    		${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
    		dataToConverter (sourceList.get(i), ${classDescriptor.getLowerCamelCaseName()}Converter);
    		targetList.add(${classDescriptor.getLowerCamelCaseName()}Converter);
    	}
	}	
   
    public void dataListFromConverterList(List<${classDescriptor.getName()}Converter> sourceList, List<${classDescriptor.getName()}> targetList) throws InvalidNestLevelException {
    	for (int i=0 ; i < sourceList.size(); i++) {
    		${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
    		dataFromConverter (sourceList.get(i), ${classDescriptor.getLowerCamelCaseName()});
    		targetList.add(${classDescriptor.getLowerCamelCaseName()});
    	}
	}
    
    // Array Conversion
    public void dataArrayToConverterArray(${classDescriptor.getName()}[] sourceArray, ${classDescriptor.getName()}Converter[] targetArray) throws InvalidNestLevelException {
    	for (int i=0 ; i < sourceArray.length; i++) {
    		${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
    		dataToConverter (sourceArray[i], ${classDescriptor.getLowerCamelCaseName()}Converter);
    		targetArray[i] = ${classDescriptor.getLowerCamelCaseName()}Converter;
    	}
   }
	
    public void dataArrayFromConverterArray(${classDescriptor.getName()}Converter[] sourceArray, ${classDescriptor.getName()}[] targetArray) throws InvalidNestLevelException {
    	for (int i=0 ; i < sourceArray.length; i++) {
    		${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
    		dataFromConverter (sourceArray[i], ${classDescriptor.getLowerCamelCaseName()});
    		targetArray[i] = ${classDescriptor.getLowerCamelCaseName()};
    	}
	}


	/**************** JVar Conversion ****************/
	
    @Override
    public void fromJVar(jVar jv) throws InvalidNestLevelException {
        JVarUtils utils = new JVarUtils();

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
#if($attribute.getComplexity() == "PRIMITIVE")
        utils.get${attribute.getTypeName()}List(jv, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVar(this.${attribute.getName()}, jv, ${attribute.getCapitalisedName()}_INDEX);
#end
	    this.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        this.set${attribute.getCamelCaseName()}(utils.get${attribute.getTypeName()}(jv, ${attribute.getCapitalisedName()}_INDEX));
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVar(this.${attribute.getName()}, jv);
        this.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#end
#end  
#end    
    }

    public void fromJVar(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, jVar jv) throws InvalidNestLevelException {
        
        JVarUtils utils = new JVarUtils();

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
#if($attribute.getComplexity() == "PRIMITIVE")
        utils.get${attribute.getTypeName()}List(jv, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVar(this.${attribute.getName()}, jv, ${attribute.getCapitalisedName()}_INDEX);
#end
	    ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(utils.get${attribute.getTypeName()}(jv, ${attribute.getCapitalisedName()}_INDEX));
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVar(this.${attribute.getName()}, jv);
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#end
#end  
#end    
    }
	
	// List support for class
	public void fromJVar(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, jVar jv) throws InvalidNestLevelException {
        
        JVarUtils utils = new JVarUtils();
        
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        utils.getJVarObjectList(jv, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter() );
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
    }
	
	// List support for class with Multivalue field
	public void fromJVar(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, jVar jv, int fieldNum) throws InvalidNestLevelException {
        
        JVarUtils utils = new JVarUtils();
        
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        utils.getJVarObjectList(jv, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter() );
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
    }
	
	// Array support for class
	public void fromJVar(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, jVar jv) throws InvalidNestLevelException {
        JVarUtils utils = new JVarUtils();
        ${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[utils.getNumberOfAttributes(jv)];
        utils.getJVarObjectArray(jv, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter() );
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
    }
	
	// Array support for class
	public void fromJVar(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, jVar jv, int fieldNum) throws InvalidNestLevelException {
        JVarUtils utils = new JVarUtils();
        ${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[utils.getNumberOfValues(jv, fieldNum)];
        utils.getJVarObjectArray(jv, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter() );
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
    }
	
    @Override
    public jVar toJVar() throws InvalidNestLevelException {
		
        JVarUtils utils = new JVarUtils();
        jVar jv = jVarFactory.get();  //Initialise a new jVar

#foreach($attribute in $attributeList)
#if ($attribute.getComplexity() == "PRIMITIVE")
        utils.setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${attribute.getName()});
#else
	    ${attribute.getTypeName()}Converter ${attribute.getName()}ConverterObj = new ${attribute.getTypeName()}Converter();
		utils.setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${attribute.getName()}ConverterObj.toJVar(${attribute.getName()}));
#end
#end

        return jv;
    }
	
	public jVar toJVar(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}) throws InvalidNestLevelException {

        JVarUtils utils = new JVarUtils();
        jVar jv = jVarFactory.get();  //Initialise a new jVar

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if ($attribute.getCardinality() == "SINGLE")
        utils.setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}());
#else
	    utils.setValue(jv, ${attribute.getCapitalisedName()}_INDEX, Arrays.asList(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        utils.setValue(jv, ${attribute.getCapitalisedName()}_INDEX, obj${attribute.getName()}${attribute.getTypeName()}Converter.toJVar(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#end         
        return jv;
    }
	
	// List support
	public jVar toJVar(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List) throws InvalidNestLevelException {

        JVarUtils utils = new JVarUtils();
        jVar jv = jVarFactory.get();  //Initialise a new jVar

        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}List.size(); i++) {
        	${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
        	dataToConverter(${classDescriptor.getLowerCamelCaseName()}List.get(i), ${classDescriptor.getLowerCamelCaseName()}Converter);
        	utils.setValue(jv, i+1, ${classDescriptor.getLowerCamelCaseName()}Converter);
        }
        
        return jv;
    }
	
	// Array support
	public jVar toJVar(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array) throws InvalidNestLevelException {

        JVarUtils utils = new JVarUtils();
        jVar jv = jVarFactory.get();  //Initialise a new jVar

        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}Array.length; i++) {
        	${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
        	dataToConverter(${classDescriptor.getLowerCamelCaseName()}Array[i], ${classDescriptor.getLowerCamelCaseName()}Converter);
        	utils.setValue(jv, i+1, ${classDescriptor.getLowerCamelCaseName()}Converter);
        }
        return jv;
    }
	
	@Override
	public JVarObject get(jVar jv) throws InvalidNestLevelException {
		if (jv == null) {
			return (new ${classDescriptor.getName()}Converter());
		} else {
			return (new ${classDescriptor.getName()}Converter(jv));
		}
    }     
	
	/**************** JVar Client API Conversion ****************/
	
    @Override
    public void fromJVarClient(jVarClient jv) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
#if($attribute.getComplexity() == "PRIMITIVE")
        JVarClientUtils.getInstance().get${attribute.getTypeName()}List(jv, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVarClient(this.${attribute.getName()}, jv, ${attribute.getCapitalisedName()}_INDEX);
#end
	    this.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        this.set${attribute.getCamelCaseName()}(JVarClientUtils.getInstance().get${attribute.getTypeName()}(jv, ${attribute.getCapitalisedName()}_INDEX));
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVarClient(this.${attribute.getName()}, jv);
#end
#end  
#end    
    }

	// Retrieve values from jVar fields and populate '${classDescriptor.getLowerCamelCaseName()}' object
    public void fromJVarClient(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, jVarClient jv) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
#if($attribute.getComplexity() == "PRIMITIVE")
        JVarClientUtils.getInstance().get${attribute.getTypeName()}List(jv, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVarClient(this.${attribute.getName()}, jv, ${attribute.getCapitalisedName()}_INDEX);
#end
	    ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JVarClientUtils.getInstance().get${attribute.getTypeName()}(jv, ${attribute.getCapitalisedName()}_INDEX));
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVarClient(this.${attribute.getName()}, jv, ${attribute.getCapitalisedName()}_INDEX);
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#end
#end  
#end    
    }
	
	// Retrieve values from jVar<field> multi-values and populate '${classDescriptor.getLowerCamelCaseName()}' object
	public void fromJVarClient(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, jVarClient jv, int fieldNum) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
#if($attribute.getComplexity() == "PRIMITIVE")
        JVarClientUtils.getInstance().get${attribute.getTypeName()}List(jv, fieldNum, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
#else
		illegalNestLevel ("${attribute.getName()} of type List<${attribute.getTypeName()}> can not be converted from single multi-value");
		## There is not point going forward from here just break
		#break
#end
	    ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JVarClientUtils.getInstance().get${attribute.getTypeName()}(jv, fieldNum, ${attribute.getCapitalisedName()}_INDEX));
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJVarClient(this.${attribute.getName()}, jv, fieldNum, ${attribute.getCapitalisedName()}_INDEX);
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#end
#end  
#end    
    }
	
	// Retrieve values from jVar<field, multi-value> sub-values and populate '${classDescriptor.getLowerCamelCaseName()}' object
	public void fromJVarClient(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, jVarClient jv, int fieldNum, int mvNum) throws InvalidNestLevelException {
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)   
#if($attribute.getCardinality() == "MULTIPLE")
		illegalNestLevel ("${attribute.getName()} of type List<${attribute.getTypeName()}> can not be converted from single sub-value");
		## There is not point going forward from here just break
		#break
#else
#if($attribute.getComplexity() == "PRIMITIVE")
        ${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JVarClientUtils.getInstance().get${attribute.getTypeName()}(jv, fieldNum, mvNum, ${attribute.getCapitalisedName()}_INDEX));
#else
		illegalNestLevel ("${attribute.getName()} of type ${attribute.getTypeName()} can not be converted from a single sub-value.");
		## There is not point going forward from here just break
		#break
#end
#end  
#end    
    }
	
	// List support for class
	public void fromJVarClient(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, jVarClient jv) throws InvalidNestLevelException {
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        JVarClientUtils.getInstance().getJVarObjectList(jv, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter() );
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
    }
	
	// List support for class with Multivalue field
	public void fromJVarClient(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, jVarClient jv, int fieldNum) throws InvalidNestLevelException {
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        JVarClientUtils.getInstance().getJVarObjectList(jv, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter() );
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
    }
	
	// Array support for class
	public void fromJVarClient(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, jVarClient jv) throws InvalidNestLevelException {
        ${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[JVarClientUtils.getInstance().getNumberOfAttributes(jv)];
        JVarClientUtils.getInstance().getJVarObjectArray(jv, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter() );
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
    }
	
	// Array support for class
	public void fromJVarClient(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, jVarClient jv, int fieldNum) throws InvalidNestLevelException {
        ${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[JVarClientUtils.getInstance().getNumberOfValues(jv, fieldNum)];
        JVarClientUtils.getInstance().getJVarObjectArray(jv, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter() );
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
    }
	
    @Override
    public jVarClient toJVarClient() throws InvalidNestLevelException {
		jVarClient jv = jVarClientFactory.get();  //Initialise a new jVar

#foreach($attribute in $attributeList)
#if ($attribute.getComplexity() == "PRIMITIVE")
        JVarClientUtils.getInstance().setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${attribute.getName()});
#else
	    ${attribute.getTypeName()}Converter ${attribute.getName()}ConverterObj = new ${attribute.getTypeName()}Converter();
		JVarClientUtils.getInstance().setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${attribute.getName()}ConverterObj.toJVarClient(${attribute.getName()}));
#end
#end

        return jv;
    }
	
	public jVarClient toJVarClient(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}) throws InvalidNestLevelException {
        jVarClient jv = jVarClientFactory.get();  //Initialise a new jVar

#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if ($attribute.getCardinality() == "SINGLE")
        JVarClientUtils.getInstance().setValue(jv, ${attribute.getCapitalisedName()}_INDEX, ${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}());
#else
	    JVarClientUtils.getInstance().setValue(jv, ${attribute.getCapitalisedName()}_INDEX, Arrays.asList(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
        JVarClientUtils.getInstance().setValue(jv, ${attribute.getCapitalisedName()}_INDEX, obj${attribute.getName()}${attribute.getTypeName()}Converter.toJVarClient(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#end         
        return jv;
    }
	
	// List support
	public jVarClient toJVarClient(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List) throws InvalidNestLevelException {
        jVarClient jv = jVarClientFactory.get();  //Initialise a new jVar

        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}List.size(); i++) {
        	${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
        	dataToConverter(${classDescriptor.getLowerCamelCaseName()}List.get(i), ${classDescriptor.getLowerCamelCaseName()}Converter);
        	JVarClientUtils.getInstance().setValue(jv, i+1, ${classDescriptor.getLowerCamelCaseName()}Converter);
        }
        
        return jv;
    }
	
	// Array support
	public jVarClient toJVarClient(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array) throws InvalidNestLevelException {
        jVarClient jv = jVarClientFactory.get();  //Initialise a new jVar

        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}Array.length; i++) {
        	${classDescriptor.getName()}Converter ${classDescriptor.getLowerCamelCaseName()}Converter = new ${classDescriptor.getName()}Converter();
        	dataToConverter(${classDescriptor.getLowerCamelCaseName()}Array[i], ${classDescriptor.getLowerCamelCaseName()}Converter);
        	JVarClientUtils.getInstance().setValue(jv, i+1, ${classDescriptor.getLowerCamelCaseName()}Converter);
        }
        return jv;
    }
	
	@Override
	public JVarClientObject get(jVarClient jv) throws InvalidNestLevelException {
		if (jv == null) {
			return (new ${classDescriptor.getName()}Converter());
		} else {
			return (new ${classDescriptor.getName()}Converter(jv));
		}
    }     
	
	/**************** JDynArray Conversion ****************/
	/* Converting JDynArrays into Complex object */
	
	// This method will take JDynArray and convert into Complex objects
	@Override
	public void fromJDyn(JDynArray  jd) throws InvalidNestLevelException {
        
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		this.set${attribute.getCamelCaseName()}(JDynUtils.getInstance().get${attribute.getTypeName()}(jd, ${attribute.getCapitalisedName()}_INDEX));
#else
		JDynUtils.getInstance().get${attribute.getTypeName()}List(jd, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
		this.set${attribute.getCamelCaseName()} (this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJDyn(this.${attribute.getName()}, jd, ${attribute.getCapitalisedName()}_INDEX);
#if($attribute.getCardinality() == "SINGLE")
		this.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#else
		this.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#end
#end
	}

	// This method will take JDynArray and convert into Complex objects
	public void fromJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, JDynArray  jd) throws InvalidNestLevelException {
       
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JDynUtils.getInstance().get${attribute.getTypeName()}(jd, ${attribute.getCapitalisedName()}_INDEX));
#else
		JDynUtils.getInstance().get${attribute.getTypeName()}List(jd, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()} (this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJDyn(this.${attribute.getName()}, jd, ${attribute.getCapitalisedName()}_INDEX);
#if($attribute.getCardinality() == "SINGLE")
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#else
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#end
#end
	}
	
	// This method will take JDynArray and convert into Complex objects from Value marks
	public void fromJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, JDynArray  jd, int fieldNum) throws InvalidNestLevelException {
        
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JDynUtils.getInstance().get${attribute.getTypeName()}(jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX));
#else
		JDynUtils.getInstance().get${attribute.getTypeName()}List(jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX, this.${attribute.getName()});
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()} (this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.fromJDyn(this.${attribute.getName()}, jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX);
#if($attribute.getCardinality() == "SINGLE")
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()});
#else
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(this.${attribute.getName()}.toArray(new ${attribute.getTypeName()}[]{}));
#end
#end
#end
	}

	// This method will take JDynArray and convert into Complex objects from Sub Value marks
	public void fromJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, JDynArray  jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
        
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		${classDescriptor.getLowerCamelCaseName()}.set${attribute.getCamelCaseName()}(JDynUtils.getInstance().get${attribute.getTypeName()}(jd, fieldNum, valueNum, ${attribute.getCapitalisedName()}_INDEX));
#else
		illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
#break
#end
#else
		illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
#break
#end
#end
	}
	
    // This method will take JDynArray and convert into LIST<Complex> objects 
    public void fromJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, JDynArray  jd) throws InvalidNestLevelException {
         
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        JDynUtils.getInstance().getJDynObjectList(jd, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter());
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
        ##for (int i = 1; i <= jd.getNumberOfAttributes(); i++){
        ##    ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
        ##    fromJDyn(${classDescriptor.getLowerCamelCaseName()}, jd, i);
        ##    ${classDescriptor.getLowerCamelCaseName()}List.add(${classDescriptor.getLowerCamelCaseName()});
        ##}
		##return;
    }
    
	// This method will take JDynArray<fieldNum> and convert into LIST<Complex> objects 
    public void fromJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, JDynArray  jd, int fieldNum) throws InvalidNestLevelException {
         
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        JDynUtils.getInstance().getJDynObjectList(jd, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter());
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
        ##for (int i = 1; i <= jd.getNumberOfValues(fieldNum); i++){
        ##    ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
        ##    fromJDyn(${classDescriptor.getLowerCamelCaseName()}, jd, fieldNum, i);
        ##    ${classDescriptor.getLowerCamelCaseName()}List.add(${classDescriptor.getLowerCamelCaseName()});
        ##}
		##return;
    }

	// This method will take JDynArray<ValueMark> and convert into LIST<Complex> objects 
    public void fromJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, JDynArray  jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
         
        List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
        JDynUtils.getInstance().getJDynObjectList(jd, fieldNum, valueNum, ${classDescriptor.getLowerCamelCaseName()}ConverterList, new ${classDescriptor.getName()}Converter());
        dataListFromConverterList(${classDescriptor.getLowerCamelCaseName()}ConverterList, ${classDescriptor.getLowerCamelCaseName()}List);
        ##for (int i = 1; i <= jd.getNumberOfSubValues(fieldNum, valueNum); i++){
        ##    ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
        ##    fromJDyn(${classDescriptor.getLowerCamelCaseName()},jd, fieldNum, valueNum);
        ##    ${classDescriptor.getLowerCamelCaseName()}List.add(${classDescriptor.getLowerCamelCaseName()});
        ##}
		##return;
    }
	
	// This method will take JDynArray and convert into Complex[] objects 
    public void fromJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, JDynArray  jd) throws InvalidNestLevelException {
    	 
        ${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[jd.getNumberOfAttributes()];
        JDynUtils.getInstance().getJDynObjectArray(jd, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter());
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
        ##for (int i = 1; i <= jd.getNumberOfAttributes(); i++){
        ##    ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
        ##    fromJDyn(${classDescriptor.getLowerCamelCaseName()}, jd, i);
        ##    ${classDescriptor.getLowerCamelCaseName()}Array[i-1] = ${classDescriptor.getLowerCamelCaseName()};
        ##}
		##return;
    }
    
	// This method will take JDynArray<fieldNum> and convert into Complex[] objects 
    public void fromJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, JDynArray  jd, int fieldNum) throws InvalidNestLevelException {
    
		${classDescriptor.getName()}Converter[] ${classDescriptor.getLowerCamelCaseName()}ConverterArray = new ${classDescriptor.getName()}Converter[jd.getNumberOfValues(fieldNum)];
        JDynUtils.getInstance().getJDynObjectArray(jd, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterArray, new ${classDescriptor.getName()}Converter());
        dataArrayFromConverterArray(${classDescriptor.getLowerCamelCaseName()}ConverterArray, ${classDescriptor.getLowerCamelCaseName()}Array);
        ##for (int i = 1; i <= jd.getNumberOfValues(fieldNum); i++){
        ##    ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
        ##    fromJDyn(${classDescriptor.getLowerCamelCaseName()}, jd, fieldNum, i);
        ##    ${classDescriptor.getLowerCamelCaseName()}Array[i] = ${classDescriptor.getLowerCamelCaseName()};
        ##}
    }

	// This method will take JDynArray<ValueMark> and convert into Complex[] objects 
    public void fromJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, JDynArray  jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
        
		for (int i = 1; i <= jd.getNumberOfSubValues(fieldNum, valueNum); i++){
            ${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()} = new ${classDescriptor.getName()}();
            fromJDyn(${classDescriptor.getLowerCamelCaseName()},jd, fieldNum, valueNum);
            ${classDescriptor.getLowerCamelCaseName()}Array[i-1] = ${classDescriptor.getLowerCamelCaseName()};
        }
    }
	
	
	/* Converting Complex object to JDynArray */
	@Override
	public JDynArray toJDyn() throws InvalidNestLevelException {
	
		JDynArray jd = new JDynArray();  //Initialise a new JDynArray
		
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
        JDynUtils.getInstance().setValue(jd, ${attribute.getCapitalisedName()}_INDEX, ${attribute.getName()});
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.toJDyn(${attribute.getName()}, jd, ${attribute.getCapitalisedName()}_INDEX);
#end
#end
	
		return jd;
    } 
	
	// This method will convert the Complex object into JDynArray
	public JDynArray toJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}) throws InvalidNestLevelException {
		 
		JDynArray jd = new JDynArray();
		
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE") 
        JDynUtils.getInstance().setValue(jd, ${attribute.getCapitalisedName()}_INDEX, JDynUtils.getInstance().getStringValue(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#else
		JDynUtils.getInstance().setValue(jd, ${attribute.getCapitalisedName()}_INDEX, Arrays.asList(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#else
        ${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.toJDyn(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}(), jd, ${attribute.getCapitalisedName()}_INDEX);
#end
#end
		return jd;
	}
    
	// This method will insert Complex Object into a JDynArray as 'Multi-Value' field
	public void toJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, JDynArray jd, int fieldNum) throws InvalidNestLevelException {
		
		 
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		JDynUtils.getInstance().setValue(jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX, JDynUtils.getInstance().getStringValue(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#else
		JDynUtils.getInstance().setValue(jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX, Arrays.asList(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#end
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.toJDyn(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}(), jd, fieldNum, ${attribute.getCapitalisedName()}_INDEX);
#end
#end
	}
	
	// This method will insert Complex Object into a JDynArray as 'Sub-Value' field,
	public void toJDyn(${classDescriptor.getName()} ${classDescriptor.getLowerCamelCaseName()}, JDynArray jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
		
		 
#set( $attributeList = $classDescriptor.getAttributes() )
#foreach($attribute in $attributeList)
#if($attribute.getComplexity() == "PRIMITIVE")
#if($attribute.getCardinality() == "SINGLE")
		JDynUtils.getInstance().setValue(jd, fieldNum, valueNum, ${attribute.getCapitalisedName()}_INDEX, JDynUtils.getInstance().getStringValue(${classDescriptor.getLowerCamelCaseName()}.get${attribute.getCamelCaseName()}()));
#else
		illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
#break
#end
#else
		${attribute.getTypeName()}Converter obj${attribute.getName()}${attribute.getTypeName()}Converter = new ${attribute.getTypeName()}Converter();
		obj${attribute.getName()}${attribute.getTypeName()}Converter.illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
#end
#end
	}
	
	// This method will convert List of Complex objects into JDynArray as Value-Marks
    public JDynArray toJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List) throws InvalidNestLevelException {
        
        JDynArray jd = new JDynArray();
		
        ##for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}List.size(); i++ ) {
		##	toJDyn (${classDescriptor.getLowerCamelCaseName()}List.get(i), jd, i+1);
	    ##}
		List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
		dataListToConverterList(${classDescriptor.getLowerCamelCaseName()}List, ${classDescriptor.getLowerCamelCaseName()}ConverterList);
		JDynUtils.getInstance().setJDynObjectList(jd, ${classDescriptor.getLowerCamelCaseName()}ConverterList);
        
		return jd;
    }
	
	// This method will convert List of Complex classes into JDynArray as Sub-Values
	 public void toJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, JDynArray jd, int fieldNum) throws InvalidNestLevelException {
		
		List<${classDescriptor.getName()}Converter> ${classDescriptor.getLowerCamelCaseName()}ConverterList = new ArrayList<${classDescriptor.getName()}Converter>();
		dataListToConverterList(${classDescriptor.getLowerCamelCaseName()}List, ${classDescriptor.getLowerCamelCaseName()}ConverterList);
        JDynUtils.getInstance().setJDynObjectList(jd, fieldNum, ${classDescriptor.getLowerCamelCaseName()}ConverterList);
		
		##for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}List.size(); i++ ) {
        ##	toJDyn (${classDescriptor.getLowerCamelCaseName()}List.get(i), jd, fieldNum, i+1);
        ##}
	}
	
	// This method will throws exception as you can not have List beyond Sub-value Markers
	 public void toJDyn(List<${classDescriptor.getName()}> ${classDescriptor.getLowerCamelCaseName()}List, JDynArray jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
        
		if (${classDescriptor.getLowerCamelCaseName()}List.size() > 0) {
			illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
		} else {
			// We can not have list at this point but we have to represent the space so JBC Impl wont confuse 
			jd.insert("", fieldNum, valueNum, 1);	
		}
		
	}
	
	// This method will convert Arrays[] of Complex objects into JDynArray as Value-Marks
    public JDynArray toJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array) throws InvalidNestLevelException {
        
        JDynArray jd = new JDynArray();
        
        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}Array.length; i++ ) {
			toJDyn (${classDescriptor.getLowerCamelCaseName()}Array[i], jd, i+1);
	    }
        return jd;
    }
	
	// This method will convert Array[] of Complex classes into JDynArray as Sub-Values
	 public void toJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, JDynArray jd, int fieldNum) throws InvalidNestLevelException {
        for (int i=0; i < ${classDescriptor.getLowerCamelCaseName()}Array.length; i++ ) {
        	toJDyn (${classDescriptor.getLowerCamelCaseName()}Array[i], jd, fieldNum, i+1);
        }
	}
	
	// This method will throws exception as you can not have Arrays beyond Sub-value Markers
	 public void toJDyn(${classDescriptor.getName()}[] ${classDescriptor.getLowerCamelCaseName()}Array, JDynArray jd, int fieldNum, int valueNum) throws InvalidNestLevelException {
       
		if (${classDescriptor.getLowerCamelCaseName()}Array.length > 0) {
			illegalNestLevel ("Attempt to nest to Objects beyond allowable range");
		} else {
			// We can not have list at this point but we have to represent the space so JBC Impl wont confuse 
			jd.insert("", fieldNum, valueNum, 1);	
		}
		
	}
	
	// This method will simply return the InvalidNestLevelException as request is out of Nesting level
	public void illegalNestLevel (String errorMessage) throws InvalidNestLevelException {
		throw new InvalidNestLevelException (errorMessage);
	}	
 
	@Override
	public JDynObject get(JDynArray jd) throws InvalidNestLevelException {
		
		if (jd == null) {
			return (new ${classDescriptor.getName()}Converter());
		} else {
			return (new ${classDescriptor.getName()}Converter(jd));
		}
		
	}	
}