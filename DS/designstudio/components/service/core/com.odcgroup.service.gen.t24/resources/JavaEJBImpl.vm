## JavaEJBProviderTAFJ.vm
package ${service.getEJBPackageName()};

// J2EE Imports
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.annotation.Resource;
import javax.ejb.LocalBean;
import javax.ejb.SessionContext;

// Java imports
#set( $listImported = 0)
#foreach($operation in $service.getGenOperations())
#set( $paramList = $operation.getParameters() )
#foreach($param in $paramList)
#if($param.getCardinality() == "MULTIPLE")
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
#set( $listImported = 1)
#break
#end
#end
#if ($listImported == 1)#break#{end}
#end
import java.util.logging.Logger;
import java.util.logging.Level;
import java.security.Principal;

// tComponentFramework imports
#foreach(${commonImport} in ${commonImports})
import ${commonImport};
#end

// Complex Data classes
#foreach($class in $service.getClassDefDescriptors())
import ${service.getPackageName()}.data.${class.getName()};
#end

// Service Operation Response Objects
#foreach($operation in ${service.getGenOperations()})
import ${service.getOperationDataResponsePackageName()}.${operation.getUpperName()}Response;
#end

// Service API Imports
import ${service.getPackageName()}.${importedServiceAPI};
import ${service.getPackageName()}.${importedServiceImpl};

@LocalBean
public class ${serviceClassName} implements ${serviceImplements} {
	private final static Logger logger = Logger.getLogger(${serviceClassName}.class.getName());
	private ${importedServiceAPI} serviceAPI;
	@Resource SessionContext ctx;

#if(${codeGeneratingFor} == "TAFJ")
	private String runtimeProperties;
	@Resource (name = "runtimeProperties")
	public void setRuntimeProperties(String sRuntimeProperties) {
		runtimeProperties = sRuntimeProperties;
	}
	public String getRuntimeProperties() {
		return runtimeProperties;
	}
	
	private boolean superTransaction = false;
	@Resource (name = "superTransaction")
	public void setSuperTransaction (boolean sSuperTransaction) {
		superTransaction = sSuperTransaction;
	}
	
	public boolean getSuperTransaction() {
		return superTransaction;
	}
	
#end	
	// Just in case if all instances of EJB needs to be instantiated with single 
	// context - By default we not going to expose these in config
	private String signOnName = null;
	private String password = null;
	@Resource (name = "signOnName")
	public void setSignOnName(String sSignOnName) {
		signOnName = sSignOnName;
	}
	
	public String getSignOnName() {
		return signOnName;
	}
	
	@Resource (name = "password")
	public void setPassword(String sPassword) {
		password = sPassword;
	}
	
	public String getPassword() {
		return password;
	}
	
	@PostConstruct
	public void ejbCreate() {
		logger.log(Level.FINE, "In EjbCreate, instantiating ${importedServiceAPI}...");
#if(${codeGeneratingFor} == "TAFJ")
		RuntimeProperties runtimeProps = new RuntimeProperties(runtimeProperties);
		runtimeProps.setAppServerMode(true);		// Always true for an EJB
		runtimeProps.setSuperTransaction(getSuperTransaction());
		runtimeProps.setTransactionMode(getTransactionMode());
		serviceAPI = ${importedServiceImplInstantiation};
#else
		serviceAPI = ${importedServiceImplInstantiation};
#end
		logger.log(Level.FINE, "In EjbCreate, ${importedServiceAPI} instantiated${ejbCreateLogMessage});
	} 
	
	@PreDestroy
	public void cleanup() {
		logger.log(Level.FINE, "In Cleanup, cleaning up ${importedServiceAPI}...");
		${ejbCleanCode}
		logger.log(Level.FINE, "In Cleanup, ${importedServiceAPI} destroyed...");
	}
	
#foreach($operation in $service.getGenOperations())
	@Override
#set( $paramList = $operation.getParameters() )
    public ${operation.getUpperName()}Response ${operation.getLowerName()}(${operation.getOperationParamsForRMI()}) {
		
		// Check before proceeding if we have service handle
		if (serviceAPI == null) {
			throw new RuntimeException("Can not found ${importedServiceAPI}, request aborted!");
		}
#foreach($param in $paramList)
## Now declare a List equivalent for each array type parameter
#if(${param.getCardinality()} == "MULTIPLE")
		List<${param.getTypeName()}> ${param.getName()}AsList = new ArrayList<${param.getTypeName()}>();
#if(${param.getDirection()} == "IN" || ${param.getDirection()} == "INOUT" ) ## For IN and INOUT Parameters
		${param.getName()}AsList.addAll(Arrays.asList(${param.getName()}));	
#end
#else
#if (${param.getDirection()} == "OUT" ) ## Only declaration and objects which is applicable on OUT parameters only 
#if(${param.getComplexity()} == "PRIMITIVE")
		${param.getTypeName()} ${param.getName()};
#else
	    ${param.getTypeName()} ${param.getName()} =  new ${param.getTypeName()}();
#end
#end
#end
#end

	   // Create Return parameters for an EJB
        ${operation.getUpperName()}Response result = new ${operation.getUpperName()}Response();
        ResponseDetails responseDetails = new ResponseDetails();
		
		// Prepare a user context to load for service invocation
		UserDetails userDetails = null;
		if (getSignOnName() != null && getPassword() != null) {
			userDetails = new T24UserDetails(getSignOnName(), getPassword(), "");
		} else {
			Principal p = ctx.getCallerPrincipal();
			if (p != null && !(p.getName().equals("anonymous"))) {
				userDetails = new SSOUserDetails(p.getName());
			} else {
				throw new RuntimeException("Security violation, User Context is missing, request aborted!");
			}
		}
		UserContextCallBack userContextCallBack = new T24UserContextCallBackImpl(userDetails);
		serviceAPI.setUserContextCallBack(userContextCallBack);
## Loop round the parameters using any temporary variable names created for INn List 
## parameters and the OUT parameter
        serviceAPI.${operation.getLowerName()}(#foreach($param in $paramList)$param.getName()#if($param.getCardinality() == "MULTIPLE")AsList#end, #{end}responseDetails);
                
        // Set-up return parameter with INOUT/OUT parameters
#foreach($outParam in ${operation.getOutParameters()} )
		result.set${outParam.getUpperCamelCaseName()}(${outParam.getName()}#if(${outParam.getCardinality()} == "MULTIPLE")AsList.toArray(new ${outParam.getTypeName()}[]{})#end);
#end 
	    // Put the response details back
        result.setResponseDetails(responseDetails);
        return result;
	}
	
#end
#if(${codeGeneratingFor} == "TAFJ")
	// Trick to find out <transaction-type> with which EJB is deployed
	private String getTransactionMode() {
		try {
			// BMT If we are allowed to getUserTransaction()
			ctx.getUserTransaction();
			return "BEAN";
		} catch (IllegalStateException ilse) {
			// Exception means we are running in CMT :-)
			return "CONTAINER";
		}
	}
#end
}