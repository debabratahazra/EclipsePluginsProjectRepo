## JavaServiceImpl.vm
package ${service.getPackageName()}.tafc;

// Java imports
#set( $listImported = 0)
#foreach($operation in $service.getGenOperations())
#set( $paramList = $operation.getParameters() )
#foreach($param in $paramList)
#if($param.getCardinality() == "MULTIPLE")
import java.util.List;
#set( $listImported = 1)
#break
#end
#end
#if ($listImported == 1)#break#{end}
#end
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.UUID;

// Complex Data and Converter Classes
#foreach($class in $service.getClassDefDescriptors())
import ${service.getPackageName()}.data.${class.getName()};
import ${service.getPackageName()}.data.converter.${class.getName()}Converter;
#end

// T24 JCA Classes
import com.jbase.jremote.JDynArray;
import com.temenos.soa.utils.JDynUtils;
import com.jbase.jremote.JSubroutineParameters;
import com.jbase.jremote.JConnection;
import com.jbase.jremote.JConnectionFactory;
import com.jbase.jremote.JRemoteException;
import com.jbase.jremote.JSubroutineNotFoundException;
import com.jbase.jremote.T24InternalException;
import com.jbase.jremote.io.MissingInputHandlerException;

// tComponentFramework classes
import ${soaPackage}.tafc.DefaultJCAHelper;
import ${soaPackage}.tafc.TAFCServiceHandler;
import ${soaPackage}.tafc.TAFCDefaultServiceHandlerImpl;
import ${soaPackage}.UserContextCallBack;
import ${soaPackage}.data.CFConstants;
import ${soaPackage}.data.ResponseDetails;
import ${soaPackage}.data.Response;
import ${soaPackage}.data.converter.ResponseDetailsConverter;

// Exception classes
import com.temenos.soa.exceptions.*;

// Sevrice and Provider INTERFACE
import ${service.getPackageName()}.${service.getName()}ProviderAPI;

public class $serviceImpl implements ${service.getName()}ProviderAPI {
	private static final Logger logger = Logger.getLogger(${serviceImpl}.class.getName());
	private UserContextCallBack userContextCallBack = null;
	private TAFCServiceHandler serviceHandler = null;
	private JConnectionFactory connFactory;
	
	/**
	 * Default constructor. This will use tafc default service handlers and JCAHelper 
	 */
	public $serviceImpl () {
		setConnFactory(new DefaultJCAHelper());
		setServiceHandler(new TAFCDefaultServiceHandlerImpl());
	}
	
	/**
	 * Override the service handler if required. See TAFC service handler interface 
	 */
	public $serviceImpl(TAFCServiceHandler serviceHandler) {
		setConnFactory(new DefaultJCAHelper());
		if (serviceHandler == null) {
			logMessage(Level.FINE, "Service handler provded is null, using Default service hanlder");
			serviceHandler = new TAFCDefaultServiceHandlerImpl();
		}
		setServiceHandler(serviceHandler);
	}
	
	/**
	 * Override the connection helper if required. 
	 */
	public $serviceImpl(JConnectionFactory connFactory) {
		if (connFactory == null) {
			logMessage(Level.FINE, "Connection helper provded is null, using Default connection helper");
			connFactory = new DefaultJCAHelper();
		}
		setConnFactory(connFactory);
		setServiceHandler(new TAFCDefaultServiceHandlerImpl());
	}
	
	/**
	 * Override the connection helper and ServiceHandler if required. 
	 */
	public $serviceImpl(TAFCServiceHandler serviceHandler, JConnectionFactory connFactory) {
		if (connFactory == null) {
			logMessage(Level.FINE, "Connection helper provded is null, using Default connection helper");
			connFactory = new DefaultJCAHelper();
		}
		setConnFactory(connFactory);
		if (serviceHandler == null) {
			logMessage(Level.FINE, "Service handler provded is null, using Default service hanlder");
			serviceHandler = new TAFCDefaultServiceHandlerImpl();
		}
		setServiceHandler(serviceHandler);
	}
	
#foreach($operation in $service.getGenOperations())
    @Override
#set( $paramList = $operation.getParameters() )
    public ${operation.getReturnParameter().getTypeName()} ${operation.getLowerName()}(#foreach($param in $paramList)#if($param.getCardinality() == "SINGLE")$param.getTypeName()#{else}List<$param.getTypeName()>#end ${param.getName()}, #{end}ResponseDetails responseDetails) {

		String uUId = UUID.randomUUID().toString();	// For logging and tracing purpose
				
#set( $mandatoryFields = 0)
#foreach($param in $paramList)
#if ($param.isMandatory() =="true")
#set( $mandatoryFields = 1)
#if ($param.getCardinality() == "MULTIPLE")
        if ( ( ${param.getName()} == null ) || ( ${param.getName()}.size() == 0 ) ) {
#else
        if ( ( ${param.getName()} == null ) || ( ${param.getName()}.equals("") ) ) {
#end
            String responseDetailsResponseText = "'${param.getName()}' is a mandatory field";
            responseDetails.addError(new Response(CFConstants.T24_EB_MANDATORY_FIELD_MISSING_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
	   }
        
#end
#end
#if ($mandatoryFields == 1)
        // Return if any mandatory field checks have failed
        if ( responseDetails.getReturnCode().equals(CFConstants.RETURN_CODE_FAILURE) ) {
			logMessage(Level.SEVERE, responseDetails.toString());
            return $typeUtils.getEmptyTypeValue($operation.getReturnParameter().getTypeName());
        }
#end
	    JConnection ivConnection = null;
		boolean requestConverted = false;	// This is to check where are we getting errors while processing parameters
		try { 
			JSubroutineParameters params = new JSubroutineParameters();
#foreach($param in $paramList)
#if ($param.getDirection() == "IN" || $param.getDirection() == "INOUT")
#if ($param.getComplexity() == "PRIMITIVE")
#if ($param.getCardinality() == "SINGLE")
		    params.add(new JDynArray(${param.getName()}.toString()));	// Input parameter - ${param.getName()}
#else
            params.add(JDynUtils.getInstance().toJDyn(${param.getName()}));             // Input List parameter - ${param.getName()}
#end
#else
		    ${param.getTypeName()}Converter ${param.getName()}ConverterObj = new ${param.getTypeName()}Converter();
#if ($param.getCardinality() == "SINGLE")			
		    params.add(${param.getName()}ConverterObj.toJDyn($param.getName()));	// Complex Input parameter - ${param.getName()}
#else
		    params.add(${param.getName()}ConverterObj.toJDyn($param.getName()));	// Complex Input parameter - ${param.getName()}
#end
#end
#else
            params.add(new JDynArray());                         // Output parameter - ${param.getName()}
#end
#end	
		    params.add(new JDynArray());					     // Output parameter - responseDetails
			
			// If we are here then it means we have successfully converted all request parameters
			requestConverted = true;
			
			// At this point we are ready to execute the request, so get the connection from JCA pool
			ivConnection = getConnection();
			
			// Call the service call backs for additional stuff on the connection before the request executed
			if (! (getServiceHandler().initialise(ivConnection)) ) {
				String responseDetailsResponseText = "Failed to initailise system with service call back, refer to the logs for more details.";
				responseDetails.addError(new Response(CFConstants.T24_EB_SERVICE_CALLBACK_INITAILISATION_FAILED_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
				logMessage(Level.SEVERE, responseDetails.toString());
				return $typeUtils.getEmptyTypeValue($operation.getReturnParameter().getTypeName());
			}
			
			// Set/Switch the user context for this connection
			loadUserSMS(ivConnection, responseDetails);
			if ( responseDetails.getReturnCode().equals(CFConstants.RETURN_CODE_FAILURE) ) {
				responseDetails.getResponses()[0].setResponseInfo(uUId);	// Append Unique ID
				logMessage(Level.SEVERE, responseDetails.toString());
				return $typeUtils.getEmptyTypeValue($operation.getReturnParameter().getTypeName());
			}
			
			// Call the JBC operation
			logMessage(Level.FINE, "Calling T24 subroutine T24${jbcServiceImpl}.${operation.getName()} with params : " + params.toString());
		    params = processRequest("T24${jbcServiceImpl}.${operation.getName()}", params, ivConnection );					// Process the request
			logMessage(Level.FINE, "Returned from T24${jbcServiceImpl}.${operation.getName()} with params : " + params.toString());
			
			// Destroy user session for this connection
			signOffUser(ivConnection, responseDetails);
			
			// Convert OUT/INOUT Parameters from JDynArray to Objects
            JDynArray res;
#set( $paramIndex = 0 )
#foreach($param in $paramList)
#if($param.getDirection() == "OUT" || $param.getDirection() == "INOUT")
		    res = (JDynArray) params.get($paramIndex);	// Output parameter - ${param.getName()}
#if ($param.getComplexity() == "PRIMITIVE")
#if ($param.getCardinality() == "SINGLE")
            ${param.getName()} = JDynUtils.getInstance().get${param.getTypeName()}(res);
#else
## We need to clear the INOUT List parameter so that we can send updated values we have received from T24
	        if (${param.getName()} != null)
				${param.getName()}.clear();
		    JDynUtils.getInstance().get${param.getTypeName()}List(res, ${param.getName()});
#end
#else ## Complex objects
#if($param.getDirection() == "OUT")
## Instantiate Converter class object at this point for OUT param only, INOUT will already have created one above
		    ${param.getTypeName()}Converter ${param.getName()}ConverterObj = new ${param.getTypeName()}Converter();
#end
## Clear the List of Objects before setting up the new values 
#if($param.getCardinality() == "MULTIPLE")
	        if (${param.getName()} != null)
				${param.getName()}.clear();
#end
		    ${param.getName()}ConverterObj.fromJDyn(${param.getName()}, res);
#end
#end
#set ($paramIndex = $paramIndex + 1)
#end		
		    JDynArray resDetails = (JDynArray) params.get($paramIndex);	// Output parameter - responseDetails
		    ResponseDetailsConverter respConverter = new ResponseDetailsConverter();
		    respConverter.fromJDyn(responseDetails, resDetails);
			
        } catch (T24InternalException tie) {
			String responseDetailsResponseText = "Internal T24 error with core dump : T24UUID [" + tie.getMessage() +"]";
			responseDetails.addError(new Response(CFConstants.T24_EB_CORE_DUMP_ERROR_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (MissingInputHandlerException mih) {
			String responseDetailsResponseText = "Request invoked illegal debugger during execution : " + mih.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_ILLEGAL_DEBUGGER_INVOCATION_ERROR_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (JSubroutineNotFoundException snf) {
			String responseDetailsResponseText = "Service operation not available : " + snf.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_OPERATION_MISSING_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (JRemoteException e) {
			String responseDetailsResponseText = "Error occured while processing request : " + e.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_CONNECTION_ERROR_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (ConnectivityException ce) {
			String responseDetailsResponseText = "Failed to connect to remote T24 instance : " + ce.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_CONNECTION_ERROR_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (InvalidNestLevelException e) {
			String responseDetailsResponseText;
			if (!requestConverted) {
				responseDetailsResponseText = "Failed to convert Input parameters for T24 : " + e.getMessage();
				responseDetails.addError(new Response(CFConstants.T24_EB_INVALID_REQUEST_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			} else {
				responseDetailsResponseText = "Failed to convert Return/Output parameters for T24 : " + e.getMessage();
				responseDetails.addError(new Response(CFConstants.T24_EB_INVALID_RESPONSE_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			}
			logMessage(Level.SEVERE, responseDetails.toString());
		} catch (Exception e) {
			// Generic condition so that we can respond
			String responseDetailsResponseText = "Error occured while processing request : " + e.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_SERVICE_ERROR_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, responseDetailsResponseText, uUId));
			logMessage(Level.SEVERE, responseDetails.toString());
			e.printStackTrace();	// To see where exactly we crashed
		} finally {
			// Call the service call backs for additional stuff on the connection after the request executed
			if (! (getServiceHandler().finalise(ivConnection)) ) {
				String responseDetailsResponseText = "Failed to finalise system with service call back, unexpected results may occur in future, refer to the logs for more details";
				responseDetails.addWarning(new Response(CFConstants.T24_EB_SERVICE_CALLBACK_FINALISE_FAILED_CODE, CFConstants.RESPONSE_TYPE_WARNING, responseDetailsResponseText, uUId));
				logMessage(Level.WARNING, responseDetails.toString());
			}
			// Now close the connection
			try {
				if (ivConnection != null){
					closeConnection(ivConnection);
				}
			} catch (ConnectivityException e) {
				String responseDetailsResponseText = "Failed to close connection with T24 - ConnectivityException : " + e.getMessage();
				responseDetails.addWarning(new Response(CFConstants.T24_EB_CONNECTION_ERROR_CODE, CFConstants.RESPONSE_TYPE_WARNING, responseDetailsResponseText, uUId));
				logMessage(Level.WARNING, responseDetails.toString());
			}
		}
		return;
	}

    #end
	
	/** Get Connection to the T24 TAFC Instance
	 * 
	 * @return JConnection	- Connection from JCA pool
	 */
	private JConnection getConnection() throws ConnectivityException {
		try{
			return (getConnFactory().getConnection());
		} catch (JRemoteException e) {
			throw new ConnectivityException(e.getMessage());
		}
	}
	
	
	/**************** T24 User Context Call Back *********************/
	public void setUserContextCallBack (UserContextCallBack userContextCallBack) {
		this.userContextCallBack = userContextCallBack;
	}

	public UserContextCallBack getUserContextCallBack() {
		return this.userContextCallBack;
	}

	/**************** Private members *********************/
	private void setServiceHandler (TAFCServiceHandler serviceHandler) {
		this.serviceHandler = serviceHandler;
	}
	
	private TAFCServiceHandler getServiceHandler() {
		return this.serviceHandler;
	}
	
	private void setConnFactory(JConnectionFactory connFactory) {
		this.connFactory = connFactory;
	}
	
	private JConnectionFactory getConnFactory() {
		return this.connFactory;
	}
	
	/**
	 * This method will call the service handler to load the user context
	 */
	private void loadUserSMS(JConnection ivConnection, ResponseDetails responseDetails) {
		getServiceHandler().loadUserContext(ivConnection, getUserContextCallBack(), responseDetails);
	}
	
	/**
	 * This methid will log off user from T24
	 * @param ivConnection		- Actual JConnection for which we have to destroy user session for
	 */
	private void signOffUser(JConnection ivConnection, ResponseDetails responseDetails) {
		getServiceHandler().unloadUserContext(ivConnection, responseDetails);
	}
	
	/** Process the actual request
	 * 
	 * @param routine 	- Actual routine name
	 * @param params 	- Parameters to call the above sub routine with
	 * @return			- JSubroutineParameters type object which will be parsed later
	 */
	private JSubroutineParameters processRequest (String routine, JSubroutineParameters params, JConnection ivConnection) throws JRemoteException {
		JSubroutineParameters returnParams = new JSubroutineParameters();
		returnParams = ivConnection.call(routine, params);
		return returnParams;
	}
	
	/** Close the connection to release the application server resources
	 * 
	 */
	private void closeConnection(JConnection ivConnection) throws ConnectivityException {
		try {
			logMessage(Level.FINE, "Closing connection");
			ivConnection.close();
			logMessage(Level.FINE, "Connection closed");
		} catch (JRemoteException e){
			throw new ConnectivityException("Unable to close JRemoteConnection." + e.getMessage());
		}
	}
	
	/**
	 * Logging fine messages
	 */
	private void logMessage(Level level, String message) {
		logger.log(level, message);
	}
}