## JavaWebService.vm
package $service.getWsPackageName();

// Axis2 & Spring imports
import javax.jws.WebMethod;
import javax.jws.WebService;
import org.springframework.beans.BeansException;

#set( $listImported = 0)
#foreach($operation in $service.getGenOperations())
#set( $paramList = $operation.getParameters() )
#foreach($param in $paramList)
#if($param.getCardinality() == "MULTIPLE")
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
#set( $listImported = 1)
#break
#end
#end
#if ($listImported == 1)#break#{end}
#end

// Service Data Objects
#foreach($class in $service.getClassDefDescriptors())
import ${service.getDataPackageName()}.${class.getName()};
#end

// Service Operation Response Objects
#foreach($operation in ${service.getGenOperations()})
import ${service.getOperationDataResponsePackageName()}.${operation.getUpperName()}Response;
#end

// SoaFramework Libararies
import ${soaPackageName}.UserContextCallBack;
import ${soaPackageName}.T24UserContextCallBackImpl;
import ${soaPackageName}.data.SSOUserDetails;
import ${soaPackageName}.data.CFConstants;
import ${soaPackageName}.data.ResponseDetails;
import ${soaPackageName}.data.Response;


// T24 Provider API Interface
import ${service.getPackageName()}.${serviceName}ProviderAPI;
import ${service.getPackageName()}.${serviceName}SpringContext;

@WebService(name = "$webServiceName", serviceName="$webServiceName")
public class $webServiceName {

#foreach($operation in $service.getGenOperations())
    @WebMethod
#set( $paramList = $operation.getParameters() )
    public ${operation.getUpperName()}Response ${operation.getLowerName()}(${operation.getWSOperationParams()}) {

#foreach($param in $paramList)
## Now declare a List equivalent for each array type parameter
#if(${param.getCardinality()} == "MULTIPLE")
		List<${param.getTypeName()}> ${param.getName()}AsList = new ArrayList<${param.getTypeName()}>();
#if(${param.getDirection()} == "IN" || ${param.getDirection()} == "INOUT" ) ## For IN and INOUT Parameters
		${param.getName()}AsList.addAll(Arrays.asList(${param.getName()}));	
#end
#else
#if (${param.getDirection()} == "OUT" ) ## Only declaration and objects which is applicable on OUT parameters only 
#if(${param.getComplexity()} == "PRIMITIVE")
		${param.getTypeName()} ${param.getName()};
#else
	    ${param.getTypeName()} ${param.getName()} =  new ${param.getTypeName()}();
#end
#end
#end
#end
	    // Create Return parameters for the Web Service
        ${operation.getUpperName()}Response result = new ${operation.getUpperName()}Response();
        ResponseDetails responseDetails = new ResponseDetails();

		// Get the Provider Service Impl, verify the response and proceed
		${serviceName}ProviderAPI service = getService(responseDetails);
	    if ( ! responseDetails.getReturnCode().equals(CFConstants.RETURN_CODE_SUCCESS) ) {
			result.setResponseDetails(responseDetails);
			return result;
		}
		
		// Create a new service call back object and pass it to provider with context
		try {
			SSOUserDetails userDetails = new SSOUserDetails(${webServiceName}RequestContext.getRequestContext().getUserPrincipal());
			UserContextCallBack userContextCallBack = new T24UserContextCallBackImpl(userDetails);
			service.setUserContextCallBack(userContextCallBack);
		} catch (Exception e) {
			String message = "Failed to retrieve user context - Exception : " + e.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_USER_CONTEXT_MISSING_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, message, null));
		}
		
		// Verify responseDetails and proceed if evrything is OK
		if ( responseDetails.getReturnCode().equals(CFConstants.RETURN_CODE_SUCCESS) ) {
## Loop round the parameters using any temporary variable names created for IN List 
## parameters and the OUT parameter
            service.$operation.getLowerName()(#foreach($param in $paramList)$param.getName()#if($param.getCardinality() == "MULTIPLE")AsList#end, #{end}responseDetails);
                
            // Set-up return parameter with INOUT/OUT parameters
#foreach($outParam in ${operation.getOutParameters()} )
			result.set${outParam.getUpperCamelCaseName()}(${outParam.getName()}#if(${outParam.getCardinality()} == "MULTIPLE")AsList.toArray(new ${outParam.getTypeName()}[]{})#end);
#end
        } 
        
        result.setResponseDetails(responseDetails);
        return result;
    }   
#end
	/** Following method will load the Provider Service Impl from Application Context
	 *  as Bean and retrun the object if found otherwise return null.
	 *
	 * @param responseDetails
	 * 				Will be populated if failed to load the bean
	 * @return ${serviceName}ProviderAPI object
	 */
	private ${serviceName}ProviderAPI getService(ResponseDetails responseDetails) {
		try {
			return ( (${serviceName}ProviderAPI) ${serviceName}SpringContext.getContext().getBean("${serviceName}Provider") );
		}  catch (BeansException e) {
			String message = "'${serviceName}' Provider is currently not availble OR does not exist - BeansException : " + e.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_SERVICE_NOT_AVAILABLE_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, message, null));
		} catch (Exception e) {
			String message = "Failed to load '${serviceName}' context - Exception : " + e.getMessage();
			responseDetails.addError(new Response(CFConstants.T24_EB_SERVICE_NOT_AVAILABLE_CODE, CFConstants.RESPONSE_TYPE_FATAL_ERROR, message, null));
		}
		// if we come to this point this means Bean is not loaded, return null
		return null;
	}
}
