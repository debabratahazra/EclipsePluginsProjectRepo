## ProxyAdaptor.vm
package ${package};

// Java Imports
import java.io.FileInputStream;
import java.io.File;
import java.lang.System;
#if(${operation.getIfContainsCollTypeParams()})
import java.util.List;
import java.util.ArrayList;
#end
import java.util.Properties;
import org.apache.log4j.Logger;

// TAFJ Releated imports
import com.temenos.tafj.common.jSession;
import com.temenos.tafj.common.jVar;
import com.temenos.tafj.api.client.impl.jVarClientFactory;
import com.temenos.tafj.runtime.jRunTime;
import com.temenos.tafj.runtime.extension.BasicReplacement;
import com.temenos.soa.exceptions.InvalidNestLevelException;
import com.temenos.tafj.api.client.impl.JVarClientUtils;
import com.temenos.soa.services.UserContextCallBack;
import com.temenos.soa.services.T24UserContextCallBackImpl;
import com.temenos.soa.services.data.UserDetails;
import com.temenos.soa.services.data.T24UserDetails;

// Import Requird Complex Data Classes
#set( $paramList = ${operation.getParameters()} )
#foreach($param in $paramList)
#if(${param.getTypeName()} != "String" && ${param.getTypeName()} != "Integer" && ${param.getTypeName()} != "Boolean" )
import ${package}.data.${param.getTypeName()};
import ${package}.data.converter.${param.getTypeName()}Converter;
#end
#end

// Soaframework Imports
import com.temenos.soa.services.data.ResponseDetails;
import com.temenos.soa.services.data.CFConstants;
import com.temenos.soa.services.data.converter.ResponseDetailsConverter;

// ProxyAPI Import
import ${package}.${service}ProxyAPI;

public class $serviceAdaptor$operation.getUpperName() extends BasicReplacement {

    static final String PROPERTIES_FILE = "services.properties";
    static final String PROPERTIES_KEY = "$service";
    static Logger serviceLogger = Logger.getLogger("${serviceAdaptor}"); 
	
    // member variables to ensure we can log a response from anywhere in the classs  
    private ResponseDetails myResponseDetails = null;
    private Object[] myArgsArray = null;
    
    @Override
    public jVar invoke(Object... args) {
		myResponseDetails = new ResponseDetails();
        this.myArgsArray = args;
	
        // String used for error handling
        String errorMessage = null;
        Throwable th = null;

#set( $paramList = ${operation.getParameters()} )   
#set( $paramIndex = 0 )
        try {
		     // Load the Proxy Implementation
			${service}ProxyAPI service = createService();
			
			// No need to proceed throw an exception, prepare response and return
			if (service == null) {
				throw new RuntimeException("Failed to load '" + PROPERTIES_KEY + "' proxy service. Check log for more details.");
			}
			
			// Prepare user context and set it in the service to use
			UserContextCallBack userContextCallBack = getCurrentT24UserContext();
			service.setSecurityContext(userContextCallBack);
#foreach($param in $paramList)
#if(${param.getComplexity()} == "PRIMITIVE")
#if(${param.getCardinality()} == "SINGLE")
            ${param.getTypeName()} ${param.getName()} = JVarClientUtils.getInstance().get${param.getTypeName()}( jVarClientFactory.get((jVar) args[$paramIndex]));
#else
            List<$param.getTypeName()> ${param.getName()} = new ArrayList<${param.getTypeName()}>();
            JVarClientUtils.getInstance().get${param.getTypeName()}List(jVarClientFactory.get((jVar) args[$paramIndex]), ${param.getName()});
#end
#else
		    ${param.getTypeName()}Converter ${param.getName()}ConverterObj = new ${param.getTypeName()}Converter();
#if($param.getCardinality() == "SINGLE")
            ${param.getTypeName()} $param.getName() = new ${param.getTypeName()}();
#else
		    List<${param.getTypeName()}> ${param.getName()} = new ArrayList<${param.getTypeName()}>();
#end
			${param.getName()}ConverterObj.fromJVarClient(${param.getName()}, jVarClientFactory.get((jVar) args[$paramIndex]));
#end
#set( $paramIndex = $paramIndex + 1 )
#end
	
	        ResponseDetailsConverter responseDetailsConverterObj = new ResponseDetailsConverter();
			responseDetailsConverterObj.fromJVarClient(this.myResponseDetails, jVarClientFactory.get((jVar) args[$paramIndex]));
            
            service.$operation.getLowerName()(#foreach($param in $operation.getParameters())${param.getName()}, #{end}this.myResponseDetails);

#set( $paramList = ${operation.getParameters()} )   
#set( $paramIndex = 0 )
#foreach($param in $paramList)
#if((${param.getDirection()} == "OUT") || (${param.getDirection()} == "INOUT"))
#if(${param.getComplexity()} == "PRIMITIVE")
            ((jVar) args[$paramIndex]).set(JVarClientUtils.getInstance().tojVarAPI(JVarClientUtils.getInstance().toJVar(${param.getName()})));
#else
	        ((jVar) args[$paramIndex]).set(JVarClientUtils.getInstance().tojVarAPI(${param.getName()}ConverterObj.toJVarClient(${param.getName()})));
#end
#end
#set( $paramIndex = $paramIndex + 1 )
#end
            // Return the result in the response details argument
            ((jVar) args[$paramIndex]).set(JVarClientUtils.getInstance().tojVarAPI(responseDetailsConverterObj.toJVarClient(this.myResponseDetails)));

        } catch (InvalidNestLevelException e) {
            th = e;
            errorMessage = "${serviceAdaptor}${operation.getUpperName()}.invoke: " + th;
        } catch (Throwable t) {
            // Catching Throwable is deliberate as we need to catch absolutely everything
            // so that it can be logged and passed back to T24 in ResponseDetails.
            th = t;
            errorMessage = "${serviceAdaptor}${operation.getUpperName()}.invoke: " + th;
        } finally {
            createResponse(errorMessage);
            logError(errorMessage, th);	
        }

        return null;
    }
    
    private ${service}ProxyAPI createService() {
        // obtain the string that represents the implementation class
        
		// String used for error handling
        String errorMessage = null;
        Throwable th = null;
		// read properties file
        Properties props = new Properties();
        try {
			// Check where we have to read the file from, following values will be considered. 
			// tafj.home : Property will be set when TAFJ running within J2EE Application Server
			// TAFJ_HOME : Variable will be set when TAFJ running as Standalone Application [Classic Mode]  
			String propFile = 
				( System.getProperty("tafj.home") == null ?
					( System.getenv("TAFJ_HOME") == null ?
						"" : System.getenv("TAFJ_HOME") ) :
					System.getProperty("tafj.home") ) 
				+ "/conf/" 
				+ PROPERTIES_FILE;
			File tempPropFile = new File(propFile);
			if (! tempPropFile.exists()) {
				// If the path does not exists then try to load from CLASSPATH
				props.load(getClass().getClassLoader().getResourceAsStream(PROPERTIES_FILE));
			} else {
				props.load(new FileInputStream(propFile));
			}
			String implClassName = props.getProperty(PROPERTIES_KEY);
		    Class<?> implClass = Class.forName(implClassName);
		    return (${service}ProxyAPI) implClass.newInstance();
        } catch (Throwable t) {
            // Catching Throwable is deliberate as we need to catch absolutely everything
            // so that it can be logged and passed back to T24 in ResponseDetails.
            th = t;
            errorMessage = "${serviceAdaptor}${operation.getUpperName()}.createService: " + th;
        } finally {
            createResponse(errorMessage);
            logError(errorMessage, th);
        }
		// we will not get here, if there is no error it will return earlier otherwise it
		// will return at the end of the finally clause.
        return null;
    }

    private static final String className = "$serviceAdaptor$operation.getUpperName()";

    public static jRunTime INSTANCE(jSession session){
        jRunTime prg = session.getRuntimeCache(className);
        if (prg == null){
            prg = new $serviceAdaptor$operation.getUpperName()();
            prg.init(session);
        }
        return prg;
    }

    public void stack(jRunTime prg){
        session.setRuntimeCache(className, prg);
    }
	
    private void logError(String errorMessage, Throwable th) {
        createResponse(errorMessage);
        if (errorMessage != null) {
            serviceLogger.error("Error while executing ${serviceAdaptor}${operation.getUpperName()}.invoke: " + th);
            serviceLogger.debug(this.myResponseDetails.toString());
		}
	}
	
    public void createResponse(String errorMessage) {
        if (errorMessage != null) {
            if (this.myResponseDetails == null) {
                this.myResponseDetails = new ResponseDetails();
            }
            this.myResponseDetails.addFatalError(errorMessage, errorMessage);
            this.myResponseDetails.setReturnCode(CFConstants.RETURN_CODE_FAILURE);
            this.myResponseDetails.setServiceName("${serviceAdaptor}${operation.getUpperName()}");
            try {
				ResponseDetailsConverter responseDetailsConverterObj =  new ResponseDetailsConverter();
                ((jVar)this.myArgsArray[this.myArgsArray.length - 1]).set(
					    JVarClientUtils.getInstance().tojVarAPI(responseDetailsConverterObj.toJVarClient(this.myResponseDetails))
					);
				
            } catch (InvalidNestLevelException e) {
                // this should not happen as the nesting level of ResponseDetails is known and
                // does not go beyond the allowable nest level
                e.printStackTrace();
            }
        }
    }
	
	/**
	 * This method will retrieve T24 user context from TAFJ jSession.
	 * @return UserContextCallBack Contains the user context
	 */
	 private UserContextCallBack getCurrentT24UserContext() {
		String t24User = ""; 
		String companyId = "";
		try {
			jVar jVarUser = session.getCommon("GLOBUS1", 0);
			t24User = (jVarUser == null) ? "" : get(jVarUser, 1, 0, 0).toString();
			
			jVar jVarCompany = session.getCommon("THE.GLOBUS.COMMON", 42);
			companyId = (jVarCompany == null) ? "" : get(jVarCompany, 1, 0, 0).toString(); 
		} catch (Throwable t) {
			// Something goes wrong while retrieving the context, display the message in log and proceed with empty context
			serviceLogger.error("Error while retreiving the user context from T24 - Continuing with empty user context : " + t);
		}
		
		UserDetails userDetails = new T24UserDetails(t24User, "", companyId);
		return ((UserContextCallBack) new T24UserContextCallBackImpl(userDetails));
	 }
}