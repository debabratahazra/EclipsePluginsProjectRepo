/*
* generated by Xtext
*/
package com.odcgroup.service.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.odcgroup.service.model.services.ComponentGrammarAccess;

public class ComponentParser extends AbstractContentAssistParser {

	@Inject
	private ComponentGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected com.odcgroup.service.model.ui.contentassist.antlr.internal.InternalComponentParser createParser() {
		com.odcgroup.service.model.ui.contentassist.antlr.internal.InternalComponentParser result = new com.odcgroup.service.model.ui.contentassist.antlr.internal.InternalComponentParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getString_ValueAccess().getAlternatives(), "rule__String_Value__Alternatives");
					put(grammarAccess.getT24MethodStereotypeAccess().getAlternatives(), "rule__T24MethodStereotype__Alternatives");
					put(grammarAccess.getReadWriteAccess().getAlternatives(), "rule__ReadWrite__Alternatives");
					put(grammarAccess.getAccessSpecifierAccess().getAlternatives(), "rule__AccessSpecifier__Alternatives");
					put(grammarAccess.getMethodAccessSpecifierAccess().getAlternatives(), "rule__MethodAccessSpecifier__Alternatives");
					put(grammarAccess.getInOutTypeAccess().getAlternatives(), "rule__InOutType__Alternatives");
					put(grammarAccess.getMultiplicityAccess().getAlternatives(), "rule__Multiplicity__Alternatives");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getTableAccess().getGroup_7(), "rule__Table__Group_7__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getConstantAccess().getGroup_4(), "rule__Constant__Group_4__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_11(), "rule__Property__Group_11__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
					put(grammarAccess.getMethodAccess().getGroup_6_1(), "rule__Method__Group_6_1__0");
					put(grammarAccess.getMethodAccess().getGroup_8(), "rule__Method__Group_8__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getInterfaceAccess().getGroup_5(), "rule__Interface__Group_5__0");
					put(grammarAccess.getInterfaceAccess().getGroup_5_1(), "rule__Interface__Group_5_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_1(), "rule__Attribute__Group_1__0");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getMethodAnnotationAccess().getGroup(), "rule__MethodAnnotation__Group__0");
					put(grammarAccess.getEntityRefAccess().getGroup(), "rule__EntityRef__Group__0");
					put(grammarAccess.getEntityRefAccess().getGroup_1(), "rule__EntityRef__Group_1__0");
					put(grammarAccess.getJBC_IDAccess().getGroup(), "rule__JBC_ID__Group__0");
					put(grammarAccess.getJBC_IDAccess().getGroup_1(), "rule__JBC_ID__Group_1__0");
					put(grammarAccess.getComponentAccess().getDocumentationAssignment_0(), "rule__Component__DocumentationAssignment_0");
					put(grammarAccess.getComponentAccess().getNameAssignment_2(), "rule__Component__NameAssignment_2");
					put(grammarAccess.getComponentAccess().getMetamodelVersionAssignment_4(), "rule__Component__MetamodelVersionAssignment_4");
					put(grammarAccess.getComponentAccess().getContentAssignment_5(), "rule__Component__ContentAssignment_5");
					put(grammarAccess.getContentAccess().getInterfaceAssignment_0(), "rule__Content__InterfaceAssignment_0");
					put(grammarAccess.getContentAccess().getMethodAssignment_1(), "rule__Content__MethodAssignment_1");
					put(grammarAccess.getContentAccess().getPropertyAssignment_2(), "rule__Content__PropertyAssignment_2");
					put(grammarAccess.getContentAccess().getConstantAssignment_3(), "rule__Content__ConstantAssignment_3");
					put(grammarAccess.getContentAccess().getTableAssignment_4(), "rule__Content__TableAssignment_4");
					put(grammarAccess.getTableAccess().getDocumentationAssignment_0(), "rule__Table__DocumentationAssignment_0");
					put(grammarAccess.getTableAccess().getAccessSpecifierAssignment_1(), "rule__Table__AccessSpecifierAssignment_1");
					put(grammarAccess.getTableAccess().getTableNameAssignment_3(), "rule__Table__TableNameAssignment_3");
					put(grammarAccess.getTableAccess().getTypeAssignment_6(), "rule__Table__TypeAssignment_6");
					put(grammarAccess.getTableAccess().getAttributeAssignment_7_2(), "rule__Table__AttributeAssignment_7_2");
					put(grammarAccess.getConstantAccess().getDocumentationAssignment_0(), "rule__Constant__DocumentationAssignment_0");
					put(grammarAccess.getConstantAccess().getAccessSpecifierAssignment_1(), "rule__Constant__AccessSpecifierAssignment_1");
					put(grammarAccess.getConstantAccess().getConstantNameAssignment_3(), "rule__Constant__ConstantNameAssignment_3");
					put(grammarAccess.getConstantAccess().getJBCNameAssignment_4_1(), "rule__Constant__JBCNameAssignment_4_1");
					put(grammarAccess.getConstantAccess().getValueAssignment_6(), "rule__Constant__ValueAssignment_6");
					put(grammarAccess.getPropertyAccess().getDocumentationAssignment_0(), "rule__Property__DocumentationAssignment_0");
					put(grammarAccess.getPropertyAccess().getAccessSpecifierAssignment_1(), "rule__Property__AccessSpecifierAssignment_1");
					put(grammarAccess.getPropertyAccess().getReadOnlyAssignment_3(), "rule__Property__ReadOnlyAssignment_3");
					put(grammarAccess.getPropertyAccess().getPropertyNameAssignment_4(), "rule__Property__PropertyNameAssignment_4");
					put(grammarAccess.getPropertyAccess().getType1Assignment_8(), "rule__Property__Type1Assignment_8");
					put(grammarAccess.getPropertyAccess().getType2Assignment_10(), "rule__Property__Type2Assignment_10");
					put(grammarAccess.getPropertyAccess().getArrayAssignment_11_0(), "rule__Property__ArrayAssignment_11_0");
					put(grammarAccess.getPropertyAccess().getValueAssignment_11_1(), "rule__Property__ValueAssignment_11_1");
					put(grammarAccess.getMethodAccess().getDocumentationAssignment_0(), "rule__Method__DocumentationAssignment_0");
					put(grammarAccess.getMethodAccess().getAccessSpecifierAssignment_1(), "rule__Method__AccessSpecifierAssignment_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_3(), "rule__Method__NameAssignment_3");
					put(grammarAccess.getMethodAccess().getAnnotationsAssignment_4(), "rule__Method__AnnotationsAssignment_4");
					put(grammarAccess.getMethodAccess().getArgumentsAssignment_6_0(), "rule__Method__ArgumentsAssignment_6_0");
					put(grammarAccess.getMethodAccess().getArgumentsAssignment_6_1_1(), "rule__Method__ArgumentsAssignment_6_1_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_8_2(), "rule__Method__TypeAssignment_8_2");
					put(grammarAccess.getInterfaceAccess().getDocumentationAssignment_0(), "rule__Interface__DocumentationAssignment_0");
					put(grammarAccess.getInterfaceAccess().getAccessSpecifierAssignment_1(), "rule__Interface__AccessSpecifierAssignment_1");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_3(), "rule__Interface__NameAssignment_3");
					put(grammarAccess.getInterfaceAccess().getArgumentsAssignment_5_0(), "rule__Interface__ArgumentsAssignment_5_0");
					put(grammarAccess.getInterfaceAccess().getArgumentsAssignment_5_1_1(), "rule__Interface__ArgumentsAssignment_5_1_1");
					put(grammarAccess.getAttributeAccess().getAttrNameAssignment_0(), "rule__Attribute__AttrNameAssignment_0");
					put(grammarAccess.getAttributeAccess().getJBCNameAssignment_1_1(), "rule__Attribute__JBCNameAssignment_1_1");
					put(grammarAccess.getAttributeAccess().getValueAssignment_3(), "rule__Attribute__ValueAssignment_3");
					put(grammarAccess.getArgumentAccess().getDocumentationAssignment_0(), "rule__Argument__DocumentationAssignment_0");
					put(grammarAccess.getArgumentAccess().getInoutAssignment_1(), "rule__Argument__InoutAssignment_1");
					put(grammarAccess.getArgumentAccess().getNameAssignment_2(), "rule__Argument__NameAssignment_2");
					put(grammarAccess.getArgumentAccess().getTypeAssignment_3(), "rule__Argument__TypeAssignment_3");
					put(grammarAccess.getArgumentAccess().getMultiplicityAssignment_4(), "rule__Argument__MultiplicityAssignment_4");
					put(grammarAccess.getMethodAnnotationAccess().getNameAssignment_3(), "rule__MethodAnnotation__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.odcgroup.service.model.ui.contentassist.antlr.internal.InternalComponentParser typedParser = (com.odcgroup.service.model.ui.contentassist.antlr.internal.InternalComponentParser) parser;
			typedParser.entryRuleComponent();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public ComponentGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComponentGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
