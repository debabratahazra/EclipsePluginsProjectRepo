/*
* generated by Xtext
*/
package com.odcgroup.service.model.ui.labeling;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.resource.CompositeImageDescriptor;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.DecoratingLabelProvider;
import org.eclipse.jface.viewers.ILabelDecorator;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import com.google.inject.Inject;
import com.odcgroup.service.model.component.AccessSpecifier;
import com.odcgroup.service.model.component.Argument;
import com.odcgroup.service.model.component.Attribute;
import com.odcgroup.service.model.component.Component;
import com.odcgroup.service.model.component.Constant;
import com.odcgroup.service.model.component.InOutType;
import com.odcgroup.service.model.component.Interface;
import com.odcgroup.service.model.component.Method;
import com.odcgroup.service.model.component.Property;
import com.odcgroup.service.model.component.Table;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ComponentLabelProvider extends DecoratingLabelProvider implements ILabelProvider{

	public static final String PLUGIN_ID = "com.odcgroup.service.model.ui";

	static protected ComposedAdapterFactory adapterFactory = null;
	static private ILabelDecorator decorator = PlatformUI.getWorkbench().getDecoratorManager().getLabelDecorator();


	private static Image component = createImage("/icons/component.png");
	private static Image method = createImage("/icons/method.png");
	private static Image inface = createImage("/icons/application.png");
	private static Image attribute = createImage("/icons/attribute.png");
	private static Image arg_in = createImage("/icons/arrow_in.png");
	private static Image arg_out = createImage("/icons/arrow_out.png");
	private static Image arg_inout = createImage("/icons/arrow_inout.png");
	private static Image table = createImage("/icons/table.png");
	private static Image property = createImage("/icons/property.png");
	private static Image privateover = createImage("/icons/private.png");
	private static Image publicover = createImage("/icons/public.png");
	private static Image cnst = createImage("/icons/constant.png");

	@Inject
	public ComponentLabelProvider(AdapterFactoryLabelProvider provider) {
		super(getProvider(), decorator);
	}

	static AdapterFactoryLabelProvider getProvider() {
		List<AdapterFactoryImpl> factories = new ArrayList<AdapterFactoryImpl>();
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());
		adapterFactory = new ComposedAdapterFactory(factories);
		return new AdapterFactoryLabelProvider(adapterFactory);
	}

	private Image getAccessSpecifierImage(AccessSpecifier spec, Image defaultImage) {
		if (AccessSpecifier.PRIVATE.equals(spec)) {
			return overlayImage(defaultImage, privateover);
		} else if (AccessSpecifier.PUBLIC.equals(spec)) {
			return overlayImage(defaultImage, publicover);
		}
		return defaultImage;
	}


	@Override
	public Image getImage(Object modelElement) {
		Image resultImage = null;
		if (modelElement instanceof Component) {
			return component;
		} else if (modelElement instanceof Method) {
			Method mthd = (Method) modelElement;
			return getAccessSpecifierImage(mthd.getAccessSpecifier(), method);
		} else if (modelElement instanceof Interface) {
			Interface inf = (Interface) modelElement;
			return getAccessSpecifierImage(inf.getAccessSpecifier(), inface);
		} else if (modelElement instanceof Argument) {
			Argument arg = (Argument) modelElement;
			if (InOutType.IN.equals(arg.getInout())) {
				return arg_in;
			} else if (InOutType.OUT.equals(arg.getInout())) {
				return arg_out;
			} else {
				return arg_inout;
			}
		} else if (modelElement instanceof Table) {
			Table tbl = (Table) modelElement;
			return getAccessSpecifierImage(tbl.getAccessSpecifier(), table);
		} else if (modelElement instanceof Attribute) {
			return attribute;
		} else if (modelElement instanceof Property) {
			Property prop = (Property) modelElement;
			return getAccessSpecifierImage(prop.getAccessSpecifier(), property);
		} else if (modelElement instanceof Constant) {
			Constant cont = (Constant) modelElement;
			return getAccessSpecifierImage(cont.getAccessSpecifier(), cnst);
		}
		return resultImage;
	}

	private static Image overlayImage(final Image base, final Image overlay) {
		CompositeImageDescriptor cid = new CompositeImageDescriptor() {
			@Override
			protected void drawCompositeImage(int width, int height) {
				drawImage(base.getImageData(), 0, 0);
				drawImage(overlay.getImageData(), 3, -3);
			}
			@Override
			protected Point getSize() {
				return new Point(base.getImageData().width,
						base.getImageData().height);
			}
		};
		return cid.createImage();
	}
	
	protected static Image createImage(String name) {
		return getImageDescriptor(name).createImage();
	}

	/**
	 * Returns an image descriptor for the image file at the given plug-in
	 * relative path
	 *
	 * @param path
	 *            the path
	 * @return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID, path);
	}


}
