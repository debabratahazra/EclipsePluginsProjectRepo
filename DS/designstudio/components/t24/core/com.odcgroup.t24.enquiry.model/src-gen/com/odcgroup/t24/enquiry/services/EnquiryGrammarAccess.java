/*
* generated by Xtext
*/
package com.odcgroup.t24.enquiry.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.odcgroup.translation.services.TranslationDslGrammarAccess;

@Singleton
public class EnquiryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EnquiryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enquiry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnquiryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFileNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFileNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMetamodelVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMetamodelVersionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMetamodelVersionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cMetamodelVersionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHeaderKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cHeaderAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cHeaderEnquiryHeaderParserRuleCall_6_2_0 = (RuleCall)cHeaderAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cUnorderedGroup_7.eContents().get(0);
		private final Keyword cDescriptionKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_1 = (Keyword)cGroup_7_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_7_0_2 = (Assignment)cGroup_7_0.eContents().get(2);
		private final RuleCall cDescriptionTranslationsParserRuleCall_7_0_2_0 = (RuleCall)cDescriptionAssignment_7_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_0_3 = (Keyword)cGroup_7_0.eContents().get(3);
		private final Group cGroup_7_1 = (Group)cUnorderedGroup_7.eContents().get(1);
		private final Keyword cServerModeKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cServerModeAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cServerModeServerModeEnumRuleCall_7_1_1_0 = (RuleCall)cServerModeAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cUnorderedGroup_7.eContents().get(2);
		private final Keyword cEnquiryModeKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cEnquiryModeAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cEnquiryModeEnquiryModeEnumRuleCall_7_2_1_0 = (RuleCall)cEnquiryModeAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cUnorderedGroup_7.eContents().get(3);
		private final Keyword cCompaniesKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cCompaniesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cCompaniesCompaniesParserRuleCall_7_3_1_0 = (RuleCall)cCompaniesAssignment_7_3_1.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cUnorderedGroup_7.eContents().get(4);
		private final Keyword cAccountFieldKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cAccountFieldAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cAccountFieldSTRINGTerminalRuleCall_7_4_1_0 = (RuleCall)cAccountFieldAssignment_7_4_1.eContents().get(0);
		private final Group cGroup_7_5 = (Group)cUnorderedGroup_7.eContents().get(5);
		private final Keyword cCustomerFieldKeyword_7_5_0 = (Keyword)cGroup_7_5.eContents().get(0);
		private final Assignment cCustomerFieldAssignment_7_5_1 = (Assignment)cGroup_7_5.eContents().get(1);
		private final RuleCall cCustomerFieldSTRINGTerminalRuleCall_7_5_1_0 = (RuleCall)cCustomerFieldAssignment_7_5_1.eContents().get(0);
		private final Group cGroup_7_6 = (Group)cUnorderedGroup_7.eContents().get(6);
		private final Keyword cZeroRecordsDisplayKeyword_7_6_0 = (Keyword)cGroup_7_6.eContents().get(0);
		private final Assignment cZeroRecordsDisplayAssignment_7_6_1 = (Assignment)cGroup_7_6.eContents().get(1);
		private final RuleCall cZeroRecordsDisplayBooleanObjectParserRuleCall_7_6_1_0 = (RuleCall)cZeroRecordsDisplayAssignment_7_6_1.eContents().get(0);
		private final Group cGroup_7_7 = (Group)cUnorderedGroup_7.eContents().get(7);
		private final Keyword cNoSelectionKeyword_7_7_0 = (Keyword)cGroup_7_7.eContents().get(0);
		private final Assignment cNoSelectionAssignment_7_7_1 = (Assignment)cGroup_7_7.eContents().get(1);
		private final RuleCall cNoSelectionBooleanObjectParserRuleCall_7_7_1_0 = (RuleCall)cNoSelectionAssignment_7_7_1.eContents().get(0);
		private final Group cGroup_7_8 = (Group)cUnorderedGroup_7.eContents().get(8);
		private final Keyword cShowAllBooksKeyword_7_8_0 = (Keyword)cGroup_7_8.eContents().get(0);
		private final Assignment cShowAllBooksAssignment_7_8_1 = (Assignment)cGroup_7_8.eContents().get(1);
		private final RuleCall cShowAllBooksBooleanObjectParserRuleCall_7_8_1_0 = (RuleCall)cShowAllBooksAssignment_7_8_1.eContents().get(0);
		private final Group cGroup_7_9 = (Group)cUnorderedGroup_7.eContents().get(9);
		private final Keyword cStartLineKeyword_7_9_0 = (Keyword)cGroup_7_9.eContents().get(0);
		private final Assignment cStartLineAssignment_7_9_1 = (Assignment)cGroup_7_9.eContents().get(1);
		private final RuleCall cStartLineINTEGER_OBJECTParserRuleCall_7_9_1_0 = (RuleCall)cStartLineAssignment_7_9_1.eContents().get(0);
		private final Group cGroup_7_10 = (Group)cUnorderedGroup_7.eContents().get(10);
		private final Keyword cEndLineKeyword_7_10_0 = (Keyword)cGroup_7_10.eContents().get(0);
		private final Assignment cEndLineAssignment_7_10_1 = (Assignment)cGroup_7_10.eContents().get(1);
		private final RuleCall cEndLineINTEGER_OBJECTParserRuleCall_7_10_1_0 = (RuleCall)cEndLineAssignment_7_10_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cBuildRoutinesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cBuildRoutinesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cBuildRoutinesRoutineParserRuleCall_8_2_0 = (RuleCall)cBuildRoutinesAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cFixedSelectionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFixedSelectionsFixedSelectionParserRuleCall_9_0 = (RuleCall)cFixedSelectionsAssignment_9.eContents().get(0);
		private final Assignment cFixedSortsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFixedSortsFixedSortParserRuleCall_10_0 = (RuleCall)cFixedSortsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCustomSelectionKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cCustomSelectionAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cCustomSelectionSelectionExpressionParserRuleCall_11_2_0 = (RuleCall)cCustomSelectionAssignment_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Assignment cFieldsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cFieldsFieldParserRuleCall_12_0 = (RuleCall)cFieldsAssignment_12.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_13 = (UnorderedGroup)cGroup.eContents().get(13);
		private final Group cGroup_13_0 = (Group)cUnorderedGroup_13.eContents().get(0);
		private final Keyword cToolbarKeyword_13_0_0 = (Keyword)cGroup_13_0.eContents().get(0);
		private final Assignment cToolbarAssignment_13_0_1 = (Assignment)cGroup_13_0.eContents().get(1);
		private final RuleCall cToolbarSTRINGTerminalRuleCall_13_0_1_0 = (RuleCall)cToolbarAssignment_13_0_1.eContents().get(0);
		private final Assignment cToolsAssignment_13_1 = (Assignment)cUnorderedGroup_13.eContents().get(1);
		private final RuleCall cToolsToolParserRuleCall_13_1_0 = (RuleCall)cToolsAssignment_13_1.eContents().get(0);
		private final Assignment cTargetAssignment_13_2 = (Assignment)cUnorderedGroup_13.eContents().get(2);
		private final RuleCall cTargetTargetParserRuleCall_13_2_0 = (RuleCall)cTargetAssignment_13_2.eContents().get(0);
		private final Assignment cDrillDownsAssignment_13_3 = (Assignment)cUnorderedGroup_13.eContents().get(3);
		private final RuleCall cDrillDownsDrillDownParserRuleCall_13_3_0 = (RuleCall)cDrillDownsAssignment_13_3.eContents().get(0);
		private final Assignment cSecurityAssignment_13_4 = (Assignment)cUnorderedGroup_13.eContents().get(4);
		private final RuleCall cSecuritySecurityParserRuleCall_13_4_0 = (RuleCall)cSecurityAssignment_13_4.eContents().get(0);
		private final Assignment cGraphAssignment_13_5 = (Assignment)cUnorderedGroup_13.eContents().get(5);
		private final RuleCall cGraphGraphParserRuleCall_13_5_0 = (RuleCall)cGraphAssignment_13_5.eContents().get(0);
		private final Assignment cWebServiceAssignment_13_6 = (Assignment)cUnorderedGroup_13.eContents().get(6);
		private final RuleCall cWebServiceWebServiceParserRuleCall_13_6_0 = (RuleCall)cWebServiceAssignment_13_6.eContents().get(0);
		private final Group cGroup_13_7 = (Group)cUnorderedGroup_13.eContents().get(7);
		private final Keyword cGenerateIFPKeyword_13_7_0 = (Keyword)cGroup_13_7.eContents().get(0);
		private final Assignment cGenerateIFPAssignment_13_7_1 = (Assignment)cGroup_13_7.eContents().get(1);
		private final RuleCall cGenerateIFPBooleanObjectParserRuleCall_13_7_1_0 = (RuleCall)cGenerateIFPAssignment_13_7_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cFileVersionKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cFileVersionAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cFileVersionFileVersionParserRuleCall_14_1_0 = (RuleCall)cFileVersionAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cAttributesKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cAttributesAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cAttributesSTRINGTerminalRuleCall_15_1_0 = (RuleCall)cAttributesAssignment_15_1.eContents().get(0);
		private final Group cGroup_15_2 = (Group)cGroup_15.eContents().get(2);
		private final Keyword cSemicolonKeyword_15_2_0 = (Keyword)cGroup_15_2.eContents().get(0);
		private final Assignment cAttributesAssignment_15_2_1 = (Assignment)cGroup_15_2.eContents().get(1);
		private final RuleCall cAttributesSTRINGTerminalRuleCall_15_2_1_0 = (RuleCall)cAttributesAssignment_15_2_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cIntrospectionMessagesKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cIntrospectionMessagesAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cIntrospectionMessagesSTRINGTerminalRuleCall_16_1_0 = (RuleCall)cIntrospectionMessagesAssignment_16_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * ENQUIRY
		// * ---------------------------------------------------------------------------
		// * / Enquiry:
		//	"Enquiry" name=STRING "for" fileName= / * TODO [mdf::MdfEntity|EntityRef] * / //or virtual templates  
		//	STRING "{" ("metamodelVersion:" metamodelVersion=STRING)? ("header" "{" header+=EnquiryHeader "}")* (("description" "{"
		//	description=Translations "}")? //Field on the Enquiry
		//	//Field on the Enquiry
		//	//virtual fields from attributes like hotField of Version
		//	& ("server-mode:" serverMode=ServerMode)? & ("enquiry-mode:" enquiryMode=EnquiryMode)? & ("companies:"
		//	companies=Companies)? & ("account-field:" accountField=STRING)? & ("customer-field:" customerField=STRING)? &
		//	("zero-records-display:" zeroRecordsDisplay=BooleanObject)? & ("no-selection:" noSelection=BooleanObject)? &
		//	("show-all-books:" showAllBooks=BooleanObject)? & ("start-line:" startLine=INTEGER_OBJECT)? & ("end-line:"
		//	endLine=INTEGER_OBJECT)?) ("build-routines" "{" buildRoutines+=Routine+ "}")? fixedSelections+=FixedSelection*
		//	fixedSorts+=FixedSort* ("custom-selection" "{" customSelection=SelectionExpression "}")? fields+=Field* (("toolbar:"
		//	toolbar=STRING)? & tools+=Tool* & target=Target? & drillDowns+=DrillDown* & security=Security? & graph=Graph? &
		//	webService=WebService? & ("generateIFP:" generateIFP=BooleanObject)?) //compsAllowed: "US00001" "GB000001"
		//	//virtual fields from attributes like hotField of Version
		//	//CompanySelect field used books as it is a more valid term for branches
		//	// moved the file version from & group .',' is not accepting in the file version. 	
		//	("fileVersion:" fileVersion+=FileVersion)? ("attributes:" attributes+=STRING (";" attributes+=STRING)*)? // == ATTRIBUTES
		//	("introspection-messages:" introspectionMessages+=STRING)* "}";
		public ParserRule getRule() { return rule; }

		//"Enquiry" name=STRING "for" fileName= / * TODO [mdf::MdfEntity|EntityRef] * / //or virtual templates  
		//STRING "{" ("metamodelVersion:" metamodelVersion=STRING)? ("header" "{" header+=EnquiryHeader "}")* (("description" "{"
		//description=Translations "}")? //Field on the Enquiry
		////Field on the Enquiry
		////virtual fields from attributes like hotField of Version
		//& ("server-mode:" serverMode=ServerMode)? & ("enquiry-mode:" enquiryMode=EnquiryMode)? & ("companies:"
		//companies=Companies)? & ("account-field:" accountField=STRING)? & ("customer-field:" customerField=STRING)? &
		//("zero-records-display:" zeroRecordsDisplay=BooleanObject)? & ("no-selection:" noSelection=BooleanObject)? &
		//("show-all-books:" showAllBooks=BooleanObject)? & ("start-line:" startLine=INTEGER_OBJECT)? & ("end-line:"
		//endLine=INTEGER_OBJECT)?) ("build-routines" "{" buildRoutines+=Routine+ "}")? fixedSelections+=FixedSelection*
		//fixedSorts+=FixedSort* ("custom-selection" "{" customSelection=SelectionExpression "}")? fields+=Field* (("toolbar:"
		//toolbar=STRING)? & tools+=Tool* & target=Target? & drillDowns+=DrillDown* & security=Security? & graph=Graph? &
		//webService=WebService? & ("generateIFP:" generateIFP=BooleanObject)?) //compsAllowed: "US00001" "GB000001"
		////virtual fields from attributes like hotField of Version
		////CompanySelect field used books as it is a more valid term for branches
		//// moved the file version from & group .',' is not accepting in the file version. 	
		//("fileVersion:" fileVersion+=FileVersion)? ("attributes:" attributes+=STRING (";" attributes+=STRING)*)? // == ATTRIBUTES
		//("introspection-messages:" introspectionMessages+=STRING)* "}"
		public Group getGroup() { return cGroup; }

		//"Enquiry"
		public Keyword getEnquiryKeyword_0() { return cEnquiryKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//fileName= / * TODO [mdf::MdfEntity|EntityRef] * / //or virtual templates  
		//STRING
		public Assignment getFileNameAssignment_3() { return cFileNameAssignment_3; }

		/// * TODO [mdf::MdfEntity|EntityRef] * / //or virtual templates  
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_3_0() { return cFileNameSTRINGTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("metamodelVersion:" metamodelVersion=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"metamodelVersion:"
		public Keyword getMetamodelVersionKeyword_5_0() { return cMetamodelVersionKeyword_5_0; }

		//metamodelVersion=STRING
		public Assignment getMetamodelVersionAssignment_5_1() { return cMetamodelVersionAssignment_5_1; }

		//STRING
		public RuleCall getMetamodelVersionSTRINGTerminalRuleCall_5_1_0() { return cMetamodelVersionSTRINGTerminalRuleCall_5_1_0; }

		//("header" "{" header+=EnquiryHeader "}")*
		public Group getGroup_6() { return cGroup_6; }

		//"header"
		public Keyword getHeaderKeyword_6_0() { return cHeaderKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//header+=EnquiryHeader
		public Assignment getHeaderAssignment_6_2() { return cHeaderAssignment_6_2; }

		//EnquiryHeader
		public RuleCall getHeaderEnquiryHeaderParserRuleCall_6_2_0() { return cHeaderEnquiryHeaderParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//("description" "{" description=Translations "}")? //Field on the Enquiry
		////Field on the Enquiry
		////virtual fields from attributes like hotField of Version
		//& ("server-mode:" serverMode=ServerMode)? & ("enquiry-mode:" enquiryMode=EnquiryMode)? & ("companies:"
		//companies=Companies)? & ("account-field:" accountField=STRING)? & ("customer-field:" customerField=STRING)? &
		//("zero-records-display:" zeroRecordsDisplay=BooleanObject)? & ("no-selection:" noSelection=BooleanObject)? &
		//("show-all-books:" showAllBooks=BooleanObject)? & ("start-line:" startLine=INTEGER_OBJECT)? & ("end-line:"
		//endLine=INTEGER_OBJECT)?
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }

		//("description" "{" description=Translations "}")?
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"description"
		public Keyword getDescriptionKeyword_7_0_0() { return cDescriptionKeyword_7_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0_1() { return cLeftCurlyBracketKeyword_7_0_1; }

		//description=Translations
		public Assignment getDescriptionAssignment_7_0_2() { return cDescriptionAssignment_7_0_2; }

		//Translations
		public RuleCall getDescriptionTranslationsParserRuleCall_7_0_2_0() { return cDescriptionTranslationsParserRuleCall_7_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_0_3() { return cRightCurlyBracketKeyword_7_0_3; }

		//("server-mode:" serverMode=ServerMode)?
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"server-mode:"
		public Keyword getServerModeKeyword_7_1_0() { return cServerModeKeyword_7_1_0; }

		//serverMode=ServerMode
		public Assignment getServerModeAssignment_7_1_1() { return cServerModeAssignment_7_1_1; }

		//ServerMode
		public RuleCall getServerModeServerModeEnumRuleCall_7_1_1_0() { return cServerModeServerModeEnumRuleCall_7_1_1_0; }

		//("enquiry-mode:" enquiryMode=EnquiryMode)?
		public Group getGroup_7_2() { return cGroup_7_2; }

		//"enquiry-mode:"
		public Keyword getEnquiryModeKeyword_7_2_0() { return cEnquiryModeKeyword_7_2_0; }

		//enquiryMode=EnquiryMode
		public Assignment getEnquiryModeAssignment_7_2_1() { return cEnquiryModeAssignment_7_2_1; }

		//EnquiryMode
		public RuleCall getEnquiryModeEnquiryModeEnumRuleCall_7_2_1_0() { return cEnquiryModeEnquiryModeEnumRuleCall_7_2_1_0; }

		//("companies:" companies=Companies)?
		public Group getGroup_7_3() { return cGroup_7_3; }

		//"companies:"
		public Keyword getCompaniesKeyword_7_3_0() { return cCompaniesKeyword_7_3_0; }

		//companies=Companies
		public Assignment getCompaniesAssignment_7_3_1() { return cCompaniesAssignment_7_3_1; }

		//Companies
		public RuleCall getCompaniesCompaniesParserRuleCall_7_3_1_0() { return cCompaniesCompaniesParserRuleCall_7_3_1_0; }

		//("account-field:" accountField=STRING)?
		public Group getGroup_7_4() { return cGroup_7_4; }

		//"account-field:"
		public Keyword getAccountFieldKeyword_7_4_0() { return cAccountFieldKeyword_7_4_0; }

		//accountField=STRING
		public Assignment getAccountFieldAssignment_7_4_1() { return cAccountFieldAssignment_7_4_1; }

		//STRING
		public RuleCall getAccountFieldSTRINGTerminalRuleCall_7_4_1_0() { return cAccountFieldSTRINGTerminalRuleCall_7_4_1_0; }

		//("customer-field:" customerField=STRING)?
		public Group getGroup_7_5() { return cGroup_7_5; }

		//"customer-field:"
		public Keyword getCustomerFieldKeyword_7_5_0() { return cCustomerFieldKeyword_7_5_0; }

		//customerField=STRING
		public Assignment getCustomerFieldAssignment_7_5_1() { return cCustomerFieldAssignment_7_5_1; }

		//STRING
		public RuleCall getCustomerFieldSTRINGTerminalRuleCall_7_5_1_0() { return cCustomerFieldSTRINGTerminalRuleCall_7_5_1_0; }

		//("zero-records-display:" zeroRecordsDisplay=BooleanObject)?
		public Group getGroup_7_6() { return cGroup_7_6; }

		//"zero-records-display:"
		public Keyword getZeroRecordsDisplayKeyword_7_6_0() { return cZeroRecordsDisplayKeyword_7_6_0; }

		//zeroRecordsDisplay=BooleanObject
		public Assignment getZeroRecordsDisplayAssignment_7_6_1() { return cZeroRecordsDisplayAssignment_7_6_1; }

		//BooleanObject
		public RuleCall getZeroRecordsDisplayBooleanObjectParserRuleCall_7_6_1_0() { return cZeroRecordsDisplayBooleanObjectParserRuleCall_7_6_1_0; }

		//("no-selection:" noSelection=BooleanObject)?
		public Group getGroup_7_7() { return cGroup_7_7; }

		//"no-selection:"
		public Keyword getNoSelectionKeyword_7_7_0() { return cNoSelectionKeyword_7_7_0; }

		//noSelection=BooleanObject
		public Assignment getNoSelectionAssignment_7_7_1() { return cNoSelectionAssignment_7_7_1; }

		//BooleanObject
		public RuleCall getNoSelectionBooleanObjectParserRuleCall_7_7_1_0() { return cNoSelectionBooleanObjectParserRuleCall_7_7_1_0; }

		//("show-all-books:" showAllBooks=BooleanObject)?
		public Group getGroup_7_8() { return cGroup_7_8; }

		//"show-all-books:"
		public Keyword getShowAllBooksKeyword_7_8_0() { return cShowAllBooksKeyword_7_8_0; }

		//showAllBooks=BooleanObject
		public Assignment getShowAllBooksAssignment_7_8_1() { return cShowAllBooksAssignment_7_8_1; }

		//BooleanObject
		public RuleCall getShowAllBooksBooleanObjectParserRuleCall_7_8_1_0() { return cShowAllBooksBooleanObjectParserRuleCall_7_8_1_0; }

		//("start-line:" startLine=INTEGER_OBJECT)?
		public Group getGroup_7_9() { return cGroup_7_9; }

		//"start-line:"
		public Keyword getStartLineKeyword_7_9_0() { return cStartLineKeyword_7_9_0; }

		//startLine=INTEGER_OBJECT
		public Assignment getStartLineAssignment_7_9_1() { return cStartLineAssignment_7_9_1; }

		//INTEGER_OBJECT
		public RuleCall getStartLineINTEGER_OBJECTParserRuleCall_7_9_1_0() { return cStartLineINTEGER_OBJECTParserRuleCall_7_9_1_0; }

		//("end-line:" endLine=INTEGER_OBJECT)?
		public Group getGroup_7_10() { return cGroup_7_10; }

		//"end-line:"
		public Keyword getEndLineKeyword_7_10_0() { return cEndLineKeyword_7_10_0; }

		//endLine=INTEGER_OBJECT
		public Assignment getEndLineAssignment_7_10_1() { return cEndLineAssignment_7_10_1; }

		//INTEGER_OBJECT
		public RuleCall getEndLineINTEGER_OBJECTParserRuleCall_7_10_1_0() { return cEndLineINTEGER_OBJECTParserRuleCall_7_10_1_0; }

		//("build-routines" "{" buildRoutines+=Routine+ "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"build-routines"
		public Keyword getBuildRoutinesKeyword_8_0() { return cBuildRoutinesKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//buildRoutines+=Routine+
		public Assignment getBuildRoutinesAssignment_8_2() { return cBuildRoutinesAssignment_8_2; }

		//Routine
		public RuleCall getBuildRoutinesRoutineParserRuleCall_8_2_0() { return cBuildRoutinesRoutineParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//fixedSelections+=FixedSelection*
		public Assignment getFixedSelectionsAssignment_9() { return cFixedSelectionsAssignment_9; }

		//FixedSelection
		public RuleCall getFixedSelectionsFixedSelectionParserRuleCall_9_0() { return cFixedSelectionsFixedSelectionParserRuleCall_9_0; }

		//fixedSorts+=FixedSort*
		public Assignment getFixedSortsAssignment_10() { return cFixedSortsAssignment_10; }

		//FixedSort
		public RuleCall getFixedSortsFixedSortParserRuleCall_10_0() { return cFixedSortsFixedSortParserRuleCall_10_0; }

		//("custom-selection" "{" customSelection=SelectionExpression "}")?
		public Group getGroup_11() { return cGroup_11; }

		//"custom-selection"
		public Keyword getCustomSelectionKeyword_11_0() { return cCustomSelectionKeyword_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }

		//customSelection=SelectionExpression
		public Assignment getCustomSelectionAssignment_11_2() { return cCustomSelectionAssignment_11_2; }

		//SelectionExpression
		public RuleCall getCustomSelectionSelectionExpressionParserRuleCall_11_2_0() { return cCustomSelectionSelectionExpressionParserRuleCall_11_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_3() { return cRightCurlyBracketKeyword_11_3; }

		//fields+=Field*
		public Assignment getFieldsAssignment_12() { return cFieldsAssignment_12; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_12_0() { return cFieldsFieldParserRuleCall_12_0; }

		//("toolbar:" toolbar=STRING)? & tools+=Tool* & target=Target? & drillDowns+=DrillDown* & security=Security? &
		//graph=Graph? & webService=WebService? & ("generateIFP:" generateIFP=BooleanObject)?
		public UnorderedGroup getUnorderedGroup_13() { return cUnorderedGroup_13; }

		//("toolbar:" toolbar=STRING)?
		public Group getGroup_13_0() { return cGroup_13_0; }

		//"toolbar:"
		public Keyword getToolbarKeyword_13_0_0() { return cToolbarKeyword_13_0_0; }

		//toolbar=STRING
		public Assignment getToolbarAssignment_13_0_1() { return cToolbarAssignment_13_0_1; }

		//STRING
		public RuleCall getToolbarSTRINGTerminalRuleCall_13_0_1_0() { return cToolbarSTRINGTerminalRuleCall_13_0_1_0; }

		//tools+=Tool*
		public Assignment getToolsAssignment_13_1() { return cToolsAssignment_13_1; }

		//Tool
		public RuleCall getToolsToolParserRuleCall_13_1_0() { return cToolsToolParserRuleCall_13_1_0; }

		//target=Target?
		public Assignment getTargetAssignment_13_2() { return cTargetAssignment_13_2; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_13_2_0() { return cTargetTargetParserRuleCall_13_2_0; }

		//drillDowns+=DrillDown*
		public Assignment getDrillDownsAssignment_13_3() { return cDrillDownsAssignment_13_3; }

		//DrillDown
		public RuleCall getDrillDownsDrillDownParserRuleCall_13_3_0() { return cDrillDownsDrillDownParserRuleCall_13_3_0; }

		//security=Security?
		public Assignment getSecurityAssignment_13_4() { return cSecurityAssignment_13_4; }

		//Security
		public RuleCall getSecuritySecurityParserRuleCall_13_4_0() { return cSecuritySecurityParserRuleCall_13_4_0; }

		//graph=Graph?
		public Assignment getGraphAssignment_13_5() { return cGraphAssignment_13_5; }

		//Graph
		public RuleCall getGraphGraphParserRuleCall_13_5_0() { return cGraphGraphParserRuleCall_13_5_0; }

		//webService=WebService?
		public Assignment getWebServiceAssignment_13_6() { return cWebServiceAssignment_13_6; }

		//WebService
		public RuleCall getWebServiceWebServiceParserRuleCall_13_6_0() { return cWebServiceWebServiceParserRuleCall_13_6_0; }

		//("generateIFP:" generateIFP=BooleanObject)?
		public Group getGroup_13_7() { return cGroup_13_7; }

		//"generateIFP:"
		public Keyword getGenerateIFPKeyword_13_7_0() { return cGenerateIFPKeyword_13_7_0; }

		//generateIFP=BooleanObject
		public Assignment getGenerateIFPAssignment_13_7_1() { return cGenerateIFPAssignment_13_7_1; }

		//BooleanObject
		public RuleCall getGenerateIFPBooleanObjectParserRuleCall_13_7_1_0() { return cGenerateIFPBooleanObjectParserRuleCall_13_7_1_0; }

		//("fileVersion:" fileVersion+=FileVersion)?
		public Group getGroup_14() { return cGroup_14; }

		//"fileVersion:"
		public Keyword getFileVersionKeyword_14_0() { return cFileVersionKeyword_14_0; }

		//fileVersion+=FileVersion
		public Assignment getFileVersionAssignment_14_1() { return cFileVersionAssignment_14_1; }

		//FileVersion
		public RuleCall getFileVersionFileVersionParserRuleCall_14_1_0() { return cFileVersionFileVersionParserRuleCall_14_1_0; }

		//("attributes:" attributes+=STRING (";" attributes+=STRING)*)?
		public Group getGroup_15() { return cGroup_15; }

		//"attributes:"
		public Keyword getAttributesKeyword_15_0() { return cAttributesKeyword_15_0; }

		//attributes+=STRING
		public Assignment getAttributesAssignment_15_1() { return cAttributesAssignment_15_1; }

		//STRING
		public RuleCall getAttributesSTRINGTerminalRuleCall_15_1_0() { return cAttributesSTRINGTerminalRuleCall_15_1_0; }

		//(";" attributes+=STRING)*
		public Group getGroup_15_2() { return cGroup_15_2; }

		//";"
		public Keyword getSemicolonKeyword_15_2_0() { return cSemicolonKeyword_15_2_0; }

		//attributes+=STRING
		public Assignment getAttributesAssignment_15_2_1() { return cAttributesAssignment_15_2_1; }

		//STRING
		public RuleCall getAttributesSTRINGTerminalRuleCall_15_2_1_0() { return cAttributesSTRINGTerminalRuleCall_15_2_1_0; }

		//("introspection-messages:" introspectionMessages+=STRING)*
		public Group getGroup_16() { return cGroup_16; }

		//"introspection-messages:"
		public Keyword getIntrospectionMessagesKeyword_16_0() { return cIntrospectionMessagesKeyword_16_0; }

		//introspectionMessages+=STRING
		public Assignment getIntrospectionMessagesAssignment_16_1() { return cIntrospectionMessagesAssignment_16_1; }

		//STRING
		public RuleCall getIntrospectionMessagesSTRINGTerminalRuleCall_16_1_0() { return cIntrospectionMessagesSTRINGTerminalRuleCall_16_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class CompaniesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Companies");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAllKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAllAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAllBooleanObjectParserRuleCall_0_1_0 = (RuleCall)cAllAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCodeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cCodeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cCodeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cCodeAssignment_1_1_1.eContents().get(0);
		
		//Companies:
		//	"all:" all=BooleanObject // TODO code=xx1234567 define a validationRule , 
		//	| code+=STRING ("," code+=STRING)*;
		public ParserRule getRule() { return rule; }

		//"all:" all=BooleanObject // TODO code=xx1234567 define a validationRule , 
		//| code+=STRING ("," code+=STRING)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"all:" all=BooleanObject
		public Group getGroup_0() { return cGroup_0; }

		//"all:"
		public Keyword getAllKeyword_0_0() { return cAllKeyword_0_0; }

		//all=BooleanObject
		public Assignment getAllAssignment_0_1() { return cAllAssignment_0_1; }

		//BooleanObject
		public RuleCall getAllBooleanObjectParserRuleCall_0_1_0() { return cAllBooleanObjectParserRuleCall_0_1_0; }

		//code+=STRING ("," code+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//code+=STRING
		public Assignment getCodeAssignment_1_0() { return cCodeAssignment_1_0; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0_0() { return cCodeSTRINGTerminalRuleCall_1_0_0; }

		//("," code+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//code+=STRING
		public Assignment getCodeAssignment_1_1_1() { return cCodeAssignment_1_1_1; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_1_1_0() { return cCodeSTRINGTerminalRuleCall_1_1_1_0; }
	}

	public class EnquiryHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnquiryHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelTranslationsParserRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cColumnKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cColumnAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cColumnINTTerminalRuleCall_4_0_1_0 = (RuleCall)cColumnAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cLineKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLineAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLineINTTerminalRuleCall_4_1_1_0 = (RuleCall)cLineAssignment_4_1_1.eContents().get(0);
		
		//EnquiryHeader:
		//	"label" "{" label=Translations? "}" ("column:" column=INT & "line:" line=INT);
		public ParserRule getRule() { return rule; }

		//"label" "{" label=Translations? "}" ("column:" column=INT & "line:" line=INT)
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//label=Translations?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//Translations
		public RuleCall getLabelTranslationsParserRuleCall_2_0() { return cLabelTranslationsParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"column:" column=INT & "line:" line=INT
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//"column:" column=INT
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"column:"
		public Keyword getColumnKeyword_4_0_0() { return cColumnKeyword_4_0_0; }

		//column=INT
		public Assignment getColumnAssignment_4_0_1() { return cColumnAssignment_4_0_1; }

		//INT
		public RuleCall getColumnINTTerminalRuleCall_4_0_1_0() { return cColumnINTTerminalRuleCall_4_0_1_0; }

		//"line:" line=INT
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"line:"
		public Keyword getLineKeyword_4_1_0() { return cLineKeyword_4_1_0; }

		//line=INT
		public Assignment getLineAssignment_4_1_1() { return cLineAssignment_4_1_1; }

		//INT
		public RuleCall getLineINTTerminalRuleCall_4_1_1_0() { return cLineINTTerminalRuleCall_4_1_1_0; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetForApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTargetAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cApplicationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cApplicationSTRINGTerminalRuleCall_2_0 = (RuleCall)cApplicationAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cScreenKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cScreenAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cScreenSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cScreenAssignment_4_0_1.eContents().get(0);
		private final Assignment cMappingsAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cMappingsTargetMappingParserRuleCall_4_1_0 = (RuleCall)cMappingsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Target
		// * ---------------------------------------------------------------------------
		// * / Target:
		//	"target-for-application" {Target} application=STRING "{" (("screen:" screen=STRING)? & mappings+=TargetMapping+) "}";
		public ParserRule getRule() { return rule; }

		//"target-for-application" {Target} application=STRING "{" (("screen:" screen=STRING)? & mappings+=TargetMapping+) "}"
		public Group getGroup() { return cGroup; }

		//"target-for-application"
		public Keyword getTargetForApplicationKeyword_0() { return cTargetForApplicationKeyword_0; }

		//{Target}
		public Action getTargetAction_1() { return cTargetAction_1; }

		//application=STRING
		public Assignment getApplicationAssignment_2() { return cApplicationAssignment_2; }

		//STRING
		public RuleCall getApplicationSTRINGTerminalRuleCall_2_0() { return cApplicationSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("screen:" screen=STRING)? & mappings+=TargetMapping+
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("screen:" screen=STRING)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"screen:"
		public Keyword getScreenKeyword_4_0_0() { return cScreenKeyword_4_0_0; }

		//screen=STRING
		public Assignment getScreenAssignment_4_0_1() { return cScreenAssignment_4_0_1; }

		//STRING
		public RuleCall getScreenSTRINGTerminalRuleCall_4_0_1_0() { return cScreenSTRINGTerminalRuleCall_4_0_1_0; }

		//mappings+=TargetMapping+
		public Assignment getMappingsAssignment_4_1() { return cMappingsAssignment_4_1; }

		//TargetMapping
		public RuleCall getMappingsTargetMappingParserRuleCall_4_1_0() { return cMappingsTargetMappingParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TargetMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromFieldSTRINGTerminalRuleCall_1_0 = (RuleCall)cFromFieldAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToFieldSTRINGTerminalRuleCall_3_0 = (RuleCall)cToFieldAssignment_3.eContents().get(0);
		
		//TargetMapping:
		//	"map-field:" fromField=STRING "to" toField=STRING;
		public ParserRule getRule() { return rule; }

		//"map-field:" fromField=STRING "to" toField=STRING
		public Group getGroup() { return cGroup; }

		//"map-field:"
		public Keyword getMapFieldKeyword_0() { return cMapFieldKeyword_0; }

		//fromField=STRING
		public Assignment getFromFieldAssignment_1() { return cFromFieldAssignment_1; }

		//STRING
		public RuleCall getFromFieldSTRINGTerminalRuleCall_1_0() { return cFromFieldSTRINGTerminalRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//toField=STRING
		public Assignment getToFieldAssignment_3() { return cToFieldAssignment_3; }

		//STRING
		public RuleCall getToFieldSTRINGTerminalRuleCall_3_0() { return cToFieldSTRINGTerminalRuleCall_3_0; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFunctionFunctionKindEnumRuleCall_1_0_1_0 = (RuleCall)cFunctionAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cAutoF3Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAutoAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAutoBooleanParserRuleCall_1_1_1_0 = (RuleCall)cAutoAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cRunImmediatelyKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRunImmediatelyAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRunImmediatelyBooleanParserRuleCall_1_2_1_0 = (RuleCall)cRunImmediatelyAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPwActivityKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPwActivityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPwActivitySTRINGTerminalRuleCall_2_1_0 = (RuleCall)cPwActivityAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFieldKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFieldNameSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFieldNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParameterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariableAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariableSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cVariableAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameters:
		//	"{" (("function: " function=FunctionKind)? & ("auto-F3:" auto=Boolean)? & ("run-immediately:"
		//	runImmediately=Boolean)?) ("pw-activity:" pwActivity=STRING)? ("field:" fieldName+=STRING)* ("parameter:"
		//	variable+=STRING)* "}";
		public ParserRule getRule() { return rule; }

		//"{" (("function: " function=FunctionKind)? & ("auto-F3:" auto=Boolean)? & ("run-immediately:" runImmediately=Boolean)?)
		//("pw-activity:" pwActivity=STRING)? ("field:" fieldName+=STRING)* ("parameter:" variable+=STRING)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("function: " function=FunctionKind)? & ("auto-F3:" auto=Boolean)? & ("run-immediately:" runImmediately=Boolean)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//("function: " function=FunctionKind)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"function: "
		public Keyword getFunctionKeyword_1_0_0() { return cFunctionKeyword_1_0_0; }

		//function=FunctionKind
		public Assignment getFunctionAssignment_1_0_1() { return cFunctionAssignment_1_0_1; }

		//FunctionKind
		public RuleCall getFunctionFunctionKindEnumRuleCall_1_0_1_0() { return cFunctionFunctionKindEnumRuleCall_1_0_1_0; }

		//("auto-F3:" auto=Boolean)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"auto-F3:"
		public Keyword getAutoF3Keyword_1_1_0() { return cAutoF3Keyword_1_1_0; }

		//auto=Boolean
		public Assignment getAutoAssignment_1_1_1() { return cAutoAssignment_1_1_1; }

		//Boolean
		public RuleCall getAutoBooleanParserRuleCall_1_1_1_0() { return cAutoBooleanParserRuleCall_1_1_1_0; }

		//("run-immediately:" runImmediately=Boolean)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"run-immediately:"
		public Keyword getRunImmediatelyKeyword_1_2_0() { return cRunImmediatelyKeyword_1_2_0; }

		//runImmediately=Boolean
		public Assignment getRunImmediatelyAssignment_1_2_1() { return cRunImmediatelyAssignment_1_2_1; }

		//Boolean
		public RuleCall getRunImmediatelyBooleanParserRuleCall_1_2_1_0() { return cRunImmediatelyBooleanParserRuleCall_1_2_1_0; }

		//("pw-activity:" pwActivity=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"pw-activity:"
		public Keyword getPwActivityKeyword_2_0() { return cPwActivityKeyword_2_0; }

		//pwActivity=STRING
		public Assignment getPwActivityAssignment_2_1() { return cPwActivityAssignment_2_1; }

		//STRING
		public RuleCall getPwActivitySTRINGTerminalRuleCall_2_1_0() { return cPwActivitySTRINGTerminalRuleCall_2_1_0; }

		//("field:" fieldName+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//"field:"
		public Keyword getFieldKeyword_3_0() { return cFieldKeyword_3_0; }

		//fieldName+=STRING
		public Assignment getFieldNameAssignment_3_1() { return cFieldNameAssignment_3_1; }

		//STRING
		public RuleCall getFieldNameSTRINGTerminalRuleCall_3_1_0() { return cFieldNameSTRINGTerminalRuleCall_3_1_0; }

		//("parameter:" variable+=STRING)*
		public Group getGroup_4() { return cGroup_4; }

		//"parameter:"
		public Keyword getParameterKeyword_4_0() { return cParameterKeyword_4_0; }

		//variable+=STRING
		public Assignment getVariableAssignment_4_1() { return cVariableAssignment_4_1; }

		//STRING
		public RuleCall getVariableSTRINGTerminalRuleCall_4_1_0() { return cVariableSTRINGTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DrillDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DrillDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDrilldownKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDrill_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDrill_nameSTRINGTerminalRuleCall_1_0 = (RuleCall)cDrill_nameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cDescriptionTranslationsParserRuleCall_3_0_2_0 = (RuleCall)cDescriptionAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cLabelFieldKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLabelFieldAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLabelFieldSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cLabelFieldAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cImageKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cImageAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cImageSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cImageAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cInfoKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInfoAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInfoSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cInfoAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCriteriaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCriteriaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCriteriaSelectionCriteriaParserRuleCall_4_1_0 = (RuleCall)cCriteriaAssignment_4_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cParametersKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParametersAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_5_0_1_0 = (RuleCall)cParametersAssignment_5_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cUnorderedGroup_5.eContents().get(1);
		private final RuleCall cTypeDrillDownTypeParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * DrillDown
		// * ---------------------------------------------------------------------------
		// * / DrillDown:
		//	"drilldown" drill_name=STRING? "{" (("description" "{" description=Translations "}")? // Reference to field in Enquiry's fields
		//	& ("label-field:" labelField=STRING)? & ("image:" image=STRING)? & ("info:" info=STRING)?) ("criteria:"
		//	criteria+=SelectionCriteria)* (("parameters" parameters=Parameters)? // New property holding all parameters		 		 
		//	& type=DrillDownType?) "}";
		public ParserRule getRule() { return rule; }

		//"drilldown" drill_name=STRING? "{" (("description" "{" description=Translations "}")? // Reference to field in Enquiry's fields
		//& ("label-field:" labelField=STRING)? & ("image:" image=STRING)? & ("info:" info=STRING)?) ("criteria:"
		//criteria+=SelectionCriteria)* (("parameters" parameters=Parameters)? // New property holding all parameters		 		 
		//& type=DrillDownType?) "}"
		public Group getGroup() { return cGroup; }

		//"drilldown"
		public Keyword getDrilldownKeyword_0() { return cDrilldownKeyword_0; }

		//drill_name=STRING?
		public Assignment getDrill_nameAssignment_1() { return cDrill_nameAssignment_1; }

		//STRING
		public RuleCall getDrill_nameSTRINGTerminalRuleCall_1_0() { return cDrill_nameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("description" "{" description=Translations "}")? // Reference to field in Enquiry's fields
		//& ("label-field:" labelField=STRING)? & ("image:" image=STRING)? & ("info:" info=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("description" "{" description=Translations "}")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"description"
		public Keyword getDescriptionKeyword_3_0_0() { return cDescriptionKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//description=Translations
		public Assignment getDescriptionAssignment_3_0_2() { return cDescriptionAssignment_3_0_2; }

		//Translations
		public RuleCall getDescriptionTranslationsParserRuleCall_3_0_2_0() { return cDescriptionTranslationsParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//("label-field:" labelField=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"label-field:"
		public Keyword getLabelFieldKeyword_3_1_0() { return cLabelFieldKeyword_3_1_0; }

		//labelField=STRING
		public Assignment getLabelFieldAssignment_3_1_1() { return cLabelFieldAssignment_3_1_1; }

		//STRING
		public RuleCall getLabelFieldSTRINGTerminalRuleCall_3_1_1_0() { return cLabelFieldSTRINGTerminalRuleCall_3_1_1_0; }

		//("image:" image=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"image:"
		public Keyword getImageKeyword_3_2_0() { return cImageKeyword_3_2_0; }

		//image=STRING
		public Assignment getImageAssignment_3_2_1() { return cImageAssignment_3_2_1; }

		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_3_2_1_0() { return cImageSTRINGTerminalRuleCall_3_2_1_0; }

		//("info:" info=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"info:"
		public Keyword getInfoKeyword_3_3_0() { return cInfoKeyword_3_3_0; }

		//info=STRING
		public Assignment getInfoAssignment_3_3_1() { return cInfoAssignment_3_3_1; }

		//STRING
		public RuleCall getInfoSTRINGTerminalRuleCall_3_3_1_0() { return cInfoSTRINGTerminalRuleCall_3_3_1_0; }

		//("criteria:" criteria+=SelectionCriteria)*
		public Group getGroup_4() { return cGroup_4; }

		//"criteria:"
		public Keyword getCriteriaKeyword_4_0() { return cCriteriaKeyword_4_0; }

		//criteria+=SelectionCriteria
		public Assignment getCriteriaAssignment_4_1() { return cCriteriaAssignment_4_1; }

		//SelectionCriteria
		public RuleCall getCriteriaSelectionCriteriaParserRuleCall_4_1_0() { return cCriteriaSelectionCriteriaParserRuleCall_4_1_0; }

		//("parameters" parameters=Parameters)? // New property holding all parameters		 		 
		//& type=DrillDownType?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("parameters" parameters=Parameters)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"parameters"
		public Keyword getParametersKeyword_5_0_0() { return cParametersKeyword_5_0_0; }

		//parameters=Parameters
		public Assignment getParametersAssignment_5_0_1() { return cParametersAssignment_5_0_1; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_5_0_1_0() { return cParametersParametersParserRuleCall_5_0_1_0; }

		//type=DrillDownType?
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//DrillDownType
		public RuleCall getTypeDrillDownTypeParserRuleCall_5_1_0() { return cTypeDrillDownTypeParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DrillDownTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DrillDownType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDrillDownStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlankTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////DrillDown Types
		//DrillDownType:
		//	DrillDownStringType | BlankType;
		public ParserRule getRule() { return rule; }

		//DrillDownStringType | BlankType
		public Alternatives getAlternatives() { return cAlternatives; }

		//DrillDownStringType
		public RuleCall getDrillDownStringTypeParserRuleCall_0() { return cDrillDownStringTypeParserRuleCall_0; }

		//BlankType
		public RuleCall getBlankTypeParserRuleCall_1() { return cBlankTypeParserRuleCall_1; }
	}

	public class DrillDownStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DrillDownStringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScreenTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnquiryTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFromFieldTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCompositeScreenTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTabbedScreenTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cViewTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cQuitSEETypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPWProcessTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDownloadTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRunTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUtilTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cJavaScriptTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cShouldBeChangedTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//DrillDownStringType:
		//	ApplicationType | ScreenType | EnquiryType | FromFieldType | CompositeScreenType | TabbedScreenType | ViewType |
		//	QuitSEEType | PWProcessType | DownloadType | RunType | UtilType | JavaScriptType | ShouldBeChangedType;
		public ParserRule getRule() { return rule; }

		//ApplicationType | ScreenType | EnquiryType | FromFieldType | CompositeScreenType | TabbedScreenType | ViewType |
		//QuitSEEType | PWProcessType | DownloadType | RunType | UtilType | JavaScriptType | ShouldBeChangedType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ApplicationType
		public RuleCall getApplicationTypeParserRuleCall_0() { return cApplicationTypeParserRuleCall_0; }

		//ScreenType
		public RuleCall getScreenTypeParserRuleCall_1() { return cScreenTypeParserRuleCall_1; }

		//EnquiryType
		public RuleCall getEnquiryTypeParserRuleCall_2() { return cEnquiryTypeParserRuleCall_2; }

		//FromFieldType
		public RuleCall getFromFieldTypeParserRuleCall_3() { return cFromFieldTypeParserRuleCall_3; }

		//CompositeScreenType
		public RuleCall getCompositeScreenTypeParserRuleCall_4() { return cCompositeScreenTypeParserRuleCall_4; }

		//TabbedScreenType
		public RuleCall getTabbedScreenTypeParserRuleCall_5() { return cTabbedScreenTypeParserRuleCall_5; }

		//ViewType
		public RuleCall getViewTypeParserRuleCall_6() { return cViewTypeParserRuleCall_6; }

		//QuitSEEType
		public RuleCall getQuitSEETypeParserRuleCall_7() { return cQuitSEETypeParserRuleCall_7; }

		//PWProcessType
		public RuleCall getPWProcessTypeParserRuleCall_8() { return cPWProcessTypeParserRuleCall_8; }

		//DownloadType
		public RuleCall getDownloadTypeParserRuleCall_9() { return cDownloadTypeParserRuleCall_9; }

		//RunType
		public RuleCall getRunTypeParserRuleCall_10() { return cRunTypeParserRuleCall_10; }

		//UtilType
		public RuleCall getUtilTypeParserRuleCall_11() { return cUtilTypeParserRuleCall_11; }

		//JavaScriptType
		public RuleCall getJavaScriptTypeParserRuleCall_12() { return cJavaScriptTypeParserRuleCall_12; }

		//ShouldBeChangedType
		public RuleCall getShouldBeChangedTypeParserRuleCall_13() { return cShouldBeChangedTypeParserRuleCall_13; }
	}

	public class ApplicationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyApplicationKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		/// * TODO [mdf::MdfClass|ClassRef] * / ApplicationType:
		//	property="application:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="application:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="application:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"application:"
		public Keyword getPropertyApplicationKeyword_0_0() { return cPropertyApplicationKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ScreenTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScreenType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyScreenKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		/// * TODO [version::Version|VersionRef] * / ScreenType:
		//	property="screen:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="screen:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="screen:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"screen:"
		public Keyword getPropertyScreenKeyword_0_0() { return cPropertyScreenKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class EnquiryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnquiryType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyEnquiryKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		/// * TODO [enquiry::Enquiry|EnquiryRef] * / EnquiryType:
		//	property="enquiry:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="enquiry:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="enquiry:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"enquiry:"
		public Keyword getPropertyEnquiryKeyword_0_0() { return cPropertyEnquiryKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class FromFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FromFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyFromFieldKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		/// * Reference to field in Enquiry's fields * / FromFieldType:
		//	property="from-field:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="from-field:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="from-field:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"from-field:"
		public Keyword getPropertyFromFieldKeyword_0_0() { return cPropertyFromFieldKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class CompositeScreenTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeScreenType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyCompositeScreenKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//CompositeScreenType:
		//	property="composite-screen:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="composite-screen:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="composite-screen:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"composite-screen:"
		public Keyword getPropertyCompositeScreenKeyword_0_0() { return cPropertyCompositeScreenKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class TabbedScreenTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabbedScreenType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyTabKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TabbedScreenType:
		//	property="tab:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="tab:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="tab:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"tab:"
		public Keyword getPropertyTabKeyword_0_0() { return cPropertyTabKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ViewTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyViewKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ViewType:
		//	property="view:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="view:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="view:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"view:"
		public Keyword getPropertyViewKeyword_0_0() { return cPropertyViewKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class QuitSEETypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuitSEEType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyQuitSEEKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//QuitSEEType:
		//	property="quit-SEE:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="quit-SEE:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="quit-SEE:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"quit-SEE:"
		public Keyword getPropertyQuitSEEKeyword_0_0() { return cPropertyQuitSEEKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BlankTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlankType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBlankKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBooleanObjectParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BlankType:
		//	property="blank" value=BooleanObject;
		public ParserRule getRule() { return rule; }

		//property="blank" value=BooleanObject
		public Group getGroup() { return cGroup; }

		//property="blank"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"blank"
		public Keyword getPropertyBlankKeyword_0_0() { return cPropertyBlankKeyword_0_0; }

		//value=BooleanObject
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BooleanObject
		public RuleCall getValueBooleanObjectParserRuleCall_1_0() { return cValueBooleanObjectParserRuleCall_1_0; }
	}

	public class PWProcessTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PWProcessType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyPwProcessKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PWProcessType:
		//	property="pw-process:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="pw-process:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="pw-process:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"pw-process:"
		public Keyword getPropertyPwProcessKeyword_0_0() { return cPropertyPwProcessKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class DownloadTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DownloadType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyDownloadKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DownloadType:
		//	property="download:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="download:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="download:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"download:"
		public Keyword getPropertyDownloadKeyword_0_0() { return cPropertyDownloadKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class RunTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RunType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyRunKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RunType:
		//	property="run:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="run:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="run:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"run:"
		public Keyword getPropertyRunKeyword_0_0() { return cPropertyRunKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class UtilTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UtilType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyUtilKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//UtilType:
		//	property="util" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="util" value=STRING
		public Group getGroup() { return cGroup; }

		//property="util"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"util"
		public Keyword getPropertyUtilKeyword_0_0() { return cPropertyUtilKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class JavaScriptTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaScriptType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyJavascriptKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//JavaScriptType:
		//	property="javascript:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="javascript:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="javascript:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"javascript:"
		public Keyword getPropertyJavascriptKeyword_0_0() { return cPropertyJavascriptKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class ShouldBeChangedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShouldBeChangedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyShouldBeChangedKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ShouldBeChangedType:
		//	property="should-be-changed:" value=STRING;
		public ParserRule getRule() { return rule; }

		//property="should-be-changed:" value=STRING
		public Group getGroup() { return cGroup; }

		//property="should-be-changed:"
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//"should-be-changed:"
		public Keyword getPropertyShouldBeChangedKeyword_0_0() { return cPropertyShouldBeChangedKeyword_0_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class DrillDownOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DrillDownOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeScreenOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTabOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cViewOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQuitSEEOptionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DrillDownOption:
		//	CompositeScreenOption | TabOption | ViewOption | QuitSEEOption;
		public ParserRule getRule() { return rule; }

		//CompositeScreenOption | TabOption | ViewOption | QuitSEEOption
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeScreenOption
		public RuleCall getCompositeScreenOptionParserRuleCall_0() { return cCompositeScreenOptionParserRuleCall_0; }

		//TabOption
		public RuleCall getTabOptionParserRuleCall_1() { return cTabOptionParserRuleCall_1; }

		//ViewOption
		public RuleCall getViewOptionParserRuleCall_2() { return cViewOptionParserRuleCall_2; }

		//QuitSEEOption
		public RuleCall getQuitSEEOptionParserRuleCall_3() { return cQuitSEEOptionParserRuleCall_3; }
	}

	public class CompositeScreenOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeScreenOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCompositeScreenOptionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cCompositeScreenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompositeScreenSTRINGTerminalRuleCall_2_0 = (RuleCall)cCompositeScreenAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReferenceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReferenceReferenceParserRuleCall_4_1_0 = (RuleCall)cReferenceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFieldParameterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldParameterParameterParserRuleCall_5_1_0 = (RuleCall)cFieldParameterAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO: Validation Rule:
		//// 'screen' is optional when the 'trigger-field' exists 
		//// 'screen' is required when the 'trigger-field' does not exists 
		//CompositeScreenOption:
		//	"COS" {CompositeScreenOption} compositeScreen=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
		//	fieldParameter+=Parameter)* "}";
		public ParserRule getRule() { return rule; }

		//"COS" {CompositeScreenOption} compositeScreen=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
		//fieldParameter+=Parameter)* "}"
		public Group getGroup() { return cGroup; }

		//"COS"
		public Keyword getCOSKeyword_0() { return cCOSKeyword_0; }

		//{CompositeScreenOption}
		public Action getCompositeScreenOptionAction_1() { return cCompositeScreenOptionAction_1; }

		//compositeScreen=STRING?
		public Assignment getCompositeScreenAssignment_2() { return cCompositeScreenAssignment_2; }

		//STRING
		public RuleCall getCompositeScreenSTRINGTerminalRuleCall_2_0() { return cCompositeScreenSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("reference:" reference+=Reference)*
		public Group getGroup_4() { return cGroup_4; }

		//"reference:"
		public Keyword getReferenceKeyword_4_0() { return cReferenceKeyword_4_0; }

		//reference+=Reference
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }

		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_4_1_0() { return cReferenceReferenceParserRuleCall_4_1_0; }

		//("field-parameter:" fieldParameter+=Parameter)*
		public Group getGroup_5() { return cGroup_5; }

		//"field-parameter:"
		public Keyword getFieldParameterKeyword_5_0() { return cFieldParameterKeyword_5_0; }

		//fieldParameter+=Parameter
		public Assignment getFieldParameterAssignment_5_1() { return cFieldParameterAssignment_5_1; }

		//Parameter
		public RuleCall getFieldParameterParameterParserRuleCall_5_1_0() { return cFieldParameterParameterParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TabOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TabOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTABKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTabOptionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cTabNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTabNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cTabNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReferenceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReferenceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReferenceReferenceParserRuleCall_4_1_0 = (RuleCall)cReferenceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFieldParameterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldParameterParameterParserRuleCall_5_1_0 = (RuleCall)cFieldParameterAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TabOption:
		//	"TAB" {TabOption} tabName=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
		//	fieldParameter+=Parameter)* "}";
		public ParserRule getRule() { return rule; }

		//"TAB" {TabOption} tabName=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
		//fieldParameter+=Parameter)* "}"
		public Group getGroup() { return cGroup; }

		//"TAB"
		public Keyword getTABKeyword_0() { return cTABKeyword_0; }

		//{TabOption}
		public Action getTabOptionAction_1() { return cTabOptionAction_1; }

		//tabName=STRING?
		public Assignment getTabNameAssignment_2() { return cTabNameAssignment_2; }

		//STRING
		public RuleCall getTabNameSTRINGTerminalRuleCall_2_0() { return cTabNameSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("reference:" reference+=Reference)*
		public Group getGroup_4() { return cGroup_4; }

		//"reference:"
		public Keyword getReferenceKeyword_4_0() { return cReferenceKeyword_4_0; }

		//reference+=Reference
		public Assignment getReferenceAssignment_4_1() { return cReferenceAssignment_4_1; }

		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_4_1_0() { return cReferenceReferenceParserRuleCall_4_1_0; }

		//("field-parameter:" fieldParameter+=Parameter)*
		public Group getGroup_5() { return cGroup_5; }

		//"field-parameter:"
		public Keyword getFieldParameterKeyword_5_0() { return cFieldParameterKeyword_5_0; }

		//fieldParameter+=Parameter
		public Assignment getFieldParameterAssignment_5_1() { return cFieldParameterAssignment_5_1; }

		//Parameter
		public RuleCall getFieldParameterParameterParserRuleCall_5_1_0() { return cFieldParameterParameterParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ViewOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cViewOptionAction_1 = (Action)cGroup.eContents().get(1);
		
		//ViewOption:
		//	"View" {ViewOption};
		public ParserRule getRule() { return rule; }

		//"View" {ViewOption}
		public Group getGroup() { return cGroup; }

		//"View"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//{ViewOption}
		public Action getViewOptionAction_1() { return cViewOptionAction_1; }
	}

	public class QuitSEEOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuitSEEOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuitSEEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cQuitSEEOptionAction_1 = (Action)cGroup.eContents().get(1);
		
		//QuitSEEOption:
		//	"Quit-SEE" {QuitSEEOption};
		public ParserRule getRule() { return rule; }

		//"Quit-SEE" {QuitSEEOption}
		public Group getGroup() { return cGroup; }

		//"Quit-SEE"
		public Keyword getQuitSEEKeyword_0() { return cQuitSEEKeyword_0; }

		//{QuitSEEOption}
		public Action getQuitSEEOptionAction_1() { return cQuitSEEOptionAction_1; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFileSTRINGTerminalRuleCall_0_0 = (RuleCall)cFileAssignment_0.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//Reference:
		//	file=STRING field=STRING;
		public ParserRule getRule() { return rule; }

		//file=STRING field=STRING
		public Group getGroup() { return cGroup; }

		//file=STRING
		public Assignment getFileAssignment_0() { return cFileAssignment_0; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_0_0() { return cFileSTRINGTerminalRuleCall_0_0; }

		//field=STRING
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_1_0() { return cFieldSTRINGTerminalRuleCall_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_0 = (RuleCall)cFieldAssignment.eContents().get(0);
		
		//Parameter:
		//	field=STRING;
		public ParserRule getRule() { return rule; }

		//field=STRING
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_0() { return cFieldSTRINGTerminalRuleCall_0; }
	}

	public class SelectionCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldSTRINGTerminalRuleCall_0_0 = (RuleCall)cFieldAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperandCriteriaOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperandAssignment_1_0.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_2_1_0 = (RuleCall)cValuesAssignment_1_2_1.eContents().get(0);
		
		/// *)* / SelectionCriteria: / *(* / field=STRING // one of the Field of (application or virtual) referenced in fileName
		//	/ * & * / (operand=CriteriaOperator / * & * / values+=STRING ("," values+=STRING)*)?;
		public ParserRule getRule() { return rule; }

		/// *(* / field=STRING // one of the Field of (application or virtual) referenced in fileName
		/// * & * / (operand=CriteriaOperator / * & * / values+=STRING ("," values+=STRING)*)?
		public Group getGroup() { return cGroup; }

		/// *(* / field=STRING
		public Assignment getFieldAssignment_0() { return cFieldAssignment_0; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_0_0() { return cFieldSTRINGTerminalRuleCall_0_0; }

		//(operand=CriteriaOperator / * & * / values+=STRING ("," values+=STRING)*)?
		public Group getGroup_1() { return cGroup_1; }

		//operand=CriteriaOperator
		public Assignment getOperandAssignment_1_0() { return cOperandAssignment_1_0; }

		//CriteriaOperator
		public RuleCall getOperandCriteriaOperatorEnumRuleCall_1_0_0() { return cOperandCriteriaOperatorEnumRuleCall_1_0_0; }

		/// * & * / values+=STRING
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_1_0() { return cValuesSTRINGTerminalRuleCall_1_1_0; }

		//("," values+=STRING)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//values+=STRING
		public Assignment getValuesAssignment_1_2_1() { return cValuesAssignment_1_2_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_2_1_0() { return cValuesSTRINGTerminalRuleCall_1_2_1_0; }
	}

	public class SecurityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Security");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecurityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cApplicationKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cApplicationAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cApplicationSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cApplicationAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cFieldKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFieldAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cFieldAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cAbortKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAbortAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAbortBooleanParserRuleCall_2_2_1_0 = (RuleCall)cAbortAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * SMS = Security M... S... ??
		// * ---------------------------------------------------------------------------
		// * / Security:
		//	"security" "{" ("application:" application=STRING & "field:" field= // mandatory
		//	STRING & ("abort:" abort=Boolean)?) "}";
		public ParserRule getRule() { return rule; }

		//"security" "{" ("application:" application=STRING & "field:" field= // mandatory
		//STRING & ("abort:" abort=Boolean)?) "}"
		public Group getGroup() { return cGroup; }

		//"security"
		public Keyword getSecurityKeyword_0() { return cSecurityKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"application:" application=STRING & "field:" field= // mandatory
		//STRING & ("abort:" abort=Boolean)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"application:" application=STRING
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"application:"
		public Keyword getApplicationKeyword_2_0_0() { return cApplicationKeyword_2_0_0; }

		//application=STRING
		public Assignment getApplicationAssignment_2_0_1() { return cApplicationAssignment_2_0_1; }

		//STRING
		public RuleCall getApplicationSTRINGTerminalRuleCall_2_0_1_0() { return cApplicationSTRINGTerminalRuleCall_2_0_1_0; }

		//"field:" field= // mandatory
		//STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"field:"
		public Keyword getFieldKeyword_2_1_0() { return cFieldKeyword_2_1_0; }

		//field= // mandatory
		//STRING
		public Assignment getFieldAssignment_2_1_1() { return cFieldAssignment_2_1_1; }

		//// mandatory
		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_1_1_0() { return cFieldSTRINGTerminalRuleCall_2_1_1_0; }

		//("abort:" abort=Boolean)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"abort:"
		public Keyword getAbortKeyword_2_2_0() { return cAbortKeyword_2_2_0; }

		//abort=Boolean
		public Assignment getAbortAssignment_2_2_1() { return cAbortAssignment_2_2_1; }

		//Boolean
		public RuleCall getAbortBooleanParserRuleCall_2_2_1_0() { return cAbortBooleanParserRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cTypeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cTypeAssignment_2_0_1.eContents().get(0);
		private final Assignment cLabelsAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_2_1_0 = (RuleCall)cLabelsAssignment_2_1.eContents().get(0);
		private final Assignment cDimensionAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cDimensionDimensionParserRuleCall_2_2_0 = (RuleCall)cDimensionAssignment_2_2.eContents().get(0);
		private final Assignment cMarginsAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cMarginsMarginsParserRuleCall_2_3_0 = (RuleCall)cMarginsAssignment_2_3.eContents().get(0);
		private final Assignment cScaleAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cScaleScaleParserRuleCall_2_4_0 = (RuleCall)cScaleAssignment_2_4.eContents().get(0);
		private final Assignment cLegendAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final RuleCall cLegendLegendParserRuleCall_2_5_0 = (RuleCall)cLegendAssignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cUnorderedGroup_2.eContents().get(6);
		private final Keyword cXAxisKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_6_1 = (Keyword)cGroup_2_6.eContents().get(1);
		private final Assignment cXAxisAssignment_2_6_2 = (Assignment)cGroup_2_6.eContents().get(2);
		private final RuleCall cXAxisAxisParserRuleCall_2_6_2_0 = (RuleCall)cXAxisAssignment_2_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_6_3 = (Keyword)cGroup_2_6.eContents().get(3);
		private final Group cGroup_2_7 = (Group)cUnorderedGroup_2.eContents().get(7);
		private final Keyword cYAxisKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_7_1 = (Keyword)cGroup_2_7.eContents().get(1);
		private final Assignment cYAxisAssignment_2_7_2 = (Assignment)cGroup_2_7.eContents().get(2);
		private final RuleCall cYAxisAxisParserRuleCall_2_7_2_0 = (RuleCall)cYAxisAssignment_2_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_7_3 = (Keyword)cGroup_2_7.eContents().get(3);
		private final Group cGroup_2_8 = (Group)cUnorderedGroup_2.eContents().get(8);
		private final Keyword cZAxisKeyword_2_8_0 = (Keyword)cGroup_2_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_8_1 = (Keyword)cGroup_2_8.eContents().get(1);
		private final Assignment cZAxisAssignment_2_8_2 = (Assignment)cGroup_2_8.eContents().get(2);
		private final RuleCall cZAxisAxisParserRuleCall_2_8_2_0 = (RuleCall)cZAxisAssignment_2_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_8_3 = (Keyword)cGroup_2_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Graph Definition
		// * ---------------------------------------------------------------------------
		// * / Graph:
		//	"graph" "{" ("type:" type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//	STRING & labels+=Label* & dimension=Dimension & margins=Margins & scale=Scale? & legend=Legend? & "x-axis" "{"
		//	xAxis=Axis "}" & "y-axis" "{" yAxis=Axis "}" & ("z-axis" "{" zAxis=Axis "}")?) "}";
		public ParserRule getRule() { return rule; }

		//"graph" "{" ("type:" type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//STRING & labels+=Label* & dimension=Dimension & margins=Margins & scale=Scale? & legend=Legend? & "x-axis" "{"
		//xAxis=Axis "}" & "y-axis" "{" yAxis=Axis "}" & ("z-axis" "{" zAxis=Axis "}")?) "}"
		public Group getGroup() { return cGroup; }

		//"graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"type:" type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//STRING & labels+=Label* & dimension=Dimension & margins=Margins & scale=Scale? & legend=Legend? & "x-axis" "{"
		//xAxis=Axis "}" & "y-axis" "{" yAxis=Axis "}" & ("z-axis" "{" zAxis=Axis "}")?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"type:" type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//STRING
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"type:"
		public Keyword getTypeKeyword_2_0_0() { return cTypeKeyword_2_0_0; }

		//type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//STRING
		public Assignment getTypeAssignment_2_0_1() { return cTypeAssignment_2_0_1; }

		////-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_2_0_1_0() { return cTypeSTRINGTerminalRuleCall_2_0_1_0; }

		//labels+=Label*
		public Assignment getLabelsAssignment_2_1() { return cLabelsAssignment_2_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_2_1_0() { return cLabelsLabelParserRuleCall_2_1_0; }

		//dimension=Dimension
		public Assignment getDimensionAssignment_2_2() { return cDimensionAssignment_2_2; }

		//Dimension
		public RuleCall getDimensionDimensionParserRuleCall_2_2_0() { return cDimensionDimensionParserRuleCall_2_2_0; }

		//margins=Margins
		public Assignment getMarginsAssignment_2_3() { return cMarginsAssignment_2_3; }

		//Margins
		public RuleCall getMarginsMarginsParserRuleCall_2_3_0() { return cMarginsMarginsParserRuleCall_2_3_0; }

		//scale=Scale?
		public Assignment getScaleAssignment_2_4() { return cScaleAssignment_2_4; }

		//Scale
		public RuleCall getScaleScaleParserRuleCall_2_4_0() { return cScaleScaleParserRuleCall_2_4_0; }

		//legend=Legend?
		public Assignment getLegendAssignment_2_5() { return cLegendAssignment_2_5; }

		//Legend
		public RuleCall getLegendLegendParserRuleCall_2_5_0() { return cLegendLegendParserRuleCall_2_5_0; }

		//"x-axis" "{" xAxis=Axis "}"
		public Group getGroup_2_6() { return cGroup_2_6; }

		//"x-axis"
		public Keyword getXAxisKeyword_2_6_0() { return cXAxisKeyword_2_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_6_1() { return cLeftCurlyBracketKeyword_2_6_1; }

		//xAxis=Axis
		public Assignment getXAxisAssignment_2_6_2() { return cXAxisAssignment_2_6_2; }

		//Axis
		public RuleCall getXAxisAxisParserRuleCall_2_6_2_0() { return cXAxisAxisParserRuleCall_2_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_6_3() { return cRightCurlyBracketKeyword_2_6_3; }

		//"y-axis" "{" yAxis=Axis "}"
		public Group getGroup_2_7() { return cGroup_2_7; }

		//"y-axis"
		public Keyword getYAxisKeyword_2_7_0() { return cYAxisKeyword_2_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_7_1() { return cLeftCurlyBracketKeyword_2_7_1; }

		//yAxis=Axis
		public Assignment getYAxisAssignment_2_7_2() { return cYAxisAssignment_2_7_2; }

		//Axis
		public RuleCall getYAxisAxisParserRuleCall_2_7_2_0() { return cYAxisAxisParserRuleCall_2_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_7_3() { return cRightCurlyBracketKeyword_2_7_3; }

		//("z-axis" "{" zAxis=Axis "}")?
		public Group getGroup_2_8() { return cGroup_2_8; }

		//"z-axis"
		public Keyword getZAxisKeyword_2_8_0() { return cZAxisKeyword_2_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_8_1() { return cLeftCurlyBracketKeyword_2_8_1; }

		//zAxis=Axis
		public Assignment getZAxisAssignment_2_8_2() { return cZAxisAssignment_2_8_2; }

		//Axis
		public RuleCall getZAxisAxisParserRuleCall_2_8_2_0() { return cZAxisAxisParserRuleCall_2_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_8_3() { return cRightCurlyBracketKeyword_2_8_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axis");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cFieldKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFieldAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cFieldAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cDisplayLegendKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDisplayLegendAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDisplayLegendBooleanParserRuleCall_1_1_0 = (RuleCall)cDisplayLegendAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cShowGridKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cShowGridAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cShowGridBooleanParserRuleCall_2_1_0 = (RuleCall)cShowGridAssignment_2_1.eContents().get(0);
		
		//Axis:
		//	"field:" field=STRING & ("display-legend:" displayLegend=Boolean)? & ("show-grid:" showGrid=Boolean)?;
		public ParserRule getRule() { return rule; }

		//"field:" field=STRING & ("display-legend:" displayLegend=Boolean)? & ("show-grid:" showGrid=Boolean)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"field:" field=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"field:"
		public Keyword getFieldKeyword_0_0() { return cFieldKeyword_0_0; }

		//field=STRING
		public Assignment getFieldAssignment_0_1() { return cFieldAssignment_0_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_0_1_0() { return cFieldSTRINGTerminalRuleCall_0_1_0; }

		//("display-legend:" displayLegend=Boolean)?
		public Group getGroup_1() { return cGroup_1; }

		//"display-legend:"
		public Keyword getDisplayLegendKeyword_1_0() { return cDisplayLegendKeyword_1_0; }

		//displayLegend=Boolean
		public Assignment getDisplayLegendAssignment_1_1() { return cDisplayLegendAssignment_1_1; }

		//Boolean
		public RuleCall getDisplayLegendBooleanParserRuleCall_1_1_0() { return cDisplayLegendBooleanParserRuleCall_1_1_0; }

		//("show-grid:" showGrid=Boolean)?
		public Group getGroup_2() { return cGroup_2; }

		//"show-grid:"
		public Keyword getShowGridKeyword_2_0() { return cShowGridKeyword_2_0; }

		//showGrid=Boolean
		public Assignment getShowGridAssignment_2_1() { return cShowGridAssignment_2_1; }

		//Boolean
		public RuleCall getShowGridBooleanParserRuleCall_2_1_0() { return cShowGridBooleanParserRuleCall_2_1_0; }
	}

	public class DimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDimensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cWidthKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cWidthAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_2_0_1_0 = (RuleCall)cWidthAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cHeightKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cHeightAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_2_1_1_0 = (RuleCall)cHeightAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cOrientationKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cOrientationAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cOrientationOrientationEnumRuleCall_2_2_1_0 = (RuleCall)cOrientationAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dimension:
		//	"dimension" "{" ("width:" width=INT & "height:" height=INT & ("orientation:" orientation=Orientation)?) "}";
		public ParserRule getRule() { return rule; }

		//"dimension" "{" ("width:" width=INT & "height:" height=INT & ("orientation:" orientation=Orientation)?) "}"
		public Group getGroup() { return cGroup; }

		//"dimension"
		public Keyword getDimensionKeyword_0() { return cDimensionKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"width:" width=INT & "height:" height=INT & ("orientation:" orientation=Orientation)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"width:" width=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"width:"
		public Keyword getWidthKeyword_2_0_0() { return cWidthKeyword_2_0_0; }

		//width=INT
		public Assignment getWidthAssignment_2_0_1() { return cWidthAssignment_2_0_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0_1_0() { return cWidthINTTerminalRuleCall_2_0_1_0; }

		//"height:" height=INT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"height:"
		public Keyword getHeightKeyword_2_1_0() { return cHeightKeyword_2_1_0; }

		//height=INT
		public Assignment getHeightAssignment_2_1_1() { return cHeightAssignment_2_1_1; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_2_1_1_0() { return cHeightINTTerminalRuleCall_2_1_1_0; }

		//("orientation:" orientation=Orientation)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"orientation:"
		public Keyword getOrientationKeyword_2_2_0() { return cOrientationKeyword_2_2_0; }

		//orientation=Orientation
		public Assignment getOrientationAssignment_2_2_1() { return cOrientationAssignment_2_2_1; }

		//Orientation
		public RuleCall getOrientationOrientationEnumRuleCall_2_2_1_0() { return cOrientationOrientationEnumRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cDescriptionTranslationsParserRuleCall_2_0_0 = (RuleCall)cDescriptionAssignment_2_0.eContents().get(0);
		private final Assignment cPositionAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cPositionPositionParserRuleCall_2_1_0 = (RuleCall)cPositionAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Label:
		//	"label" "{" (description=Translations & position=Position) "}";
		public ParserRule getRule() { return rule; }

		//"label" "{" (description=Translations & position=Position) "}"
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//description=Translations & position=Position
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//description=Translations
		public Assignment getDescriptionAssignment_2_0() { return cDescriptionAssignment_2_0; }

		//Translations
		public RuleCall getDescriptionTranslationsParserRuleCall_2_0_0() { return cDescriptionTranslationsParserRuleCall_2_0_0; }

		//position=Position
		public Assignment getPositionAssignment_2_1() { return cPositionAssignment_2_1; }

		//Position
		public RuleCall getPositionPositionParserRuleCall_2_1_0() { return cPositionPositionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Position");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cXKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cXAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_0_1_0 = (RuleCall)cXAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cYKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cYAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cYINTTerminalRuleCall_1_1_0 = (RuleCall)cYAssignment_1_1.eContents().get(0);
		
		//Position:
		//	"x:" x=INT & "y:" y=INT;
		public ParserRule getRule() { return rule; }

		//"x:" x=INT & "y:" y=INT
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"x:" x=INT
		public Group getGroup_0() { return cGroup_0; }

		//"x:"
		public Keyword getXKeyword_0_0() { return cXKeyword_0_0; }

		//x=INT
		public Assignment getXAssignment_0_1() { return cXAssignment_0_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_0_1_0() { return cXINTTerminalRuleCall_0_1_0; }

		//"y:" y=INT
		public Group getGroup_1() { return cGroup_1; }

		//"y:"
		public Keyword getYKeyword_1_0() { return cYKeyword_1_0; }

		//y=INT
		public Assignment getYAssignment_1_1() { return cYAssignment_1_1; }

		//INT
		public RuleCall getYINTTerminalRuleCall_1_1_0() { return cYINTTerminalRuleCall_1_1_0; }
	}

	public class LegendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Legend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLegendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cXKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cXAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_2_0_1_0 = (RuleCall)cXAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cYKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cYAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cYINTTerminalRuleCall_2_1_1_0 = (RuleCall)cYAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Legend:
		//	"legend" "{" ("x:" x=INT & "y:" y=INT) "}";
		public ParserRule getRule() { return rule; }

		//"legend" "{" ("x:" x=INT & "y:" y=INT) "}"
		public Group getGroup() { return cGroup; }

		//"legend"
		public Keyword getLegendKeyword_0() { return cLegendKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"x:" x=INT & "y:" y=INT
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"x:" x=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"x:"
		public Keyword getXKeyword_2_0_0() { return cXKeyword_2_0_0; }

		//x=INT
		public Assignment getXAssignment_2_0_1() { return cXAssignment_2_0_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0_1_0() { return cXINTTerminalRuleCall_2_0_1_0; }

		//"y:" y=INT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"y:"
		public Keyword getYKeyword_2_1_0() { return cYKeyword_2_1_0; }

		//y=INT
		public Assignment getYAssignment_2_1_1() { return cYAssignment_2_1_1; }

		//INT
		public RuleCall getYINTTerminalRuleCall_2_1_1_0() { return cYINTTerminalRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MarginsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Margins");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMarginsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cTopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTopAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTopINTTerminalRuleCall_2_0_1_0 = (RuleCall)cTopAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cBottomKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cBottomAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBottomINTTerminalRuleCall_2_1_1_0 = (RuleCall)cBottomAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cLeftKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cLeftINTTerminalRuleCall_2_2_1_0 = (RuleCall)cLeftAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cRightKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cRightAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cRightINTTerminalRuleCall_2_3_1_0 = (RuleCall)cRightAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Margins:
		//	"margins" "{" ("top:" top=INT & "bottom:" bottom=INT & "left:" left=INT & "right:" right=INT) "}";
		public ParserRule getRule() { return rule; }

		//"margins" "{" ("top:" top=INT & "bottom:" bottom=INT & "left:" left=INT & "right:" right=INT) "}"
		public Group getGroup() { return cGroup; }

		//"margins"
		public Keyword getMarginsKeyword_0() { return cMarginsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"top:" top=INT & "bottom:" bottom=INT & "left:" left=INT & "right:" right=INT
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"top:" top=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"top:"
		public Keyword getTopKeyword_2_0_0() { return cTopKeyword_2_0_0; }

		//top=INT
		public Assignment getTopAssignment_2_0_1() { return cTopAssignment_2_0_1; }

		//INT
		public RuleCall getTopINTTerminalRuleCall_2_0_1_0() { return cTopINTTerminalRuleCall_2_0_1_0; }

		//"bottom:" bottom=INT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"bottom:"
		public Keyword getBottomKeyword_2_1_0() { return cBottomKeyword_2_1_0; }

		//bottom=INT
		public Assignment getBottomAssignment_2_1_1() { return cBottomAssignment_2_1_1; }

		//INT
		public RuleCall getBottomINTTerminalRuleCall_2_1_1_0() { return cBottomINTTerminalRuleCall_2_1_1_0; }

		//"left:" left=INT
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"left:"
		public Keyword getLeftKeyword_2_2_0() { return cLeftKeyword_2_2_0; }

		//left=INT
		public Assignment getLeftAssignment_2_2_1() { return cLeftAssignment_2_2_1; }

		//INT
		public RuleCall getLeftINTTerminalRuleCall_2_2_1_0() { return cLeftINTTerminalRuleCall_2_2_1_0; }

		//"right:" right=INT
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"right:"
		public Keyword getRightKeyword_2_3_0() { return cRightKeyword_2_3_0; }

		//right=INT
		public Assignment getRightAssignment_2_3_1() { return cRightAssignment_2_3_1; }

		//INT
		public RuleCall getRightINTTerminalRuleCall_2_3_1_0() { return cRightINTTerminalRuleCall_2_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ScaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cXKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cXAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cXINTEGER_OBJECTParserRuleCall_2_0_1_0 = (RuleCall)cXAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cYKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cYAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cYINTEGER_OBJECTParserRuleCall_2_1_1_0 = (RuleCall)cYAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Scale:
		//	"scale" "{" (("x:" x=INTEGER_OBJECT)? & ("y:" y=INTEGER_OBJECT)?) "}";
		public ParserRule getRule() { return rule; }

		//"scale" "{" (("x:" x=INTEGER_OBJECT)? & ("y:" y=INTEGER_OBJECT)?) "}"
		public Group getGroup() { return cGroup; }

		//"scale"
		public Keyword getScaleKeyword_0() { return cScaleKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("x:" x=INTEGER_OBJECT)? & ("y:" y=INTEGER_OBJECT)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("x:" x=INTEGER_OBJECT)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"x:"
		public Keyword getXKeyword_2_0_0() { return cXKeyword_2_0_0; }

		//x=INTEGER_OBJECT
		public Assignment getXAssignment_2_0_1() { return cXAssignment_2_0_1; }

		//INTEGER_OBJECT
		public RuleCall getXINTEGER_OBJECTParserRuleCall_2_0_1_0() { return cXINTEGER_OBJECTParserRuleCall_2_0_1_0; }

		//("y:" y=INTEGER_OBJECT)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"y:"
		public Keyword getYKeyword_2_1_0() { return cYKeyword_2_1_0; }

		//y=INTEGER_OBJECT
		public Assignment getYAssignment_2_1_1() { return cYAssignment_2_1_1; }

		//INTEGER_OBJECT
		public RuleCall getYINTEGER_OBJECTParserRuleCall_2_1_1_0() { return cYINTEGER_OBJECTParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Routine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJBCRoutineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJavaRoutineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Routines
		// * ---------------------------------------------------------------------------
		// * / Routine:
		//	JBCRoutine | JavaRoutine;
		public ParserRule getRule() { return rule; }

		//JBCRoutine | JavaRoutine
		public Alternatives getAlternatives() { return cAlternatives; }

		//JBCRoutine
		public RuleCall getJBCRoutineParserRuleCall_0() { return cJBCRoutineParserRuleCall_0; }

		//JavaRoutine
		public RuleCall getJavaRoutineParserRuleCall_1() { return cJavaRoutineParserRuleCall_1; }
	}

	public class JBCRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JBCRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJBCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JBCRoutine:
		//	"jBC:" name=STRING;
		public ParserRule getRule() { return rule; }

		//"jBC:" name=STRING
		public Group getGroup() { return cGroup; }

		//"jBC:"
		public Keyword getJBCKeyword_0() { return cJBCKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class JavaRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJavaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JavaRoutine:
		//	"java:" name=STRING;
		public ParserRule getRule() { return rule; }

		//"java:" name=STRING
		public Group getGroup() { return cGroup; }

		//"java:"
		public Keyword getJavaKeyword_0() { return cJavaKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class FixedSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedSelectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFixedSelectionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOperandAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOperandSelectionOperatorEnumRuleCall_4_0_0 = (RuleCall)cOperandAssignment_4_0.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cValuesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cValuesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Selections
		// * ---------------------------------------------------------------------------
		// * / FixedSelection:
		//	"fixed-selection" {FixedSelection} field=STRING "{" // one of the Field of the Class (application or virtual) referenced in fileName
		//	(operand=SelectionOperator values+=STRING ("," values+=STRING)*)? "}";
		public ParserRule getRule() { return rule; }

		//"fixed-selection" {FixedSelection} field=STRING "{" // one of the Field of the Class (application or virtual) referenced in fileName
		//(operand=SelectionOperator values+=STRING ("," values+=STRING)*)? "}"
		public Group getGroup() { return cGroup; }

		//"fixed-selection"
		public Keyword getFixedSelectionKeyword_0() { return cFixedSelectionKeyword_0; }

		//{FixedSelection}
		public Action getFixedSelectionAction_1() { return cFixedSelectionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(operand=SelectionOperator values+=STRING ("," values+=STRING)*)?
		public Group getGroup_4() { return cGroup_4; }

		//operand=SelectionOperator
		public Assignment getOperandAssignment_4_0() { return cOperandAssignment_4_0; }

		//SelectionOperator
		public RuleCall getOperandSelectionOperatorEnumRuleCall_4_0_0() { return cOperandSelectionOperatorEnumRuleCall_4_0_0; }

		//values+=STRING
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_1_0() { return cValuesSTRINGTerminalRuleCall_4_1_0; }

		//("," values+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//values+=STRING
		public Assignment getValuesAssignment_4_2_1() { return cValuesAssignment_4_2_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_4_2_1_0() { return cValuesSTRINGTerminalRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FixedSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedSortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderSortOrderEnumRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		
		//FixedSort:
		//	"fixed-sort:" field=STRING // one of the Field of the Class (application or virtual) referenced in fileName
		//	order=SortOrder;
		public ParserRule getRule() { return rule; }

		//"fixed-sort:" field=STRING // one of the Field of the Class (application or virtual) referenced in fileName
		//order=SortOrder
		public Group getGroup() { return cGroup; }

		//"fixed-sort:"
		public Keyword getFixedSortKeyword_0() { return cFixedSortKeyword_0; }

		//field=STRING
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_1_0() { return cFieldSTRINGTerminalRuleCall_1_0; }

		//// one of the Field of the Class (application or virtual) referenced in fileName
		//order=SortOrder
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }

		//SortOrder
		public RuleCall getOrderSortOrderEnumRuleCall_2_0() { return cOrderSortOrderEnumRuleCall_2_0; }
	}

	public class SelectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectionSelectionParserRuleCall_0_0 = (RuleCall)cSelectionAssignment_0.eContents().get(0);
		private final Assignment cSelectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectionSelectionParserRuleCall_1_0 = (RuleCall)cSelectionAssignment_1.eContents().get(0);
		
		//// Original goal was simplified by decision in "RE: Enquiry" on 2012-11-28:
		//// Just flat lists of Selection, not arbitrary trees,
		//// as it's too complicated for T24 jBC to transform
		//// this into leftBracket / rightBracket...
		//// 
		////SelectionExpression returns Expression:
		////	SelectionPrimary ({SelectionExpression.left=current} operator=AndOr right=SelectionPrimary)*
		////;
		////
		////SelectionPrimary returns Expression:
		////	Selection | '(' SelectionExpression ')'
		////;
		//SelectionExpression:
		//	selection+=Selection selection+=Selection*;
		public ParserRule getRule() { return rule; }

		//selection+=Selection selection+=Selection*
		public Group getGroup() { return cGroup; }

		//selection+=Selection
		public Assignment getSelectionAssignment_0() { return cSelectionAssignment_0; }

		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_0_0() { return cSelectionSelectionParserRuleCall_0_0; }

		//selection+=Selection*
		public Assignment getSelectionAssignment_1() { return cSelectionAssignment_1; }

		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_1_0() { return cSelectionSelectionParserRuleCall_1_0; }
	}

	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSelectionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cMandatoryKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cMandatoryAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cMandatoryBooleanObjectParserRuleCall_4_0_1_0 = (RuleCall)cMandatoryAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cPopupDropdownKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPopupDropDownAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPopupDropDownBooleanObjectParserRuleCall_4_1_1_0 = (RuleCall)cPopupDropDownAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cLabelKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cLabelAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cLabelTranslationsParserRuleCall_4_2_2_0 = (RuleCall)cLabelAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2_3 = (Keyword)cGroup_4_2.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOperandsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperandsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperandsSelectionOperatorEnumRuleCall_5_1_0 = (RuleCall)cOperandsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOperandsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOperandsSelectionOperatorEnumRuleCall_5_2_1_0 = (RuleCall)cOperandsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperatorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperatorAndOrEnumRuleCall_7_0 = (RuleCall)cOperatorAssignment_7.eContents().get(0);
		
		//Selection:
		//	"field" {Selection} field=STRING "{" (("mandatory:" mandatory=BooleanObject)? & ("popup-dropdown:"
		//	popupDropDown=BooleanObject)? & ("label" "{" label=Translations "}")?) ("operands:" operands+=SelectionOperator (","
		//	operands+=SelectionOperator)*)? "}" operator=AndOr;
		public ParserRule getRule() { return rule; }

		//"field" {Selection} field=STRING "{" (("mandatory:" mandatory=BooleanObject)? & ("popup-dropdown:"
		//popupDropDown=BooleanObject)? & ("label" "{" label=Translations "}")?) ("operands:" operands+=SelectionOperator (","
		//operands+=SelectionOperator)*)? "}" operator=AndOr
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//{Selection}
		public Action getSelectionAction_1() { return cSelectionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("mandatory:" mandatory=BooleanObject)? & ("popup-dropdown:" popupDropDown=BooleanObject)? & ("label" "{"
		//label=Translations "}")?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("mandatory:" mandatory=BooleanObject)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"mandatory:"
		public Keyword getMandatoryKeyword_4_0_0() { return cMandatoryKeyword_4_0_0; }

		//mandatory=BooleanObject
		public Assignment getMandatoryAssignment_4_0_1() { return cMandatoryAssignment_4_0_1; }

		//BooleanObject
		public RuleCall getMandatoryBooleanObjectParserRuleCall_4_0_1_0() { return cMandatoryBooleanObjectParserRuleCall_4_0_1_0; }

		//("popup-dropdown:" popupDropDown=BooleanObject)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"popup-dropdown:"
		public Keyword getPopupDropdownKeyword_4_1_0() { return cPopupDropdownKeyword_4_1_0; }

		//popupDropDown=BooleanObject
		public Assignment getPopupDropDownAssignment_4_1_1() { return cPopupDropDownAssignment_4_1_1; }

		//BooleanObject
		public RuleCall getPopupDropDownBooleanObjectParserRuleCall_4_1_1_0() { return cPopupDropDownBooleanObjectParserRuleCall_4_1_1_0; }

		//("label" "{" label=Translations "}")?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"label"
		public Keyword getLabelKeyword_4_2_0() { return cLabelKeyword_4_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_2_1() { return cLeftCurlyBracketKeyword_4_2_1; }

		//label=Translations
		public Assignment getLabelAssignment_4_2_2() { return cLabelAssignment_4_2_2; }

		//Translations
		public RuleCall getLabelTranslationsParserRuleCall_4_2_2_0() { return cLabelTranslationsParserRuleCall_4_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2_3() { return cRightCurlyBracketKeyword_4_2_3; }

		//("operands:" operands+=SelectionOperator ("," operands+=SelectionOperator)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"operands:"
		public Keyword getOperandsKeyword_5_0() { return cOperandsKeyword_5_0; }

		//operands+=SelectionOperator
		public Assignment getOperandsAssignment_5_1() { return cOperandsAssignment_5_1; }

		//SelectionOperator
		public RuleCall getOperandsSelectionOperatorEnumRuleCall_5_1_0() { return cOperandsSelectionOperatorEnumRuleCall_5_1_0; }

		//("," operands+=SelectionOperator)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//operands+=SelectionOperator
		public Assignment getOperandsAssignment_5_2_1() { return cOperandsAssignment_5_2_1; }

		//SelectionOperator
		public RuleCall getOperandsSelectionOperatorEnumRuleCall_5_2_1_0() { return cOperandsSelectionOperatorEnumRuleCall_5_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//operator=AndOr
		public Assignment getOperatorAssignment_7() { return cOperatorAssignment_7; }

		//AndOr
		public RuleCall getOperatorAndOrEnumRuleCall_7_0() { return cOperatorAndOrEnumRuleCall_7_0; }
	}

	public class FileVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesFileVersionOptionEnumRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesFileVersionOptionEnumRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//FileVersion:
		//	values+=FileVersionOption ("," values+=FileVersionOption)*;
		public ParserRule getRule() { return rule; }

		//values+=FileVersionOption ("," values+=FileVersionOption)*
		public Group getGroup() { return cGroup; }

		//values+=FileVersionOption
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//FileVersionOption
		public RuleCall getValuesFileVersionOptionEnumRuleCall_0_0() { return cValuesFileVersionOptionEnumRuleCall_0_0; }

		//("," values+=FileVersionOption)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=FileVersionOption
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//FileVersionOption
		public RuleCall getValuesFileVersionOptionEnumRuleCall_1_1_0() { return cValuesFileVersionOptionEnumRuleCall_1_1_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBreakOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalcOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLabelOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDecisionOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDescriptorOperationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFieldOperationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSelectionOperationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSystemOperationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTotalOperationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * OPERATIONS
		// * ---------------------------------------------------------------------------
		// * / Operation:
		//	BreakOperation | CalcOperation | ConstantOperation | LabelOperation | DateOperation | DecisionOperation |
		//	DescriptorOperation | FieldOperation | SelectionOperation | SystemOperation | TotalOperation;
		public ParserRule getRule() { return rule; }

		//BreakOperation | CalcOperation | ConstantOperation | LabelOperation | DateOperation | DecisionOperation |
		//DescriptorOperation | FieldOperation | SelectionOperation | SystemOperation | TotalOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//BreakOperation
		public RuleCall getBreakOperationParserRuleCall_0() { return cBreakOperationParserRuleCall_0; }

		//CalcOperation
		public RuleCall getCalcOperationParserRuleCall_1() { return cCalcOperationParserRuleCall_1; }

		//ConstantOperation
		public RuleCall getConstantOperationParserRuleCall_2() { return cConstantOperationParserRuleCall_2; }

		//LabelOperation
		public RuleCall getLabelOperationParserRuleCall_3() { return cLabelOperationParserRuleCall_3; }

		//DateOperation
		public RuleCall getDateOperationParserRuleCall_4() { return cDateOperationParserRuleCall_4; }

		//DecisionOperation
		public RuleCall getDecisionOperationParserRuleCall_5() { return cDecisionOperationParserRuleCall_5; }

		//DescriptorOperation
		public RuleCall getDescriptorOperationParserRuleCall_6() { return cDescriptorOperationParserRuleCall_6; }

		//FieldOperation
		public RuleCall getFieldOperationParserRuleCall_7() { return cFieldOperationParserRuleCall_7; }

		//SelectionOperation
		public RuleCall getSelectionOperationParserRuleCall_8() { return cSelectionOperationParserRuleCall_8; }

		//SystemOperation
		public RuleCall getSystemOperationParserRuleCall_9() { return cSystemOperationParserRuleCall_9; }

		//TotalOperation
		public RuleCall getTotalOperationParserRuleCall_10() { return cTotalOperationParserRuleCall_10; }
	}

	public class BreakOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBreakOnChangeOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBreakLineOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BreakOperation:
		//	BreakOnChangeOperation | BreakLineOperation;
		public ParserRule getRule() { return rule; }

		//BreakOnChangeOperation | BreakLineOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//BreakOnChangeOperation
		public RuleCall getBreakOnChangeOperationParserRuleCall_0() { return cBreakOnChangeOperationParserRuleCall_0; }

		//BreakLineOperation
		public RuleCall getBreakLineOperationParserRuleCall_1() { return cBreakLineOperationParserRuleCall_1; }
	}

	public class BreakOnChangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakOnChangeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBreakOnChangeOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//BreakOnChangeOperation:
		//	"break-change" {BreakOnChangeOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"break-change" {BreakOnChangeOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"break-change"
		public Keyword getBreakChangeKeyword_0() { return cBreakChangeKeyword_0; }

		//{BreakOnChangeOperation}
		public Action getBreakOnChangeOperationAction_1() { return cBreakOnChangeOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class BreakLineOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakLineOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBreakLineOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cLineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLineINTTerminalRuleCall_2_0 = (RuleCall)cLineAssignment_2.eContents().get(0);
		
		//BreakLineOperation:
		//	"break-line" {BreakLineOperation} line=INT;
		public ParserRule getRule() { return rule; }

		//"break-line" {BreakLineOperation} line=INT
		public Group getGroup() { return cGroup; }

		//"break-line"
		public Keyword getBreakLineKeyword_0() { return cBreakLineKeyword_0; }

		//{BreakLineOperation}
		public Action getBreakLineOperationAction_1() { return cBreakLineOperationAction_1; }

		//line=INT
		public Assignment getLineAssignment_2() { return cLineAssignment_2; }

		//INT
		public RuleCall getLineINTTerminalRuleCall_2_0() { return cLineINTTerminalRuleCall_2_0; }
	}

	public class CalcOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CalcOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCalcOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cOperatorAlternatives_3_0_0 = (Alternatives)cOperatorAssignment_3_0.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_3_0_0_0 = (Keyword)cOperatorAlternatives_3_0_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_3_0_0_1 = (Keyword)cOperatorAlternatives_3_0_0.eContents().get(1);
		private final Keyword cOperatorSolidusKeyword_3_0_0_2 = (Keyword)cOperatorAlternatives_3_0_0.eContents().get(2);
		private final Keyword cOperatorAsteriskKeyword_3_0_0_3 = (Keyword)cOperatorAlternatives_3_0_0.eContents().get(3);
		private final Keyword cOperatorColonKeyword_3_0_0_4 = (Keyword)cOperatorAlternatives_3_0_0.eContents().get(4);
		private final Assignment cFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFieldAssignment_3_1.eContents().get(0);
		
		//CalcOperation:
		//	"calc" {CalcOperation} field+=STRING (operator+=("+" | "-" | "/" | "*" | ":") field+=STRING)*;
		public ParserRule getRule() { return rule; }

		//"calc" {CalcOperation} field+=STRING (operator+=("+" | "-" | "/" | "*" | ":") field+=STRING)*
		public Group getGroup() { return cGroup; }

		//"calc"
		public Keyword getCalcKeyword_0() { return cCalcKeyword_0; }

		//{CalcOperation}
		public Action getCalcOperationAction_1() { return cCalcOperationAction_1; }

		//field+=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }

		//(operator+=("+" | "-" | "/" | "*" | ":") field+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//operator+=("+" | "-" | "/" | "*" | ":")
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }

		//"+" | "-" | "/" | "*" | ":"
		public Alternatives getOperatorAlternatives_3_0_0() { return cOperatorAlternatives_3_0_0; }

		//"+"
		public Keyword getOperatorPlusSignKeyword_3_0_0_0() { return cOperatorPlusSignKeyword_3_0_0_0; }

		//"-"
		public Keyword getOperatorHyphenMinusKeyword_3_0_0_1() { return cOperatorHyphenMinusKeyword_3_0_0_1; }

		//"/"
		public Keyword getOperatorSolidusKeyword_3_0_0_2() { return cOperatorSolidusKeyword_3_0_0_2; }

		//"*"
		public Keyword getOperatorAsteriskKeyword_3_0_0_3() { return cOperatorAsteriskKeyword_3_0_0_3; }

		//":"
		public Keyword getOperatorColonKeyword_3_0_0_4() { return cOperatorColonKeyword_3_0_0_4; }

		//field+=STRING
		public Assignment getFieldAssignment_3_1() { return cFieldAssignment_3_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_3_1_0() { return cFieldSTRINGTerminalRuleCall_3_1_0; }
	}

	public class ConstantOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstantOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ConstantOperation:
		//	"constant" {ConstantOperation} value=STRING;
		public ParserRule getRule() { return rule; }

		//"constant" {ConstantOperation} value=STRING
		public Group getGroup() { return cGroup; }

		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//{ConstantOperation}
		public Action getConstantOperationAction_1() { return cConstantOperationAction_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class LabelOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLabelOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelTranslationsParserRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LabelOperation:
		//	"label" {LabelOperation} "{" label=Translations "}";
		public ParserRule getRule() { return rule; }

		//"label" {LabelOperation} "{" label=Translations "}"
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//{LabelOperation}
		public Action getLabelOperationAction_1() { return cLabelOperationAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//label=Translations
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//Translations
		public RuleCall getLabelTranslationsParserRuleCall_3_0() { return cLabelTranslationsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTodayOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLWDOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNWDOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DateOperation:
		//	TodayOperation | LWDOperation | NWDOperation;
		public ParserRule getRule() { return rule; }

		//TodayOperation | LWDOperation | NWDOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//TodayOperation
		public RuleCall getTodayOperationParserRuleCall_0() { return cTodayOperationParserRuleCall_0; }

		//LWDOperation
		public RuleCall getLWDOperationParserRuleCall_1() { return cLWDOperationParserRuleCall_1; }

		//NWDOperation
		public RuleCall getNWDOperationParserRuleCall_2() { return cNWDOperationParserRuleCall_2; }
	}

	public class DecisionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecisionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftFieldSTRINGTerminalRuleCall_1_0 = (RuleCall)cLeftFieldAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandDecisionOperandEnumRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		private final Assignment cRightFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightFieldSTRINGTerminalRuleCall_3_0 = (RuleCall)cRightFieldAssignment_3.eContents().get(0);
		private final Keyword cProcessKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFirstFieldAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFirstFieldSTRINGTerminalRuleCall_5_0 = (RuleCall)cFirstFieldAssignment_5.eContents().get(0);
		private final Assignment cSecondFieldAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSecondFieldSTRINGTerminalRuleCall_6_0 = (RuleCall)cSecondFieldAssignment_6.eContents().get(0);
		
		//DecisionOperation:
		//	"if" leftField=STRING operand=DecisionOperand rightField=STRING "process" firstField=STRING secondField=STRING?;
		public ParserRule getRule() { return rule; }

		//"if" leftField=STRING operand=DecisionOperand rightField=STRING "process" firstField=STRING secondField=STRING?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//leftField=STRING
		public Assignment getLeftFieldAssignment_1() { return cLeftFieldAssignment_1; }

		//STRING
		public RuleCall getLeftFieldSTRINGTerminalRuleCall_1_0() { return cLeftFieldSTRINGTerminalRuleCall_1_0; }

		//operand=DecisionOperand
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }

		//DecisionOperand
		public RuleCall getOperandDecisionOperandEnumRuleCall_2_0() { return cOperandDecisionOperandEnumRuleCall_2_0; }

		//rightField=STRING
		public Assignment getRightFieldAssignment_3() { return cRightFieldAssignment_3; }

		//STRING
		public RuleCall getRightFieldSTRINGTerminalRuleCall_3_0() { return cRightFieldSTRINGTerminalRuleCall_3_0; }

		//"process"
		public Keyword getProcessKeyword_4() { return cProcessKeyword_4; }

		//firstField=STRING
		public Assignment getFirstFieldAssignment_5() { return cFirstFieldAssignment_5; }

		//STRING
		public RuleCall getFirstFieldSTRINGTerminalRuleCall_5_0() { return cFirstFieldSTRINGTerminalRuleCall_5_0; }

		//secondField=STRING?
		public Assignment getSecondFieldAssignment_6() { return cSecondFieldAssignment_6; }

		//STRING
		public RuleCall getSecondFieldSTRINGTerminalRuleCall_6_0() { return cSecondFieldSTRINGTerminalRuleCall_6_0; }
	}

	public class DescriptorOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptorOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIDescKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDescriptorOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//DescriptorOperation:
		//	"i-desc" {DescriptorOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"i-desc" {DescriptorOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"i-desc"
		public Keyword getIDescKeyword_0() { return cIDescKeyword_0; }

		//{DescriptorOperation}
		public Action getDescriptorOperationAction_1() { return cDescriptorOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class TodayOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TodayOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTodayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTodayOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//TodayOperation:
		//	"today" {TodayOperation};
		public ParserRule getRule() { return rule; }

		//"today" {TodayOperation}
		public Group getGroup() { return cGroup; }

		//"today"
		public Keyword getTodayKeyword_0() { return cTodayKeyword_0; }

		//{TodayOperation}
		public Action getTodayOperationAction_1() { return cTodayOperationAction_1; }
	}

	public class LWDOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LWDOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLastWorkingDayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLWDOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//LWDOperation:
		//	"last-working-day" {LWDOperation};
		public ParserRule getRule() { return rule; }

		//"last-working-day" {LWDOperation}
		public Group getGroup() { return cGroup; }

		//"last-working-day"
		public Keyword getLastWorkingDayKeyword_0() { return cLastWorkingDayKeyword_0; }

		//{LWDOperation}
		public Action getLWDOperationAction_1() { return cLWDOperationAction_1; }
	}

	public class NWDOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NWDOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextWorkingDayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNWDOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//NWDOperation:
		//	"next-working-day" {NWDOperation};
		public ParserRule getRule() { return rule; }

		//"next-working-day" {NWDOperation}
		public Group getGroup() { return cGroup; }

		//"next-working-day"
		public Keyword getNextWorkingDayKeyword_0() { return cNextWorkingDayKeyword_0; }

		//{NWDOperation}
		public Action getNWDOperationAction_1() { return cNWDOperationAction_1; }
	}

	public class FieldOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationFieldNameOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldExtractOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldNumberOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FieldOperation:
		//	ApplicationFieldNameOperation | FieldExtractOperation | FieldNumberOperation;
		public ParserRule getRule() { return rule; }

		//ApplicationFieldNameOperation | FieldExtractOperation | FieldNumberOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//ApplicationFieldNameOperation
		public RuleCall getApplicationFieldNameOperationParserRuleCall_0() { return cApplicationFieldNameOperationParserRuleCall_0; }

		//FieldExtractOperation
		public RuleCall getFieldExtractOperationParserRuleCall_1() { return cFieldExtractOperationParserRuleCall_1; }

		//FieldNumberOperation
		public RuleCall getFieldNumberOperationParserRuleCall_2() { return cFieldNumberOperationParserRuleCall_2; }
	}

	public class ApplicationFieldNameOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ApplicationFieldNameOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationFieldNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cApplicationFieldNameOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//ApplicationFieldNameOperation:
		//	"application-field-name" {ApplicationFieldNameOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"application-field-name" {ApplicationFieldNameOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"application-field-name"
		public Keyword getApplicationFieldNameKeyword_0() { return cApplicationFieldNameKeyword_0; }

		//{ApplicationFieldNameOperation}
		public Action getApplicationFieldNameOperationAction_1() { return cApplicationFieldNameOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class FieldNumberOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldNumberOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldNumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFieldNumberOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		
		//// TODO change ID to a reference to an Enquiry field
		//// enquiry's field
		//FieldNumberOperation:
		//	"field-number" {FieldNumberOperation} number=INT;
		public ParserRule getRule() { return rule; }

		//"field-number" {FieldNumberOperation} number=INT
		public Group getGroup() { return cGroup; }

		//"field-number"
		public Keyword getFieldNumberKeyword_0() { return cFieldNumberKeyword_0; }

		//{FieldNumberOperation}
		public Action getFieldNumberOperationAction_1() { return cFieldNumberOperationAction_1; }

		//number=INT
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_0() { return cNumberINTTerminalRuleCall_2_0; }
	}

	public class FieldExtractOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldExtractOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFieldExtractOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//FieldExtractOperation:
		//	"field-extract" {FieldExtractOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"field-extract" {FieldExtractOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"field-extract"
		public Keyword getFieldExtractKeyword_0() { return cFieldExtractKeyword_0; }

		//{FieldExtractOperation}
		public Action getFieldExtractOperationAction_1() { return cFieldExtractOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class SelectionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSelectionOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//// TODO change ID to a reference to an Enquiry field
		//SelectionOperation:
		//	"selection" {SelectionOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"selection" {SelectionOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"selection"
		public Keyword getSelectionKeyword_0() { return cSelectionKeyword_0; }

		//{SelectionOperation}
		public Action getSelectionOperationAction_1() { return cSelectionOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class SystemOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompanyOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLanguageOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocalCurrencyOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// TODO change ID to a reference to an Selection's field
		//SystemOperation:
		//	UserOperation | CompanyOperation | LanguageOperation | LocalCurrencyOperation;
		public ParserRule getRule() { return rule; }

		//UserOperation | CompanyOperation | LanguageOperation | LocalCurrencyOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserOperation
		public RuleCall getUserOperationParserRuleCall_0() { return cUserOperationParserRuleCall_0; }

		//CompanyOperation
		public RuleCall getCompanyOperationParserRuleCall_1() { return cCompanyOperationParserRuleCall_1; }

		//LanguageOperation
		public RuleCall getLanguageOperationParserRuleCall_2() { return cLanguageOperationParserRuleCall_2; }

		//LocalCurrencyOperation
		public RuleCall getLocalCurrencyOperationParserRuleCall_3() { return cLocalCurrencyOperationParserRuleCall_3; }
	}

	public class UserOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cUserOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//UserOperation:
		//	"user" {UserOperation};
		public ParserRule getRule() { return rule; }

		//"user" {UserOperation}
		public Group getGroup() { return cGroup; }

		//"user"
		public Keyword getUserKeyword_0() { return cUserKeyword_0; }

		//{UserOperation}
		public Action getUserOperationAction_1() { return cUserOperationAction_1; }
	}

	public class CompanyOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompanyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompanyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCompanyOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//CompanyOperation:
		//	"company" {CompanyOperation};
		public ParserRule getRule() { return rule; }

		//"company" {CompanyOperation}
		public Group getGroup() { return cGroup; }

		//"company"
		public Keyword getCompanyKeyword_0() { return cCompanyKeyword_0; }

		//{CompanyOperation}
		public Action getCompanyOperationAction_1() { return cCompanyOperationAction_1; }
	}

	public class LanguageOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLanguageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLanguageOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//LanguageOperation:
		//	"language" {LanguageOperation};
		public ParserRule getRule() { return rule; }

		//"language" {LanguageOperation}
		public Group getGroup() { return cGroup; }

		//"language"
		public Keyword getLanguageKeyword_0() { return cLanguageKeyword_0; }

		//{LanguageOperation}
		public Action getLanguageOperationAction_1() { return cLanguageOperationAction_1; }
	}

	public class LocalCurrencyOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalCurrencyOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalCurrencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLocalCurrencyOperationAction_1 = (Action)cGroup.eContents().get(1);
		
		//LocalCurrencyOperation:
		//	"local-currency" {LocalCurrencyOperation};
		public ParserRule getRule() { return rule; }

		//"local-currency" {LocalCurrencyOperation}
		public Group getGroup() { return cGroup; }

		//"local-currency"
		public Keyword getLocalCurrencyKeyword_0() { return cLocalCurrencyKeyword_0; }

		//{LocalCurrencyOperation}
		public Action getLocalCurrencyOperationAction_1() { return cLocalCurrencyOperationAction_1; }
	}

	public class TotalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TotalOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTotalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTotalOperationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//TotalOperation:
		//	"total" {TotalOperation} field=STRING;
		public ParserRule getRule() { return rule; }

		//"total" {TotalOperation} field=STRING
		public Group getGroup() { return cGroup; }

		//"total"
		public Keyword getTotalKeyword_0() { return cTotalKeyword_0; }

		//{TotalOperation}
		public Action getTotalOperationAction_1() { return cTotalOperationAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExtractConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecryptConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReplaceConversionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConvertConversionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cValueConversionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJulianConversionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBasicConversionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGetFromConversionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRateConversionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAbsConversionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMatchFieldParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCallRoutineParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRepeatConversionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * CONVERSION
		// * ---------------------------------------------------------------------------
		// * / Conversion:
		//	ExtractConversion | DecryptConversion | ReplaceConversion | ConvertConversion | ValueConversion | JulianConversion |
		//	BasicConversion | GetFromConversion | RateConversion | AbsConversion | MatchField | CallRoutine | RepeatConversion;
		public ParserRule getRule() { return rule; }

		//ExtractConversion | DecryptConversion | ReplaceConversion | ConvertConversion | ValueConversion | JulianConversion |
		//BasicConversion | GetFromConversion | RateConversion | AbsConversion | MatchField | CallRoutine | RepeatConversion
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExtractConversion
		public RuleCall getExtractConversionParserRuleCall_0() { return cExtractConversionParserRuleCall_0; }

		//DecryptConversion
		public RuleCall getDecryptConversionParserRuleCall_1() { return cDecryptConversionParserRuleCall_1; }

		//ReplaceConversion
		public RuleCall getReplaceConversionParserRuleCall_2() { return cReplaceConversionParserRuleCall_2; }

		//ConvertConversion
		public RuleCall getConvertConversionParserRuleCall_3() { return cConvertConversionParserRuleCall_3; }

		//ValueConversion
		public RuleCall getValueConversionParserRuleCall_4() { return cValueConversionParserRuleCall_4; }

		//JulianConversion
		public RuleCall getJulianConversionParserRuleCall_5() { return cJulianConversionParserRuleCall_5; }

		//BasicConversion
		public RuleCall getBasicConversionParserRuleCall_6() { return cBasicConversionParserRuleCall_6; }

		//GetFromConversion
		public RuleCall getGetFromConversionParserRuleCall_7() { return cGetFromConversionParserRuleCall_7; }

		//RateConversion
		public RuleCall getRateConversionParserRuleCall_8() { return cRateConversionParserRuleCall_8; }

		//AbsConversion
		public RuleCall getAbsConversionParserRuleCall_9() { return cAbsConversionParserRuleCall_9; }

		//MatchField
		public RuleCall getMatchFieldParserRuleCall_10() { return cMatchFieldParserRuleCall_10; }

		//CallRoutine
		public RuleCall getCallRoutineParserRuleCall_11() { return cCallRoutineParserRuleCall_11; }

		//RepeatConversion
		public RuleCall getRepeatConversionParserRuleCall_12() { return cRepeatConversionParserRuleCall_12; }
	}

	public class ExtractConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromINTTerminalRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToINTTerminalRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDelimitedByKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDelimiterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDelimiterSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cDelimiterAssignment_4_1.eContents().get(0);
		
		//ExtractConversion:
		//	"extract from" from=INT "to" to=INT ("delimited by" delimiter=STRING)?;
		public ParserRule getRule() { return rule; }

		//"extract from" from=INT "to" to=INT ("delimited by" delimiter=STRING)?
		public Group getGroup() { return cGroup; }

		//"extract from"
		public Keyword getExtractFromKeyword_0() { return cExtractFromKeyword_0; }

		//from=INT
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//INT
		public RuleCall getFromINTTerminalRuleCall_1_0() { return cFromINTTerminalRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//to=INT
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//INT
		public RuleCall getToINTTerminalRuleCall_3_0() { return cToINTTerminalRuleCall_3_0; }

		//("delimited by" delimiter=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"delimited by"
		public Keyword getDelimitedByKeyword_4_0() { return cDelimitedByKeyword_4_0; }

		//delimiter=STRING
		public Assignment getDelimiterAssignment_4_1() { return cDelimiterAssignment_4_1; }

		//STRING
		public RuleCall getDelimiterSTRINGTerminalRuleCall_4_1_0() { return cDelimiterSTRINGTerminalRuleCall_4_1_0; }
	}

	public class DecryptConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecryptConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecryptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDecryptConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//DecryptConversion:
		//	"decrypt" {DecryptConversion} field=STRING;
		public ParserRule getRule() { return rule; }

		//"decrypt" {DecryptConversion} field=STRING
		public Group getGroup() { return cGroup; }

		//"decrypt"
		public Keyword getDecryptKeyword_0() { return cDecryptKeyword_0; }

		//{DecryptConversion}
		public Action getDecryptConversionAction_1() { return cDecryptConversionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class ReplaceConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReplaceConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cOldDataKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOldDataAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOldDataSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cOldDataAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cNewDataKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cNewDataAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cNewDataSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cNewDataAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReplaceConversion:
		//	"replace" {ReplaceConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}";
		public ParserRule getRule() { return rule; }

		//"replace" {ReplaceConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}"
		public Group getGroup() { return cGroup; }

		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }

		//{ReplaceConversion}
		public Action getReplaceConversionAction_1() { return cReplaceConversionAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("oldData:" oldData=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"oldData:"
		public Keyword getOldDataKeyword_3_0_0() { return cOldDataKeyword_3_0_0; }

		//oldData=STRING
		public Assignment getOldDataAssignment_3_0_1() { return cOldDataAssignment_3_0_1; }

		//STRING
		public RuleCall getOldDataSTRINGTerminalRuleCall_3_0_1_0() { return cOldDataSTRINGTerminalRuleCall_3_0_1_0; }

		//("newData:" newData=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"newData:"
		public Keyword getNewDataKeyword_3_1_0() { return cNewDataKeyword_3_1_0; }

		//newData=STRING
		public Assignment getNewDataAssignment_3_1_1() { return cNewDataAssignment_3_1_1; }

		//STRING
		public RuleCall getNewDataSTRINGTerminalRuleCall_3_1_1_0() { return cNewDataSTRINGTerminalRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConvertConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConvertConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConvertConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cOldDataKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOldDataAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOldDataSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cOldDataAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cNewDataKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cNewDataAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cNewDataSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cNewDataAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConvertConversion:
		//	"convert" {ConvertConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}";
		public ParserRule getRule() { return rule; }

		//"convert" {ConvertConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}"
		public Group getGroup() { return cGroup; }

		//"convert"
		public Keyword getConvertKeyword_0() { return cConvertKeyword_0; }

		//{ConvertConversion}
		public Action getConvertConversionAction_1() { return cConvertConversionAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("oldData:" oldData=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"oldData:"
		public Keyword getOldDataKeyword_3_0_0() { return cOldDataKeyword_3_0_0; }

		//oldData=STRING
		public Assignment getOldDataAssignment_3_0_1() { return cOldDataAssignment_3_0_1; }

		//STRING
		public RuleCall getOldDataSTRINGTerminalRuleCall_3_0_1_0() { return cOldDataSTRINGTerminalRuleCall_3_0_1_0; }

		//("newData:" newData=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"newData:"
		public Keyword getNewDataKeyword_3_1_0() { return cNewDataKeyword_3_1_0; }

		//newData=STRING
		public Assignment getNewDataAssignment_3_1_1() { return cNewDataAssignment_3_1_1; }

		//STRING
		public RuleCall getNewDataSTRINGTerminalRuleCall_3_1_1_0() { return cNewDataSTRINGTerminalRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ValueConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cValueConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cSubValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubValueINTEGER_OBJECTParserRuleCall_3_0 = (RuleCall)cSubValueAssignment_3.eContents().get(0);
		
		//ValueConversion:
		//	"value" {ValueConversion} value=INT subValue=INTEGER_OBJECT?;
		public ParserRule getRule() { return rule; }

		//"value" {ValueConversion} value=INT subValue=INTEGER_OBJECT?
		public Group getGroup() { return cGroup; }

		//"value"
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }

		//{ValueConversion}
		public Action getValueConversionAction_1() { return cValueConversionAction_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//subValue=INTEGER_OBJECT?
		public Assignment getSubValueAssignment_3() { return cSubValueAssignment_3; }

		//INTEGER_OBJECT
		public RuleCall getSubValueINTEGER_OBJECTParserRuleCall_3_0() { return cSubValueINTEGER_OBJECTParserRuleCall_3_0; }
	}

	public class JulianConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JulianConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJulianKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJulianConversionAction_1 = (Action)cGroup.eContents().get(1);
		
		//JulianConversion:
		//	"julian" {JulianConversion};
		public ParserRule getRule() { return rule; }

		//"julian" {JulianConversion}
		public Group getGroup() { return cGroup; }

		//"julian"
		public Keyword getJulianKeyword_0() { return cJulianKeyword_0; }

		//{JulianConversion}
		public Action getJulianConversionAction_1() { return cJulianConversionAction_1; }
	}

	public class BasicConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicOConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBasicIConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BasicConversion:
		//	BasicOConversion | BasicIConversion;
		public ParserRule getRule() { return rule; }

		//BasicOConversion | BasicIConversion
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicOConversion
		public RuleCall getBasicOConversionParserRuleCall_0() { return cBasicOConversionParserRuleCall_0; }

		//BasicIConversion
		public RuleCall getBasicIConversionParserRuleCall_1() { return cBasicIConversionParserRuleCall_1; }
	}

	public class BasicOConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicOConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOconvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBasicOConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionSTRINGTerminalRuleCall_2_0 = (RuleCall)cInstructionAssignment_2.eContents().get(0);
		
		//BasicOConversion:
		//	"oconv" {BasicOConversion} instruction=STRING;
		public ParserRule getRule() { return rule; }

		//"oconv" {BasicOConversion} instruction=STRING
		public Group getGroup() { return cGroup; }

		//"oconv"
		public Keyword getOconvKeyword_0() { return cOconvKeyword_0; }

		//{BasicOConversion}
		public Action getBasicOConversionAction_1() { return cBasicOConversionAction_1; }

		//instruction=STRING
		public Assignment getInstructionAssignment_2() { return cInstructionAssignment_2; }

		//STRING
		public RuleCall getInstructionSTRINGTerminalRuleCall_2_0() { return cInstructionSTRINGTerminalRuleCall_2_0; }
	}

	public class BasicIConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicIConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIconvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBasicIConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cInstructionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionSTRINGTerminalRuleCall_2_0 = (RuleCall)cInstructionAssignment_2.eContents().get(0);
		
		//BasicIConversion:
		//	"iconv" {BasicIConversion} instruction=STRING;
		public ParserRule getRule() { return rule; }

		//"iconv" {BasicIConversion} instruction=STRING
		public Group getGroup() { return cGroup; }

		//"iconv"
		public Keyword getIconvKeyword_0() { return cIconvKeyword_0; }

		//{BasicIConversion}
		public Action getBasicIConversionAction_1() { return cBasicIConversionAction_1; }

		//instruction=STRING
		public Assignment getInstructionAssignment_2() { return cInstructionAssignment_2; }

		//STRING
		public RuleCall getInstructionSTRINGTerminalRuleCall_2_0() { return cInstructionSTRINGTerminalRuleCall_2_0; }
	}

	public class GetFromConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetFromConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cGetFromConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cApplicationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cApplicationSTRINGTerminalRuleCall_2_0 = (RuleCall)cApplicationAssignment_2.eContents().get(0);
		private final Assignment cFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldSTRINGTerminalRuleCall_3_0 = (RuleCall)cFieldAssignment_3.eContents().get(0);
		private final Assignment cLanguageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLanguageBooleanParserRuleCall_4_0 = (RuleCall)cLanguageAssignment_4.eContents().get(0);
		
		//GetFromConversion:
		//	"getFrom" {GetFromConversion} application=STRING field=STRING language=Boolean;
		public ParserRule getRule() { return rule; }

		//"getFrom" {GetFromConversion} application=STRING field=STRING language=Boolean
		public Group getGroup() { return cGroup; }

		//"getFrom"
		public Keyword getGetFromKeyword_0() { return cGetFromKeyword_0; }

		//{GetFromConversion}
		public Action getGetFromConversionAction_1() { return cGetFromConversionAction_1; }

		//application=STRING
		public Assignment getApplicationAssignment_2() { return cApplicationAssignment_2; }

		//STRING
		public RuleCall getApplicationSTRINGTerminalRuleCall_2_0() { return cApplicationSTRINGTerminalRuleCall_2_0; }

		//field=STRING
		public Assignment getFieldAssignment_3() { return cFieldAssignment_3; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_3_0() { return cFieldSTRINGTerminalRuleCall_3_0; }

		//language=Boolean
		public Assignment getLanguageAssignment_4() { return cLanguageAssignment_4; }

		//Boolean
		public RuleCall getLanguageBooleanParserRuleCall_4_0() { return cLanguageBooleanParserRuleCall_4_0; }
	}

	public class RateConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RateConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalcFixedRateConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetFixedRateConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetFixedCurrencyConversionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RateConversion:
		//	CalcFixedRateConversion | GetFixedRateConversion | GetFixedCurrencyConversion;
		public ParserRule getRule() { return rule; }

		//CalcFixedRateConversion | GetFixedRateConversion | GetFixedCurrencyConversion
		public Alternatives getAlternatives() { return cAlternatives; }

		//CalcFixedRateConversion
		public RuleCall getCalcFixedRateConversionParserRuleCall_0() { return cCalcFixedRateConversionParserRuleCall_0; }

		//GetFixedRateConversion
		public RuleCall getGetFixedRateConversionParserRuleCall_1() { return cGetFixedRateConversionParserRuleCall_1; }

		//GetFixedCurrencyConversion
		public RuleCall getGetFixedCurrencyConversionParserRuleCall_2() { return cGetFixedCurrencyConversionParserRuleCall_2; }
	}

	public class CalcFixedRateConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CalcFixedRateConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalcFixedRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCalcFixedRateConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//CalcFixedRateConversion:
		//	"calcFixedRate" {CalcFixedRateConversion} field=STRING;
		public ParserRule getRule() { return rule; }

		//"calcFixedRate" {CalcFixedRateConversion} field=STRING
		public Group getGroup() { return cGroup; }

		//"calcFixedRate"
		public Keyword getCalcFixedRateKeyword_0() { return cCalcFixedRateKeyword_0; }

		//{CalcFixedRateConversion}
		public Action getCalcFixedRateConversionAction_1() { return cCalcFixedRateConversionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class GetFixedRateConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetFixedRateConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetFixedRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cGetFixedRateConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//GetFixedRateConversion:
		//	"getFixedRate" {GetFixedRateConversion} field=STRING;
		public ParserRule getRule() { return rule; }

		//"getFixedRate" {GetFixedRateConversion} field=STRING
		public Group getGroup() { return cGroup; }

		//"getFixedRate"
		public Keyword getGetFixedRateKeyword_0() { return cGetFixedRateKeyword_0; }

		//{GetFixedRateConversion}
		public Action getGetFixedRateConversionAction_1() { return cGetFixedRateConversionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class GetFixedCurrencyConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetFixedCurrencyConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetFixedCcyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cGetFixedCurrencyConversionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldSTRINGTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//GetFixedCurrencyConversion:
		//	"getFixedCcy" {GetFixedCurrencyConversion} field=STRING;
		public ParserRule getRule() { return rule; }

		//"getFixedCcy" {GetFixedCurrencyConversion} field=STRING
		public Group getGroup() { return cGroup; }

		//"getFixedCcy"
		public Keyword getGetFixedCcyKeyword_0() { return cGetFixedCcyKeyword_0; }

		//{GetFixedCurrencyConversion}
		public Action getGetFixedCurrencyConversionAction_1() { return cGetFixedCurrencyConversionAction_1; }

		//field=STRING
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_2_0() { return cFieldSTRINGTerminalRuleCall_2_0; }
	}

	public class AbsConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbsConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAbsConversionAction_1 = (Action)cGroup.eContents().get(1);
		
		//AbsConversion:
		//	"abs" {AbsConversion};
		public ParserRule getRule() { return rule; }

		//"abs" {AbsConversion}
		public Group getGroup() { return cGroup; }

		//"abs"
		public Keyword getAbsKeyword_0() { return cAbsKeyword_0; }

		//{AbsConversion}
		public Action getAbsConversionAction_1() { return cAbsConversionAction_1; }
	}

	public class MatchFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMatchFieldAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternSTRINGTerminalRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//MatchField:
		//	"matchField" {MatchField} pattern=STRING value=STRING;
		public ParserRule getRule() { return rule; }

		//"matchField" {MatchField} pattern=STRING value=STRING
		public Group getGroup() { return cGroup; }

		//"matchField"
		public Keyword getMatchFieldKeyword_0() { return cMatchFieldKeyword_0; }

		//{MatchField}
		public Action getMatchFieldAction_1() { return cMatchFieldAction_1; }

		//pattern=STRING
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_2_0() { return cPatternSTRINGTerminalRuleCall_2_0; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class CallRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCallRoutineAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cRoutineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoutineRoutineParserRuleCall_2_0 = (RuleCall)cRoutineAssignment_2.eContents().get(0);
		
		//CallRoutine:
		//	"call" {CallRoutine} routine= // jBC/Java
		//	Routine;
		public ParserRule getRule() { return rule; }

		//"call" {CallRoutine} routine= // jBC/Java
		//Routine
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//{CallRoutine}
		public Action getCallRoutineAction_1() { return cCallRoutineAction_1; }

		//routine= // jBC/Java
		//Routine
		public Assignment getRoutineAssignment_2() { return cRoutineAssignment_2; }

		//// jBC/Java
		//Routine
		public RuleCall getRoutineRoutineParserRuleCall_2_0() { return cRoutineRoutineParserRuleCall_2_0; }
	}

	public class RepeatConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepeatConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRepeatOnNullConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepeatEveryConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepeatSubConversionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RepeatConversion:
		//	RepeatOnNullConversion | RepeatEveryConversion | RepeatSubConversion;
		public ParserRule getRule() { return rule; }

		//RepeatOnNullConversion | RepeatEveryConversion | RepeatSubConversion
		public Alternatives getAlternatives() { return cAlternatives; }

		//RepeatOnNullConversion
		public RuleCall getRepeatOnNullConversionParserRuleCall_0() { return cRepeatOnNullConversionParserRuleCall_0; }

		//RepeatEveryConversion
		public RuleCall getRepeatEveryConversionParserRuleCall_1() { return cRepeatEveryConversionParserRuleCall_1; }

		//RepeatSubConversion
		public RuleCall getRepeatSubConversionParserRuleCall_2() { return cRepeatSubConversionParserRuleCall_2; }
	}

	public class RepeatOnNullConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepeatOnNullConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatWhenNullKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRepeatOnNullConversionAction_1 = (Action)cGroup.eContents().get(1);
		
		//RepeatOnNullConversion: / * multi and subvalues - note: if the field your are displaying is subvalued then you 
		//	 * will get repetition of nmake=2 and svalue=1 (providing the data is null) because 
		//	 * the mvalue is greater than one. If you do not want this then use 'repeat-sub'.
		//	 * / "repeat-when-null" {RepeatOnNullConversion};
		public ParserRule getRule() { return rule; }

		/// * multi and subvalues - note: if the field your are displaying is subvalued then you 
		//	 * will get repetition of nmake=2 and svalue=1 (providing the data is null) because 
		//	 * the mvalue is greater than one. If you do not want this then use 'repeat-sub'.
		//	 * / "repeat-when-null" {RepeatOnNullConversion}
		public Group getGroup() { return cGroup; }

		/// * multi and subvalues - note: if the field your are displaying is subvalued then you 
		//	 * will get repetition of nmake=2 and svalue=1 (providing the data is null) because 
		//	 * the mvalue is greater than one. If you do not want this then use 'repeat-sub'.
		//	 * / "repeat-when-null"
		public Keyword getRepeatWhenNullKeyword_0() { return cRepeatWhenNullKeyword_0; }

		//{RepeatOnNullConversion}
		public Action getRepeatOnNullConversionAction_1() { return cRepeatOnNullConversionAction_1; }
	}

	public class RepeatEveryConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepeatEveryConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRepeatEveryConversionAction_1 = (Action)cGroup.eContents().get(1);
		
		//RepeatEveryConversion: // repeat previous data if current data is null - regardless of multi/subvalue number
		//	"repeat-every" {RepeatEveryConversion};
		public ParserRule getRule() { return rule; }

		//// repeat previous data if current data is null - regardless of multi/subvalue number
		//"repeat-every" {RepeatEveryConversion}
		public Group getGroup() { return cGroup; }

		//// repeat previous data if current data is null - regardless of multi/subvalue number
		//"repeat-every"
		public Keyword getRepeatEveryKeyword_0() { return cRepeatEveryKeyword_0; }

		//{RepeatEveryConversion}
		public Action getRepeatEveryConversionAction_1() { return cRepeatEveryConversionAction_1; }
	}

	public class RepeatSubConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepeatSubConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRepeatSubConversionAction_1 = (Action)cGroup.eContents().get(1);
		
		//RepeatSubConversion: // repeat previous data if current data is null - only if the subvalue number is greater that one
		//	"repeat-sub" {RepeatSubConversion};
		public ParserRule getRule() { return rule; }

		//// repeat previous data if current data is null - only if the subvalue number is greater that one
		//"repeat-sub" {RepeatSubConversion}
		public Group getGroup() { return cGroup; }

		//// repeat previous data if current data is null - only if the subvalue number is greater that one
		//"repeat-sub"
		public Keyword getRepeatSubKeyword_0() { return cRepeatSubKeyword_0; }

		//{RepeatSubConversion}
		public Action getRepeatSubConversionAction_1() { return cRepeatSubConversionAction_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLabelKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cLabelAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cLabelTranslationsParserRuleCall_3_0_2_0 = (RuleCall)cLabelAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cCommentsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCommentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCommentsSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cCommentsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDisplayTypeKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDisplayTypeAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDisplayTypeSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cDisplayTypeAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cFormatKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFormatAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFormatFormatParserRuleCall_3_3_1_0 = (RuleCall)cFormatAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cBreakConditionKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cBreakConditionAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cBreakConditionBreakConditionParserRuleCall_3_4_2_0 = (RuleCall)cBreakConditionAssignment_3_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4_3 = (Keyword)cGroup_3_4.eContents().get(3);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cLengthKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cLengthAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cLengthINTEGER_OBJECTParserRuleCall_3_5_1_0 = (RuleCall)cLengthAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cAlignmentKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cAlignmentAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cAlignmentAlignmentKindEnumRuleCall_3_6_1_0 = (RuleCall)cAlignmentAssignment_3_6_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cCommaSeparatorKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cCommaSeparatorAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cCommaSeparatorBooleanObjectParserRuleCall_3_7_1_0 = (RuleCall)cCommaSeparatorAssignment_3_7_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cDecimalsKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cNumberOfDecimalsAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cNumberOfDecimalsINTEGER_OBJECTParserRuleCall_3_8_1_0 = (RuleCall)cNumberOfDecimalsAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cEscapeSequenceKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cEscapeSequenceAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cEscapeSequenceEscapeSequenceEnumRuleCall_3_9_1_0 = (RuleCall)cEscapeSequenceAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cFmtMaskKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cFmtMaskAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cFmtMaskSTRINGTerminalRuleCall_3_10_1_0 = (RuleCall)cFmtMaskAssignment_3_10_1.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cDisplaySectionKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Assignment cDisplaySectionAssignment_3_11_1 = (Assignment)cGroup_3_11.eContents().get(1);
		private final RuleCall cDisplaySectionDisplaySectionKindEnumRuleCall_3_11_1_0 = (RuleCall)cDisplaySectionAssignment_3_11_1.eContents().get(0);
		private final Group cGroup_3_12 = (Group)cUnorderedGroup_3.eContents().get(12);
		private final Keyword cPositionKeyword_3_12_0 = (Keyword)cGroup_3_12.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_12_1 = (Keyword)cGroup_3_12.eContents().get(1);
		private final Assignment cPositionAssignment_3_12_2 = (Assignment)cGroup_3_12.eContents().get(2);
		private final RuleCall cPositionFieldPositionParserRuleCall_3_12_2_0 = (RuleCall)cPositionAssignment_3_12_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_12_3 = (Keyword)cGroup_3_12.eContents().get(3);
		private final Group cGroup_3_13 = (Group)cUnorderedGroup_3.eContents().get(13);
		private final Keyword cColumnWidthKeyword_3_13_0 = (Keyword)cGroup_3_13.eContents().get(0);
		private final Assignment cColumnWidthAssignment_3_13_1 = (Assignment)cGroup_3_13.eContents().get(1);
		private final RuleCall cColumnWidthINTEGER_OBJECTParserRuleCall_3_13_1_0 = (RuleCall)cColumnWidthAssignment_3_13_1.eContents().get(0);
		private final Group cGroup_3_14 = (Group)cUnorderedGroup_3.eContents().get(14);
		private final Keyword cSpoolBreakKeyword_3_14_0 = (Keyword)cGroup_3_14.eContents().get(0);
		private final Assignment cSpoolBreakAssignment_3_14_1 = (Assignment)cGroup_3_14.eContents().get(1);
		private final RuleCall cSpoolBreakBooleanObjectParserRuleCall_3_14_1_0 = (RuleCall)cSpoolBreakAssignment_3_14_1.eContents().get(0);
		private final Group cGroup_3_15 = (Group)cUnorderedGroup_3.eContents().get(15);
		private final Keyword cProcessingModeKeyword_3_15_0 = (Keyword)cGroup_3_15.eContents().get(0);
		private final Assignment cSingleMultiAssignment_3_15_1 = (Assignment)cGroup_3_15.eContents().get(1);
		private final RuleCall cSingleMultiProcessingModeEnumRuleCall_3_15_1_0 = (RuleCall)cSingleMultiAssignment_3_15_1.eContents().get(0);
		private final Group cGroup_3_16 = (Group)cUnorderedGroup_3.eContents().get(16);
		private final Keyword cHiddenKeyword_3_16_0 = (Keyword)cGroup_3_16.eContents().get(0);
		private final Assignment cHiddenAssignment_3_16_1 = (Assignment)cGroup_3_16.eContents().get(1);
		private final RuleCall cHiddenBooleanObjectParserRuleCall_3_16_1_0 = (RuleCall)cHiddenAssignment_3_16_1.eContents().get(0);
		private final Group cGroup_3_17 = (Group)cUnorderedGroup_3.eContents().get(17);
		private final Keyword cNoHeaderKeyword_3_17_0 = (Keyword)cGroup_3_17.eContents().get(0);
		private final Assignment cNoHeaderAssignment_3_17_1 = (Assignment)cGroup_3_17.eContents().get(1);
		private final RuleCall cNoHeaderBooleanObjectParserRuleCall_3_17_1_0 = (RuleCall)cNoHeaderAssignment_3_17_1.eContents().get(0);
		private final Group cGroup_3_18 = (Group)cUnorderedGroup_3.eContents().get(18);
		private final Keyword cNoColumnLabelKeyword_3_18_0 = (Keyword)cGroup_3_18.eContents().get(0);
		private final Assignment cNoColumnLabelAssignment_3_18_1 = (Assignment)cGroup_3_18.eContents().get(1);
		private final RuleCall cNoColumnLabelBooleanObjectParserRuleCall_3_18_1_0 = (RuleCall)cNoColumnLabelAssignment_3_18_1.eContents().get(0);
		private final Group cGroup_3_19 = (Group)cUnorderedGroup_3.eContents().get(19);
		private final Keyword cOperationKeyword_3_19_0 = (Keyword)cGroup_3_19.eContents().get(0);
		private final Assignment cOperationAssignment_3_19_1 = (Assignment)cGroup_3_19.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_3_19_1_0 = (RuleCall)cOperationAssignment_3_19_1.eContents().get(0);
		private final Group cGroup_3_20 = (Group)cUnorderedGroup_3.eContents().get(20);
		private final Keyword cConversionKeyword_3_20_0 = (Keyword)cGroup_3_20.eContents().get(0);
		private final Assignment cConversionAssignment_3_20_1 = (Assignment)cGroup_3_20.eContents().get(1);
		private final RuleCall cConversionConversionParserRuleCall_3_20_1_0 = (RuleCall)cConversionAssignment_3_20_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAttributesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAttributesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAttributesSTRINGTerminalRuleCall_4_2_1_0 = (RuleCall)cAttributesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * FIELDS
		// * ---------------------------------------------------------------------------
		// * / Field:
		//	"field" name=STRING "{" (("label" "{" label=Translations "}")? // TODO add validation rule
		//	// defined a scope provider for EB/EB_REPORTS/ENQUIRY__FIELD_NAME__FIELD_LBL__FIELD_DISP_TYPE
		//	// /Field <Enq> ???
		//	//- To go into ATTRIBS
		//	//- To go into ATTRIBS
		//	& ("comments:" comments=STRING)? & ("display-type:" displayType=STRING)? & ("format:" format=Format)? &
		//	("break-condition" "{" breakCondition=BreakCondition "}")? & ("length:" length=INTEGER_OBJECT)? & ("alignment:"
		//	alignment=AlignmentKind)? & ("comma-separator:" commaSeparator=BooleanObject)? & ("decimals:"
		//	numberOfDecimals=INTEGER_OBJECT)? & ("escapeSequence:" escapeSequence=EscapeSequence)? & ("fmtMask:" fmtMask=STRING)?
		//	& ("display-section:" displaySection=DisplaySectionKind)? & ("position" "{" position=FieldPosition "}")? &
		//	("column-width:" columnWidth=INTEGER_OBJECT)? & ("spool-break:" spoolBreak=BooleanObject)? & ("processing-mode:"
		//	singleMulti=ProcessingMode)? & ("hidden:" ^hidden=BooleanObject)? & ("no-header:" noHeader=BooleanObject)? &
		//	("no-column-label:" noColumnLabel=BooleanObject)? & ("operation:" operation=Operation)? & ("conversion:"
		//	conversion+=Conversion)*) ("attributes:" attributes+=STRING ("," attributes+=STRING)*)? "}";
		public ParserRule getRule() { return rule; }

		//"field" name=STRING "{" (("label" "{" label=Translations "}")? // TODO add validation rule
		//// defined a scope provider for EB/EB_REPORTS/ENQUIRY__FIELD_NAME__FIELD_LBL__FIELD_DISP_TYPE
		//// /Field <Enq> ???
		////- To go into ATTRIBS
		////- To go into ATTRIBS
		//& ("comments:" comments=STRING)? & ("display-type:" displayType=STRING)? & ("format:" format=Format)? &
		//("break-condition" "{" breakCondition=BreakCondition "}")? & ("length:" length=INTEGER_OBJECT)? & ("alignment:"
		//alignment=AlignmentKind)? & ("comma-separator:" commaSeparator=BooleanObject)? & ("decimals:"
		//numberOfDecimals=INTEGER_OBJECT)? & ("escapeSequence:" escapeSequence=EscapeSequence)? & ("fmtMask:" fmtMask=STRING)?
		//& ("display-section:" displaySection=DisplaySectionKind)? & ("position" "{" position=FieldPosition "}")? &
		//("column-width:" columnWidth=INTEGER_OBJECT)? & ("spool-break:" spoolBreak=BooleanObject)? & ("processing-mode:"
		//singleMulti=ProcessingMode)? & ("hidden:" ^hidden=BooleanObject)? & ("no-header:" noHeader=BooleanObject)? &
		//("no-column-label:" noColumnLabel=BooleanObject)? & ("operation:" operation=Operation)? & ("conversion:"
		//conversion+=Conversion)*) ("attributes:" attributes+=STRING ("," attributes+=STRING)*)? "}"
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("label" "{" label=Translations "}")? // TODO add validation rule
		//// defined a scope provider for EB/EB_REPORTS/ENQUIRY__FIELD_NAME__FIELD_LBL__FIELD_DISP_TYPE
		//// /Field <Enq> ???
		////- To go into ATTRIBS
		////- To go into ATTRIBS
		//& ("comments:" comments=STRING)? & ("display-type:" displayType=STRING)? & ("format:" format=Format)? &
		//("break-condition" "{" breakCondition=BreakCondition "}")? & ("length:" length=INTEGER_OBJECT)? & ("alignment:"
		//alignment=AlignmentKind)? & ("comma-separator:" commaSeparator=BooleanObject)? & ("decimals:"
		//numberOfDecimals=INTEGER_OBJECT)? & ("escapeSequence:" escapeSequence=EscapeSequence)? & ("fmtMask:" fmtMask=STRING)?
		//& ("display-section:" displaySection=DisplaySectionKind)? & ("position" "{" position=FieldPosition "}")? &
		//("column-width:" columnWidth=INTEGER_OBJECT)? & ("spool-break:" spoolBreak=BooleanObject)? & ("processing-mode:"
		//singleMulti=ProcessingMode)? & ("hidden:" ^hidden=BooleanObject)? & ("no-header:" noHeader=BooleanObject)? &
		//("no-column-label:" noColumnLabel=BooleanObject)? & ("operation:" operation=Operation)? & ("conversion:"
		//conversion+=Conversion)*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("label" "{" label=Translations "}")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"label"
		public Keyword getLabelKeyword_3_0_0() { return cLabelKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//label=Translations
		public Assignment getLabelAssignment_3_0_2() { return cLabelAssignment_3_0_2; }

		//Translations
		public RuleCall getLabelTranslationsParserRuleCall_3_0_2_0() { return cLabelTranslationsParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//("comments:" comments=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"comments:"
		public Keyword getCommentsKeyword_3_1_0() { return cCommentsKeyword_3_1_0; }

		//comments=STRING
		public Assignment getCommentsAssignment_3_1_1() { return cCommentsAssignment_3_1_1; }

		//STRING
		public RuleCall getCommentsSTRINGTerminalRuleCall_3_1_1_0() { return cCommentsSTRINGTerminalRuleCall_3_1_1_0; }

		//("display-type:" displayType=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"display-type:"
		public Keyword getDisplayTypeKeyword_3_2_0() { return cDisplayTypeKeyword_3_2_0; }

		//displayType=STRING
		public Assignment getDisplayTypeAssignment_3_2_1() { return cDisplayTypeAssignment_3_2_1; }

		//STRING
		public RuleCall getDisplayTypeSTRINGTerminalRuleCall_3_2_1_0() { return cDisplayTypeSTRINGTerminalRuleCall_3_2_1_0; }

		//("format:" format=Format)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"format:"
		public Keyword getFormatKeyword_3_3_0() { return cFormatKeyword_3_3_0; }

		//format=Format
		public Assignment getFormatAssignment_3_3_1() { return cFormatAssignment_3_3_1; }

		//Format
		public RuleCall getFormatFormatParserRuleCall_3_3_1_0() { return cFormatFormatParserRuleCall_3_3_1_0; }

		//("break-condition" "{" breakCondition=BreakCondition "}")?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"break-condition"
		public Keyword getBreakConditionKeyword_3_4_0() { return cBreakConditionKeyword_3_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_4_1() { return cLeftCurlyBracketKeyword_3_4_1; }

		//breakCondition=BreakCondition
		public Assignment getBreakConditionAssignment_3_4_2() { return cBreakConditionAssignment_3_4_2; }

		//BreakCondition
		public RuleCall getBreakConditionBreakConditionParserRuleCall_3_4_2_0() { return cBreakConditionBreakConditionParserRuleCall_3_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4_3() { return cRightCurlyBracketKeyword_3_4_3; }

		//("length:" length=INTEGER_OBJECT)?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//"length:"
		public Keyword getLengthKeyword_3_5_0() { return cLengthKeyword_3_5_0; }

		//length=INTEGER_OBJECT
		public Assignment getLengthAssignment_3_5_1() { return cLengthAssignment_3_5_1; }

		//INTEGER_OBJECT
		public RuleCall getLengthINTEGER_OBJECTParserRuleCall_3_5_1_0() { return cLengthINTEGER_OBJECTParserRuleCall_3_5_1_0; }

		//("alignment:" alignment=AlignmentKind)?
		public Group getGroup_3_6() { return cGroup_3_6; }

		//"alignment:"
		public Keyword getAlignmentKeyword_3_6_0() { return cAlignmentKeyword_3_6_0; }

		//alignment=AlignmentKind
		public Assignment getAlignmentAssignment_3_6_1() { return cAlignmentAssignment_3_6_1; }

		//AlignmentKind
		public RuleCall getAlignmentAlignmentKindEnumRuleCall_3_6_1_0() { return cAlignmentAlignmentKindEnumRuleCall_3_6_1_0; }

		//("comma-separator:" commaSeparator=BooleanObject)?
		public Group getGroup_3_7() { return cGroup_3_7; }

		//"comma-separator:"
		public Keyword getCommaSeparatorKeyword_3_7_0() { return cCommaSeparatorKeyword_3_7_0; }

		//commaSeparator=BooleanObject
		public Assignment getCommaSeparatorAssignment_3_7_1() { return cCommaSeparatorAssignment_3_7_1; }

		//BooleanObject
		public RuleCall getCommaSeparatorBooleanObjectParserRuleCall_3_7_1_0() { return cCommaSeparatorBooleanObjectParserRuleCall_3_7_1_0; }

		//("decimals:" numberOfDecimals=INTEGER_OBJECT)?
		public Group getGroup_3_8() { return cGroup_3_8; }

		//"decimals:"
		public Keyword getDecimalsKeyword_3_8_0() { return cDecimalsKeyword_3_8_0; }

		//numberOfDecimals=INTEGER_OBJECT
		public Assignment getNumberOfDecimalsAssignment_3_8_1() { return cNumberOfDecimalsAssignment_3_8_1; }

		//INTEGER_OBJECT
		public RuleCall getNumberOfDecimalsINTEGER_OBJECTParserRuleCall_3_8_1_0() { return cNumberOfDecimalsINTEGER_OBJECTParserRuleCall_3_8_1_0; }

		//("escapeSequence:" escapeSequence=EscapeSequence)?
		public Group getGroup_3_9() { return cGroup_3_9; }

		//"escapeSequence:"
		public Keyword getEscapeSequenceKeyword_3_9_0() { return cEscapeSequenceKeyword_3_9_0; }

		//escapeSequence=EscapeSequence
		public Assignment getEscapeSequenceAssignment_3_9_1() { return cEscapeSequenceAssignment_3_9_1; }

		//EscapeSequence
		public RuleCall getEscapeSequenceEscapeSequenceEnumRuleCall_3_9_1_0() { return cEscapeSequenceEscapeSequenceEnumRuleCall_3_9_1_0; }

		//("fmtMask:" fmtMask=STRING)?
		public Group getGroup_3_10() { return cGroup_3_10; }

		//"fmtMask:"
		public Keyword getFmtMaskKeyword_3_10_0() { return cFmtMaskKeyword_3_10_0; }

		//fmtMask=STRING
		public Assignment getFmtMaskAssignment_3_10_1() { return cFmtMaskAssignment_3_10_1; }

		//STRING
		public RuleCall getFmtMaskSTRINGTerminalRuleCall_3_10_1_0() { return cFmtMaskSTRINGTerminalRuleCall_3_10_1_0; }

		//("display-section:" displaySection=DisplaySectionKind)?
		public Group getGroup_3_11() { return cGroup_3_11; }

		//"display-section:"
		public Keyword getDisplaySectionKeyword_3_11_0() { return cDisplaySectionKeyword_3_11_0; }

		//displaySection=DisplaySectionKind
		public Assignment getDisplaySectionAssignment_3_11_1() { return cDisplaySectionAssignment_3_11_1; }

		//DisplaySectionKind
		public RuleCall getDisplaySectionDisplaySectionKindEnumRuleCall_3_11_1_0() { return cDisplaySectionDisplaySectionKindEnumRuleCall_3_11_1_0; }

		//("position" "{" position=FieldPosition "}")?
		public Group getGroup_3_12() { return cGroup_3_12; }

		//"position"
		public Keyword getPositionKeyword_3_12_0() { return cPositionKeyword_3_12_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_12_1() { return cLeftCurlyBracketKeyword_3_12_1; }

		//position=FieldPosition
		public Assignment getPositionAssignment_3_12_2() { return cPositionAssignment_3_12_2; }

		//FieldPosition
		public RuleCall getPositionFieldPositionParserRuleCall_3_12_2_0() { return cPositionFieldPositionParserRuleCall_3_12_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_12_3() { return cRightCurlyBracketKeyword_3_12_3; }

		//("column-width:" columnWidth=INTEGER_OBJECT)?
		public Group getGroup_3_13() { return cGroup_3_13; }

		//"column-width:"
		public Keyword getColumnWidthKeyword_3_13_0() { return cColumnWidthKeyword_3_13_0; }

		//columnWidth=INTEGER_OBJECT
		public Assignment getColumnWidthAssignment_3_13_1() { return cColumnWidthAssignment_3_13_1; }

		//INTEGER_OBJECT
		public RuleCall getColumnWidthINTEGER_OBJECTParserRuleCall_3_13_1_0() { return cColumnWidthINTEGER_OBJECTParserRuleCall_3_13_1_0; }

		//("spool-break:" spoolBreak=BooleanObject)?
		public Group getGroup_3_14() { return cGroup_3_14; }

		//"spool-break:"
		public Keyword getSpoolBreakKeyword_3_14_0() { return cSpoolBreakKeyword_3_14_0; }

		//spoolBreak=BooleanObject
		public Assignment getSpoolBreakAssignment_3_14_1() { return cSpoolBreakAssignment_3_14_1; }

		//BooleanObject
		public RuleCall getSpoolBreakBooleanObjectParserRuleCall_3_14_1_0() { return cSpoolBreakBooleanObjectParserRuleCall_3_14_1_0; }

		//("processing-mode:" singleMulti=ProcessingMode)?
		public Group getGroup_3_15() { return cGroup_3_15; }

		//"processing-mode:"
		public Keyword getProcessingModeKeyword_3_15_0() { return cProcessingModeKeyword_3_15_0; }

		//singleMulti=ProcessingMode
		public Assignment getSingleMultiAssignment_3_15_1() { return cSingleMultiAssignment_3_15_1; }

		//ProcessingMode
		public RuleCall getSingleMultiProcessingModeEnumRuleCall_3_15_1_0() { return cSingleMultiProcessingModeEnumRuleCall_3_15_1_0; }

		//("hidden:" ^hidden=BooleanObject)?
		public Group getGroup_3_16() { return cGroup_3_16; }

		//"hidden:"
		public Keyword getHiddenKeyword_3_16_0() { return cHiddenKeyword_3_16_0; }

		//^hidden=BooleanObject
		public Assignment getHiddenAssignment_3_16_1() { return cHiddenAssignment_3_16_1; }

		//BooleanObject
		public RuleCall getHiddenBooleanObjectParserRuleCall_3_16_1_0() { return cHiddenBooleanObjectParserRuleCall_3_16_1_0; }

		//("no-header:" noHeader=BooleanObject)?
		public Group getGroup_3_17() { return cGroup_3_17; }

		//"no-header:"
		public Keyword getNoHeaderKeyword_3_17_0() { return cNoHeaderKeyword_3_17_0; }

		//noHeader=BooleanObject
		public Assignment getNoHeaderAssignment_3_17_1() { return cNoHeaderAssignment_3_17_1; }

		//BooleanObject
		public RuleCall getNoHeaderBooleanObjectParserRuleCall_3_17_1_0() { return cNoHeaderBooleanObjectParserRuleCall_3_17_1_0; }

		//("no-column-label:" noColumnLabel=BooleanObject)?
		public Group getGroup_3_18() { return cGroup_3_18; }

		//"no-column-label:"
		public Keyword getNoColumnLabelKeyword_3_18_0() { return cNoColumnLabelKeyword_3_18_0; }

		//noColumnLabel=BooleanObject
		public Assignment getNoColumnLabelAssignment_3_18_1() { return cNoColumnLabelAssignment_3_18_1; }

		//BooleanObject
		public RuleCall getNoColumnLabelBooleanObjectParserRuleCall_3_18_1_0() { return cNoColumnLabelBooleanObjectParserRuleCall_3_18_1_0; }

		//("operation:" operation=Operation)?
		public Group getGroup_3_19() { return cGroup_3_19; }

		//"operation:"
		public Keyword getOperationKeyword_3_19_0() { return cOperationKeyword_3_19_0; }

		//operation=Operation
		public Assignment getOperationAssignment_3_19_1() { return cOperationAssignment_3_19_1; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_19_1_0() { return cOperationOperationParserRuleCall_3_19_1_0; }

		//("conversion:" conversion+=Conversion)*
		public Group getGroup_3_20() { return cGroup_3_20; }

		//"conversion:"
		public Keyword getConversionKeyword_3_20_0() { return cConversionKeyword_3_20_0; }

		//conversion+=Conversion
		public Assignment getConversionAssignment_3_20_1() { return cConversionAssignment_3_20_1; }

		//Conversion
		public RuleCall getConversionConversionParserRuleCall_3_20_1_0() { return cConversionConversionParserRuleCall_3_20_1_0; }

		//("attributes:" attributes+=STRING ("," attributes+=STRING)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"attributes:"
		public Keyword getAttributesKeyword_4_0() { return cAttributesKeyword_4_0; }

		//attributes+=STRING
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }

		//STRING
		public RuleCall getAttributesSTRINGTerminalRuleCall_4_1_0() { return cAttributesSTRINGTerminalRuleCall_4_1_0; }

		//("," attributes+=STRING)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//attributes+=STRING
		public Assignment getAttributesAssignment_4_2_1() { return cAttributesAssignment_4_2_1; }

		//STRING
		public RuleCall getAttributesSTRINGTerminalRuleCall_4_2_1_0() { return cAttributesSTRINGTerminalRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BreakConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBreakKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBreakAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBreakBreakKindEnumRuleCall_0_1_0 = (RuleCall)cBreakAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFieldKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFieldAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cFieldAssignment_1_1.eContents().get(0);
		
		//BreakCondition:
		//	"break:" break=BreakKind | "field:" field=STRING;
		public ParserRule getRule() { return rule; }

		//"break:" break=BreakKind | "field:" field=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"break:" break=BreakKind
		public Group getGroup_0() { return cGroup_0; }

		//"break:"
		public Keyword getBreakKeyword_0_0() { return cBreakKeyword_0_0; }

		//break=BreakKind
		public Assignment getBreakAssignment_0_1() { return cBreakAssignment_0_1; }

		//BreakKind
		public RuleCall getBreakBreakKindEnumRuleCall_0_1_0() { return cBreakBreakKindEnumRuleCall_0_1_0; }

		//"field:" field=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"field:"
		public Keyword getFieldKeyword_1_0() { return cFieldKeyword_1_0; }

		//field=STRING
		public Assignment getFieldAssignment_1_1() { return cFieldAssignment_1_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_1_1_0() { return cFieldSTRINGTerminalRuleCall_1_1_0; }
	}

	public class FieldPositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldPosition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPageThrowKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPageThrowAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPageThrowBooleanObjectParserRuleCall_0_1_0 = (RuleCall)cPageThrowAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColumnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnINTEGER_OBJECTParserRuleCall_1_1_0 = (RuleCall)cColumnAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLineKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRelativeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Alternatives cRelativeAlternatives_1_2_1_0 = (Alternatives)cRelativeAssignment_1_2_1.eContents().get(0);
		private final Keyword cRelativePlusSignKeyword_1_2_1_0_0 = (Keyword)cRelativeAlternatives_1_2_1_0.eContents().get(0);
		private final Keyword cRelativeHyphenMinusKeyword_1_2_1_0_1 = (Keyword)cRelativeAlternatives_1_2_1_0.eContents().get(1);
		private final Assignment cLineAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cLineINTEGER_OBJECTParserRuleCall_1_2_2_0 = (RuleCall)cLineAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cMultiLineKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cMultiLineAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cMultiLineBooleanObjectParserRuleCall_1_2_3_1_0 = (RuleCall)cMultiLineAssignment_1_2_3_1.eContents().get(0);
		
		//FieldPosition:
		//	"page-throw:" pageThrow=BooleanObject // value 0 means the current line
		//	// '+'|'-' means relative position from the current line 
		//	// omit '+'|'-' for an absolute position
		//	| "column:" column=INTEGER_OBJECT ("line:" relative=("+" | "-")? line=INTEGER_OBJECT ("multiLine:"
		//	multiLine=BooleanObject)?)?;
		public ParserRule getRule() { return rule; }

		//"page-throw:" pageThrow=BooleanObject // value 0 means the current line
		//// '+'|'-' means relative position from the current line 
		//// omit '+'|'-' for an absolute position
		//| "column:" column=INTEGER_OBJECT ("line:" relative=("+" | "-")? line=INTEGER_OBJECT ("multiLine:"
		//multiLine=BooleanObject)?)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"page-throw:" pageThrow=BooleanObject
		public Group getGroup_0() { return cGroup_0; }

		//"page-throw:"
		public Keyword getPageThrowKeyword_0_0() { return cPageThrowKeyword_0_0; }

		//pageThrow=BooleanObject
		public Assignment getPageThrowAssignment_0_1() { return cPageThrowAssignment_0_1; }

		//BooleanObject
		public RuleCall getPageThrowBooleanObjectParserRuleCall_0_1_0() { return cPageThrowBooleanObjectParserRuleCall_0_1_0; }

		//"column:" column=INTEGER_OBJECT ("line:" relative=("+" | "-")? line=INTEGER_OBJECT ("multiLine:"
		//multiLine=BooleanObject)?)?
		public Group getGroup_1() { return cGroup_1; }

		//"column:"
		public Keyword getColumnKeyword_1_0() { return cColumnKeyword_1_0; }

		//column=INTEGER_OBJECT
		public Assignment getColumnAssignment_1_1() { return cColumnAssignment_1_1; }

		//INTEGER_OBJECT
		public RuleCall getColumnINTEGER_OBJECTParserRuleCall_1_1_0() { return cColumnINTEGER_OBJECTParserRuleCall_1_1_0; }

		//("line:" relative=("+" | "-")? line=INTEGER_OBJECT ("multiLine:" multiLine=BooleanObject)?)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"line:"
		public Keyword getLineKeyword_1_2_0() { return cLineKeyword_1_2_0; }

		//relative=("+" | "-")?
		public Assignment getRelativeAssignment_1_2_1() { return cRelativeAssignment_1_2_1; }

		//"+" | "-"
		public Alternatives getRelativeAlternatives_1_2_1_0() { return cRelativeAlternatives_1_2_1_0; }

		//"+"
		public Keyword getRelativePlusSignKeyword_1_2_1_0_0() { return cRelativePlusSignKeyword_1_2_1_0_0; }

		//"-"
		public Keyword getRelativeHyphenMinusKeyword_1_2_1_0_1() { return cRelativeHyphenMinusKeyword_1_2_1_0_1; }

		//line=INTEGER_OBJECT
		public Assignment getLineAssignment_1_2_2() { return cLineAssignment_1_2_2; }

		//INTEGER_OBJECT
		public RuleCall getLineINTEGER_OBJECTParserRuleCall_1_2_2_0() { return cLineINTEGER_OBJECTParserRuleCall_1_2_2_0; }

		//("multiLine:" multiLine=BooleanObject)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//"multiLine:"
		public Keyword getMultiLineKeyword_1_2_3_0() { return cMultiLineKeyword_1_2_3_0; }

		//multiLine=BooleanObject
		public Assignment getMultiLineAssignment_1_2_3_1() { return cMultiLineAssignment_1_2_3_1; }

		//BooleanObject
		public RuleCall getMultiLineBooleanObjectParserRuleCall_1_2_3_1_0() { return cMultiLineBooleanObjectParserRuleCall_1_2_3_1_0; }
	}

	public class FormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Format");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormatFieldFormatEnumRuleCall_0_0 = (RuleCall)cFormatAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFieldSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cFieldAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cNegativePatternKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPatternAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPatternCurrencyPatternEnumRuleCall_1_1_1_0 = (RuleCall)cPatternAssignment_1_1_1.eContents().get(0);
		
		//Format: // TODO Add a validation rule for "FieldFormat::Currency"
		//	format=FieldFormat (field=STRING ("negative-pattern" pattern=CurrencyPattern)?)?;
		public ParserRule getRule() { return rule; }

		//// TODO Add a validation rule for "FieldFormat::Currency"
		//format=FieldFormat (field=STRING ("negative-pattern" pattern=CurrencyPattern)?)?
		public Group getGroup() { return cGroup; }

		//// TODO Add a validation rule for "FieldFormat::Currency"
		//format=FieldFormat
		public Assignment getFormatAssignment_0() { return cFormatAssignment_0; }

		//FieldFormat
		public RuleCall getFormatFieldFormatEnumRuleCall_0_0() { return cFormatFieldFormatEnumRuleCall_0_0; }

		//(field=STRING ("negative-pattern" pattern=CurrencyPattern)?)?
		public Group getGroup_1() { return cGroup_1; }

		//field=STRING
		public Assignment getFieldAssignment_1_0() { return cFieldAssignment_1_0; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_1_0_0() { return cFieldSTRINGTerminalRuleCall_1_0_0; }

		//("negative-pattern" pattern=CurrencyPattern)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"negative-pattern"
		public Keyword getNegativePatternKeyword_1_1_0() { return cNegativePatternKeyword_1_1_0; }

		//pattern=CurrencyPattern
		public Assignment getPatternAssignment_1_1_1() { return cPatternAssignment_1_1_1; }

		//CurrencyPattern
		public RuleCall getPatternCurrencyPatternEnumRuleCall_1_1_1_0() { return cPatternCurrencyPatternEnumRuleCall_1_1_1_0; }
	}

	public class ID_WITHDOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID_WITHDOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////ID WITH Dot Character	
		//ID_WITHDOT:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ToolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_WITHDOTParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLabelKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cLabelAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cLabelTranslationsParserRuleCall_3_0_2_0 = (RuleCall)cLabelAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cCommandKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCommandAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCommandSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cCommandAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * TOOLS
		// * ---------------------------------------------------------------------------
		// * / Tool:
		//	"tool" name=ID_WITHDOT "{" (("label" "{" label=Translations "}")? & ("command:" command+=STRING)*) "}";
		public ParserRule getRule() { return rule; }

		//"tool" name=ID_WITHDOT "{" (("label" "{" label=Translations "}")? & ("command:" command+=STRING)*) "}"
		public Group getGroup() { return cGroup; }

		//"tool"
		public Keyword getToolKeyword_0() { return cToolKeyword_0; }

		//name=ID_WITHDOT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_WITHDOT
		public RuleCall getNameID_WITHDOTParserRuleCall_1_0() { return cNameID_WITHDOTParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("label" "{" label=Translations "}")? & ("command:" command+=STRING)*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("label" "{" label=Translations "}")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"label"
		public Keyword getLabelKeyword_3_0_0() { return cLabelKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//label=Translations
		public Assignment getLabelAssignment_3_0_2() { return cLabelAssignment_3_0_2; }

		//Translations
		public RuleCall getLabelTranslationsParserRuleCall_3_0_2_0() { return cLabelTranslationsParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//("command:" command+=STRING)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"command:"
		public Keyword getCommandKeyword_3_1_0() { return cCommandKeyword_3_1_0; }

		//command+=STRING
		public Assignment getCommandAssignment_3_1_1() { return cCommandAssignment_3_1_1; }

		//STRING
		public RuleCall getCommandSTRINGTerminalRuleCall_3_1_1_0() { return cCommandSTRINGTerminalRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WebServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWebServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cWebServiceAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cPublishKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cPublishWebServiceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cPublishWebServiceBooleanObjectParserRuleCall_3_0_1_0 = (RuleCall)cPublishWebServiceAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cNamesKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cWebServiceNamesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cWebServiceNamesSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cWebServiceNamesAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cWebServiceNamesAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cWebServiceNamesSTRINGTerminalRuleCall_3_1_2_1_0 = (RuleCall)cWebServiceNamesAssignment_3_1_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_2 = (UnorderedGroup)cGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cUnorderedGroup_3_2.eContents().get(0);
		private final Keyword cActivityKeyword_3_2_0_0 = (Keyword)cGroup_3_2_0.eContents().get(0);
		private final Assignment cWebServiceActivityAssignment_3_2_0_1 = (Assignment)cGroup_3_2_0.eContents().get(1);
		private final RuleCall cWebServiceActivitySTRINGTerminalRuleCall_3_2_0_1_0 = (RuleCall)cWebServiceActivityAssignment_3_2_0_1.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cUnorderedGroup_3_2.eContents().get(1);
		private final Keyword cDescriptionKeyword_3_2_1_0 = (Keyword)cGroup_3_2_1.eContents().get(0);
		private final Assignment cWebServiceDescriptionAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cWebServiceDescriptionSTRINGTerminalRuleCall_3_2_1_1_0 = (RuleCall)cWebServiceDescriptionAssignment_3_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Web Services
		// * ---------------------------------------------------------------------------
		// * / WebService:
		//	"web-service" {WebService} "{" (("publish:" publishWebService=BooleanObject)? // == EXPOSE
		//	("names:" webServiceNames+=STRING ("," webServiceNames+=STRING)*)? // == SERVICE. This could in the future become a reference to an EB.Service from TWS EMF Model?  
		//	(("activity:" webServiceActivity=STRING)? // == ACTIVITY
		//	& ("description:" webServiceDescription=STRING)?) // == EXPOSE.DESC
		//) "}";
		public ParserRule getRule() { return rule; }

		//"web-service" {WebService} "{" (("publish:" publishWebService=BooleanObject)? // == EXPOSE
		//("names:" webServiceNames+=STRING ("," webServiceNames+=STRING)*)? // == SERVICE. This could in the future become a reference to an EB.Service from TWS EMF Model?  
		//(("activity:" webServiceActivity=STRING)? // == ACTIVITY
		//& ("description:" webServiceDescription=STRING)?) // == EXPOSE.DESC
		//) "}"
		public Group getGroup() { return cGroup; }

		//"web-service"
		public Keyword getWebServiceKeyword_0() { return cWebServiceKeyword_0; }

		//{WebService}
		public Action getWebServiceAction_1() { return cWebServiceAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("publish:" publishWebService=BooleanObject)? // == EXPOSE
		//("names:" webServiceNames+=STRING ("," webServiceNames+=STRING)*)? // == SERVICE. This could in the future become a reference to an EB.Service from TWS EMF Model?  
		//(("activity:" webServiceActivity=STRING)? // == ACTIVITY
		//& ("description:" webServiceDescription=STRING)?) // == EXPOSE.DESC
		public Group getGroup_3() { return cGroup_3; }

		//("publish:" publishWebService=BooleanObject)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"publish:"
		public Keyword getPublishKeyword_3_0_0() { return cPublishKeyword_3_0_0; }

		//publishWebService=BooleanObject
		public Assignment getPublishWebServiceAssignment_3_0_1() { return cPublishWebServiceAssignment_3_0_1; }

		//BooleanObject
		public RuleCall getPublishWebServiceBooleanObjectParserRuleCall_3_0_1_0() { return cPublishWebServiceBooleanObjectParserRuleCall_3_0_1_0; }

		//("names:" webServiceNames+=STRING ("," webServiceNames+=STRING)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"names:"
		public Keyword getNamesKeyword_3_1_0() { return cNamesKeyword_3_1_0; }

		//webServiceNames+=STRING
		public Assignment getWebServiceNamesAssignment_3_1_1() { return cWebServiceNamesAssignment_3_1_1; }

		//STRING
		public RuleCall getWebServiceNamesSTRINGTerminalRuleCall_3_1_1_0() { return cWebServiceNamesSTRINGTerminalRuleCall_3_1_1_0; }

		//("," webServiceNames+=STRING)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//","
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }

		//webServiceNames+=STRING
		public Assignment getWebServiceNamesAssignment_3_1_2_1() { return cWebServiceNamesAssignment_3_1_2_1; }

		//STRING
		public RuleCall getWebServiceNamesSTRINGTerminalRuleCall_3_1_2_1_0() { return cWebServiceNamesSTRINGTerminalRuleCall_3_1_2_1_0; }

		//("activity:" webServiceActivity=STRING)? // == ACTIVITY
		//& ("description:" webServiceDescription=STRING)?
		public UnorderedGroup getUnorderedGroup_3_2() { return cUnorderedGroup_3_2; }

		//("activity:" webServiceActivity=STRING)?
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//"activity:"
		public Keyword getActivityKeyword_3_2_0_0() { return cActivityKeyword_3_2_0_0; }

		//webServiceActivity=STRING
		public Assignment getWebServiceActivityAssignment_3_2_0_1() { return cWebServiceActivityAssignment_3_2_0_1; }

		//STRING
		public RuleCall getWebServiceActivitySTRINGTerminalRuleCall_3_2_0_1_0() { return cWebServiceActivitySTRINGTerminalRuleCall_3_2_0_1_0; }

		//("description:" webServiceDescription=STRING)?
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }

		//"description:"
		public Keyword getDescriptionKeyword_3_2_1_0() { return cDescriptionKeyword_3_2_1_0; }

		//webServiceDescription=STRING
		public Assignment getWebServiceDescriptionAssignment_3_2_1_1() { return cWebServiceDescriptionAssignment_3_2_1_1; }

		//STRING
		public RuleCall getWebServiceDescriptionSTRINGTerminalRuleCall_3_2_1_1_0() { return cWebServiceDescriptionSTRINGTerminalRuleCall_3_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cYesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * Data Types
		// * ---------------------------------------------------------------------------
		// * / BooleanObject returns ecore::EBooleanObject:
		//	"No" | "false" | "Yes" | "true";
		public ParserRule getRule() { return rule; }

		//"No" | "false" | "Yes" | "true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"No"
		public Keyword getNoKeyword_0() { return cNoKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"Yes"
		public Keyword getYesKeyword_2() { return cYesKeyword_2; }

		//"true"
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cYesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Boolean returns ecore::EBoolean:
		//	"No" | "false" | "Yes" | "true";
		public ParserRule getRule() { return rule; }

		//"No" | "false" | "Yes" | "true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"No"
		public Keyword getNoKeyword_0() { return cNoKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"Yes"
		public Keyword getYesKeyword_2() { return cYesKeyword_2; }

		//"true"
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }
	}

	public class INTEGER_OBJECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_OBJECT");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTEGER_OBJECT returns ecore::EIntegerObject:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	public class EnquiryModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EnquiryMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cT24EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cT24T24Keyword_0_0 = (Keyword)cT24EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDBDBKeyword_1_0 = (Keyword)cDBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EnquiryMode:
		//	T24 | DB;
		public EnumRule getRule() { return rule; }

		//T24 | DB
		public Alternatives getAlternatives() { return cAlternatives; }

		//T24
		public EnumLiteralDeclaration getT24EnumLiteralDeclaration_0() { return cT24EnumLiteralDeclaration_0; }

		//"T24"
		public Keyword getT24T24Keyword_0_0() { return cT24T24Keyword_0_0; }

		//DB
		public EnumLiteralDeclaration getDBEnumLiteralDeclaration_1() { return cDBEnumLiteralDeclaration_1; }

		//"DB"
		public Keyword getDBDBKeyword_1_0() { return cDBDBKeyword_1_0; }
	}

	public class AlignmentKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AlignmentKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeftLeftKeyword_2_0 = (Keyword)cLeftEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRightRightKeyword_3_0 = (Keyword)cRightEnumLiteralDeclaration_3.eContents().get(0);
		
		/// **
		// * ---------------------------------------------------------------------------
		// * ENUMERATIONS
		// * ---------------------------------------------------------------------------
		// * / enum AlignmentKind:
		//	Unspecified="Null" / * default * / | None | Left | Right;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" / * default * / | None | Left | Right
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_2() { return cLeftEnumLiteralDeclaration_2; }

		//"Left"
		public Keyword getLeftLeftKeyword_2_0() { return cLeftLeftKeyword_2_0; }

		//Right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_3() { return cRightEnumLiteralDeclaration_3; }

		//"Right"
		public Keyword getRightRightKeyword_3_0() { return cRightRightKeyword_3_0; }
	}

	public class BreakKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BreakKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOnceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOnceOnceKeyword_2_0 = (Keyword)cOnceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEndEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEndEndKeyword_3_0 = (Keyword)cEndEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNewPageEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNewPageNewPageKeyword_4_0 = (Keyword)cNewPageEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPageEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPagePageKeyword_5_0 = (Keyword)cPageEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BreakKind:
		//	Unspecified="Null" / *default* / | None | Once | End | NewPage | Page;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" / *default* / | None | Once | End | NewPage | Page
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Once
		public EnumLiteralDeclaration getOnceEnumLiteralDeclaration_2() { return cOnceEnumLiteralDeclaration_2; }

		//"Once"
		public Keyword getOnceOnceKeyword_2_0() { return cOnceOnceKeyword_2_0; }

		//End
		public EnumLiteralDeclaration getEndEnumLiteralDeclaration_3() { return cEndEnumLiteralDeclaration_3; }

		//"End"
		public Keyword getEndEndKeyword_3_0() { return cEndEndKeyword_3_0; }

		//NewPage
		public EnumLiteralDeclaration getNewPageEnumLiteralDeclaration_4() { return cNewPageEnumLiteralDeclaration_4; }

		//"NewPage"
		public Keyword getNewPageNewPageKeyword_4_0() { return cNewPageNewPageKeyword_4_0; }

		//Page
		public EnumLiteralDeclaration getPageEnumLiteralDeclaration_5() { return cPageEnumLiteralDeclaration_5; }

		//"Page"
		public Keyword getPagePageKeyword_5_0() { return cPagePageKeyword_5_0; }
	}

	public class CurrencyPatternElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CurrencyPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNULLHyphenMinusNumberSignKeyword_2_0 = (Keyword)cNULLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cELessThanSignNumberSignGreaterThanSignKeyword_3_0 = (Keyword)cEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMNumberSignHyphenMinusKeyword_4_0 = (Keyword)cMEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBDbKeyword_5_0 = (Keyword)cBEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNNumberSignKeyword_6_0 = (Keyword)cNEnumLiteralDeclaration_6.eContents().get(0);
		
		//// available formats for negative number.
		//enum CurrencyPattern:
		//	Unspecified="Null" / *default* / | None | NULL="-#" | E="<#>" | M="#-" | B="#db" | N="#";
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" / *default* / | None | NULL="-#" | E="<#>" | M="#-" | B="#db" | N="#"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//NULL="-#"
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_2() { return cNULLEnumLiteralDeclaration_2; }

		//"-#"
		public Keyword getNULLHyphenMinusNumberSignKeyword_2_0() { return cNULLHyphenMinusNumberSignKeyword_2_0; }

		//E="<#>"
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_3() { return cEEnumLiteralDeclaration_3; }

		//"<#>"
		public Keyword getELessThanSignNumberSignGreaterThanSignKeyword_3_0() { return cELessThanSignNumberSignGreaterThanSignKeyword_3_0; }

		//M="#-"
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_4() { return cMEnumLiteralDeclaration_4; }

		//"#-"
		public Keyword getMNumberSignHyphenMinusKeyword_4_0() { return cMNumberSignHyphenMinusKeyword_4_0; }

		//B="#db"
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_5() { return cBEnumLiteralDeclaration_5; }

		//"#db"
		public Keyword getBDbKeyword_5_0() { return cBDbKeyword_5_0; }

		//N="#"
		public EnumLiteralDeclaration getNEnumLiteralDeclaration_6() { return cNEnumLiteralDeclaration_6; }

		//"#"
		public Keyword getNNumberSignKeyword_6_0() { return cNNumberSignKeyword_6_0; }
	}

	public class DecisionOperandElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DecisionOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualsEqualsKeyword_1_0 = (Keyword)cEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNotEqualsNotEqualsKeyword_2_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterOrEqualsGreaterOrEqualsKeyword_4_0 = (Keyword)cGreaterOrEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLessThanLessThanKeyword_5_0 = (Keyword)cLessThanEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLessOrEqualsLessOrEqualsKeyword_6_0 = (Keyword)cLessOrEqualsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBetweenEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBetweenBetweenKeyword_7_0 = (Keyword)cBetweenEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotBetweenEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotBetweenNotBetweenKeyword_8_0 = (Keyword)cNotBetweenEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMatchesEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMatchesMatchesKeyword_9_0 = (Keyword)cMatchesEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNotMatchesEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNotMatchesNotMatchesKeyword_10_0 = (Keyword)cNotMatchesEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum DecisionOperand:
		//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Between | NotBetween | Matches |
		//	NotMatches;
		public EnumRule getRule() { return rule; }

		//None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Between | NotBetween | Matches |
		//NotMatches
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//Equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_1() { return cEqualsEnumLiteralDeclaration_1; }

		//"Equals"
		public Keyword getEqualsEqualsKeyword_1_0() { return cEqualsEqualsKeyword_1_0; }

		//NotEquals
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_2() { return cNotEqualsEnumLiteralDeclaration_2; }

		//"NotEquals"
		public Keyword getNotEqualsNotEqualsKeyword_2_0() { return cNotEqualsNotEqualsKeyword_2_0; }

		//Greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//"Greater"
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }

		//GreaterOrEquals
		public EnumLiteralDeclaration getGreaterOrEqualsEnumLiteralDeclaration_4() { return cGreaterOrEqualsEnumLiteralDeclaration_4; }

		//"GreaterOrEquals"
		public Keyword getGreaterOrEqualsGreaterOrEqualsKeyword_4_0() { return cGreaterOrEqualsGreaterOrEqualsKeyword_4_0; }

		//LessThan
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_5() { return cLessThanEnumLiteralDeclaration_5; }

		//"LessThan"
		public Keyword getLessThanLessThanKeyword_5_0() { return cLessThanLessThanKeyword_5_0; }

		//LessOrEquals
		public EnumLiteralDeclaration getLessOrEqualsEnumLiteralDeclaration_6() { return cLessOrEqualsEnumLiteralDeclaration_6; }

		//"LessOrEquals"
		public Keyword getLessOrEqualsLessOrEqualsKeyword_6_0() { return cLessOrEqualsLessOrEqualsKeyword_6_0; }

		//Between
		public EnumLiteralDeclaration getBetweenEnumLiteralDeclaration_7() { return cBetweenEnumLiteralDeclaration_7; }

		//"Between"
		public Keyword getBetweenBetweenKeyword_7_0() { return cBetweenBetweenKeyword_7_0; }

		//NotBetween
		public EnumLiteralDeclaration getNotBetweenEnumLiteralDeclaration_8() { return cNotBetweenEnumLiteralDeclaration_8; }

		//"NotBetween"
		public Keyword getNotBetweenNotBetweenKeyword_8_0() { return cNotBetweenNotBetweenKeyword_8_0; }

		//Matches
		public EnumLiteralDeclaration getMatchesEnumLiteralDeclaration_9() { return cMatchesEnumLiteralDeclaration_9; }

		//"Matches"
		public Keyword getMatchesMatchesKeyword_9_0() { return cMatchesMatchesKeyword_9_0; }

		//NotMatches
		public EnumLiteralDeclaration getNotMatchesEnumLiteralDeclaration_10() { return cNotMatchesEnumLiteralDeclaration_10; }

		//"NotMatches"
		public Keyword getNotMatchesNotMatchesKeyword_10_0() { return cNotMatchesNotMatchesKeyword_10_0; }
	}

	public class DisplaySectionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DisplaySectionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHeaderEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHeaderHeaderKeyword_2_0 = (Keyword)cHeaderEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFooterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFooterFooterKeyword_3_0 = (Keyword)cFooterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCaptionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCaptionCaptionKeyword_4_0 = (Keyword)cCaptionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNoDisplayEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNoDisplayNoDisplayKeyword_5_0 = (Keyword)cNoDisplayEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum DisplaySectionKind:
		//	Unspecified="Null" / *default* / | None | Header | Footer | Caption | NoDisplay;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" / *default* / | None | Header | Footer | Caption | NoDisplay
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Header
		public EnumLiteralDeclaration getHeaderEnumLiteralDeclaration_2() { return cHeaderEnumLiteralDeclaration_2; }

		//"Header"
		public Keyword getHeaderHeaderKeyword_2_0() { return cHeaderHeaderKeyword_2_0; }

		//Footer
		public EnumLiteralDeclaration getFooterEnumLiteralDeclaration_3() { return cFooterEnumLiteralDeclaration_3; }

		//"Footer"
		public Keyword getFooterFooterKeyword_3_0() { return cFooterFooterKeyword_3_0; }

		//Caption
		public EnumLiteralDeclaration getCaptionEnumLiteralDeclaration_4() { return cCaptionEnumLiteralDeclaration_4; }

		//"Caption"
		public Keyword getCaptionCaptionKeyword_4_0() { return cCaptionCaptionKeyword_4_0; }

		//NoDisplay
		public EnumLiteralDeclaration getNoDisplayEnumLiteralDeclaration_5() { return cNoDisplayEnumLiteralDeclaration_5; }

		//"NoDisplay"
		public Keyword getNoDisplayNoDisplayKeyword_5_0() { return cNoDisplayNoDisplayKeyword_5_0; }
	}

	public class FieldFormatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FieldFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateDateKeyword_2_0 = (Keyword)cDateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUserEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUserUserKeyword_3_0 = (Keyword)cUserEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTranslateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTranslateTranslateKeyword_4_0 = (Keyword)cTranslateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRateEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRateRateKeyword_5_0 = (Keyword)cRateEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCurrencyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCurrencyCurrencyKeyword_6_0 = (Keyword)cCurrencyEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum FieldFormat:
		//	Unspecified="Null" | None | Date | User | Translate | Rate | Currency;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" | None | Date | User | Translate | Rate | Currency
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_2() { return cDateEnumLiteralDeclaration_2; }

		//"Date"
		public Keyword getDateDateKeyword_2_0() { return cDateDateKeyword_2_0; }

		//User
		public EnumLiteralDeclaration getUserEnumLiteralDeclaration_3() { return cUserEnumLiteralDeclaration_3; }

		//"User"
		public Keyword getUserUserKeyword_3_0() { return cUserUserKeyword_3_0; }

		//Translate
		public EnumLiteralDeclaration getTranslateEnumLiteralDeclaration_4() { return cTranslateEnumLiteralDeclaration_4; }

		//"Translate"
		public Keyword getTranslateTranslateKeyword_4_0() { return cTranslateTranslateKeyword_4_0; }

		//Rate
		public EnumLiteralDeclaration getRateEnumLiteralDeclaration_5() { return cRateEnumLiteralDeclaration_5; }

		//"Rate"
		public Keyword getRateRateKeyword_5_0() { return cRateRateKeyword_5_0; }

		//Currency
		public EnumLiteralDeclaration getCurrencyEnumLiteralDeclaration_6() { return cCurrencyEnumLiteralDeclaration_6; }

		//"Currency"
		public Keyword getCurrencyCurrencyKeyword_6_0() { return cCurrencyCurrencyKeyword_6_0; }
	}

	public class FunctionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAuthoriseEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAuthoriseAuthoriseKeyword_3_0 = (Keyword)cAuthoriseEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cReverseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cReverseReverseKeyword_4_0 = (Keyword)cReverseEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSeeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSeeSeeKeyword_5_0 = (Keyword)cSeeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCopyEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCopyCopyKeyword_6_0 = (Keyword)cCopyEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDeleteDeleteKeyword_7_0 = (Keyword)cDeleteEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cVerifyEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cVerifyVerifyKeyword_8_0 = (Keyword)cVerifyEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum FunctionKind:
		//	Unspecified="Null" | None | Input | Authorise | Reverse | See | Copy | Delete | Verify;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" | None | Input | Authorise | Reverse | See | Copy | Delete | Verify
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Input
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_2() { return cInputEnumLiteralDeclaration_2; }

		//"Input"
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }

		//Authorise
		public EnumLiteralDeclaration getAuthoriseEnumLiteralDeclaration_3() { return cAuthoriseEnumLiteralDeclaration_3; }

		//"Authorise"
		public Keyword getAuthoriseAuthoriseKeyword_3_0() { return cAuthoriseAuthoriseKeyword_3_0; }

		//Reverse
		public EnumLiteralDeclaration getReverseEnumLiteralDeclaration_4() { return cReverseEnumLiteralDeclaration_4; }

		//"Reverse"
		public Keyword getReverseReverseKeyword_4_0() { return cReverseReverseKeyword_4_0; }

		//See
		public EnumLiteralDeclaration getSeeEnumLiteralDeclaration_5() { return cSeeEnumLiteralDeclaration_5; }

		//"See"
		public Keyword getSeeSeeKeyword_5_0() { return cSeeSeeKeyword_5_0; }

		//Copy
		public EnumLiteralDeclaration getCopyEnumLiteralDeclaration_6() { return cCopyEnumLiteralDeclaration_6; }

		//"Copy"
		public Keyword getCopyCopyKeyword_6_0() { return cCopyCopyKeyword_6_0; }

		//Delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_7() { return cDeleteEnumLiteralDeclaration_7; }

		//"Delete"
		public Keyword getDeleteDeleteKeyword_7_0() { return cDeleteDeleteKeyword_7_0; }

		//Verify
		public EnumLiteralDeclaration getVerifyEnumLiteralDeclaration_8() { return cVerifyEnumLiteralDeclaration_8; }

		//"Verify"
		public Keyword getVerifyVerifyKeyword_8_0() { return cVerifyVerifyKeyword_8_0; }
	}

	public class SelectionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualsEqualsKeyword_1_0 = (Keyword)cEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNotEqualsNotEqualsKeyword_2_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterOrEqualsGreaterOrEqualsKeyword_4_0 = (Keyword)cGreaterOrEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLessThanLessThanKeyword_5_0 = (Keyword)cLessThanEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLessOrEqualsLessOrEqualsKeyword_6_0 = (Keyword)cLessOrEqualsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMatchesEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMatchesMatchesKeyword_7_0 = (Keyword)cMatchesEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotMatchesEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotMatchesNotMatchesKeyword_8_0 = (Keyword)cNotMatchesEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBetweenEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBetweenBetweenKeyword_9_0 = (Keyword)cBetweenEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNotBetweenEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNotBetweenNotBetweenKeyword_10_0 = (Keyword)cNotBetweenEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cContainsContainsKeyword_11_0 = (Keyword)cContainsEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotContainEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cDoesNotContainDoesNotContainKeyword_12_0 = (Keyword)cDoesNotContainEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cBeginsWithEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cBeginsWithBeginsWithKeyword_13_0 = (Keyword)cBeginsWithEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotBeginWithEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cDoesNotBeginWithDoesNotBeginWithKeyword_14_0 = (Keyword)cDoesNotBeginWithEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cEndsWithEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cEndsWithEndsWithKeyword_15_0 = (Keyword)cEndsWithEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotEndWithEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cDoesNotEndWithDoesNotEndWithKeyword_16_0 = (Keyword)cDoesNotEndWithEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cSoundsLikeEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cSoundsLikeSoundsLikeKeyword_17_0 = (Keyword)cSoundsLikeEnumLiteralDeclaration_17.eContents().get(0);
		
		//// Operands used in the definition of a fixed selection
		//enum SelectionOperator:
		//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
		//	NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike;
		public EnumRule getRule() { return rule; }

		//None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
		//NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//Equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_1() { return cEqualsEnumLiteralDeclaration_1; }

		//"Equals"
		public Keyword getEqualsEqualsKeyword_1_0() { return cEqualsEqualsKeyword_1_0; }

		//NotEquals
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_2() { return cNotEqualsEnumLiteralDeclaration_2; }

		//"NotEquals"
		public Keyword getNotEqualsNotEqualsKeyword_2_0() { return cNotEqualsNotEqualsKeyword_2_0; }

		//Greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//"Greater"
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }

		//GreaterOrEquals
		public EnumLiteralDeclaration getGreaterOrEqualsEnumLiteralDeclaration_4() { return cGreaterOrEqualsEnumLiteralDeclaration_4; }

		//"GreaterOrEquals"
		public Keyword getGreaterOrEqualsGreaterOrEqualsKeyword_4_0() { return cGreaterOrEqualsGreaterOrEqualsKeyword_4_0; }

		//LessThan
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_5() { return cLessThanEnumLiteralDeclaration_5; }

		//"LessThan"
		public Keyword getLessThanLessThanKeyword_5_0() { return cLessThanLessThanKeyword_5_0; }

		//LessOrEquals
		public EnumLiteralDeclaration getLessOrEqualsEnumLiteralDeclaration_6() { return cLessOrEqualsEnumLiteralDeclaration_6; }

		//"LessOrEquals"
		public Keyword getLessOrEqualsLessOrEqualsKeyword_6_0() { return cLessOrEqualsLessOrEqualsKeyword_6_0; }

		//Matches
		public EnumLiteralDeclaration getMatchesEnumLiteralDeclaration_7() { return cMatchesEnumLiteralDeclaration_7; }

		//"Matches"
		public Keyword getMatchesMatchesKeyword_7_0() { return cMatchesMatchesKeyword_7_0; }

		//NotMatches
		public EnumLiteralDeclaration getNotMatchesEnumLiteralDeclaration_8() { return cNotMatchesEnumLiteralDeclaration_8; }

		//"NotMatches"
		public Keyword getNotMatchesNotMatchesKeyword_8_0() { return cNotMatchesNotMatchesKeyword_8_0; }

		//Between
		public EnumLiteralDeclaration getBetweenEnumLiteralDeclaration_9() { return cBetweenEnumLiteralDeclaration_9; }

		//"Between"
		public Keyword getBetweenBetweenKeyword_9_0() { return cBetweenBetweenKeyword_9_0; }

		//NotBetween
		public EnumLiteralDeclaration getNotBetweenEnumLiteralDeclaration_10() { return cNotBetweenEnumLiteralDeclaration_10; }

		//"NotBetween"
		public Keyword getNotBetweenNotBetweenKeyword_10_0() { return cNotBetweenNotBetweenKeyword_10_0; }

		//Contains
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_11() { return cContainsEnumLiteralDeclaration_11; }

		//"Contains"
		public Keyword getContainsContainsKeyword_11_0() { return cContainsContainsKeyword_11_0; }

		//DoesNotContain
		public EnumLiteralDeclaration getDoesNotContainEnumLiteralDeclaration_12() { return cDoesNotContainEnumLiteralDeclaration_12; }

		//"DoesNotContain"
		public Keyword getDoesNotContainDoesNotContainKeyword_12_0() { return cDoesNotContainDoesNotContainKeyword_12_0; }

		//BeginsWith
		public EnumLiteralDeclaration getBeginsWithEnumLiteralDeclaration_13() { return cBeginsWithEnumLiteralDeclaration_13; }

		//"BeginsWith"
		public Keyword getBeginsWithBeginsWithKeyword_13_0() { return cBeginsWithBeginsWithKeyword_13_0; }

		//DoesNotBeginWith
		public EnumLiteralDeclaration getDoesNotBeginWithEnumLiteralDeclaration_14() { return cDoesNotBeginWithEnumLiteralDeclaration_14; }

		//"DoesNotBeginWith"
		public Keyword getDoesNotBeginWithDoesNotBeginWithKeyword_14_0() { return cDoesNotBeginWithDoesNotBeginWithKeyword_14_0; }

		//EndsWith
		public EnumLiteralDeclaration getEndsWithEnumLiteralDeclaration_15() { return cEndsWithEnumLiteralDeclaration_15; }

		//"EndsWith"
		public Keyword getEndsWithEndsWithKeyword_15_0() { return cEndsWithEndsWithKeyword_15_0; }

		//DoesNotEndWith
		public EnumLiteralDeclaration getDoesNotEndWithEnumLiteralDeclaration_16() { return cDoesNotEndWithEnumLiteralDeclaration_16; }

		//"DoesNotEndWith"
		public Keyword getDoesNotEndWithDoesNotEndWithKeyword_16_0() { return cDoesNotEndWithDoesNotEndWithKeyword_16_0; }

		//SoundsLike
		public EnumLiteralDeclaration getSoundsLikeEnumLiteralDeclaration_17() { return cSoundsLikeEnumLiteralDeclaration_17; }

		//"SoundsLike"
		public Keyword getSoundsLikeSoundsLikeKeyword_17_0() { return cSoundsLikeSoundsLikeKeyword_17_0; }
	}

	public class CriteriaOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CriteriaOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualsEqualsKeyword_1_0 = (Keyword)cEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNotEqualsNotEqualsKeyword_2_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterOrEqualsGreaterOrEqualsKeyword_4_0 = (Keyword)cGreaterOrEqualsEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLessThanLessThanKeyword_5_0 = (Keyword)cLessThanEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLessOrEqualsLessOrEqualsKeyword_6_0 = (Keyword)cLessOrEqualsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMatchesEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMatchesMatchesKeyword_7_0 = (Keyword)cMatchesEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotMatchesEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotMatchesNotMatchesKeyword_8_0 = (Keyword)cNotMatchesEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBetweenEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBetweenBetweenKeyword_9_0 = (Keyword)cBetweenEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNotBetweenEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNotBetweenNotBetweenKeyword_10_0 = (Keyword)cNotBetweenEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cContainsContainsKeyword_11_0 = (Keyword)cContainsEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotContainEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cDoesNotContainDoesNotContainKeyword_12_0 = (Keyword)cDoesNotContainEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cBeginsWithEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cBeginsWithBeginsWithKeyword_13_0 = (Keyword)cBeginsWithEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotBeginWithEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cDoesNotBeginWithDoesNotBeginWithKeyword_14_0 = (Keyword)cDoesNotBeginWithEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cEndsWithEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cEndsWithEndsWithKeyword_15_0 = (Keyword)cEndsWithEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cDoesNotEndWithEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cDoesNotEndWithDoesNotEndWithKeyword_16_0 = (Keyword)cDoesNotEndWithEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cSoundsLikeEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cSoundsLikeSoundsLikeKeyword_17_0 = (Keyword)cSoundsLikeEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanSymbolEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cGreaterThanSymbolGreaterThanSignKeyword_18_0 = (Keyword)cGreaterThanSymbolEnumLiteralDeclaration_18.eContents().get(0);
		
		//enum CriteriaOperator:
		//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
		//	NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike |
		//	GreaterThanSymbol=">";
		public EnumRule getRule() { return rule; }

		//None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
		//NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike |
		//GreaterThanSymbol=">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//Equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_1() { return cEqualsEnumLiteralDeclaration_1; }

		//"Equals"
		public Keyword getEqualsEqualsKeyword_1_0() { return cEqualsEqualsKeyword_1_0; }

		//NotEquals
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_2() { return cNotEqualsEnumLiteralDeclaration_2; }

		//"NotEquals"
		public Keyword getNotEqualsNotEqualsKeyword_2_0() { return cNotEqualsNotEqualsKeyword_2_0; }

		//Greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//"Greater"
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }

		//GreaterOrEquals
		public EnumLiteralDeclaration getGreaterOrEqualsEnumLiteralDeclaration_4() { return cGreaterOrEqualsEnumLiteralDeclaration_4; }

		//"GreaterOrEquals"
		public Keyword getGreaterOrEqualsGreaterOrEqualsKeyword_4_0() { return cGreaterOrEqualsGreaterOrEqualsKeyword_4_0; }

		//LessThan
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_5() { return cLessThanEnumLiteralDeclaration_5; }

		//"LessThan"
		public Keyword getLessThanLessThanKeyword_5_0() { return cLessThanLessThanKeyword_5_0; }

		//LessOrEquals
		public EnumLiteralDeclaration getLessOrEqualsEnumLiteralDeclaration_6() { return cLessOrEqualsEnumLiteralDeclaration_6; }

		//"LessOrEquals"
		public Keyword getLessOrEqualsLessOrEqualsKeyword_6_0() { return cLessOrEqualsLessOrEqualsKeyword_6_0; }

		//Matches
		public EnumLiteralDeclaration getMatchesEnumLiteralDeclaration_7() { return cMatchesEnumLiteralDeclaration_7; }

		//"Matches"
		public Keyword getMatchesMatchesKeyword_7_0() { return cMatchesMatchesKeyword_7_0; }

		//NotMatches
		public EnumLiteralDeclaration getNotMatchesEnumLiteralDeclaration_8() { return cNotMatchesEnumLiteralDeclaration_8; }

		//"NotMatches"
		public Keyword getNotMatchesNotMatchesKeyword_8_0() { return cNotMatchesNotMatchesKeyword_8_0; }

		//Between
		public EnumLiteralDeclaration getBetweenEnumLiteralDeclaration_9() { return cBetweenEnumLiteralDeclaration_9; }

		//"Between"
		public Keyword getBetweenBetweenKeyword_9_0() { return cBetweenBetweenKeyword_9_0; }

		//NotBetween
		public EnumLiteralDeclaration getNotBetweenEnumLiteralDeclaration_10() { return cNotBetweenEnumLiteralDeclaration_10; }

		//"NotBetween"
		public Keyword getNotBetweenNotBetweenKeyword_10_0() { return cNotBetweenNotBetweenKeyword_10_0; }

		//Contains
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_11() { return cContainsEnumLiteralDeclaration_11; }

		//"Contains"
		public Keyword getContainsContainsKeyword_11_0() { return cContainsContainsKeyword_11_0; }

		//DoesNotContain
		public EnumLiteralDeclaration getDoesNotContainEnumLiteralDeclaration_12() { return cDoesNotContainEnumLiteralDeclaration_12; }

		//"DoesNotContain"
		public Keyword getDoesNotContainDoesNotContainKeyword_12_0() { return cDoesNotContainDoesNotContainKeyword_12_0; }

		//BeginsWith
		public EnumLiteralDeclaration getBeginsWithEnumLiteralDeclaration_13() { return cBeginsWithEnumLiteralDeclaration_13; }

		//"BeginsWith"
		public Keyword getBeginsWithBeginsWithKeyword_13_0() { return cBeginsWithBeginsWithKeyword_13_0; }

		//DoesNotBeginWith
		public EnumLiteralDeclaration getDoesNotBeginWithEnumLiteralDeclaration_14() { return cDoesNotBeginWithEnumLiteralDeclaration_14; }

		//"DoesNotBeginWith"
		public Keyword getDoesNotBeginWithDoesNotBeginWithKeyword_14_0() { return cDoesNotBeginWithDoesNotBeginWithKeyword_14_0; }

		//EndsWith
		public EnumLiteralDeclaration getEndsWithEnumLiteralDeclaration_15() { return cEndsWithEnumLiteralDeclaration_15; }

		//"EndsWith"
		public Keyword getEndsWithEndsWithKeyword_15_0() { return cEndsWithEndsWithKeyword_15_0; }

		//DoesNotEndWith
		public EnumLiteralDeclaration getDoesNotEndWithEnumLiteralDeclaration_16() { return cDoesNotEndWithEnumLiteralDeclaration_16; }

		//"DoesNotEndWith"
		public Keyword getDoesNotEndWithDoesNotEndWithKeyword_16_0() { return cDoesNotEndWithDoesNotEndWithKeyword_16_0; }

		//SoundsLike
		public EnumLiteralDeclaration getSoundsLikeEnumLiteralDeclaration_17() { return cSoundsLikeEnumLiteralDeclaration_17; }

		//"SoundsLike"
		public Keyword getSoundsLikeSoundsLikeKeyword_17_0() { return cSoundsLikeSoundsLikeKeyword_17_0; }

		//GreaterThanSymbol=">"
		public EnumLiteralDeclaration getGreaterThanSymbolEnumLiteralDeclaration_18() { return cGreaterThanSymbolEnumLiteralDeclaration_18; }

		//">"
		public Keyword getGreaterThanSymbolGreaterThanSignKeyword_18_0() { return cGreaterThanSymbolGreaterThanSignKeyword_18_0; }
	}

	public class ProcessingModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessingMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSingleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSingleSingleKeyword_2_0 = (Keyword)cSingleEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiMultiKeyword_3_0 = (Keyword)cMultiEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ProcessingMode:
		//	Unspecified="Null" | None | Single | Multi;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" | None | Single | Multi
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Single
		public EnumLiteralDeclaration getSingleEnumLiteralDeclaration_2() { return cSingleEnumLiteralDeclaration_2; }

		//"Single"
		public Keyword getSingleSingleKeyword_2_0() { return cSingleSingleKeyword_2_0; }

		//Multi
		public EnumLiteralDeclaration getMultiEnumLiteralDeclaration_3() { return cMultiEnumLiteralDeclaration_3; }

		//"Multi"
		public Keyword getMultiMultiKeyword_3_0() { return cMultiMultiKeyword_3_0; }
	}

	public class SortOrderElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SortOrder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAscendingEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAscendingAscendingKeyword_2_0 = (Keyword)cAscendingEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDescendingEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDescendingDescendingKeyword_3_0 = (Keyword)cDescendingEnumLiteralDeclaration_3.eContents().get(0);
		
		//// sort kinds
		//enum SortOrder:
		//	Unspecified="Null" / *default* / | None | Ascending | Descending;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" / *default* / | None | Ascending | Descending
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//Ascending
		public EnumLiteralDeclaration getAscendingEnumLiteralDeclaration_2() { return cAscendingEnumLiteralDeclaration_2; }

		//"Ascending"
		public Keyword getAscendingAscendingKeyword_2_0() { return cAscendingAscendingKeyword_2_0; }

		//Descending
		public EnumLiteralDeclaration getDescendingEnumLiteralDeclaration_3() { return cDescendingEnumLiteralDeclaration_3; }

		//"Descending"
		public Keyword getDescendingDescendingKeyword_3_0() { return cDescendingDescendingKeyword_3_0; }
	}

	public class AndOrElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AndOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDANDKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cORORKeyword_2_0 = (Keyword)cOREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AndOr:
		//	None | AND | OR;
		public EnumRule getRule() { return rule; }

		//None | AND | OR
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }

		//"AND"
		public Keyword getANDANDKeyword_1_0() { return cANDANDKeyword_1_0; }

		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_2() { return cOREnumLiteralDeclaration_2; }

		//"OR"
		public Keyword getORORKeyword_2_0() { return cORORKeyword_2_0; }
	}

	public class FileVersionOptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FileVersionOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLiveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLiveLiveKeyword_1_0 = (Keyword)cLiveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHistoryEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHistoryHistoryKeyword_2_0 = (Keyword)cHistoryEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cExceptionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cExceptionExceptionKeyword_3_0 = (Keyword)cExceptionEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSimulationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSimulationSimulationKeyword_4_0 = (Keyword)cSimulationEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum FileVersionOption:
		//	None | Live | History | Exception | Simulation;
		public EnumRule getRule() { return rule; }

		//None | Live | History | Exception | Simulation
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//Live
		public EnumLiteralDeclaration getLiveEnumLiteralDeclaration_1() { return cLiveEnumLiteralDeclaration_1; }

		//"Live"
		public Keyword getLiveLiveKeyword_1_0() { return cLiveLiveKeyword_1_0; }

		//History
		public EnumLiteralDeclaration getHistoryEnumLiteralDeclaration_2() { return cHistoryEnumLiteralDeclaration_2; }

		//"History"
		public Keyword getHistoryHistoryKeyword_2_0() { return cHistoryHistoryKeyword_2_0; }

		//Exception
		public EnumLiteralDeclaration getExceptionEnumLiteralDeclaration_3() { return cExceptionEnumLiteralDeclaration_3; }

		//"Exception"
		public Keyword getExceptionExceptionKeyword_3_0() { return cExceptionExceptionKeyword_3_0; }

		//Simulation
		public EnumLiteralDeclaration getSimulationEnumLiteralDeclaration_4() { return cSimulationEnumLiteralDeclaration_4; }

		//"Simulation"
		public Keyword getSimulationSimulationKeyword_4_0() { return cSimulationSimulationKeyword_4_0; }
	}

	public class EscapeSequenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EscapeSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnspecifiedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnspecifiedNullKeyword_0_0 = (Keyword)cUnspecifiedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoneNoneKeyword_1_0 = (Keyword)cNoneEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRVEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRVRVKeyword_2_0 = (Keyword)cRVEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cULEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cULULKeyword_3_0 = (Keyword)cULEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBLEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBLBLKeyword_4_0 = (Keyword)cBLEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHIEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHIHIKeyword_5_0 = (Keyword)cHIEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDINGDINGKeyword_6_0 = (Keyword)cDINGEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum EscapeSequence:
		//	Unspecified="Null" | None | RV | UL | BL | HI | DING;
		public EnumRule getRule() { return rule; }

		//Unspecified="Null" | None | RV | UL | BL | HI | DING
		public Alternatives getAlternatives() { return cAlternatives; }

		//Unspecified="Null"
		public EnumLiteralDeclaration getUnspecifiedEnumLiteralDeclaration_0() { return cUnspecifiedEnumLiteralDeclaration_0; }

		//"Null"
		public Keyword getUnspecifiedNullKeyword_0_0() { return cUnspecifiedNullKeyword_0_0; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_1() { return cNoneEnumLiteralDeclaration_1; }

		//"None"
		public Keyword getNoneNoneKeyword_1_0() { return cNoneNoneKeyword_1_0; }

		//RV
		public EnumLiteralDeclaration getRVEnumLiteralDeclaration_2() { return cRVEnumLiteralDeclaration_2; }

		//"RV"
		public Keyword getRVRVKeyword_2_0() { return cRVRVKeyword_2_0; }

		//UL
		public EnumLiteralDeclaration getULEnumLiteralDeclaration_3() { return cULEnumLiteralDeclaration_3; }

		//"UL"
		public Keyword getULULKeyword_3_0() { return cULULKeyword_3_0; }

		//BL
		public EnumLiteralDeclaration getBLEnumLiteralDeclaration_4() { return cBLEnumLiteralDeclaration_4; }

		//"BL"
		public Keyword getBLBLKeyword_4_0() { return cBLBLKeyword_4_0; }

		//HI
		public EnumLiteralDeclaration getHIEnumLiteralDeclaration_5() { return cHIEnumLiteralDeclaration_5; }

		//"HI"
		public Keyword getHIHIKeyword_5_0() { return cHIHIKeyword_5_0; }

		//DING
		public EnumLiteralDeclaration getDINGEnumLiteralDeclaration_6() { return cDINGEnumLiteralDeclaration_6; }

		//"DING"
		public Keyword getDINGDINGKeyword_6_0() { return cDINGDINGKeyword_6_0; }
	}

	public class OrientationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Orientation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHorizontalHorizontalKeyword_0_0 = (Keyword)cHorizontalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVerticalVerticalKeyword_1_0 = (Keyword)cVerticalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Orientation:
		//	Horizontal | Vertical;
		public EnumRule getRule() { return rule; }

		//Horizontal | Vertical
		public Alternatives getAlternatives() { return cAlternatives; }

		//Horizontal
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_0() { return cHorizontalEnumLiteralDeclaration_0; }

		//"Horizontal"
		public Keyword getHorizontalHorizontalKeyword_0_0() { return cHorizontalHorizontalKeyword_0_0; }

		//Vertical
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_1() { return cVerticalEnumLiteralDeclaration_1; }

		//"Vertical"
		public Keyword getVerticalVerticalKeyword_1_0() { return cVerticalVerticalKeyword_1_0; }
	}

	public class ServerModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ServerMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cT24EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cT24T24Keyword_0_0 = (Keyword)cT24EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSolrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSolrSolrKeyword_1_0 = (Keyword)cSolrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ServerMode:
		//	T24 | Solr;
		public EnumRule getRule() { return rule; }

		//T24 | Solr
		public Alternatives getAlternatives() { return cAlternatives; }

		//T24
		public EnumLiteralDeclaration getT24EnumLiteralDeclaration_0() { return cT24EnumLiteralDeclaration_0; }

		//"T24"
		public Keyword getT24T24Keyword_0_0() { return cT24T24Keyword_0_0; }

		//Solr
		public EnumLiteralDeclaration getSolrEnumLiteralDeclaration_1() { return cSolrEnumLiteralDeclaration_1; }

		//"Solr"
		public Keyword getSolrSolrKeyword_1_0() { return cSolrSolrKeyword_1_0; }
	}
	
	private final EnquiryElements pEnquiry;
	private final EnquiryModeElements unknownRuleEnquiryMode;
	private final CompaniesElements pCompanies;
	private final EnquiryHeaderElements pEnquiryHeader;
	private final TargetElements pTarget;
	private final TargetMappingElements pTargetMapping;
	private final ParametersElements pParameters;
	private final DrillDownElements pDrillDown;
	private final DrillDownTypeElements pDrillDownType;
	private final DrillDownStringTypeElements pDrillDownStringType;
	private final ApplicationTypeElements pApplicationType;
	private final ScreenTypeElements pScreenType;
	private final EnquiryTypeElements pEnquiryType;
	private final FromFieldTypeElements pFromFieldType;
	private final CompositeScreenTypeElements pCompositeScreenType;
	private final TabbedScreenTypeElements pTabbedScreenType;
	private final ViewTypeElements pViewType;
	private final QuitSEETypeElements pQuitSEEType;
	private final BlankTypeElements pBlankType;
	private final PWProcessTypeElements pPWProcessType;
	private final DownloadTypeElements pDownloadType;
	private final RunTypeElements pRunType;
	private final UtilTypeElements pUtilType;
	private final JavaScriptTypeElements pJavaScriptType;
	private final ShouldBeChangedTypeElements pShouldBeChangedType;
	private final DrillDownOptionElements pDrillDownOption;
	private final CompositeScreenOptionElements pCompositeScreenOption;
	private final TabOptionElements pTabOption;
	private final ViewOptionElements pViewOption;
	private final QuitSEEOptionElements pQuitSEEOption;
	private final ReferenceElements pReference;
	private final ParameterElements pParameter;
	private final SelectionCriteriaElements pSelectionCriteria;
	private final SecurityElements pSecurity;
	private final GraphElements pGraph;
	private final AxisElements pAxis;
	private final DimensionElements pDimension;
	private final LabelElements pLabel;
	private final PositionElements pPosition;
	private final LegendElements pLegend;
	private final MarginsElements pMargins;
	private final ScaleElements pScale;
	private final RoutineElements pRoutine;
	private final JBCRoutineElements pJBCRoutine;
	private final JavaRoutineElements pJavaRoutine;
	private final FixedSelectionElements pFixedSelection;
	private final FixedSortElements pFixedSort;
	private final SelectionExpressionElements pSelectionExpression;
	private final SelectionElements pSelection;
	private final FileVersionElements pFileVersion;
	private final OperationElements pOperation;
	private final BreakOperationElements pBreakOperation;
	private final BreakOnChangeOperationElements pBreakOnChangeOperation;
	private final BreakLineOperationElements pBreakLineOperation;
	private final CalcOperationElements pCalcOperation;
	private final ConstantOperationElements pConstantOperation;
	private final LabelOperationElements pLabelOperation;
	private final DateOperationElements pDateOperation;
	private final DecisionOperationElements pDecisionOperation;
	private final DescriptorOperationElements pDescriptorOperation;
	private final TodayOperationElements pTodayOperation;
	private final LWDOperationElements pLWDOperation;
	private final NWDOperationElements pNWDOperation;
	private final FieldOperationElements pFieldOperation;
	private final ApplicationFieldNameOperationElements pApplicationFieldNameOperation;
	private final FieldNumberOperationElements pFieldNumberOperation;
	private final FieldExtractOperationElements pFieldExtractOperation;
	private final SelectionOperationElements pSelectionOperation;
	private final SystemOperationElements pSystemOperation;
	private final UserOperationElements pUserOperation;
	private final CompanyOperationElements pCompanyOperation;
	private final LanguageOperationElements pLanguageOperation;
	private final LocalCurrencyOperationElements pLocalCurrencyOperation;
	private final TotalOperationElements pTotalOperation;
	private final ConversionElements pConversion;
	private final ExtractConversionElements pExtractConversion;
	private final DecryptConversionElements pDecryptConversion;
	private final ReplaceConversionElements pReplaceConversion;
	private final ConvertConversionElements pConvertConversion;
	private final ValueConversionElements pValueConversion;
	private final JulianConversionElements pJulianConversion;
	private final BasicConversionElements pBasicConversion;
	private final BasicOConversionElements pBasicOConversion;
	private final BasicIConversionElements pBasicIConversion;
	private final GetFromConversionElements pGetFromConversion;
	private final RateConversionElements pRateConversion;
	private final CalcFixedRateConversionElements pCalcFixedRateConversion;
	private final GetFixedRateConversionElements pGetFixedRateConversion;
	private final GetFixedCurrencyConversionElements pGetFixedCurrencyConversion;
	private final AbsConversionElements pAbsConversion;
	private final MatchFieldElements pMatchField;
	private final CallRoutineElements pCallRoutine;
	private final RepeatConversionElements pRepeatConversion;
	private final RepeatOnNullConversionElements pRepeatOnNullConversion;
	private final RepeatEveryConversionElements pRepeatEveryConversion;
	private final RepeatSubConversionElements pRepeatSubConversion;
	private final FieldElements pField;
	private final BreakConditionElements pBreakCondition;
	private final FieldPositionElements pFieldPosition;
	private final FormatElements pFormat;
	private final ID_WITHDOTElements pID_WITHDOT;
	private final ToolElements pTool;
	private final WebServiceElements pWebService;
	private final BooleanObjectElements pBooleanObject;
	private final BooleanElements pBoolean;
	private final AlignmentKindElements unknownRuleAlignmentKind;
	private final BreakKindElements unknownRuleBreakKind;
	private final CurrencyPatternElements unknownRuleCurrencyPattern;
	private final DecisionOperandElements unknownRuleDecisionOperand;
	private final DisplaySectionKindElements unknownRuleDisplaySectionKind;
	private final FieldFormatElements unknownRuleFieldFormat;
	private final FunctionKindElements unknownRuleFunctionKind;
	private final SelectionOperatorElements unknownRuleSelectionOperator;
	private final CriteriaOperatorElements unknownRuleCriteriaOperator;
	private final ProcessingModeElements unknownRuleProcessingMode;
	private final SortOrderElements unknownRuleSortOrder;
	private final AndOrElements unknownRuleAndOr;
	private final FileVersionOptionElements unknownRuleFileVersionOption;
	private final EscapeSequenceElements unknownRuleEscapeSequence;
	private final OrientationElements unknownRuleOrientation;
	private final ServerModeElements unknownRuleServerMode;
	private final INTEGER_OBJECTElements pINTEGER_OBJECT;
	
	private final Grammar grammar;

	private final TranslationDslGrammarAccess gaTranslationDsl;

	@Inject
	public EnquiryGrammarAccess(GrammarProvider grammarProvider,
		TranslationDslGrammarAccess gaTranslationDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTranslationDsl = gaTranslationDsl;
		this.pEnquiry = new EnquiryElements();
		this.unknownRuleEnquiryMode = new EnquiryModeElements();
		this.pCompanies = new CompaniesElements();
		this.pEnquiryHeader = new EnquiryHeaderElements();
		this.pTarget = new TargetElements();
		this.pTargetMapping = new TargetMappingElements();
		this.pParameters = new ParametersElements();
		this.pDrillDown = new DrillDownElements();
		this.pDrillDownType = new DrillDownTypeElements();
		this.pDrillDownStringType = new DrillDownStringTypeElements();
		this.pApplicationType = new ApplicationTypeElements();
		this.pScreenType = new ScreenTypeElements();
		this.pEnquiryType = new EnquiryTypeElements();
		this.pFromFieldType = new FromFieldTypeElements();
		this.pCompositeScreenType = new CompositeScreenTypeElements();
		this.pTabbedScreenType = new TabbedScreenTypeElements();
		this.pViewType = new ViewTypeElements();
		this.pQuitSEEType = new QuitSEETypeElements();
		this.pBlankType = new BlankTypeElements();
		this.pPWProcessType = new PWProcessTypeElements();
		this.pDownloadType = new DownloadTypeElements();
		this.pRunType = new RunTypeElements();
		this.pUtilType = new UtilTypeElements();
		this.pJavaScriptType = new JavaScriptTypeElements();
		this.pShouldBeChangedType = new ShouldBeChangedTypeElements();
		this.pDrillDownOption = new DrillDownOptionElements();
		this.pCompositeScreenOption = new CompositeScreenOptionElements();
		this.pTabOption = new TabOptionElements();
		this.pViewOption = new ViewOptionElements();
		this.pQuitSEEOption = new QuitSEEOptionElements();
		this.pReference = new ReferenceElements();
		this.pParameter = new ParameterElements();
		this.pSelectionCriteria = new SelectionCriteriaElements();
		this.pSecurity = new SecurityElements();
		this.pGraph = new GraphElements();
		this.pAxis = new AxisElements();
		this.pDimension = new DimensionElements();
		this.pLabel = new LabelElements();
		this.pPosition = new PositionElements();
		this.pLegend = new LegendElements();
		this.pMargins = new MarginsElements();
		this.pScale = new ScaleElements();
		this.pRoutine = new RoutineElements();
		this.pJBCRoutine = new JBCRoutineElements();
		this.pJavaRoutine = new JavaRoutineElements();
		this.pFixedSelection = new FixedSelectionElements();
		this.pFixedSort = new FixedSortElements();
		this.pSelectionExpression = new SelectionExpressionElements();
		this.pSelection = new SelectionElements();
		this.pFileVersion = new FileVersionElements();
		this.pOperation = new OperationElements();
		this.pBreakOperation = new BreakOperationElements();
		this.pBreakOnChangeOperation = new BreakOnChangeOperationElements();
		this.pBreakLineOperation = new BreakLineOperationElements();
		this.pCalcOperation = new CalcOperationElements();
		this.pConstantOperation = new ConstantOperationElements();
		this.pLabelOperation = new LabelOperationElements();
		this.pDateOperation = new DateOperationElements();
		this.pDecisionOperation = new DecisionOperationElements();
		this.pDescriptorOperation = new DescriptorOperationElements();
		this.pTodayOperation = new TodayOperationElements();
		this.pLWDOperation = new LWDOperationElements();
		this.pNWDOperation = new NWDOperationElements();
		this.pFieldOperation = new FieldOperationElements();
		this.pApplicationFieldNameOperation = new ApplicationFieldNameOperationElements();
		this.pFieldNumberOperation = new FieldNumberOperationElements();
		this.pFieldExtractOperation = new FieldExtractOperationElements();
		this.pSelectionOperation = new SelectionOperationElements();
		this.pSystemOperation = new SystemOperationElements();
		this.pUserOperation = new UserOperationElements();
		this.pCompanyOperation = new CompanyOperationElements();
		this.pLanguageOperation = new LanguageOperationElements();
		this.pLocalCurrencyOperation = new LocalCurrencyOperationElements();
		this.pTotalOperation = new TotalOperationElements();
		this.pConversion = new ConversionElements();
		this.pExtractConversion = new ExtractConversionElements();
		this.pDecryptConversion = new DecryptConversionElements();
		this.pReplaceConversion = new ReplaceConversionElements();
		this.pConvertConversion = new ConvertConversionElements();
		this.pValueConversion = new ValueConversionElements();
		this.pJulianConversion = new JulianConversionElements();
		this.pBasicConversion = new BasicConversionElements();
		this.pBasicOConversion = new BasicOConversionElements();
		this.pBasicIConversion = new BasicIConversionElements();
		this.pGetFromConversion = new GetFromConversionElements();
		this.pRateConversion = new RateConversionElements();
		this.pCalcFixedRateConversion = new CalcFixedRateConversionElements();
		this.pGetFixedRateConversion = new GetFixedRateConversionElements();
		this.pGetFixedCurrencyConversion = new GetFixedCurrencyConversionElements();
		this.pAbsConversion = new AbsConversionElements();
		this.pMatchField = new MatchFieldElements();
		this.pCallRoutine = new CallRoutineElements();
		this.pRepeatConversion = new RepeatConversionElements();
		this.pRepeatOnNullConversion = new RepeatOnNullConversionElements();
		this.pRepeatEveryConversion = new RepeatEveryConversionElements();
		this.pRepeatSubConversion = new RepeatSubConversionElements();
		this.pField = new FieldElements();
		this.pBreakCondition = new BreakConditionElements();
		this.pFieldPosition = new FieldPositionElements();
		this.pFormat = new FormatElements();
		this.pID_WITHDOT = new ID_WITHDOTElements();
		this.pTool = new ToolElements();
		this.pWebService = new WebServiceElements();
		this.pBooleanObject = new BooleanObjectElements();
		this.pBoolean = new BooleanElements();
		this.unknownRuleAlignmentKind = new AlignmentKindElements();
		this.unknownRuleBreakKind = new BreakKindElements();
		this.unknownRuleCurrencyPattern = new CurrencyPatternElements();
		this.unknownRuleDecisionOperand = new DecisionOperandElements();
		this.unknownRuleDisplaySectionKind = new DisplaySectionKindElements();
		this.unknownRuleFieldFormat = new FieldFormatElements();
		this.unknownRuleFunctionKind = new FunctionKindElements();
		this.unknownRuleSelectionOperator = new SelectionOperatorElements();
		this.unknownRuleCriteriaOperator = new CriteriaOperatorElements();
		this.unknownRuleProcessingMode = new ProcessingModeElements();
		this.unknownRuleSortOrder = new SortOrderElements();
		this.unknownRuleAndOr = new AndOrElements();
		this.unknownRuleFileVersionOption = new FileVersionOptionElements();
		this.unknownRuleEscapeSequence = new EscapeSequenceElements();
		this.unknownRuleOrientation = new OrientationElements();
		this.unknownRuleServerMode = new ServerModeElements();
		this.pINTEGER_OBJECT = new INTEGER_OBJECTElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.odcgroup.t24.enquiry.Enquiry".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TranslationDslGrammarAccess getTranslationDslGrammarAccess() {
		return gaTranslationDsl;
	}

	
	/// **
	// * ---------------------------------------------------------------------------
	// * ENQUIRY
	// * ---------------------------------------------------------------------------
	// * / Enquiry:
	//	"Enquiry" name=STRING "for" fileName= / * TODO [mdf::MdfEntity|EntityRef] * / //or virtual templates  
	//	STRING "{" ("metamodelVersion:" metamodelVersion=STRING)? ("header" "{" header+=EnquiryHeader "}")* (("description" "{"
	//	description=Translations "}")? //Field on the Enquiry
	//	//Field on the Enquiry
	//	//virtual fields from attributes like hotField of Version
	//	& ("server-mode:" serverMode=ServerMode)? & ("enquiry-mode:" enquiryMode=EnquiryMode)? & ("companies:"
	//	companies=Companies)? & ("account-field:" accountField=STRING)? & ("customer-field:" customerField=STRING)? &
	//	("zero-records-display:" zeroRecordsDisplay=BooleanObject)? & ("no-selection:" noSelection=BooleanObject)? &
	//	("show-all-books:" showAllBooks=BooleanObject)? & ("start-line:" startLine=INTEGER_OBJECT)? & ("end-line:"
	//	endLine=INTEGER_OBJECT)?) ("build-routines" "{" buildRoutines+=Routine+ "}")? fixedSelections+=FixedSelection*
	//	fixedSorts+=FixedSort* ("custom-selection" "{" customSelection=SelectionExpression "}")? fields+=Field* (("toolbar:"
	//	toolbar=STRING)? & tools+=Tool* & target=Target? & drillDowns+=DrillDown* & security=Security? & graph=Graph? &
	//	webService=WebService? & ("generateIFP:" generateIFP=BooleanObject)?) //compsAllowed: "US00001" "GB000001"
	//	//virtual fields from attributes like hotField of Version
	//	//CompanySelect field used books as it is a more valid term for branches
	//	// moved the file version from & group .',' is not accepting in the file version. 	
	//	("fileVersion:" fileVersion+=FileVersion)? ("attributes:" attributes+=STRING (";" attributes+=STRING)*)? // == ATTRIBUTES
	//	("introspection-messages:" introspectionMessages+=STRING)* "}";
	public EnquiryElements getEnquiryAccess() {
		return pEnquiry;
	}
	
	public ParserRule getEnquiryRule() {
		return getEnquiryAccess().getRule();
	}

	//enum EnquiryMode:
	//	T24 | DB;
	public EnquiryModeElements getEnquiryModeAccess() {
		return unknownRuleEnquiryMode;
	}
	
	public EnumRule getEnquiryModeRule() {
		return getEnquiryModeAccess().getRule();
	}

	//Companies:
	//	"all:" all=BooleanObject // TODO code=xx1234567 define a validationRule , 
	//	| code+=STRING ("," code+=STRING)*;
	public CompaniesElements getCompaniesAccess() {
		return pCompanies;
	}
	
	public ParserRule getCompaniesRule() {
		return getCompaniesAccess().getRule();
	}

	//EnquiryHeader:
	//	"label" "{" label=Translations? "}" ("column:" column=INT & "line:" line=INT);
	public EnquiryHeaderElements getEnquiryHeaderAccess() {
		return pEnquiryHeader;
	}
	
	public ParserRule getEnquiryHeaderRule() {
		return getEnquiryHeaderAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Target
	// * ---------------------------------------------------------------------------
	// * / Target:
	//	"target-for-application" {Target} application=STRING "{" (("screen:" screen=STRING)? & mappings+=TargetMapping+) "}";
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//TargetMapping:
	//	"map-field:" fromField=STRING "to" toField=STRING;
	public TargetMappingElements getTargetMappingAccess() {
		return pTargetMapping;
	}
	
	public ParserRule getTargetMappingRule() {
		return getTargetMappingAccess().getRule();
	}

	//Parameters:
	//	"{" (("function: " function=FunctionKind)? & ("auto-F3:" auto=Boolean)? & ("run-immediately:"
	//	runImmediately=Boolean)?) ("pw-activity:" pwActivity=STRING)? ("field:" fieldName+=STRING)* ("parameter:"
	//	variable+=STRING)* "}";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * DrillDown
	// * ---------------------------------------------------------------------------
	// * / DrillDown:
	//	"drilldown" drill_name=STRING? "{" (("description" "{" description=Translations "}")? // Reference to field in Enquiry's fields
	//	& ("label-field:" labelField=STRING)? & ("image:" image=STRING)? & ("info:" info=STRING)?) ("criteria:"
	//	criteria+=SelectionCriteria)* (("parameters" parameters=Parameters)? // New property holding all parameters		 		 
	//	& type=DrillDownType?) "}";
	public DrillDownElements getDrillDownAccess() {
		return pDrillDown;
	}
	
	public ParserRule getDrillDownRule() {
		return getDrillDownAccess().getRule();
	}

	////DrillDown Types
	//DrillDownType:
	//	DrillDownStringType | BlankType;
	public DrillDownTypeElements getDrillDownTypeAccess() {
		return pDrillDownType;
	}
	
	public ParserRule getDrillDownTypeRule() {
		return getDrillDownTypeAccess().getRule();
	}

	//DrillDownStringType:
	//	ApplicationType | ScreenType | EnquiryType | FromFieldType | CompositeScreenType | TabbedScreenType | ViewType |
	//	QuitSEEType | PWProcessType | DownloadType | RunType | UtilType | JavaScriptType | ShouldBeChangedType;
	public DrillDownStringTypeElements getDrillDownStringTypeAccess() {
		return pDrillDownStringType;
	}
	
	public ParserRule getDrillDownStringTypeRule() {
		return getDrillDownStringTypeAccess().getRule();
	}

	/// * TODO [mdf::MdfClass|ClassRef] * / ApplicationType:
	//	property="application:" value=STRING;
	public ApplicationTypeElements getApplicationTypeAccess() {
		return pApplicationType;
	}
	
	public ParserRule getApplicationTypeRule() {
		return getApplicationTypeAccess().getRule();
	}

	/// * TODO [version::Version|VersionRef] * / ScreenType:
	//	property="screen:" value=STRING;
	public ScreenTypeElements getScreenTypeAccess() {
		return pScreenType;
	}
	
	public ParserRule getScreenTypeRule() {
		return getScreenTypeAccess().getRule();
	}

	/// * TODO [enquiry::Enquiry|EnquiryRef] * / EnquiryType:
	//	property="enquiry:" value=STRING;
	public EnquiryTypeElements getEnquiryTypeAccess() {
		return pEnquiryType;
	}
	
	public ParserRule getEnquiryTypeRule() {
		return getEnquiryTypeAccess().getRule();
	}

	/// * Reference to field in Enquiry's fields * / FromFieldType:
	//	property="from-field:" value=STRING;
	public FromFieldTypeElements getFromFieldTypeAccess() {
		return pFromFieldType;
	}
	
	public ParserRule getFromFieldTypeRule() {
		return getFromFieldTypeAccess().getRule();
	}

	//CompositeScreenType:
	//	property="composite-screen:" value=STRING;
	public CompositeScreenTypeElements getCompositeScreenTypeAccess() {
		return pCompositeScreenType;
	}
	
	public ParserRule getCompositeScreenTypeRule() {
		return getCompositeScreenTypeAccess().getRule();
	}

	//TabbedScreenType:
	//	property="tab:" value=STRING;
	public TabbedScreenTypeElements getTabbedScreenTypeAccess() {
		return pTabbedScreenType;
	}
	
	public ParserRule getTabbedScreenTypeRule() {
		return getTabbedScreenTypeAccess().getRule();
	}

	//ViewType:
	//	property="view:" value=STRING;
	public ViewTypeElements getViewTypeAccess() {
		return pViewType;
	}
	
	public ParserRule getViewTypeRule() {
		return getViewTypeAccess().getRule();
	}

	//QuitSEEType:
	//	property="quit-SEE:" value=STRING;
	public QuitSEETypeElements getQuitSEETypeAccess() {
		return pQuitSEEType;
	}
	
	public ParserRule getQuitSEETypeRule() {
		return getQuitSEETypeAccess().getRule();
	}

	//BlankType:
	//	property="blank" value=BooleanObject;
	public BlankTypeElements getBlankTypeAccess() {
		return pBlankType;
	}
	
	public ParserRule getBlankTypeRule() {
		return getBlankTypeAccess().getRule();
	}

	//PWProcessType:
	//	property="pw-process:" value=STRING;
	public PWProcessTypeElements getPWProcessTypeAccess() {
		return pPWProcessType;
	}
	
	public ParserRule getPWProcessTypeRule() {
		return getPWProcessTypeAccess().getRule();
	}

	//DownloadType:
	//	property="download:" value=STRING;
	public DownloadTypeElements getDownloadTypeAccess() {
		return pDownloadType;
	}
	
	public ParserRule getDownloadTypeRule() {
		return getDownloadTypeAccess().getRule();
	}

	//RunType:
	//	property="run:" value=STRING;
	public RunTypeElements getRunTypeAccess() {
		return pRunType;
	}
	
	public ParserRule getRunTypeRule() {
		return getRunTypeAccess().getRule();
	}

	//UtilType:
	//	property="util" value=STRING;
	public UtilTypeElements getUtilTypeAccess() {
		return pUtilType;
	}
	
	public ParserRule getUtilTypeRule() {
		return getUtilTypeAccess().getRule();
	}

	//JavaScriptType:
	//	property="javascript:" value=STRING;
	public JavaScriptTypeElements getJavaScriptTypeAccess() {
		return pJavaScriptType;
	}
	
	public ParserRule getJavaScriptTypeRule() {
		return getJavaScriptTypeAccess().getRule();
	}

	//ShouldBeChangedType:
	//	property="should-be-changed:" value=STRING;
	public ShouldBeChangedTypeElements getShouldBeChangedTypeAccess() {
		return pShouldBeChangedType;
	}
	
	public ParserRule getShouldBeChangedTypeRule() {
		return getShouldBeChangedTypeAccess().getRule();
	}

	//DrillDownOption:
	//	CompositeScreenOption | TabOption | ViewOption | QuitSEEOption;
	public DrillDownOptionElements getDrillDownOptionAccess() {
		return pDrillDownOption;
	}
	
	public ParserRule getDrillDownOptionRule() {
		return getDrillDownOptionAccess().getRule();
	}

	//// TODO: Validation Rule:
	//// 'screen' is optional when the 'trigger-field' exists 
	//// 'screen' is required when the 'trigger-field' does not exists 
	//CompositeScreenOption:
	//	"COS" {CompositeScreenOption} compositeScreen=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
	//	fieldParameter+=Parameter)* "}";
	public CompositeScreenOptionElements getCompositeScreenOptionAccess() {
		return pCompositeScreenOption;
	}
	
	public ParserRule getCompositeScreenOptionRule() {
		return getCompositeScreenOptionAccess().getRule();
	}

	//TabOption:
	//	"TAB" {TabOption} tabName=STRING? "{" ("reference:" reference+=Reference)* ("field-parameter:"
	//	fieldParameter+=Parameter)* "}";
	public TabOptionElements getTabOptionAccess() {
		return pTabOption;
	}
	
	public ParserRule getTabOptionRule() {
		return getTabOptionAccess().getRule();
	}

	//ViewOption:
	//	"View" {ViewOption};
	public ViewOptionElements getViewOptionAccess() {
		return pViewOption;
	}
	
	public ParserRule getViewOptionRule() {
		return getViewOptionAccess().getRule();
	}

	//QuitSEEOption:
	//	"Quit-SEE" {QuitSEEOption};
	public QuitSEEOptionElements getQuitSEEOptionAccess() {
		return pQuitSEEOption;
	}
	
	public ParserRule getQuitSEEOptionRule() {
		return getQuitSEEOptionAccess().getRule();
	}

	//Reference:
	//	file=STRING field=STRING;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Parameter:
	//	field=STRING;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// *)* / SelectionCriteria: / *(* / field=STRING // one of the Field of (application or virtual) referenced in fileName
	//	/ * & * / (operand=CriteriaOperator / * & * / values+=STRING ("," values+=STRING)*)?;
	public SelectionCriteriaElements getSelectionCriteriaAccess() {
		return pSelectionCriteria;
	}
	
	public ParserRule getSelectionCriteriaRule() {
		return getSelectionCriteriaAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * SMS = Security M... S... ??
	// * ---------------------------------------------------------------------------
	// * / Security:
	//	"security" "{" ("application:" application=STRING & "field:" field= // mandatory
	//	STRING & ("abort:" abort=Boolean)?) "}";
	public SecurityElements getSecurityAccess() {
		return pSecurity;
	}
	
	public ParserRule getSecurityRule() {
		return getSecurityAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Graph Definition
	// * ---------------------------------------------------------------------------
	// * / Graph:
	//	"graph" "{" ("type:" type= //-Pickup the valid values from EB.GRAPH.CONFIG field Type ???
	//	STRING & labels+=Label* & dimension=Dimension & margins=Margins & scale=Scale? & legend=Legend? & "x-axis" "{"
	//	xAxis=Axis "}" & "y-axis" "{" yAxis=Axis "}" & ("z-axis" "{" zAxis=Axis "}")?) "}";
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Axis:
	//	"field:" field=STRING & ("display-legend:" displayLegend=Boolean)? & ("show-grid:" showGrid=Boolean)?;
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}

	//Dimension:
	//	"dimension" "{" ("width:" width=INT & "height:" height=INT & ("orientation:" orientation=Orientation)?) "}";
	public DimensionElements getDimensionAccess() {
		return pDimension;
	}
	
	public ParserRule getDimensionRule() {
		return getDimensionAccess().getRule();
	}

	//Label:
	//	"label" "{" (description=Translations & position=Position) "}";
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Position:
	//	"x:" x=INT & "y:" y=INT;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}

	//Legend:
	//	"legend" "{" ("x:" x=INT & "y:" y=INT) "}";
	public LegendElements getLegendAccess() {
		return pLegend;
	}
	
	public ParserRule getLegendRule() {
		return getLegendAccess().getRule();
	}

	//Margins:
	//	"margins" "{" ("top:" top=INT & "bottom:" bottom=INT & "left:" left=INT & "right:" right=INT) "}";
	public MarginsElements getMarginsAccess() {
		return pMargins;
	}
	
	public ParserRule getMarginsRule() {
		return getMarginsAccess().getRule();
	}

	//Scale:
	//	"scale" "{" (("x:" x=INTEGER_OBJECT)? & ("y:" y=INTEGER_OBJECT)?) "}";
	public ScaleElements getScaleAccess() {
		return pScale;
	}
	
	public ParserRule getScaleRule() {
		return getScaleAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Routines
	// * ---------------------------------------------------------------------------
	// * / Routine:
	//	JBCRoutine | JavaRoutine;
	public RoutineElements getRoutineAccess() {
		return pRoutine;
	}
	
	public ParserRule getRoutineRule() {
		return getRoutineAccess().getRule();
	}

	//JBCRoutine:
	//	"jBC:" name=STRING;
	public JBCRoutineElements getJBCRoutineAccess() {
		return pJBCRoutine;
	}
	
	public ParserRule getJBCRoutineRule() {
		return getJBCRoutineAccess().getRule();
	}

	//JavaRoutine:
	//	"java:" name=STRING;
	public JavaRoutineElements getJavaRoutineAccess() {
		return pJavaRoutine;
	}
	
	public ParserRule getJavaRoutineRule() {
		return getJavaRoutineAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Selections
	// * ---------------------------------------------------------------------------
	// * / FixedSelection:
	//	"fixed-selection" {FixedSelection} field=STRING "{" // one of the Field of the Class (application or virtual) referenced in fileName
	//	(operand=SelectionOperator values+=STRING ("," values+=STRING)*)? "}";
	public FixedSelectionElements getFixedSelectionAccess() {
		return pFixedSelection;
	}
	
	public ParserRule getFixedSelectionRule() {
		return getFixedSelectionAccess().getRule();
	}

	//FixedSort:
	//	"fixed-sort:" field=STRING // one of the Field of the Class (application or virtual) referenced in fileName
	//	order=SortOrder;
	public FixedSortElements getFixedSortAccess() {
		return pFixedSort;
	}
	
	public ParserRule getFixedSortRule() {
		return getFixedSortAccess().getRule();
	}

	//// Original goal was simplified by decision in "RE: Enquiry" on 2012-11-28:
	//// Just flat lists of Selection, not arbitrary trees,
	//// as it's too complicated for T24 jBC to transform
	//// this into leftBracket / rightBracket...
	//// 
	////SelectionExpression returns Expression:
	////	SelectionPrimary ({SelectionExpression.left=current} operator=AndOr right=SelectionPrimary)*
	////;
	////
	////SelectionPrimary returns Expression:
	////	Selection | '(' SelectionExpression ')'
	////;
	//SelectionExpression:
	//	selection+=Selection selection+=Selection*;
	public SelectionExpressionElements getSelectionExpressionAccess() {
		return pSelectionExpression;
	}
	
	public ParserRule getSelectionExpressionRule() {
		return getSelectionExpressionAccess().getRule();
	}

	//Selection:
	//	"field" {Selection} field=STRING "{" (("mandatory:" mandatory=BooleanObject)? & ("popup-dropdown:"
	//	popupDropDown=BooleanObject)? & ("label" "{" label=Translations "}")?) ("operands:" operands+=SelectionOperator (","
	//	operands+=SelectionOperator)*)? "}" operator=AndOr;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}

	//FileVersion:
	//	values+=FileVersionOption ("," values+=FileVersionOption)*;
	public FileVersionElements getFileVersionAccess() {
		return pFileVersion;
	}
	
	public ParserRule getFileVersionRule() {
		return getFileVersionAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * OPERATIONS
	// * ---------------------------------------------------------------------------
	// * / Operation:
	//	BreakOperation | CalcOperation | ConstantOperation | LabelOperation | DateOperation | DecisionOperation |
	//	DescriptorOperation | FieldOperation | SelectionOperation | SystemOperation | TotalOperation;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//BreakOperation:
	//	BreakOnChangeOperation | BreakLineOperation;
	public BreakOperationElements getBreakOperationAccess() {
		return pBreakOperation;
	}
	
	public ParserRule getBreakOperationRule() {
		return getBreakOperationAccess().getRule();
	}

	//BreakOnChangeOperation:
	//	"break-change" {BreakOnChangeOperation} field=STRING;
	public BreakOnChangeOperationElements getBreakOnChangeOperationAccess() {
		return pBreakOnChangeOperation;
	}
	
	public ParserRule getBreakOnChangeOperationRule() {
		return getBreakOnChangeOperationAccess().getRule();
	}

	//BreakLineOperation:
	//	"break-line" {BreakLineOperation} line=INT;
	public BreakLineOperationElements getBreakLineOperationAccess() {
		return pBreakLineOperation;
	}
	
	public ParserRule getBreakLineOperationRule() {
		return getBreakLineOperationAccess().getRule();
	}

	//CalcOperation:
	//	"calc" {CalcOperation} field+=STRING (operator+=("+" | "-" | "/" | "*" | ":") field+=STRING)*;
	public CalcOperationElements getCalcOperationAccess() {
		return pCalcOperation;
	}
	
	public ParserRule getCalcOperationRule() {
		return getCalcOperationAccess().getRule();
	}

	//ConstantOperation:
	//	"constant" {ConstantOperation} value=STRING;
	public ConstantOperationElements getConstantOperationAccess() {
		return pConstantOperation;
	}
	
	public ParserRule getConstantOperationRule() {
		return getConstantOperationAccess().getRule();
	}

	//LabelOperation:
	//	"label" {LabelOperation} "{" label=Translations "}";
	public LabelOperationElements getLabelOperationAccess() {
		return pLabelOperation;
	}
	
	public ParserRule getLabelOperationRule() {
		return getLabelOperationAccess().getRule();
	}

	//DateOperation:
	//	TodayOperation | LWDOperation | NWDOperation;
	public DateOperationElements getDateOperationAccess() {
		return pDateOperation;
	}
	
	public ParserRule getDateOperationRule() {
		return getDateOperationAccess().getRule();
	}

	//DecisionOperation:
	//	"if" leftField=STRING operand=DecisionOperand rightField=STRING "process" firstField=STRING secondField=STRING?;
	public DecisionOperationElements getDecisionOperationAccess() {
		return pDecisionOperation;
	}
	
	public ParserRule getDecisionOperationRule() {
		return getDecisionOperationAccess().getRule();
	}

	//DescriptorOperation:
	//	"i-desc" {DescriptorOperation} field=STRING;
	public DescriptorOperationElements getDescriptorOperationAccess() {
		return pDescriptorOperation;
	}
	
	public ParserRule getDescriptorOperationRule() {
		return getDescriptorOperationAccess().getRule();
	}

	//TodayOperation:
	//	"today" {TodayOperation};
	public TodayOperationElements getTodayOperationAccess() {
		return pTodayOperation;
	}
	
	public ParserRule getTodayOperationRule() {
		return getTodayOperationAccess().getRule();
	}

	//LWDOperation:
	//	"last-working-day" {LWDOperation};
	public LWDOperationElements getLWDOperationAccess() {
		return pLWDOperation;
	}
	
	public ParserRule getLWDOperationRule() {
		return getLWDOperationAccess().getRule();
	}

	//NWDOperation:
	//	"next-working-day" {NWDOperation};
	public NWDOperationElements getNWDOperationAccess() {
		return pNWDOperation;
	}
	
	public ParserRule getNWDOperationRule() {
		return getNWDOperationAccess().getRule();
	}

	//FieldOperation:
	//	ApplicationFieldNameOperation | FieldExtractOperation | FieldNumberOperation;
	public FieldOperationElements getFieldOperationAccess() {
		return pFieldOperation;
	}
	
	public ParserRule getFieldOperationRule() {
		return getFieldOperationAccess().getRule();
	}

	//ApplicationFieldNameOperation:
	//	"application-field-name" {ApplicationFieldNameOperation} field=STRING;
	public ApplicationFieldNameOperationElements getApplicationFieldNameOperationAccess() {
		return pApplicationFieldNameOperation;
	}
	
	public ParserRule getApplicationFieldNameOperationRule() {
		return getApplicationFieldNameOperationAccess().getRule();
	}

	//// TODO change ID to a reference to an Enquiry field
	//// enquiry's field
	//FieldNumberOperation:
	//	"field-number" {FieldNumberOperation} number=INT;
	public FieldNumberOperationElements getFieldNumberOperationAccess() {
		return pFieldNumberOperation;
	}
	
	public ParserRule getFieldNumberOperationRule() {
		return getFieldNumberOperationAccess().getRule();
	}

	//FieldExtractOperation:
	//	"field-extract" {FieldExtractOperation} field=STRING;
	public FieldExtractOperationElements getFieldExtractOperationAccess() {
		return pFieldExtractOperation;
	}
	
	public ParserRule getFieldExtractOperationRule() {
		return getFieldExtractOperationAccess().getRule();
	}

	//// TODO change ID to a reference to an Enquiry field
	//SelectionOperation:
	//	"selection" {SelectionOperation} field=STRING;
	public SelectionOperationElements getSelectionOperationAccess() {
		return pSelectionOperation;
	}
	
	public ParserRule getSelectionOperationRule() {
		return getSelectionOperationAccess().getRule();
	}

	//// TODO change ID to a reference to an Selection's field
	//SystemOperation:
	//	UserOperation | CompanyOperation | LanguageOperation | LocalCurrencyOperation;
	public SystemOperationElements getSystemOperationAccess() {
		return pSystemOperation;
	}
	
	public ParserRule getSystemOperationRule() {
		return getSystemOperationAccess().getRule();
	}

	//UserOperation:
	//	"user" {UserOperation};
	public UserOperationElements getUserOperationAccess() {
		return pUserOperation;
	}
	
	public ParserRule getUserOperationRule() {
		return getUserOperationAccess().getRule();
	}

	//CompanyOperation:
	//	"company" {CompanyOperation};
	public CompanyOperationElements getCompanyOperationAccess() {
		return pCompanyOperation;
	}
	
	public ParserRule getCompanyOperationRule() {
		return getCompanyOperationAccess().getRule();
	}

	//LanguageOperation:
	//	"language" {LanguageOperation};
	public LanguageOperationElements getLanguageOperationAccess() {
		return pLanguageOperation;
	}
	
	public ParserRule getLanguageOperationRule() {
		return getLanguageOperationAccess().getRule();
	}

	//LocalCurrencyOperation:
	//	"local-currency" {LocalCurrencyOperation};
	public LocalCurrencyOperationElements getLocalCurrencyOperationAccess() {
		return pLocalCurrencyOperation;
	}
	
	public ParserRule getLocalCurrencyOperationRule() {
		return getLocalCurrencyOperationAccess().getRule();
	}

	//TotalOperation:
	//	"total" {TotalOperation} field=STRING;
	public TotalOperationElements getTotalOperationAccess() {
		return pTotalOperation;
	}
	
	public ParserRule getTotalOperationRule() {
		return getTotalOperationAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * CONVERSION
	// * ---------------------------------------------------------------------------
	// * / Conversion:
	//	ExtractConversion | DecryptConversion | ReplaceConversion | ConvertConversion | ValueConversion | JulianConversion |
	//	BasicConversion | GetFromConversion | RateConversion | AbsConversion | MatchField | CallRoutine | RepeatConversion;
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}

	//ExtractConversion:
	//	"extract from" from=INT "to" to=INT ("delimited by" delimiter=STRING)?;
	public ExtractConversionElements getExtractConversionAccess() {
		return pExtractConversion;
	}
	
	public ParserRule getExtractConversionRule() {
		return getExtractConversionAccess().getRule();
	}

	//DecryptConversion:
	//	"decrypt" {DecryptConversion} field=STRING;
	public DecryptConversionElements getDecryptConversionAccess() {
		return pDecryptConversion;
	}
	
	public ParserRule getDecryptConversionRule() {
		return getDecryptConversionAccess().getRule();
	}

	//ReplaceConversion:
	//	"replace" {ReplaceConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}";
	public ReplaceConversionElements getReplaceConversionAccess() {
		return pReplaceConversion;
	}
	
	public ParserRule getReplaceConversionRule() {
		return getReplaceConversionAccess().getRule();
	}

	//ConvertConversion:
	//	"convert" {ConvertConversion} "{" (("oldData:" oldData=STRING)? & ("newData:" newData=STRING)?) "}";
	public ConvertConversionElements getConvertConversionAccess() {
		return pConvertConversion;
	}
	
	public ParserRule getConvertConversionRule() {
		return getConvertConversionAccess().getRule();
	}

	//ValueConversion:
	//	"value" {ValueConversion} value=INT subValue=INTEGER_OBJECT?;
	public ValueConversionElements getValueConversionAccess() {
		return pValueConversion;
	}
	
	public ParserRule getValueConversionRule() {
		return getValueConversionAccess().getRule();
	}

	//JulianConversion:
	//	"julian" {JulianConversion};
	public JulianConversionElements getJulianConversionAccess() {
		return pJulianConversion;
	}
	
	public ParserRule getJulianConversionRule() {
		return getJulianConversionAccess().getRule();
	}

	//BasicConversion:
	//	BasicOConversion | BasicIConversion;
	public BasicConversionElements getBasicConversionAccess() {
		return pBasicConversion;
	}
	
	public ParserRule getBasicConversionRule() {
		return getBasicConversionAccess().getRule();
	}

	//BasicOConversion:
	//	"oconv" {BasicOConversion} instruction=STRING;
	public BasicOConversionElements getBasicOConversionAccess() {
		return pBasicOConversion;
	}
	
	public ParserRule getBasicOConversionRule() {
		return getBasicOConversionAccess().getRule();
	}

	//BasicIConversion:
	//	"iconv" {BasicIConversion} instruction=STRING;
	public BasicIConversionElements getBasicIConversionAccess() {
		return pBasicIConversion;
	}
	
	public ParserRule getBasicIConversionRule() {
		return getBasicIConversionAccess().getRule();
	}

	//GetFromConversion:
	//	"getFrom" {GetFromConversion} application=STRING field=STRING language=Boolean;
	public GetFromConversionElements getGetFromConversionAccess() {
		return pGetFromConversion;
	}
	
	public ParserRule getGetFromConversionRule() {
		return getGetFromConversionAccess().getRule();
	}

	//RateConversion:
	//	CalcFixedRateConversion | GetFixedRateConversion | GetFixedCurrencyConversion;
	public RateConversionElements getRateConversionAccess() {
		return pRateConversion;
	}
	
	public ParserRule getRateConversionRule() {
		return getRateConversionAccess().getRule();
	}

	//CalcFixedRateConversion:
	//	"calcFixedRate" {CalcFixedRateConversion} field=STRING;
	public CalcFixedRateConversionElements getCalcFixedRateConversionAccess() {
		return pCalcFixedRateConversion;
	}
	
	public ParserRule getCalcFixedRateConversionRule() {
		return getCalcFixedRateConversionAccess().getRule();
	}

	//GetFixedRateConversion:
	//	"getFixedRate" {GetFixedRateConversion} field=STRING;
	public GetFixedRateConversionElements getGetFixedRateConversionAccess() {
		return pGetFixedRateConversion;
	}
	
	public ParserRule getGetFixedRateConversionRule() {
		return getGetFixedRateConversionAccess().getRule();
	}

	//GetFixedCurrencyConversion:
	//	"getFixedCcy" {GetFixedCurrencyConversion} field=STRING;
	public GetFixedCurrencyConversionElements getGetFixedCurrencyConversionAccess() {
		return pGetFixedCurrencyConversion;
	}
	
	public ParserRule getGetFixedCurrencyConversionRule() {
		return getGetFixedCurrencyConversionAccess().getRule();
	}

	//AbsConversion:
	//	"abs" {AbsConversion};
	public AbsConversionElements getAbsConversionAccess() {
		return pAbsConversion;
	}
	
	public ParserRule getAbsConversionRule() {
		return getAbsConversionAccess().getRule();
	}

	//MatchField:
	//	"matchField" {MatchField} pattern=STRING value=STRING;
	public MatchFieldElements getMatchFieldAccess() {
		return pMatchField;
	}
	
	public ParserRule getMatchFieldRule() {
		return getMatchFieldAccess().getRule();
	}

	//CallRoutine:
	//	"call" {CallRoutine} routine= // jBC/Java
	//	Routine;
	public CallRoutineElements getCallRoutineAccess() {
		return pCallRoutine;
	}
	
	public ParserRule getCallRoutineRule() {
		return getCallRoutineAccess().getRule();
	}

	//RepeatConversion:
	//	RepeatOnNullConversion | RepeatEveryConversion | RepeatSubConversion;
	public RepeatConversionElements getRepeatConversionAccess() {
		return pRepeatConversion;
	}
	
	public ParserRule getRepeatConversionRule() {
		return getRepeatConversionAccess().getRule();
	}

	//RepeatOnNullConversion: / * multi and subvalues - note: if the field your are displaying is subvalued then you 
	//	 * will get repetition of nmake=2 and svalue=1 (providing the data is null) because 
	//	 * the mvalue is greater than one. If you do not want this then use 'repeat-sub'.
	//	 * / "repeat-when-null" {RepeatOnNullConversion};
	public RepeatOnNullConversionElements getRepeatOnNullConversionAccess() {
		return pRepeatOnNullConversion;
	}
	
	public ParserRule getRepeatOnNullConversionRule() {
		return getRepeatOnNullConversionAccess().getRule();
	}

	//RepeatEveryConversion: // repeat previous data if current data is null - regardless of multi/subvalue number
	//	"repeat-every" {RepeatEveryConversion};
	public RepeatEveryConversionElements getRepeatEveryConversionAccess() {
		return pRepeatEveryConversion;
	}
	
	public ParserRule getRepeatEveryConversionRule() {
		return getRepeatEveryConversionAccess().getRule();
	}

	//RepeatSubConversion: // repeat previous data if current data is null - only if the subvalue number is greater that one
	//	"repeat-sub" {RepeatSubConversion};
	public RepeatSubConversionElements getRepeatSubConversionAccess() {
		return pRepeatSubConversion;
	}
	
	public ParserRule getRepeatSubConversionRule() {
		return getRepeatSubConversionAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * FIELDS
	// * ---------------------------------------------------------------------------
	// * / Field:
	//	"field" name=STRING "{" (("label" "{" label=Translations "}")? // TODO add validation rule
	//	// defined a scope provider for EB/EB_REPORTS/ENQUIRY__FIELD_NAME__FIELD_LBL__FIELD_DISP_TYPE
	//	// /Field <Enq> ???
	//	//- To go into ATTRIBS
	//	//- To go into ATTRIBS
	//	& ("comments:" comments=STRING)? & ("display-type:" displayType=STRING)? & ("format:" format=Format)? &
	//	("break-condition" "{" breakCondition=BreakCondition "}")? & ("length:" length=INTEGER_OBJECT)? & ("alignment:"
	//	alignment=AlignmentKind)? & ("comma-separator:" commaSeparator=BooleanObject)? & ("decimals:"
	//	numberOfDecimals=INTEGER_OBJECT)? & ("escapeSequence:" escapeSequence=EscapeSequence)? & ("fmtMask:" fmtMask=STRING)?
	//	& ("display-section:" displaySection=DisplaySectionKind)? & ("position" "{" position=FieldPosition "}")? &
	//	("column-width:" columnWidth=INTEGER_OBJECT)? & ("spool-break:" spoolBreak=BooleanObject)? & ("processing-mode:"
	//	singleMulti=ProcessingMode)? & ("hidden:" ^hidden=BooleanObject)? & ("no-header:" noHeader=BooleanObject)? &
	//	("no-column-label:" noColumnLabel=BooleanObject)? & ("operation:" operation=Operation)? & ("conversion:"
	//	conversion+=Conversion)*) ("attributes:" attributes+=STRING ("," attributes+=STRING)*)? "}";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//BreakCondition:
	//	"break:" break=BreakKind | "field:" field=STRING;
	public BreakConditionElements getBreakConditionAccess() {
		return pBreakCondition;
	}
	
	public ParserRule getBreakConditionRule() {
		return getBreakConditionAccess().getRule();
	}

	//FieldPosition:
	//	"page-throw:" pageThrow=BooleanObject // value 0 means the current line
	//	// '+'|'-' means relative position from the current line 
	//	// omit '+'|'-' for an absolute position
	//	| "column:" column=INTEGER_OBJECT ("line:" relative=("+" | "-")? line=INTEGER_OBJECT ("multiLine:"
	//	multiLine=BooleanObject)?)?;
	public FieldPositionElements getFieldPositionAccess() {
		return pFieldPosition;
	}
	
	public ParserRule getFieldPositionRule() {
		return getFieldPositionAccess().getRule();
	}

	//Format: // TODO Add a validation rule for "FieldFormat::Currency"
	//	format=FieldFormat (field=STRING ("negative-pattern" pattern=CurrencyPattern)?)?;
	public FormatElements getFormatAccess() {
		return pFormat;
	}
	
	public ParserRule getFormatRule() {
		return getFormatAccess().getRule();
	}

	////ID WITH Dot Character	
	//ID_WITHDOT:
	//	ID ("." ID)*;
	public ID_WITHDOTElements getID_WITHDOTAccess() {
		return pID_WITHDOT;
	}
	
	public ParserRule getID_WITHDOTRule() {
		return getID_WITHDOTAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * TOOLS
	// * ---------------------------------------------------------------------------
	// * / Tool:
	//	"tool" name=ID_WITHDOT "{" (("label" "{" label=Translations "}")? & ("command:" command+=STRING)*) "}";
	public ToolElements getToolAccess() {
		return pTool;
	}
	
	public ParserRule getToolRule() {
		return getToolAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Web Services
	// * ---------------------------------------------------------------------------
	// * / WebService:
	//	"web-service" {WebService} "{" (("publish:" publishWebService=BooleanObject)? // == EXPOSE
	//	("names:" webServiceNames+=STRING ("," webServiceNames+=STRING)*)? // == SERVICE. This could in the future become a reference to an EB.Service from TWS EMF Model?  
	//	(("activity:" webServiceActivity=STRING)? // == ACTIVITY
	//	& ("description:" webServiceDescription=STRING)?) // == EXPOSE.DESC
	//) "}";
	public WebServiceElements getWebServiceAccess() {
		return pWebService;
	}
	
	public ParserRule getWebServiceRule() {
		return getWebServiceAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * Data Types
	// * ---------------------------------------------------------------------------
	// * / BooleanObject returns ecore::EBooleanObject:
	//	"No" | "false" | "Yes" | "true";
	public BooleanObjectElements getBooleanObjectAccess() {
		return pBooleanObject;
	}
	
	public ParserRule getBooleanObjectRule() {
		return getBooleanObjectAccess().getRule();
	}

	//Boolean returns ecore::EBoolean:
	//	"No" | "false" | "Yes" | "true";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	/// **
	// * ---------------------------------------------------------------------------
	// * ENUMERATIONS
	// * ---------------------------------------------------------------------------
	// * / enum AlignmentKind:
	//	Unspecified="Null" / * default * / | None | Left | Right;
	public AlignmentKindElements getAlignmentKindAccess() {
		return unknownRuleAlignmentKind;
	}
	
	public EnumRule getAlignmentKindRule() {
		return getAlignmentKindAccess().getRule();
	}

	//enum BreakKind:
	//	Unspecified="Null" / *default* / | None | Once | End | NewPage | Page;
	public BreakKindElements getBreakKindAccess() {
		return unknownRuleBreakKind;
	}
	
	public EnumRule getBreakKindRule() {
		return getBreakKindAccess().getRule();
	}

	//// available formats for negative number.
	//enum CurrencyPattern:
	//	Unspecified="Null" / *default* / | None | NULL="-#" | E="<#>" | M="#-" | B="#db" | N="#";
	public CurrencyPatternElements getCurrencyPatternAccess() {
		return unknownRuleCurrencyPattern;
	}
	
	public EnumRule getCurrencyPatternRule() {
		return getCurrencyPatternAccess().getRule();
	}

	//enum DecisionOperand:
	//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Between | NotBetween | Matches |
	//	NotMatches;
	public DecisionOperandElements getDecisionOperandAccess() {
		return unknownRuleDecisionOperand;
	}
	
	public EnumRule getDecisionOperandRule() {
		return getDecisionOperandAccess().getRule();
	}

	//enum DisplaySectionKind:
	//	Unspecified="Null" / *default* / | None | Header | Footer | Caption | NoDisplay;
	public DisplaySectionKindElements getDisplaySectionKindAccess() {
		return unknownRuleDisplaySectionKind;
	}
	
	public EnumRule getDisplaySectionKindRule() {
		return getDisplaySectionKindAccess().getRule();
	}

	//enum FieldFormat:
	//	Unspecified="Null" | None | Date | User | Translate | Rate | Currency;
	public FieldFormatElements getFieldFormatAccess() {
		return unknownRuleFieldFormat;
	}
	
	public EnumRule getFieldFormatRule() {
		return getFieldFormatAccess().getRule();
	}

	//enum FunctionKind:
	//	Unspecified="Null" | None | Input | Authorise | Reverse | See | Copy | Delete | Verify;
	public FunctionKindElements getFunctionKindAccess() {
		return unknownRuleFunctionKind;
	}
	
	public EnumRule getFunctionKindRule() {
		return getFunctionKindAccess().getRule();
	}

	//// Operands used in the definition of a fixed selection
	//enum SelectionOperator:
	//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
	//	NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike;
	public SelectionOperatorElements getSelectionOperatorAccess() {
		return unknownRuleSelectionOperator;
	}
	
	public EnumRule getSelectionOperatorRule() {
		return getSelectionOperatorAccess().getRule();
	}

	//enum CriteriaOperator:
	//	None | Equals | NotEquals | Greater | GreaterOrEquals | LessThan | LessOrEquals | Matches | NotMatches | Between |
	//	NotBetween | Contains | DoesNotContain | BeginsWith | DoesNotBeginWith | EndsWith | DoesNotEndWith | SoundsLike |
	//	GreaterThanSymbol=">";
	public CriteriaOperatorElements getCriteriaOperatorAccess() {
		return unknownRuleCriteriaOperator;
	}
	
	public EnumRule getCriteriaOperatorRule() {
		return getCriteriaOperatorAccess().getRule();
	}

	//enum ProcessingMode:
	//	Unspecified="Null" | None | Single | Multi;
	public ProcessingModeElements getProcessingModeAccess() {
		return unknownRuleProcessingMode;
	}
	
	public EnumRule getProcessingModeRule() {
		return getProcessingModeAccess().getRule();
	}

	//// sort kinds
	//enum SortOrder:
	//	Unspecified="Null" / *default* / | None | Ascending | Descending;
	public SortOrderElements getSortOrderAccess() {
		return unknownRuleSortOrder;
	}
	
	public EnumRule getSortOrderRule() {
		return getSortOrderAccess().getRule();
	}

	//enum AndOr:
	//	None | AND | OR;
	public AndOrElements getAndOrAccess() {
		return unknownRuleAndOr;
	}
	
	public EnumRule getAndOrRule() {
		return getAndOrAccess().getRule();
	}

	//enum FileVersionOption:
	//	None | Live | History | Exception | Simulation;
	public FileVersionOptionElements getFileVersionOptionAccess() {
		return unknownRuleFileVersionOption;
	}
	
	public EnumRule getFileVersionOptionRule() {
		return getFileVersionOptionAccess().getRule();
	}

	//enum EscapeSequence:
	//	Unspecified="Null" | None | RV | UL | BL | HI | DING;
	public EscapeSequenceElements getEscapeSequenceAccess() {
		return unknownRuleEscapeSequence;
	}
	
	public EnumRule getEscapeSequenceRule() {
		return getEscapeSequenceAccess().getRule();
	}

	//enum Orientation:
	//	Horizontal | Vertical;
	public OrientationElements getOrientationAccess() {
		return unknownRuleOrientation;
	}
	
	public EnumRule getOrientationRule() {
		return getOrientationAccess().getRule();
	}

	//enum ServerMode:
	//	T24 | Solr;
	public ServerModeElements getServerModeAccess() {
		return unknownRuleServerMode;
	}
	
	public EnumRule getServerModeRule() {
		return getServerModeAccess().getRule();
	}

	//INTEGER_OBJECT returns ecore::EIntegerObject:
	//	INT;
	public INTEGER_OBJECTElements getINTEGER_OBJECTAccess() {
		return pINTEGER_OBJECT;
	}
	
	public ParserRule getINTEGER_OBJECTRule() {
		return getINTEGER_OBJECTAccess().getRule();
	}

	//// TODO Adapter for this model to fit with DS NLS/Translation API
	//
	//// SharedTranslations: translations += SharedTranslation+;
	//
	//// SharedTranslation: name=ID ':' translations=LocalTranslations;
	// LocalTranslations:
	//	translations+=LocalTranslation ("," translations+=LocalTranslation)*;
	public TranslationDslGrammarAccess.LocalTranslationsElements getLocalTranslationsAccess() {
		return gaTranslationDsl.getLocalTranslationsAccess();
	}
	
	public ParserRule getLocalTranslationsRule() {
		return getLocalTranslationsAccess().getRule();
	}

	//// TODO Scope Provider so that locale must be a valid java.util.Locale ...
	// LocalTranslation:
	//	locale=ID "=" text=STRING;
	public TranslationDslGrammarAccess.LocalTranslationElements getLocalTranslationAccess() {
		return gaTranslationDsl.getLocalTranslationAccess();
	}
	
	public ParserRule getLocalTranslationRule() {
		return getLocalTranslationAccess().getRule();
	}

	//// ---
	//
	//// This is not directly used in shared .translation, but in other models which have either local translations or references to shared translations
	//
	////
	// // | SharedTranslationRef;
	// Translations:
	//	LocalTranslations;
	public TranslationDslGrammarAccess.TranslationsElements getTranslationsAccess() {
		return gaTranslationDsl.getTranslationsAccess();
	}
	
	public ParserRule getTranslationsRule() {
		return getTranslationsAccess().getRule();
	}

	//// SharedTranslationRef: 'use' ref=[SharedTranslation];
	// terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | "!" | "@" | "#" | "$" | "%" | "&" | "*" |
	//	"(" | ")" | "-")*;
	public TerminalRule getIDRule() {
		return gaTranslationDsl.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTranslationDsl.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTranslationDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTranslationDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTranslationDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTranslationDsl.getWSRule();
	} 

	//// ---
	// terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTranslationDsl.getANY_OTHERRule();
	} 
}
