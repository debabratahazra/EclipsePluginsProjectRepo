/*
 * generated by Xtext
 */
package com.odcgroup.t24.enquiry.formatting;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import com.odcgroup.t24.enquiry.services.EnquiryGrammarAccess;
import com.odcgroup.workbench.dsl.naming.formatting.AbstractDataDSLFormatter;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class EnquiryFormatter extends AbstractDataDSLFormatter<EnquiryGrammarAccess> {

	@Override
	protected void configureSpecificFormatting(FormattingConfig c, EnquiryGrammarAccess g) {
		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		// c.setLinewrap().after(g.getSL_COMMENTRule());
		c.setLinewrap().before(g.getML_COMMENTRule());
		c.setLinewrap().after(g.getML_COMMENTRule());

		// usage of parenthesis in custom selections
		String[] parenthesis = { "(", ")" };
		for (Keyword keyword : g.findKeywords(parenthesis)) {
			c.setLinewrap().before(keyword);
			c.setLinewrap().after(keyword);
		}

		// logical operators used in custom selections
		String[] operators = { "AND", "OR" };
		for (Keyword keyword : g.findKeywords(operators)) {
			c.setLinewrap(2).before(keyword);
			c.setLinewrap(2).after(keyword);
			c.setIndentationIncrement();
		}

		Set<String> ignoreKeywords = new HashSet<String>();
		ignoreKeywords.add("x:");
		ignoreKeywords.add("y:");
		ignoreKeywords.add("width:");
		ignoreKeywords.add("height:");
		ignoreKeywords.add("right:");
		ignoreKeywords.add("left:");
		ignoreKeywords.add("top:");
		ignoreKeywords.add("bottom:");

		// linewrap before all keywords ending with ':'
		final Set<String> allKeywords = GrammarUtil.getAllKeywords(grammar
				.getGrammar());
		List<Keyword> keywords = grammar.findKeywords(allKeywords
				.toArray(new String[allKeywords.size()]));
		for (final Keyword keyword : keywords) {
			String name = keyword.getValue();
			if (name.endsWith(":") && !ignoreKeywords.contains(name)) {
				c.setLinewrap().before(keyword);
			}
		}

		String[] specialKeywords = { "build-routines","header", "custom-selection",
				"position", "description", "label", "enquiry" };
		keywords = g.findKeywords(specialKeywords);
		for (final Keyword keyword : keywords) {
			c.setLinewrap().before(keyword);
		}
        
		//empty line after the end-line before starting fields.
		String[] fieldKywords = {"field"};
		for( Keyword keyword : g.findKeywords(fieldKywords)){
			c.setLinewrap(2).before(keyword);
		}
	}

}
