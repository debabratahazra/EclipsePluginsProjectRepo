module com.odcgroup.t24.menu.GenerateMenu

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/com/odcgroup/t24/menu/Menu.xtext"
var file.extensions = "menu"
var projectName = "com.odcgroup.t24.menu"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
            scanClassPath = true
            platformUri = "${runtimeProject}/.."
            
            registerGeneratedEPackage = "com.odcgroup.mdf.ecore.MdfPackage"
			registerGenModelFile = "platform:/resource/com.odcgroup.mdf.ecore/src/main/model/mdf.genmodel"
            
            registerGeneratedEPackage = "com.odcgroup.t24.version.versionDSL.VersionDSLPackage"
		registerGenModelFile = "platform:/resource/com.odcgroup.t24.version.model/model/generated/VersionDSL.genmodel"
        	
        	registerGeneratedEPackage = "com.odcgroup.t24.enquiry.enquiry.EnquiryPackage"
		registerGenModelFile = "platform:/resource/com.odcgroup.t24.enquiry.model/model/generated/Enquiry.genmodel"
        	
        	registerGeneratedEPackage = "com.odcgroup.edge.t24ui.T24UIPackage"
        	registerGenModelFile = "platform:/resource/com.odcgroup.edge.t24ui.model/model/t24ui.genmodel"

        }
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}/src-gen"
        }
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}/model"
        }

        component = DirectoryCleaner {
            directory = "../../ui/${projectName}.ui/src-gen"
        }
    
        component = Generator {
            pathRtProject = runtimeProject
            pathUiProject = "../../ui/${projectName}.ui"
            pathTestProject = "../../tests/${projectName}.tests"
            projectNameRt = projectName
            projectNameUi = "${projectName}.ui"
            language = {
                uri = grammarURI
                fileExtensions = file.extensions
    
                // Java API to access grammar elements (required by several other fragments)
                fragment = grammarAccess.GrammarAccessFragment {}
    
                // generates Java API for the generated EPackages
                fragment = ecore.EMFGeneratorFragment {
					xmiModelDirectory="${runtimeProject}/model"                
				}
    
                // Serializer 2.0
                fragment = serializer.SerializerFragment {
                	generateStub = false
                }
                
                // a custom ResourceFactory for use with EMF
                fragment = resourceFactory.ResourceFactoryFragment {
                    fileExtensions = file.extensions
                }
    
                // The antlr parser generator fragment.
                fragment = parser.antlr.XtextAntlrGeneratorFragment {
                //  options = {
                //      backtrack = true
                //  }
                }
    
                // java-based API for validation
                fragment = validation.JavaValidatorFragment {
                }
    
                // scoping and exporting API
                fragment = scoping.ImportNamespacesScopingFragment {}
                fragment = exporting.QualifiedNamesFragment {}
                fragment = builder.BuilderIntegrationFragment {}
    
                // generator API
                fragment = generator.GeneratorFragment {
                    generateMwe = false
                    generateJavaMain = false
                }
    
                // formatter API
                fragment = formatting.FormatterFragment {}
    
                // labeling API
                fragment = labeling.LabelProviderFragment {}
    
                // outline API
                fragment = outline.OutlineTreeProviderFragment {}
                fragment = outline.QuickOutlineFragment {}
    
                // quickfix API
                fragment = quickfix.QuickfixProviderFragment {}
    
                // content assist API
                fragment = contentAssist.JavaBasedContentAssistFragment {}
    
                // generates a more lightweight Antlr parser and lexer tailored for content assist
                fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
    
                // generates junit test support classes into Generator#pathTestProject
                fragment = junit.Junit4Fragment {}
    
                // rename refactoring
                fragment = refactoring.RefactorElementNameFragment {}
    
                // provides a preference page for template proposals
                fragment = templates.CodetemplatesGeneratorFragment {}
    
                // provides a compare view
                fragment = compare.CompareFragment {
                     fileExtensions = file.extensions
                }
    
            }
        }
}

