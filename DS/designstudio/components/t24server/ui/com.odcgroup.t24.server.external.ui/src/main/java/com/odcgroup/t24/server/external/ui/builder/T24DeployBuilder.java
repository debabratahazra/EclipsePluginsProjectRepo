package com.odcgroup.t24.server.external.ui.builder;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.ICommand;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResourceDelta;
import org.eclipse.core.resources.IResourceDeltaVisitor;
import org.eclipse.core.resources.IncrementalProjectBuilder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;

import com.odcgroup.server.model.IDSServerStates;
import com.odcgroup.t24.server.external.builder.delta.AnalysedDelta;
import com.odcgroup.t24.server.external.model.IExternalServer;
import com.odcgroup.t24.server.external.ui.T24ServerUIExternalCore;
import com.odcgroup.t24.server.external.ui.util.EditDeployedXml;

public class T24DeployBuilder extends IncrementalProjectBuilder {

	private static final String SVN_FOLDER = ".svn";
	private static final String XML_T24I_SRC_FOLDER = "src/xml-t24i";
	public static final String BUILDER_ID = T24ServerUIExternalCore.PLUGIN_ID + ".builder"; 
	private IProject overrideProject;

	/**
	 * Used by eclipse
	 */
	public T24DeployBuilder() {
	}

	/**
	 * Used to invoke the builder initially
	 * @throws CoreException
	 */
	public T24DeployBuilder(IProject overrideProject) throws CoreException {
		this.overrideProject = overrideProject;
		getBuilderArgs();
	}

	/**
	 * @param overrideProject
	 * @return
	 * @throws CoreException
	 */
	@SuppressWarnings("rawtypes")
	private Map getBuilderArgs() throws CoreException {
		// Retreive the builder
		Map args = null;
		for (ICommand cmd : getEffectiveProject().getDescription().getBuildSpec()) {
			if (cmd.getBuilderName().equals(T24DeployBuilder.BUILDER_ID)) {
				args = cmd.getArguments();
			}
		}
		return args;
	}



	/**
	 * Return the project (getProject() can be overridden if using the DeployBuilder(IProject) constructor
	 */
	private IProject getEffectiveProject() {
		if (overrideProject != null) {
			return overrideProject;
		} else {
			return getProject();
		}
	}
	
	/**
	 * Called when a full build is requested (using the Clean action in Eclipse).
	 * @throws CoreException
	 */
	private void fullBuild(IProgressMonitor monitor) throws CoreException {
		T24DeployConsole deployConsole = T24ServerUIExternalCore.getDefault().getDeployBuilderConsole();
		deployConsole.printDebug("Ignoring full build.");
	}

	/**
	 * Process the analyzed delta
	 * @throws CoreException
	 */
	private void processDelta(AnalysedDelta delta) throws CoreException {
		T24DeployConsole deployConsole = T24ServerUIExternalCore.getDefault().getDeployBuilderConsole();
		deployConsole.printDebug("Statistics: " + delta.getAddedFiles().size() + " added file(s), " + delta.getChangedFiles().size() + " modified file(s).");

		List<String> files = new ArrayList<String>();
		files.addAll(delta.getAddedFiles());
		files.addAll(delta.getChangedFiles());
		new EditDeployedXml().processGenXml(getEffectiveProject().getLocation().toFile(), files);
	}


	/**
	 * Called when an incremental build is requested (invoked by Eclipse when building project in background).
	 */
	public void incrementalBuild(IResourceDelta resourceDelta, IProgressMonitor monitor) throws CoreException {
		T24DeployConsole deployConsole = T24ServerUIExternalCore.getDefault().getDeployBuilderConsole();
		long start = System.currentTimeMillis();
		monitor.beginTask("Starting the deployment of " + getEffectiveProject().getName(), 3);

		// Analysis of the delta
		final AnalysedDelta delta = analyseDelta(resourceDelta, monitor);
		monitor.worked(1);

		if (delta.hasChanges()) {
			deployConsole.printDebug("Changes detected:");
			deployConsole.printDebug(delta.getSummary());

			monitor.setTaskName("Deployment of " + getEffectiveProject().getName());
			processDelta(delta);
			monitor.worked(1);
		}

		deployConsole.printDebug("Incremental deploy in " + (System.currentTimeMillis()-start) + " ms.");

		monitor.setTaskName("Deployment done for " + getEffectiveProject().getName());
		monitor.done();
	}

	/**
	 * Analyze the delta generated by eclipse
	 */
	protected AnalysedDelta analyseDelta(IResourceDelta delta,
			IProgressMonitor monitor) throws CoreException {
		final AnalysedDelta analysedDelta = new AnalysedDelta(getProjectFullPath());
		final String projectName = getEffectiveProject().getName();
		final int projectNameLength = ("" + File.separatorChar + getEffectiveProject().getName() + File.separatorChar).length();
		monitor.worked(1);
		delta.accept(new IResourceDeltaVisitor() {
			public boolean visit(IResourceDelta delta) {
				if (delta == null || delta.getResource().getRawLocation() == null || delta.getFullPath().toPortableString().length() < projectNameLength) {
					return true;
				}
				String deltaResourceLocation = delta.getFullPath().toPortableString().substring(projectNameLength);
				if (deltaResourceLocation.contains(SVN_FOLDER)) {
					// Skip .svn folders
					return false;
				}
				if (deltaResourceLocation.contains(XML_T24I_SRC_FOLDER)){ 
					//|| deltaResourceLocation.startsWith(outputFolder)) {
					processDelta(delta);
				}
				return true; // visit children too
			}
			private void processDelta(IResourceDelta delta) {
				String file = delta.getResource().getFullPath().toPortableString().substring(projectName.length()+2);
				if(!isT24XmlFile(file)) {
					return; // Ignore non xml file for T24
				}
				switch (delta.getKind()) {
				case IResourceDelta.ADDED:
					analysedDelta.addedFile(file);
					break;
				case IResourceDelta.CHANGED:
					analysedDelta.changedFile(file);
					break;
				case IResourceDelta.REMOVED:
					break;
				default:
				}
			}
		});
		return analysedDelta;
	}

	/**
	 * Called when the builder in invoke by Eclipse (full and incremental build)
	 */
	@SuppressWarnings("rawtypes")
	@Override
	public IProject[] build(int kind, Map args, IProgressMonitor monitor)
			throws CoreException {
		IExternalServer externalServer = T24ServerUIExternalCore.getDefault().getExternalServer();
		if (externalServer!=null && externalServer.containsProject(getEffectiveProject().getName())) {
			if (externalServer.getState() == IDSServerStates.STATE_ACTIVE ||
					externalServer.getState() == IDSServerStates.STATE_ACTIVE_IN_DEBUG) {
				T24ServerUIExternalCore.getDefault().getDeployBuilderConsole().printDebug("Starting deployment...");
				if (kind == IncrementalProjectBuilder.FULL_BUILD) {
					fullBuild(monitor);
				} else {
					IResourceDelta delta = getDelta(getEffectiveProject());
					if (delta == null) {
						fullBuild(monitor);
					} else {
						incrementalBuild(delta, monitor);
					}
				}
			}
		}
		return null;
	}

	/**
	 * Initial builder (done when the builder is added)
	 * @throws CoreException
	 */
	public void initialBuild() throws CoreException {
		build(IncrementalProjectBuilder.FULL_BUILD, getBuilderArgs(), new NullProgressMonitor());
	}
	
	/**
	 * Retrieve the project full path
	 */
	private String getProjectFullPath() {
		return getEffectiveProject().getLocation().toPortableString();
	}

	public static boolean isT24XmlFile(String file) {
		return file.startsWith(XML_T24I_SRC_FOLDER) && file.endsWith(".xml");
	}

}
