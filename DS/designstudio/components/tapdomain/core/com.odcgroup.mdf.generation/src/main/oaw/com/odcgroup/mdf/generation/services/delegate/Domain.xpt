«IMPORT mdf»
«EXTENSION com::odcgroup::mdf::generation::java»

«DEFINE ServiceDelegate FOR List[MdfDomain]»
	«EXPAND ServiceDelegate FOREACH this»
«ENDDEFINE»

«DEFINE ServiceDelegate FOR MdfDomain»
	«EXPAND ServiceDelegate FOREACH datasets»
«ENDDEFINE»

«DEFINE ServiceDelegate FOR MdfDataset»
	«FILE (getPackage().toPath() + "/services/delegates/" + name + "ServiceDelegate.java")»
		package «getPackage()».services.delegates;

		import java.rmi.RemoteException;
		import java.util.List;

		import com.odcgroup.otf.services.*;
		import com.odcgroup.otf.services.exceptions.*;
		import com.odcgroup.mdf.core.services.*;
		import «getPackage()».*;
		import «getPackage()».services.*;
		import «getPackage()».services.ejb.*;

		public class «name»ServiceDelegate implements «name»Provider, «name»Manager {

			private final «name»Service _service;

			public «name»ServiceDelegate() {
	            OtfServiceLocator svc = OtfServiceLocator.getInstance();

	            try {
                    «name»ServiceHome home =
                        («name»ServiceHome) svc.lookup(«name»ServiceHome.SERVICE_NAME,
                            «name»ServiceHome.class);
                    _service = home.create();
				} catch (ServiceRepositoryException _exception) {
	            	throw new RuntimeException(_exception);
				} catch (ServiceLocatorException _exception) {
	            	throw new RuntimeException(_exception);
				} catch (RemoteException _exception) {
	            	throw new RuntimeException(_exception);
				} catch (javax.ejb.CreateException _exception) {
	            	throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Provider#findById(«getPackage()».«baseClass.name»Ref)
			 */
			public «name» findById(«baseClass.name»Ref id) throws ObjectNotFoundException {
				try {
					return _service.findById(id);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Provider#findByIds(List<«getPackage()».«baseClass.name»Ref>)
			 */
			public List<«name»> findByIds(List<«baseClass.name»Ref> ids) throws ObjectNotFoundException {
				try {
					return _service.findByIds(ids);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Provider#findAll()
			 */
			public List<«name»> findAll() {
				try {
					return _service.findAll();
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Provider#findByQuery(Object)
			 */
			public List<«name»> findByQuery(Object query) throws UnsupportedOperationException {
				try {
					return _service.findByQuery(query);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}
			
			/**
			 * @see «getPackage()».services.«name»Manager#create()
			 */
			public «name» create() {
				try {
					return _service.create();
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#validate(«getPackage()».«name», com.odcgroup.mdf.core.services.MessageHandler)
			 */
			public MessageHandler validate(«name» «name.uncapitalise()») {
				try {
					return _service.validate(«name.uncapitalise()»);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#save(«getPackage()».«name»)
			 */
			public «name» save(«name» «name.uncapitalise()») throws ValidationException {
				try {
					return _service.save(«name.uncapitalise()»);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#remove(«getPackage()».«baseClass.name»Ref)
			 */
			public void remove(«baseClass.name»Ref id) throws ObjectNotFoundException {
				try {
					_service.remove(id);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#validateAll(List<«getPackage()».«name»>)
			 */
			public MessageHandler validateAll(List<«name»> «name.uncapitalise().toPlural()») {
				try {
					return _service.validateAll(«name.uncapitalise().toPlural()»);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#saveAll(List<«getPackage()».«name»>)
			 */
			public List<«name»> saveAll(List<«name»> «name.uncapitalise().toPlural()») throws ValidationException {
				try {
					return _service.saveAll(«name.uncapitalise().toPlural()»);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}

			/**
			 * @see «getPackage()».services.«name»Manager#removeAll(List<«getPackage()».«baseClass.name»Ref>)
			 */
			public void removeAll(List<«baseClass.name»Ref> ids) throws ObjectNotFoundException {
				try {
					_service.removeAll(ids);
				} catch (RemoteException _exception) {
					throw new RuntimeException(_exception);
				}
			}
		}
	«ENDFILE»
«ENDDEFINE»
