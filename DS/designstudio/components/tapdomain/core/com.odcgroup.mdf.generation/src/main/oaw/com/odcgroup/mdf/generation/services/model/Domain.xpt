«IMPORT mdf»
«EXTENSION com::odcgroup::mdf::generation::java»

«DEFINE ServiceModel FOR List[MdfDomain]»
	«EXPAND ServiceModel FOREACH this»
«ENDDEFINE»

«DEFINE ServiceModel FOR MdfDomain»
	«EXPAND ServiceModel FOREACH datasets»
«ENDDEFINE»

«DEFINE ServiceModel FOR MdfDataset»
	«EXPAND DataProvider»
	«EXPAND DataManager»
«ENDDEFINE»

«DEFINE DataProvider FOR MdfDataset»
		«FILE (getPackage().toPath() + "/services/" + name + "Provider.java")»
			package «getPackage()».services;

			import java.util.List;
			import com.odcgroup.mdf.core.services.*;
			import «getPackage()».*;
			«IF (getPackage() != baseClass.getPackage())»
			import «baseClass.getPackage()».*;			
			«ENDIF»
			public interface «name»Provider extends DataProvider {

				public static final String SERVICE_NAME = "«getPackage()».services.«name»Provider";

				/**
				 * Finds a {@link «getPackage()».«name» «name»} instance given its reference.
				 *
				 * @param id the {@link «getPackage()».«baseClass.name»Ref «baseClass.name»Ref} of the
				 * 		{@link «getPackage()».«name» «name»} to look for.
				 * @return the found {@link «getPackage()».«name» «name»}.
				 * @throws com.odcgroup.mdf.core.services.ObjectNotFoundException if the given reference does not exist.
				 */
				public «name» findById(«baseClass.name»Ref id) throws ObjectNotFoundException;

				/**
				 * Finds a list of {@link «getPackage()».«name» «name»} instances given their references.
				 *
				 * @param ids the list of {@link «baseClass.getPackage()».«baseClass.name»Ref «baseClass.name»Refs} of the
				 * 		{@link «getPackage()».«name» «name.toPlural()»} to look for.
				 * @return a list of the found {@link «getPackage()».«name» «name.toPlural()»} or an empty list if 
				 * 		nothing is found. Should never return <code>null</code>.
				 * @throws com.odcgroup.mdf.core.services.ObjectNotFoundException if any of the given references does not exist.
				 */
				public List<«name»> findByIds(List<«baseClass.name»Ref> ids) throws ObjectNotFoundException;

				/**
				 * Returns a list of all the persisted {@link «getPackage()».«name» «name.toPlural()»}.
				 *
				 * @return a list of all the persisted {@link «getPackage()».«name» «name.toPlural()»} or an empty list if 
				 * 		nothing is found. Should never return <code>null</code>.
				 */
				public List<«name»> findAll();

				/**
				 * Finds a list of {@link «getPackage()».«name» «name»} instances given an implementation specific ad-hoc query object.
				 *
				 * @param query the ad-hoc query to execute, this object is entirely dependent on the implementation of the 
				 * 		back-end service. Clients must be aware of the actual implementation they are using and of the different   
				 * 		types of queries that this implementation supports. 
				 * @return a list of the matching {@link «getPackage()».«name» «name.toPlural()»} or an empty list if 
				 * 		nothing is found. Should never return <code>null</code>.
				 * @throws java.lang.UnsupportedOperationException if the given query object is not supported by the service implementation.
				 */
				public List<«name»> findByQuery(Object query) throws UnsupportedOperationException;
			}
		«ENDFILE»
«ENDDEFINE»

«DEFINE DataManager FOR MdfDataset»
	«FILE (getPackage().toPath() + "/services/" + name + "Manager.java")»
		package «getPackage()».services;

		import java.util.List;
		import com.odcgroup.mdf.core.services.*;
		import «getPackage()».*;
		«IF (getPackage() != baseClass.getPackage())»
		import «baseClass.getPackage()».*;			
		«ENDIF»

		public interface «name»Manager extends DataManager {

			public static final String SERVICE_NAME = "«getPackage()».services.«name»Manager";

			/**
			 * Creates a new {@link «getPackage()».«name» «name»} instance that
			 * is still not persisted.
			 * The instance is setup with default values according to business rules.
			 * Setup is delegated to the rule engine.
			 *
			 * @return a new {@link «getPackage()».«name» «name»} instance.
			 */
			public «name» create();

			/**
			 * Validates a {@link «getPackage()».«name» «name»} instance according
			 * to business rules.
			 * Validation is delegated to the rule engine and returns a list of messages
			 * provided by the validation rule.
			 *
			 * @param «name.uncapitalise()» the «name» instance to  validate.
			 * @return A list of validation messages if any. Should never return <code>null</code>.
			 */
			public MessageHandler validate(«name» «name.uncapitalise()»);

			/**
			 * Inserts or updates a {@link «getPackage()».«name» «name»} instance.
			 * The instance is validated before being saved. In this case, if any error
			 * message remains logged by the validation rule, a business error is raised.
			 *
			 * @param «name.uncapitalise()» the «name» to serialize.
			 * @return the saved instance.
			 * @thows com.odcgroup.mdf.core.services.ValidationException if the {@link «getPackage()».«name» «name»}
			 *		is not valid according to its business rules.
			 */
			public «name» save(«name» «name.uncapitalise()») throws ValidationException;

			/**
			 * Removes an existing {@link «getPackage()».«name» «name»} instance and its depending
			 * objects from the persistence repository.
			 *
			 * @param id the {@link «baseClass.getPackage()».«baseClass.name»Ref «baseClass.name»Ref} of the
			 *		{@link «getPackage()».«name» «name»} to remove.
			 * @throws com.odcgroup.mdf.core.services.ObjectNotFoundException if the referenced
			 *		{@link «getPackage()».«name» «name»} does not exist.
			 */
			public void remove(«baseClass.name»Ref id) throws ObjectNotFoundException;

			/**
			 * Validates a list of {@link «getPackage()».«name» «name»} instances
			 * according to business rules.
			 * Validation is delegated to the rule engine and returns a list of messages
			 * provided by the validation rule.
			 *
			 * @param «name.uncapitalise().toPlural()» the «name.uncapitalise().toPlural()» instances to  validate.
			 * @return A list of list of validation messages if any. Should never return <code>null</code>.
			 */
			public MessageHandler validateAll(List<«name»> «name.uncapitalise().toPlural()»);

			/**
			 * Inserts or updates a list of {@link «getPackage()».«name» «name»} instances.
			 * The instances are validated before being saved. In this case, if any error
			 * message remains logged by the validation rule, a business error is raised.
			 *
			 * @param «name.uncapitalise().toPlural()» the «name.uncapitalise().toPlural()» to serialize.
			 * @return a list containing the saved instances.
			 * @thows com.odcgroup.mdf.core.services.ValidationException if any of the
			 * 		{@link «getPackage()».«name» «name»} is not valid according to its business rules.
			 */
			public List<«name»> saveAll(List<«name»> «name.uncapitalise().toPlural()») throws ValidationException;

			/**
			 * Removes a list of existing {@link «getPackage()».«name» «name»} instances and their
			 * depending objects from the persistence repository.
			 *
			 * @param ids a list of the {@link «baseClass.getPackage()».«baseClass.name»Ref «baseClass.name»Refs} of the
			 *		{@link «getPackage()».«name» «name»} to remove.
			 * @throws com.odcgroup.mdf.core.services.ObjectNotFoundException if any of the referenced
			 *		{@link «getPackage()».«name» «name»} does not exist.
			 */
			public void removeAll(List<«baseClass.name»Ref> ids) throws ObjectNotFoundException;
		}
	«ENDFILE»
«ENDDEFINE»