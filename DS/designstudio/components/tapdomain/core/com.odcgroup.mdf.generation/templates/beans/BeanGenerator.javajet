<%@ jet package="com.odcgroup.mdf.generation.legacy.java.jet" 
	class="BeanGenerator" 
	skeleton="BeanGenerator.skel"
	imports="java.util.*
		com.odcgroup.mdf.ecore.PrimitivesDomain
		com.odcgroup.mdf.transform.java.JavaCore
		com.odcgroup.mdf.generation.legacy.java.SourceCodeGenerator
		com.odcgroup.mdf.generation.util.MdfGenerationUtil
		com.odcgroup.mdf.metamodel.*" %>
<%@ include file="../header.txt" %>

package <%= JavaCore.getBeanPackage(_model) %>;

import java.io.*;

import <%= JavaCore.getModelPackage(_model) %>.*;

import com.odcgroup.mdf.core.*;

/**
 * @see <%= JavaCore.getQualifiedModelClassName(_model) %>
 * @generated
 */
public <%= (_model.isAbstract() ? "abstract " : "")%>class <%= JavaCore.getBeanClassName(_model) %> 

<% if (_model.getBaseClass() != null) { %>
	extends <%= JavaCore.getQualifiedBeanClassName(_model.getBaseClass()) %>
<% } else { %>
	extends DomainObjectBean
<% } %> implements Serializable, <%= JavaCore.getModelClassName(_model) %> {

	private static final long serialVersionUID = <%= JavaCore.getSerialVersionUID(_model) %>L;	

    //-------------------------------------------------------------------------
	// Fields and accessors
	<%
		Iterator it = _model.getProperties().iterator();
        while (it.hasNext()) {
            MdfProperty p = (MdfProperty) it.next();%>            
	/**	 
	 * The <em>JavaCore.getFieldName(p)</em> property.
	 * <%= (p.getType() instanceof MdfEnumeration) ? "@see " + JavaCore.getQualifiedModelClassName(p.getType()) : "" %>
	 * @generated
     * <%= (p.isPrimaryKey()) ? "@primaryKey" : "" %>
	 */
    private <%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getFieldName(p)%>;
	
	/**
	 * Returns the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @return the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * <%= (p.getType() instanceof MdfEnumeration) ? "@see " + JavaCore.getQualifiedModelClassName(p.getType()) : "" %>
	 * @generated
     * <%= (p.isPrimaryKey()) ? "@primaryKey" : "" %>
	 */
	public <%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getGetterName(p) %>() {
<%		if (p instanceof MdfAssociation
				 && ((MdfAssociation) p).getMultiplicity() == MdfConstants.MULTIPLICITY_MANY) {%>
		 	if (null==this.<%= JavaCore.getFieldName(p)%>) {
		this.<%= JavaCore.getFieldName(p)%> = new java.util.ArrayList(0);		 	
		 	}
		return this.<%= JavaCore.getFieldName(p)%>;
<%		} else {%>
<%			if ("mml:date".equals(p.getType().getQualifiedName().getQualifiedName()) ||
				"mml:dateTime".equals(p.getType().getQualifiedName().getQualifiedName())) { %>
		if (this.<%=JavaCore.getFieldName(p)%>==null) {
			return null;
		} else {
			// This ensure immutability of <%= JavaCore.getFieldName(p) %>
			return new java.util.Date(this.<%=JavaCore.getFieldName(p)%>.getTime()); 
		}
<% 			} else { %> 
		return this.<%=JavaCore.getFieldName(p)%>;
<%			} %>
<%		}%>
	}
	
	/**
	 * Sets the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @param <%= JavaCore.getFieldName(p) %> the new value of the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * <%= (p.getType() instanceof MdfEnumeration) ? "@see " + JavaCore.getQualifiedModelClassName(p.getType()) : "" %>
	 * @generated
     * <%= (p.isPrimaryKey()) ? "@primaryKey" : "" %>
	 */
	public void <%= JavaCore.getSetterName(p) %>(<%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getFieldName(p) %>) {
<%			if ("mml:date".equals(p.getType().getQualifiedName().getQualifiedName()) ||
				"mml:dateTime".equals(p.getType().getQualifiedName().getQualifiedName())) { %>
		// This ensure immutability of <%= JavaCore.getFieldName(p) %>
		if (<%= JavaCore.getFieldName(p) %>==null) {
			this.<%= JavaCore.getFieldName(p)%> = null;
		} else {
			this.<%= JavaCore.getFieldName(p)%> = new java.util.Date(<%= JavaCore.getFieldName(p)%>.getTime());
		}
<%			} else { %>
		this.<%= JavaCore.getFieldName(p)%> = <%= JavaCore.getFieldName(p) %>;
<%			} %>
	}
     <% }%>

    //-------------------------------------------------------------------------
	// Constructors

	/**
	 * @generated
	 */
	public <%= JavaCore.getBeanClassName(_model) %>() {
		super();
<%  Iterator props = null;
	if (!_model.getProperties().isEmpty()) { %>
		try {
<%
			props = _model.getProperties().iterator();
			
			while (props.hasNext()) {
				MdfProperty property = (MdfProperty) props.next();
				if (false==property instanceof MdfAssociation
				 || ((MdfAssociation) property).getMultiplicity() == MdfConstants.MULTIPLICITY_ONE) {
					String initCode = MdfGenerationUtil.getPropertyInitCode(property);
					if (initCode != null) {
						String fieldName = JavaCore.getFieldName(property);%>
				this.<%= fieldName %> = <%= initCode %>;		
<%					}
				} 
			} %>
		} catch (Exception e) {
            throw (IllegalArgumentException) new IllegalArgumentException(e.getMessage()).initCause(e);
		}	
<% } %>		
	}

	/**
	 * Copy Constructor
	 * @param copy The instance to be copied
<% if (_model.hasPrimaryKey(true)) { %>
	 * @deprecated since MDF2.30, replaced by another copy constructor 
    *     that makes explicit the fact that you need to provide the key
<% } %>
	 * @generated
	 */
    public <%= JavaCore.getBeanClassName(_model) %>(<%= JavaCore.getBeanClassName(_model) %> copy) {
    	this();
        copy.copyTo(this);
    }

<% if (_model.hasPrimaryKey(true)) { %>
	/**
	 * Copy Constructor
<%		Iterator keys = _model.getPrimaryKeys(true).iterator();
        while (keys.hasNext()) {
            MdfProperty p = (MdfProperty) keys.next();%><% } %>
	 * @param copy The instance to be copied
	 * @generated
	 */
    public <%= JavaCore.getBeanClassName(_model) %>(<%
        keys = _model.getPrimaryKeys(true).iterator();
        while (keys.hasNext()) {
            MdfProperty p = (MdfProperty) keys.next();%>
			<%= MdfGenerationUtil.getTypeName(p) %> <%= JavaCore.getFieldName(p)%><%
			if (keys.hasNext()) stringBuffer.append(", ");
        }
	%>, <%= JavaCore.getBeanClassName(_model) %> copy) {
    	this();
        copy.copyTo(this);
    <% 	keys = _model.getPrimaryKeys(true).iterator();
    	while (keys.hasNext()) {
            MdfProperty p = (MdfProperty) keys.next();%>
		this.<%= JavaCore.getSetterName(p) %>(<%= JavaCore.getFieldName(p)%>);<%
        }%>
    }
<% } %>
    
	/**
	 * @see com.odcgroup.mdf.core.DomainObjectBean#copyTo(DomainObjectBean)
	 * @generated
	 */
    public void copyTo(DomainObjectBean copy) {
        super.copyTo(copy);
<% if (_model.getProperties().size() > _model.getPrimaryKeys().size()) { %>
        if (copy instanceof <%= JavaCore.getBeanClassName(_model) %>) {
            <%= JavaCore.getBeanClassName(_model) %> other = (<%= JavaCore.getBeanClassName(_model) %>) copy;

<% 
            props = _model.getProperties().iterator();
			
			while (props.hasNext()) {
				MdfProperty property = (MdfProperty) props.next();

				if (property.isPrimaryKey()) {
					continue;
				}
				
				String fieldName = JavaCore.getFieldName(property);
				
				if (property instanceof MdfAttribute) {%>
			other.<%= fieldName %> = this.<%= fieldName %>;
<%				} else if (property instanceof MdfAssociation) {
					MdfAssociation association = (MdfAssociation) property;
					
					if (association.getMultiplicity() == MdfConstants.MULTIPLICITY_MANY) {%>
			if (this.<%= fieldName %> != null) {
				other.<%= fieldName %> = new java.util.ArrayList(this.<%= fieldName %>);
			}
<%					} else {%>
			other.<%= fieldName %> = this.<%= fieldName %>;
<%					}
				}
			}
%>
        }
<% } %>        
    }

<% if (!_model.isAbstract()) { %>
    //-------------------------------------------------------------------------
	// com.odcgroup.mdf.core.DomainObject

	private static final com.odcgroup.mdf.metamodel.MdfName ENTITY_NAME = 
		 com.odcgroup.mdf.metamodel.MdfNameFactory.createMdfName("<%= _model.getQualifiedName().getDomain() %>","<%= _model.getQualifiedName().getLocalName() %>");
	
    public com.odcgroup.mdf.metamodel.MdfName getEntityName() {
        return ENTITY_NAME;
    }
<% }

   if (_model.hasPrimaryKey(true)) { %>
   
    //-------------------------------------------------------------------------
	// com.odcgroup.mdf.core.ReferenceableDomainObject

	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#getDomainObject()
	 * @generated
	 */
	public DomainObject getDomainObject() {
		return this;
	}

	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#getObjectId()
	 * @generated
	 */
	public ObjectId getObjectId() {
		<%Iterator keys = _model.getPrimaryKeys(true).iterator();
		  boolean hasPrimaryNotPrimitive = false;
          while (keys.hasNext()) { 
              MdfProperty p = (MdfProperty) keys.next();
              if (!PrimitivesDomain.getJavaType(p.getType()).isPrimitive()) {
              	  if (!hasPrimaryNotPrimitive) hasPrimaryNotPrimitive = true;
              	  else stringBuffer.append(" || ");%>
         	if (<%
         		  stringBuffer.append("this.").append(JavaCore.getGetterName(p)).append("() == null");              		
              } // end of if isPrimitive
          } // end of while
          
          if (hasPrimaryNotPrimitive) { %>)
		    {
        	  return null;
		    }
		  <%}%>
		  
	
		return <%= JavaCore.getRefClassName(_model) %>.create<%= JavaCore.getRefClassName(_model) %>(<%
	        keys = _model.getPrimaryKeys(true).iterator();
	        while (keys.hasNext()) {
	            MdfProperty p = (MdfProperty) keys.next();
	            stringBuffer.append("this.").append(JavaCore.getGetterName(p)).append("()");
	            if (keys.hasNext()) stringBuffer.append(", ");
	        }%>);
	}
	
	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#get_oid()
	 * @generated
	 */
	public Object get_oid() {
		ObjectId objectId = getObjectId();
		if (objectId != null) {
			return objectId.getPrimaryKeyValue();
		} else {
			return null;
		}
	}
<% }

   if (_model.hasPrimaryKey()) { %>
  
    //-------------------------------------------------------------------------
	// hashCode & equals

	/**
	 * Returns a hash code value for the object.
     *
     * @return a hash code value for this object.
	 * @see java.lang.Object#hashCode()
	 * @generated
	 */
    public int hashCode() {
    	ObjectId objectId = getObjectId();
    	if (objectId == null) {
   			return super.hashCode();
    	}
        return objectId.hashCode();
    }

	/**
	 * Indicates whether some other object is "equal to" this one.
     *
	 * @param obj the reference object with which to compare.
     * @return <code>true</code> if this object is the same as 
     * 		the obj argument; <code>false</code> otherwise.
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @generated
	 */
    public boolean equals(Object obj) {
        if (this == obj) return true;

        if (obj instanceof <%= JavaCore.getBeanClassName(_model) %>) {
        	ObjectId objectId = getObjectId(); 
	    	if (objectId == null) {
	   			return super.equals(obj);
	    	}
            <%= JavaCore.getBeanClassName(_model) %> other = (<%= JavaCore.getBeanClassName(_model) %>) obj;
            return objectId.equals(other.getObjectId());
        }
        
        return false;
    }
<%  } %>     

<% 
	// Not compatible with WebSphere 4.x
	// And it seems not compatible with WebSphere 5.1 either
	/*
	if (!_model.getProperties().isEmpty()) { %>

    //-------------------------------------------------------------------------
	// readObject & writeObject	
    private void readObject(ObjectInputStream in)
        throws IOException, ClassNotFoundException {

        ObjectInputStream.GetField getfield = in.readFields();
        
		try {
		<%
			props = _model.getProperties().iterator();
			
			while (props.hasNext()) {
				MdfProperty p = (MdfProperty) props.next();

				if (p instanceof MdfReverseAssociation) {
					continue;
				}
				
				String fieldName = JavaCore.getFieldName(p);
				String cast = "";
				MdfEntity type = p.getType();
				
				if (p instanceof MdfAttribute) {
					if (type instanceof MdfEnumeration) {
						MdfEnumeration e = (MdfEnumeration) type;
						type = e.getType();
					} 
					
					Class javaClass = PrimitivesDomain.getJavaType(type);
					if (javaClass == null) {
						throw new RuntimeException("Invalid Property Type!");
					}

					if (!javaClass.isPrimitive()) {
						cast = "(" + JavaCore.getShortName(javaClass.getName()) + ") ";
					}
				} else {
						cast = "(" + JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) + ") ";
				}
				
				String initCode = JavaCore.getPropertyInitCode(p);%>
			this.<%= fieldName %> = <%= cast %>getfield.get("<%= fieldName %>", <%= initCode %>);				
<%			}
%>
		} catch (IOException e) {
			throw e;
		} catch (Exception e) {
            throw (IOException) new IOException(e.getMessage()).initCause(e);
		}
    }
		    
    private void writeObject(ObjectOutputStream out)
        throws IOException {
    
        ObjectOutputStream.PutField putfield = out.putFields();
        
		props = _model.getProperties().iterator();
		
		while (props.hasNext()) {
			MdfProperty p = (MdfProperty) props.next();

			if (p instanceof MdfReverseAssociation) {
				continue;
			}%>
		putfield.put("<%= JavaCore.getFieldName(p) %>", this.<%= JavaCore.getFieldName(p) %>);			
		<% }%>
        out.writeFields();
    }
    	
<%  } 
	*/
%>

}