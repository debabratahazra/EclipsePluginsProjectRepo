<%@ jet package="com.odcgroup.mdf.generation.legacy.java.jet"
	class="DatasetBeanGenerator"
	skeleton="DatasetBeanGenerator.skel"
	imports="java.util.*
		com.odcgroup.mdf.transform.java.JavaCore
		com.odcgroup.mdf.generation.util.MdfGenerationUtil
		com.odcgroup.mdf.generation.legacy.java.SourceCodeGenerator
		com.odcgroup.mdf.metamodel.*" %>
<%@ include file="../header.txt" %>

package <%= JavaCore.getBeanPackage(_model) %>;

import java.io.*;

import <%= JavaCore.getModelPackage(_model) %>.*;
import <%= JavaCore.getModelPackage(_model.getBaseClass()) %>.*;

import com.odcgroup.mdf.core.*;

<%
String beanClassName = JavaCore.getBeanClassName(_model);
String modelClassName = JavaCore.getModelClassName(_model);
List localProperties = _model.getProperties();
Iterator it = null;
%>

/**
 * @see <%= JavaCore.getQualifiedModelClassName(_model) %>
 * @generated
 */
public class <%= beanClassName %> extends DomainObjectBean 
	implements <%= modelClassName %>, Serializable, Cloneable {

	private static final long serialVersionUID = <%= JavaCore.getSerialVersionUID(_model) %>L;
	
	private <%= JavaCore.getRefClassName(_model.getBaseClass()) %> _objectId;

	private <%= JavaCore.getQualifiedPermValuesClassName(_model) %> _permvalues;

   //-------------------------------------------------------------------------
   // Fields and accessors
<%    it = localProperties.iterator();
      while (it.hasNext()) {
            MdfDatasetProperty p = (MdfDatasetProperty) it.next();%>
	/**
	 * The <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @generated
	 */
    protected <%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getFieldName(p)%>;

	/**
	 * Returns the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @return the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @generated
	 */
	public <%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getGetterName(p) %>() {
		return this.<%= JavaCore.getFieldName(p)%>;
	}

	/**
	 * Sets the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @param <%= JavaCore.getFieldName(p) %> the new value of the <em><%= JavaCore.getFieldName(p) %></em> property.
	 * @generated
	 */
	public void <%= JavaCore.getSetterName(p) %>(<%= JavaCore.getShortName(MdfGenerationUtil.getTypeName(p)) %> <%= JavaCore.getFieldName(p) %>) {
		this.<%= JavaCore.getFieldName(p)%> = <%= JavaCore.getFieldName(p) %>;
	}
     <% }%>

    //-------------------------------------------------------------------------
	// Constructors

	/**
	 * @generated
	 */
	public <%= beanClassName %>() {
		this._objectId = null;

<%	if (!localProperties.isEmpty()) { %>
		try {
<%
			it = localProperties.iterator();
			while (it.hasNext()) {
				MdfDatasetProperty p = (MdfDatasetProperty) it.next();
				if (p instanceof MdfDatasetDerivedProperty) {
					String initCode = MdfGenerationUtil.getDatasetPropertyInitCode(p);
					if (initCode != null) {
						String fieldName = JavaCore.getFieldName(p);%>
			this.<%= fieldName %> = <%= initCode %>;		
<%					}
				} 
			} %>
		} catch (Exception e) {
            throw (IllegalArgumentException) new IllegalArgumentException(e.getMessage()).initCause(e);
		}	
<% } %>		
	}


	/**
	 * Copy Constructor
	 * @param copy The instance to be copied
	 * @generated
	 */
    public <%= beanClassName %>(<%= modelClassName %> copy) {
		this._objectId = null;
<%    it = localProperties.iterator();
		while (it.hasNext()) {
			MdfDatasetProperty p = (MdfDatasetProperty) it.next();
			String fieldName = JavaCore.getFieldName(p);

			if (p.getMultiplicity() == MdfConstants.MULTIPLICITY_MANY) { %>
				if (copy.<%= JavaCore.getGetterName(p) %>() != null) {
					this.<%= fieldName %> = new java.util.ArrayList(copy.<%= JavaCore.getGetterName(p) %>());
				} else {
					this.<%= fieldName %> = null;
				}
<%			} else { %>
				this.<%= fieldName %> = copy.<%= JavaCore.getGetterName(p) %>();
<%			}
		} %>
    }

	/**
	 * @see com.odcgroup.mdf.core.DomainObjectBean#copyTo(DomainObjectBean)
	 * @generated
	 */
	public void copyTo(DomainObject copy) {
		if (copy instanceof <%= beanClassName %>) {
			<%= beanClassName %> other = (<%= beanClassName %>) copy;
<%       it = localProperties.iterator();
			while (it.hasNext()) {
				MdfDatasetProperty p = (MdfDatasetProperty) it.next();
				String fieldName = JavaCore.getFieldName(p);

			   if (p.getMultiplicity() == MdfConstants.MULTIPLICITY_MANY) { %>
					if (this.<%= fieldName %> != null) {
						other.<%= JavaCore.getSetterName(p) %>(new java.util.ArrayList(this.<%= fieldName %>));
					} else {
						other.<%= JavaCore.getSetterName(p) %>(null);
					}
<%				} else { %>
					other.<%= JavaCore.getSetterName(p) %>(this.<%= fieldName %>);
<%				}
			} %>
		}
	}

   //-------------------------------------------------------------------------
	// com.odcgroup.mdf.core.DomainObject

    /**
     * @generated
     **/
    private static final com.odcgroup.mdf.metamodel.MdfName ENTITY_NAME =
          com.odcgroup.mdf.metamodel.MdfNameFactory.createMdfName("<%= _model.getQualifiedName().getDomain() %>","<%= _model.getQualifiedName().getLocalName() %>");

    /**
     * @see com.odcgroup.mdf.core.DomainObject#getEntityName()
     * @generated
     **/
    public com.odcgroup.mdf.metamodel.MdfName getEntityName() {
        return ENTITY_NAME;
    }

    /**
     * @param objectId this object's global identifier
	 * @generated
	 */
    public <%= beanClassName %>(<%= JavaCore.getRefClassName(_model.getBaseClass()) %> objectId) {
        this();
        this._objectId = objectId;
    }

	/**
	 * Copy Constructor
	 * @param globalId this object's global identifier
	 * @param copy the instance to be copied
	 * @generated
	 */
   public <%= beanClassName %>(
		<%= JavaCore.getRefClassName(_model.getBaseClass()) %> objectId,
		<%= modelClassName %> copy) {
		this(copy);
		this._objectId = objectId;
	}

    //-------------------------------------------------------------------------
	// com.odcgroup.mdf.core.ReferenceableDomainObject

	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#getDomainObject()
	 * @generated
	 */
	public DomainObject getDomainObject() {
		return this;
	}

	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#getObjectId()
	 * @generated
	 */
	public ObjectId getObjectId() {
		return _objectId;
	}
	
	/**
	 * @see com.odcgroup.mdf.core.ReferenceableDomainObject#get_oid()
	 * @generated
	 */
	public Object get_oid() {
		ObjectId objectId = getObjectId();
		if (objectId != null) {
			return objectId.getPrimaryKeyValue();
		} else {
			return null;
		}
	}
	
	
    //-------------------------------------------------------------------------
	// Perm Values accessors
	
	/**
	 * @return the _permvalues
	 */
	public <%= JavaCore.getQualifiedPermValuesClassName(_model) %> getPermValues() {
		return _permvalues;
	}

	/**
	 * @param _permvalues the _permvalues to set
	 */
	public void setPermvalues(<%= JavaCore.getQualifiedPermValuesClassName(_model) %> permvalues) {
		this._permvalues = permvalues;
	}
	

    //-------------------------------------------------------------------------
	// hashCode & equals

	/**
	 * Returns a hashCode value for the object.
	 * It is the hashCode of its object id.
     *
     * @return a hash code value for this object.
	 * @see java.lang.Object#hashCode()
	 * @generated
	 */
    public int hashCode() {
		ObjectId oid = getObjectId();
		if (oid != null) {
			return oid.hashCode();
		}

		return 0;
    }

	/**
	 * Indicates whether some other object is "equal to" this one.
	 * The global ids are compared.
     *
	 * @param obj the reference object with which to compare.
     * @return <code>true</code> if this object is equals to
     * 		the obj argument; <code>false</code> otherwise.
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @generated
	 */
	public boolean equals(Object obj) {
		if (this == obj) return true;

		if (obj instanceof <%= modelClassName %>) {
         	<%= modelClassName %> other = (<%= modelClassName %>) obj;

			ObjectId oid = getObjectId();
			ObjectId other_oid = other.getObjectId();

			if (oid == null) {
				if (other_oid != null) return false;
			} else {
				if (other_oid == null) {
					return false;
				} else {
					return oid.equals(other_oid);
				}
			}
			
<%			it = localProperties.iterator();
			while (it.hasNext()) {
				MdfDatasetProperty p = (MdfDatasetProperty) it.next();
				if (JavaCore.isJavaPrimitive(MdfGenerationUtil.getTypeName(p))) { %>				
					if (this.<%= JavaCore.getFieldName(p) %> != other.<%= JavaCore.getGetterName(p) %>()) return false;
<%				} else { %>					 							
					if (this.<%= JavaCore.getFieldName(p) %> == null) {
						if (other.<%= JavaCore.getGetterName(p) %>() != null) return false;
					} else {
						if (!this.<%= JavaCore.getFieldName(p) %>.equals(other.<%= JavaCore.getGetterName(p) %>())) return false;
					}
<%				}
			} %>

			return true;
		}

		return false;
	}

	/**
	 * @see com.odcgroup.mdf.core.DomainObject#isSame(com.odcgroup.mdf.core.DomainObject)
	 * @generated
	 */
	public boolean isSame(DomainObject obj) {
		if (this == obj) return true;

		if (obj instanceof <%= modelClassName %>) {
		     	<%= modelClassName %> other = (<%= modelClassName %>) obj;
<%			it = localProperties.iterator();
			while (it.hasNext()) {
				MdfDatasetProperty p = (MdfDatasetProperty) it.next();
				if (JavaCore.isJavaPrimitive(MdfGenerationUtil.getTypeName(p))) { %>				
					if (this.<%= JavaCore.getFieldName(p) %> != other.<%= JavaCore.getGetterName(p) %>()) return false;
<%				} else { %>					 							
				if (this.<%= JavaCore.getFieldName(p) %> == null) {
					if (other.<%= JavaCore.getGetterName(p) %>() != null) return false;
				} else {
					if (!this.<%= JavaCore.getFieldName(p) %>.equals(other.<%= JavaCore.getGetterName(p) %>())) return false;
				}
<%				}
			} %>

			return true;
		}

		return false;
	}

	public Object clone() {
		return new <%= beanClassName %>(_objectId, this);
	}
}