/*
* generated by Xtext
*/
package com.odcgroup.menu.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.odcgroup.menu.model.services.MenuGrammarAccess;

public class MenuParser extends AbstractContentAssistParser {
	
	@Inject
	private MenuGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.odcgroup.menu.model.ui.contentassist.antlr.internal.InternalMenuParser createParser() {
		com.odcgroup.menu.model.ui.contentassist.antlr.internal.InternalMenuParser result = new com.odcgroup.menu.model.ui.contentassist.antlr.internal.InternalMenuParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getString_ValueAccess().getAlternatives(), "rule__String_Value__Alternatives");
					put(grammarAccess.getEnabledAccess().getAlternatives(), "rule__Enabled__Alternatives");
					put(grammarAccess.getMenuRootAccess().getGroup(), "rule__MenuRoot__Group__0");
					put(grammarAccess.getMenuItemAccess().getGroup(), "rule__MenuItem__Group__0");
					put(grammarAccess.getMenuItemAccess().getGroup_1(), "rule__MenuItem__Group_1__0");
					put(grammarAccess.getMenuItemAccess().getGroup_2(), "rule__MenuItem__Group_2__0");
					put(grammarAccess.getMenuItemAccess().getGroup_3(), "rule__MenuItem__Group_3__0");
					put(grammarAccess.getMenuItemAccess().getGroup_4(), "rule__MenuItem__Group_4__0");
					put(grammarAccess.getMenuItemAccess().getGroup_5(), "rule__MenuItem__Group_5__0");
					put(grammarAccess.getMenuItemAccess().getGroup_5_2(), "rule__MenuItem__Group_5_2__0");
					put(grammarAccess.getMenuItemAccess().getGroup_6(), "rule__MenuItem__Group_6__0");
					put(grammarAccess.getMenuItemAccess().getGroup_6_1(), "rule__MenuItem__Group_6_1__0");
					put(grammarAccess.getMenuItemAccess().getGroup_7(), "rule__MenuItem__Group_7__0");
					put(grammarAccess.getTranslationAccess().getGroup(), "rule__Translation__Group__0");
					put(grammarAccess.getMenuRootAccess().getMetamodelVersionAssignment_2(), "rule__MenuRoot__MetamodelVersionAssignment_2");
					put(grammarAccess.getMenuRootAccess().getRootItemAssignment_3(), "rule__MenuRoot__RootItemAssignment_3");
					put(grammarAccess.getMenuItemAccess().getNameAssignment_0(), "rule__MenuItem__NameAssignment_0");
					put(grammarAccess.getMenuItemAccess().getPageflowAssignment_1_2(), "rule__MenuItem__PageflowAssignment_1_2");
					put(grammarAccess.getMenuItemAccess().getEnabledAssignment_2_2(), "rule__MenuItem__EnabledAssignment_2_2");
					put(grammarAccess.getMenuItemAccess().getDisplayTabsAssignment_3_2(), "rule__MenuItem__DisplayTabsAssignment_3_2");
					put(grammarAccess.getMenuItemAccess().getSecurityRoleAssignment_4_2(), "rule__MenuItem__SecurityRoleAssignment_4_2");
					put(grammarAccess.getMenuItemAccess().getLabelsAssignment_5_1(), "rule__MenuItem__LabelsAssignment_5_1");
					put(grammarAccess.getMenuItemAccess().getLabelsAssignment_5_2_1(), "rule__MenuItem__LabelsAssignment_5_2_1");
					put(grammarAccess.getMenuItemAccess().getSubmenusAssignment_6_1_0(), "rule__MenuItem__SubmenusAssignment_6_1_0");
					put(grammarAccess.getMenuItemAccess().getSubmenusAssignment_6_1_1(), "rule__MenuItem__SubmenusAssignment_6_1_1");
					put(grammarAccess.getMenuItemAccess().getShortcutAssignment_7_2(), "rule__MenuItem__ShortcutAssignment_7_2");
					put(grammarAccess.getTranslationAccess().getLanguageAssignment_0(), "rule__Translation__LanguageAssignment_0");
					put(grammarAccess.getTranslationAccess().getMessageAssignment_2(), "rule__Translation__MessageAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.odcgroup.menu.model.ui.contentassist.antlr.internal.InternalMenuParser typedParser = (com.odcgroup.menu.model.ui.contentassist.antlr.internal.InternalMenuParser) parser;
			typedParser.entryRuleMenuRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MenuGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MenuGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
