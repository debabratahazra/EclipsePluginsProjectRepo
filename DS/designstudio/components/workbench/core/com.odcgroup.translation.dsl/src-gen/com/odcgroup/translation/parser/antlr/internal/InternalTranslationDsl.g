/*
* generated by Xtext
*/
grammar InternalTranslationDsl;

options {
	superClass=AbstractInternalAntlrParser;

}

@lexer::header {
package com.odcgroup.translation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import.
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.odcgroup.translation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.odcgroup.translation.services.TranslationDslGrammarAccess;

}

@parser::members {

	private TranslationDslGrammarAccess grammarAccess;

    public InternalTranslationDslParser(TokenStream input, TranslationDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
	return "LocalTranslations";
	}

	@Override
	protected TranslationDslGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}




// Entry rule entryRuleLocalTranslations
entryRuleLocalTranslations returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLocalTranslationsRule()); }
	 iv_ruleLocalTranslations=ruleLocalTranslations
	 { $current=$iv_ruleLocalTranslations.current; }
	 EOF
;

// Rule LocalTranslations
ruleLocalTranslations returns [EObject current=null]
    @init { enterRule();
    }
    @after { leaveRule(); }:
((
(
		{
	        newCompositeNode(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_0_0());
	    }
		lv_translations_0_0=ruleLocalTranslation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalTranslationsRule());
	        }
		add(
			$current,
			"translations",
			lv_translations_0_0,
			"LocalTranslation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=','
    {
	newLeafNode(otherlv_1, grammarAccess.getLocalTranslationsAccess().getCommaKeyword_1_0());
    }
(
(
		{
	        newCompositeNode(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_1_1_0());
	    }
		lv_translations_2_0=ruleLocalTranslation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalTranslationsRule());
	        }
		add(
			$current,
			"translations",
			lv_translations_2_0,
			"LocalTranslation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLocalTranslation
entryRuleLocalTranslation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLocalTranslationRule()); }
	 iv_ruleLocalTranslation=ruleLocalTranslation
	 { $current=$iv_ruleLocalTranslation.current; }
	 EOF
;

// Rule LocalTranslation
ruleLocalTranslation returns [EObject current=null]
    @init { enterRule();
    }
    @after { leaveRule(); }:
((
(
		lv_locale_0_0=RULE_ID
		{
			newLeafNode(lv_locale_0_0, grammarAccess.getLocalTranslationAccess().getLocaleIDTerminalRuleCall_0_0());
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalTranslationRule());
	        }
		setWithLastConsumed(
			$current,
			"locale",
			lv_locale_0_0,
			"ID");
	    }

)
)	otherlv_1='='
    {
	newLeafNode(otherlv_1, grammarAccess.getLocalTranslationAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getLocalTranslationAccess().getTextSTRINGTerminalRuleCall_2_0());
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalTranslationRule());
	        }
		setWithLastConsumed(
			$current,
			"text",
			lv_text_2_0,
			"STRING");
	    }

)
))
;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!'|'@'|'#'|'$'|'%'|'&'|'*'|'('|')'|'-')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
