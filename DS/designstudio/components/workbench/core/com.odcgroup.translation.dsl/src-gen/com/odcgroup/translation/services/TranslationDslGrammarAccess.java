/*
* generated by Xtext
*/
package com.odcgroup.translation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TranslationDslGrammarAccess extends AbstractGrammarElementFinder {


	public class LocalTranslationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalTranslations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTranslationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTranslationsLocalTranslationParserRuleCall_0_0 = (RuleCall)cTranslationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTranslationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTranslationsLocalTranslationParserRuleCall_1_1_0 = (RuleCall)cTranslationsAssignment_1_1.eContents().get(0);

		//// TODO Adapter for this model to fit with DS NLS/Translation API
		//
		//// SharedTranslations: translations += SharedTranslation+;
		//
		//// SharedTranslation: name=ID ':' translations=LocalTranslations;
		// LocalTranslations:
		//	translations+=LocalTranslation ("," translations+=LocalTranslation)*;
		public ParserRule getRule() { return rule; }

		//translations+=LocalTranslation ("," translations+=LocalTranslation)*
		public Group getGroup() { return cGroup; }

		//translations+=LocalTranslation
		public Assignment getTranslationsAssignment_0() { return cTranslationsAssignment_0; }

		//LocalTranslation
		public RuleCall getTranslationsLocalTranslationParserRuleCall_0_0() { return cTranslationsLocalTranslationParserRuleCall_0_0; }

		//("," translations+=LocalTranslation)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//translations+=LocalTranslation
		public Assignment getTranslationsAssignment_1_1() { return cTranslationsAssignment_1_1; }

		//LocalTranslation
		public RuleCall getTranslationsLocalTranslationParserRuleCall_1_1_0() { return cTranslationsLocalTranslationParserRuleCall_1_1_0; }
	}

	public class LocalTranslationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalTranslation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocaleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocaleIDTerminalRuleCall_0_0 = (RuleCall)cLocaleAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);

		//// TODO Scope Provider so that locale must be a valid java.util.Locale ...
		// LocalTranslation:
		//	locale=ID "=" text=STRING;
		public ParserRule getRule() { return rule; }

		//locale=ID "=" text=STRING
		public Group getGroup() { return cGroup; }

		//locale=ID
		public Assignment getLocaleAssignment_0() { return cLocaleAssignment_0; }

		//ID
		public RuleCall getLocaleIDTerminalRuleCall_0_0() { return cLocaleIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}

	public class TranslationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Translations");
		private final RuleCall cLocalTranslationsParserRuleCall = (RuleCall)rule.eContents().get(1);

		//// ---
		//
		//// This is not directly used in shared .translation, but in other models which have either local translations or references to shared translations
		//
		////
		// // | SharedTranslationRef;
		// Translations:
		//	LocalTranslations;
		public ParserRule getRule() { return rule; }

		//LocalTranslations
		public RuleCall getLocalTranslationsParserRuleCall() { return cLocalTranslationsParserRuleCall; }
	}


	private final LocalTranslationsElements pLocalTranslations;
	private final LocalTranslationElements pLocalTranslation;
	private final TranslationsElements pTranslations;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;

	private final Grammar grammar;

	@Inject
	public TranslationDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pLocalTranslations = new LocalTranslationsElements();
		this.pLocalTranslation = new LocalTranslationElements();
		this.pTranslations = new TranslationsElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.odcgroup.translation.TranslationDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}


	public Grammar getGrammar() {
		return grammar;
	}



	//// TODO Adapter for this model to fit with DS NLS/Translation API
	//
	//// SharedTranslations: translations += SharedTranslation+;
	//
	//// SharedTranslation: name=ID ':' translations=LocalTranslations;
	// LocalTranslations:
	//	translations+=LocalTranslation ("," translations+=LocalTranslation)*;
	public LocalTranslationsElements getLocalTranslationsAccess() {
		return pLocalTranslations;
	}

	public ParserRule getLocalTranslationsRule() {
		return getLocalTranslationsAccess().getRule();
	}

	//// TODO Scope Provider so that locale must be a valid java.util.Locale ...
	// LocalTranslation:
	//	locale=ID "=" text=STRING;
	public LocalTranslationElements getLocalTranslationAccess() {
		return pLocalTranslation;
	}

	public ParserRule getLocalTranslationRule() {
		return getLocalTranslationAccess().getRule();
	}

	//// ---
	//
	//// This is not directly used in shared .translation, but in other models which have either local translations or references to shared translations
	//
	////
	// // | SharedTranslationRef;
	// Translations:
	//	LocalTranslations;
	public TranslationsElements getTranslationsAccess() {
		return pTranslations;
	}

	public ParserRule getTranslationsRule() {
		return getTranslationsAccess().getRule();
	}

	//// SharedTranslationRef: 'use' ref=[SharedTranslation];
	// terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9" | "!" | "@" | "#" | "$" | "%" | "&" | "*" |
	//	"(" | ")" | "-")*;
	public TerminalRule getIDRule() {
		return tID;
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	}

	//// ---
	// terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
