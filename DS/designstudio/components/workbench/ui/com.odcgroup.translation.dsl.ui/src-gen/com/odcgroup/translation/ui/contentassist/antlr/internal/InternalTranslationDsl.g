/*
* generated by Xtext
*/
grammar InternalTranslationDsl;

options {
	superClass=AbstractInternalContentAssistParser;

}

@lexer::header {
package com.odcgroup.translation.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import.
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.odcgroup.translation.ui.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.odcgroup.translation.services.TranslationDslGrammarAccess;

}

@parser::members {

	private TranslationDslGrammarAccess grammarAccess;

    public void setGrammarAccess(TranslationDslGrammarAccess grammarAccess) {
	this.grammarAccess = grammarAccess;
    }

    @Override
    protected Grammar getGrammar() {
	return grammarAccess.getGrammar();
    }

    @Override
    protected String getValueForTokenName(String tokenName) {
	return tokenName;
    }

}




// Entry rule entryRuleLocalTranslations
entryRuleLocalTranslations
:
{ before(grammarAccess.getLocalTranslationsRule()); }
	 ruleLocalTranslations
{ after(grammarAccess.getLocalTranslationsRule()); }
	 EOF
;

// Rule LocalTranslations
ruleLocalTranslations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalTranslationsAccess().getGroup()); }
(rule__LocalTranslations__Group__0)
{ after(grammarAccess.getLocalTranslationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalTranslation
entryRuleLocalTranslation
:
{ before(grammarAccess.getLocalTranslationRule()); }
	 ruleLocalTranslation
{ after(grammarAccess.getLocalTranslationRule()); }
	 EOF
;

// Rule LocalTranslation
ruleLocalTranslation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalTranslationAccess().getGroup()); }
(rule__LocalTranslation__Group__0)
{ after(grammarAccess.getLocalTranslationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocalTranslations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslations__Group__0__Impl
	rule__LocalTranslations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getTranslationsAssignment_0()); }
(rule__LocalTranslations__TranslationsAssignment_0)
{ after(grammarAccess.getLocalTranslationsAccess().getTranslationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalTranslations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslations__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getGroup_1()); }
(rule__LocalTranslations__Group_1__0)*
{ after(grammarAccess.getLocalTranslationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalTranslations__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslations__Group_1__0__Impl
	rule__LocalTranslations__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslations__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getCommaKeyword_1_0()); }

	','

{ after(grammarAccess.getLocalTranslationsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalTranslations__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslations__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslations__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getTranslationsAssignment_1_1()); }
(rule__LocalTranslations__TranslationsAssignment_1_1)
{ after(grammarAccess.getLocalTranslationsAccess().getTranslationsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalTranslation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslation__Group__0__Impl
	rule__LocalTranslation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationAccess().getLocaleAssignment_0()); }
(rule__LocalTranslation__LocaleAssignment_0)
{ after(grammarAccess.getLocalTranslationAccess().getLocaleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalTranslation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslation__Group__1__Impl
	rule__LocalTranslation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationAccess().getEqualsSignKeyword_1()); }

	'='

{ after(grammarAccess.getLocalTranslationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalTranslation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalTranslation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationAccess().getTextAssignment_2()); }
(rule__LocalTranslation__TextAssignment_2)
{ after(grammarAccess.getLocalTranslationAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__LocalTranslations__TranslationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_0_0()); }
	ruleLocalTranslation{ after(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslations__TranslationsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_1_1_0()); }
	ruleLocalTranslation{ after(grammarAccess.getLocalTranslationsAccess().getTranslationsLocalTranslationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslation__LocaleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationAccess().getLocaleIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getLocalTranslationAccess().getLocaleIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalTranslation__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalTranslationAccess().getTextSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getLocalTranslationAccess().getTextSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'!'|'@'|'#'|'$'|'%'|'&'|'*'|'('|')'|'-')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
