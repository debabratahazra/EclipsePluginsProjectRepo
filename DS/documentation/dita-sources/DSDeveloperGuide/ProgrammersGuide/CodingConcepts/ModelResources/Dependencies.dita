<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_codingconcepts_modelresources">
	<title>Model Container Dependencies</title>

	<conbody> 
		<section>
		<p>As model containers can depend on each other the <codeph>workbench-core</codeph> provides
		means to access such dependency information. The entry point is the dependency manager, which can be retrieved by
		<codeblock>IDependencyManager dependencyManager = OfsCore.getDependencyManager();</codeblock>
		The dependency manager provides methods such as <codeph>getDependencies()</codeph> and <codeph>hasUnresolvedDependencies()</codeph>.
		The dependencies are returned as a set of <codeph>IOfsModelContainer</codeph> instances. Such a container has an identifier 
		(<codeph>IContainerIdentifier</codeph>), which might be specific to the artifact repository back-end.</p>
		<p>The dependency manager and all involved interfaces are designed in a way that they are independent of any specific repository
		implementation. Currently, the VisualRules artifact repository implementation is used as a back-end, which is a facade to the
		Maven API. This implementation has been chosen, because it is anyhow already used (by VisualRules itself) for the rule support in
		Design Studio and thus the project dependency information is available in a pom.xml file.   
		</p>
		<p>The <codeph>IContainerIdentifier</codeph> for this implementation therefore contains the Maven-specific information, such as artifactId,
		groupId and version. The dependency information is persisted in the pom.xml in the project's root. Design Studio does not come with any
		pom.xml editor to help the user maintaining the project dependencies - this has to be done with a text/xml editor.</p>
		<p>The following picture shows all relevant classes and interfaces and their relationship:</p>
		<p><image href="images/depmgmt.jpg" /></p>
		</section>
	</conbody>

</concept>
