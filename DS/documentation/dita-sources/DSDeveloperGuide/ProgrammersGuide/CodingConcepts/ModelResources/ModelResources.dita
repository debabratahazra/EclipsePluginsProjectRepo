<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_codingconcepts_modelresources">
	<title>Model Resources</title>

	<conbody> 
		<section>
		<title>Overview</title>
		<p>
			The Design Studio Workbench defines model projects with a special structure and content.
			In order to be able to display these project contents, browse through them and offer custom actions
			and menus for them, the workbench makes use of the Common Navigator Framework (CNF) for its 
			DS Navigator.
		</p><p>
			The items shown in the navigator are not IResources, but Design Studio specific classes that are
			described below.
		</p><p>
			Besides the UI usage, the model resources are also used internally for model lookups, references, etc.
		</p>
		</section>
		<section>
		<title>Design Studio Model Vocabulary</title>
		<p>The used vocabulary for the items in a project is the following:</p>
		
		<p><b>Containers: </b> An model container is a general artifact that is used to store a set of model resources.
		 Such artifacts may be folder structures, such as projects or (zip/jar)-packaged resources from some repository.
		 Packaged containers follow the same folder structure as projects internally.  
		 Model containers may reference (depend on) each other.</p>
		<p><b>Projects: </b> An Design Studio model project is a standard Eclipse project with a special nature. It is the most
		common container for model resources.</p>
		<p><b>Model Folders: </b> When a new model project is created, a root folder is created for every registered
		 model type (extension point com.odcgroup.workbench.model). This folder has the same name as the according
		 model type (but it is displayed capitalized and in plural in the navigator). These model folders are the
		 container for all models of the given type.
		 Any folder (or sub-folder) inside a model folder is considered to be a model package.</p>
		<p><b>Model Packages: </b> A model folder can be seen similar to a Java source folder; all folders inside 
		define a package structure which are an important part for the qualified name of the models (here URIs instead of FQCNs).
		For model resources, it is mandatory that they are contained in some model package, i.e. there must not be any model directly
		in the model folder.</p>
		<p><b>Model Resources: </b> A model resource represents a single model file. Any file in a model package is considered to 
		be a model resource, iff its extension has the same name as the model folder that the file is in, i.e. all *.pageflow files 
		are model resources, iff they are stored in any sub-folder of the root folder "pageflow". In contrast, a *.pageflow file in the root folder
		"process" is regarded as a normal file (IResource).</p>
		<lines><b>Model URIs:</b> Each model resource is identified by a URI. Design Studio introduces a scheme "resource", which is used	throughout the application. The model URIs consists out of the "resource" scheme, the model package names where the	model resource is located and the model resource name itself. Please note that the project name is NOT part of the URI - as a result, a model resource is uniquely identified independent of the project it is in, i.e. you can rename your project or have multiple versions of it without breaking possible references to your model resources.
		<i>Example:</i> If you have the following file
		<filepath>my-models/pageflow/com/odcgroup/test/MyPageflow.pageflow</filepath>, 
		the corresponding URI would be 
		<codeph>resource:///com/odcgroup/test/MyPageflow.pageflow</codeph></lines>
		<p><b>Scope: </b> Design Studio packages and resources might not always physically exist inside the project on the file system. A scope is
		defined for them, which tells where the model package/resource can be found. Possible options are the local file system, 
		a referenced project that is in a packaged jar file or an underlying "standard" model project. Further scopes can be added if required.
		Note that the scope is not an XOR but a simple OR, i.e. a resources can exist in multiple scopes at the same time.</p>
		</section>
	</conbody>

</concept>
