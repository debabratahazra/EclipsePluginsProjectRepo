<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_codingconcepts_modelresources">
	<title>Model Repository</title>

	<conbody> 
		<section>
		<p><b>Java Representation:</b> The model items in projects have their technical representation in the following Java interfaces:
		<codeph>IOfsModelContainer</codeph>, <codeph>IOfsProject</codeph>, <codeph>IOfsModelFolder</codeph>, <codeph>IOfsModelPackage</codeph> and
		<codeph>IOfsModelResource</codeph>, all of which but <codeph>IOfsProject</codeph> and <codeph>IOfsModelContainer</codeph> extend <codeph>IOfsElement</codeph>.</p>
		<p>Design Studio does not make use of the standard Eclipse classes and interfaces like <codeph>IProject</codeph> or <codeph>IResource</codeph> because of the scope property that they support;
		the Eclipse <codeph>IResource</codeph> necessarily requires the resource to exist locally, while Design Studio also handles "virtual" model resources
		and shows them in the navigator as if they existed locally.</p>

		<p><b>Adapters:</b> Design Studio (workbench-core) defines Eclipse adapters to transform <codeph>IOfsElement/IOfsProject</codeph>s into <codeph>IResource</codeph>s and vice versa.</p>

		<p><b>Model Projects:</b> The central piece are the <codeph>IOfsProject</codeph> instances. These instances internally hold a <codeph>ModelResourceSet</codeph>, which is an extension of the standard EMF 
		<codeph>ResourceSet</codeph> which supports the scope concept and stores and serves all EMF models.</p>
		
		<p>For retrieving the <codeph>IOfsProject</codeph> for an <codeph>IProject</codeph>, which is a very regular use case, you should use the <codeph>IOfsProjectManager</codeph> by calling
		<codeblock>
IOfsProject ofsProject = OfsCore.getOfsProjectManager().getOfsProject(project);
		</codeblock>
		The <codeph>IOfsProject</codeph> instances listen for any model file changes in the workspace and for any changes in their dependencies and update the content of their internal
		resource set accordingly. If there are cases where this automatic update does not work as expected, a <codeph>refresh()</codeph> can be called on the model project, which will trigger
		a complete synchronization between the file system and the internal resource set.</p> 
		
		<p><b>Resource Lookups: </b>If the URI of a model resource is known, it can simply be retrieved by <codeph>IOfsProject.getOfsModelResource(URI uri)</codeph>.
		If you need to browse a project (incl. any desired scope) you can use the class <codeph>ModelResourceLookup</codeph>. 
		It must be defined which model type(s) should be searched for and what scope(s) the resources should exist in.
		Here is an example snippet for getting all pageflow resources of a project including the resources in any referenced project:
		<codeblock><![CDATA[
ModelResourceLookup lookup = new ModelResourceLookup(ofsProject, "pageflow");
Set<IOfsModelResource> pageflowResources = 
	lookup.getAllResources(IOfsProject.SCOPE_PROJECT|IOfsProject.SCOPE_DEPENDENCY);]]>
		</codeblock></p>
		<p><b>Model Content Access: </b> The <codeph>IOfsModelResource</codeph> instances allow the access to the model content, i.e. the (EMF) object tree.
		This is done through the <codeph>getEMFModel()</codeph> method. As a model resource might contain more than one root node (especially for GMF-based
		models), the return type is an <codeph>EList&lt;EObject&gt;</codeph> and not merely an <codeph>EObject</codeph>.</p>
		<p>Note that the model is automatically loaded into the model project's resource set, if it hasn't been loaded before, so you do not need to bother about loading it yourself.
		Nonetheless, you can check whether it is already loaded using the <codeph>isLoaded()</codeph> method. If you want to release the memory again, you can call the <codeph>unload()</codeph> method.</p>
		<p>Models are loaded without resolving their dependencies, i.e. they will contain proxy objects instead, which are only resolved on direct access. For the different model types, if can be
		defined whether these proxy objects should be resolved eagerly instead by setting this option in the <codeph>com.odcgroup.workbench.core.model</codeph> extension. Setting this option to
		"eager" will trigger a background proxy resolution job whenever a model of this type is loaded.</p>
		
		<p><b>Domain Repository: </b>The architecture of the domain designer pre-dates the introduction of EMF in Design Studio and as such there are some specialities: E.g. there is a singleton
		<codeph>MdfCoreDomain</codeph> which holds the primitive types that might be referenced by other domains. Furthermore, references to other domains only include their domain name, but no
		<codeph>resource</codeph>-URI, thus it is not possible to determine, which file from the filesystem actually needs to be loaded.</p>
		<p>Since the domain models are a central part in Design Studio modelling and are referenced by other models, there is a special facility in place to handle the domain models:
		The <codeph>DomainRepository</codeph>. You can get an instance of it by calling <codeph>DomainRepository.getInstance(IOfsProject ofsProject)</codeph> and you will have immediate
		access to different possibilities to do domain lookups (e.g. simply <codeph>getDomain(String name)</codeph>).</p>
		
		<p><b>Resource Helpers: </b> Some general useful methods for handling resources and finding projects/resources/files from some input are provided by the <codeph>OfsResourceHelper</codeph>.</p>
		<p>The following diagram gives an overview over all relevant classes, their most important methods and their relations for dealing with model resources:</p>
		<p><image href="images/resourcemgmt.jpg" /></p>
		</section>
	</conbody>

</concept>
