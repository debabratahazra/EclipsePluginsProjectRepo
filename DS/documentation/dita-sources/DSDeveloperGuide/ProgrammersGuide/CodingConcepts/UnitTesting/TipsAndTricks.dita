<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="devguide_programmersguide_codingconcepts_unittesting_tipsandtricks">
	<title>Tips and Tricks</title>
	<conbody> 
		<section>
			<title>Test-tank-models</title>
			<p>
				To simplify the migration of the test models, we put all 
				the testing models in a project. In workbench-core-tests, 
				there is a resources folder which contains a test-tank-models 
				folder which is an Design Studio models project. Therefore, 
				migrating the testing models will be as simple as migrating 
				this test-tank-models project.
			</p>
			<p>
				Please note there are different classes exposing the helper 
				methods shown in those tips:
				<ul>
					<li><b>AbstractDSUnitTest</b>: for non ui related methods</li>
					<li><b>AbstractDSUIUnitTest</b> (which extends AbstractDSUnitTest) for ui related methods</li>
				</ul>
				They are respectively located in the workbench-core-tests and in 
				the workbench-ui-tests fragments.
			</p>
		</section>
		<section>
			<title>Tip 1: Creating unit test with a models project in the workspace</title>
			<codeblock>
	public class Tip1SampleTest extends AbstractDSUnitTest {
	    public Tip1Sample(String name) {
	        super(name);
	    }
	    public void setUp() throws Exception {
	       createModelsProject();
	    }
	
	    public void tearDown() throws Exception {
	       deleteModelsProject();
	    }
	
		[...]
	}
			</codeblock>
			<p>
			This will create a models project called default-models in 
			the workspace used by the unit test. If you want to have 
			several projects or a project with a different name, consider 
			using createNamedModelsProject(String).
			</p>
			<p>
			Please note each test is responsible to remove what it put
			in the test workspace. The deleteModelsProjects method
			will remove all the projects created with the 
			createModelsProject and with the createNamedModelsProject 
			methods. Usually, it is done in the tearDown() method of the 
			unit test.
			</p>
		</section>
		<section>
			<title>Tip 2: Copying resources from the test-tank models to the test models project</title>
			<codeblock>
	public class Tip2SampleTest extends AbstractDSUIUnitTest {
	    private static final String DOMAIN_MODEL = 
	            "domain/ds3168/DS-3168.mml";
	    private static final String MODULE_MODEL = 
	            "module/Default/module/DS-3168-BigModule.module";
	    private static final String MESSAGE_MODEL = 
	            "translation/translations/messages_345338353.translation";
	    [...]
	    public void setUp() throws Exception {
	       createModelsProject();
	       copyResourceInModelsProject(DOMAIN_MODEL, MODULE_MODEL, MESSAGE_MODEL);
	    }
	
	    public void tearDown() throws Exception {
	       deleteModelsProject();
	    }
	
	   [...]
	}
			</codeblock>
			<p>
			The copyResourceInModelsProject will copy the models to the 
			testing default models project. If you have several projects 
			or a project with a different name, consider using 
			copyResourceInModelsProject (String).
			</p>
		</section>
		<section>
			<title>Tip 3: Close the Welcome page</title>
			<codeblock>
	public class Tip3SampleTest extends AbstractDSUIUnitTest {
	    [...]
	    public void setUp() throws Exception {
	       createModelsProject();
	       copyResourceInModelsProject([...]);
	       closeWelcomeScreen(); 
	    }
	} 
			</codeblock>
			<p>
				If you want to have an editor displayed during the unit test
				you need to close the welcome screen prior opening the editor
				with closeWelcomeScreen. Example of usage: you want the 
				drawing method to be called during your unit test.
			</p>
		</section>
		<section>
			<title>Tip 4: Opening a model with the default editor</title>
			<codeblock>
	public class Tip4Test extends AbstractDSUIUnitTest {
	    [...]
	
	    public void testTip4() throws PartInitException {
	        IFile file = getProject().getFile(MODULE_MODEL);
	        assertTrue(file.exists());
	
	        openDefaultEditor(file);
	        [...]
	    }
	}
			</codeblock>
			<p>
			The openDefaultEditor will find the default editor according 
			the file extension. If no editor is registered, it will open 
			the text editor. Alternatively, you can use 
			openEditor(IFile, String) which accepts a editor id as the 
			second parameter.
			</p>
		</section>
		<section>
			<title>Tip 5: Various helper</title>
			<p>There are several methods of generic usage available:</p>
			<lines>
				<b>getProject(), getProject(String)</b>
				<b>getOfsProject(), getOfsProject(String)</b>: 
				Retrieve the project or IOfsProject/IProject for the default testing models project or a named testing models project
				
				<b>getDomainFolder(), getDomainFolder(IOfsProject)</b>
				<b>getFragmentFolder(), getFragmentFolder(IOfsProject)</b>
				<b>getModuleFolder(), getModuleFolder(IOfsProject)</b>
				<b>getPageflowFolder(), getPageflowFolder(IOfsProject)</b>
				<b>getPageFolder(), getPageFolder(IOfsProject)</b>
				<b>getWorkflowFolder(), getWorkflowFolder(IOfsProject)</b>
				<b>getTranslationFolder(), getTranslationFolder(IOfsProject)</b>:
				Retrieve the folder (IFolder) of the default testing models project or a named testing models project. It includes domain, fragment, module, pageflow, page, workflow and translation folders.
				
				<b>getDefaultModuleFolder(), getDefaultModuleFolder(IOfsProject)</b>
				<b>getDefaultPageFolder(), getDefaultPageFolder(IOfsProject)</b>
				<b>getDefaultTranslationFolder(), getDefaultTranslationFolder(IOfsProject)</b>: 
				Those helpers retrieve the location of the default module, page and translation folders (located in module/Default/module, page/Default/activity, translation/translations)
			</lines>
		</section>
		<section>
			<title>Tip 6: SWTBot failures</title>
			<p>SWTBot tests often fail although the test case does not have any problem.
			Very often, it is simply the result of a preceding test failure. To find out, which test failed first (and therefore is very likely the culprit), 
			check the "Junit Test Results" file on the "Artifacts" tab of the build plan.</p>
			<p>Sometimes, SWTBot test execution "hangs" on a test which does an SVN checkout. This can happen if the server SSL certificate is not known/accepted. Apparently, CMT sometimes
			changes it or deletes the keystore, where Eclipse stores the information that this certificate is trustworthy. In order to circumvent this problem, log in to w7082 as cmsbm,
			launch a Design Studio and do a SVN checkout from the server in question. You will then see a prompt like</p>
			<image href="images/certificate.png"/>
			<p>Now click on "Trust Always" and close Design Studio. The SWTBot test execution on the Bamboo server will from now on accept the certificate and the tests will pass.</p>
		</section>
	</conbody>
</concept>
