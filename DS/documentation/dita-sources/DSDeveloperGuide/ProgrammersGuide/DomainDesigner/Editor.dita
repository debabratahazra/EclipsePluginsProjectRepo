<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_domaindesigner_editor">
	<title>Editor</title>
	<prolog>
		<author type="creator">Phani Kumar Kotaprolu</author>

		<metadata>
			<keywords>
				<indexterm>domain</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<p>
			The Domain Designer is a structured tree-based editor which provides a complete environment to create, edit and maintain the
			domain models. The domain designer simplifies the MML editing (MML based development) user experience.    
		</p>
		<p>
			The domain designer implements simple and intuitive editor features like the custom tabbed properties views which 
			simplifies specifying inner details of the model elements, model constraints checks validation feedbacks, label 
			decorators, filters and providers that provide more details of the model elements. The domain designer also 
			provides the model search and compare capabilities that are quite helpful in domain model editing and migration.
		</p>
		<section>
			<title>Filtering Capabilities</title>			
			Filtering model elements may be useful to hide certain type of model elements. 
			Model elements can be filtered from the  actionbar menu or from the title menu.
			
			<p><image href="images/toolbar_filters.png" />	
			<image href="images/toolmenu_filters.png" /></p>
			<p>  
			Domain Designer comes with filters for the model elements Classes, Datasets, Enumerations and BusinessTypes.
			These filter implementations are found under the package <b><i>com.odcgroup.mdf.editor.ui.filters</i></b>.  </p>
			<p>
			A new filter can be added by
			extending <b><i>com.odcgroup.mdf.editor.ui.MdfViewerFilter</i></b> and specified as an action delegate entry in the "org.eclipse.ui.editorActions" extension point.
			</p>
		</section>
		<section>
			<title>Decorators</title>			
			Label Decorators are are useful to display more specific information like the cardinality, references etc about the model elements in structured viewers.  
			Domain Designer has many decorator implementations which can be found under the package <b><i>com.odcgroup.mdf.editor.ui.providers.decorators</i></b>.
			<p><image href="images/decorators.png" /></p>
			<p>A new decorator can be added by implementing the interface <b><i>org.eclipse.jface.viewers.ILightweightLabelDecorator</i></b> and specified as a 
			decorator entry in the "org.eclipse.ui.decorators" extension point.
			</p>
		</section>
		<section>
			<title>Validation</title>
			The validation component of the domain designer provides an API and an extension point to define validation constraints on various aspects of the
			domain model elements and support for listening to validation events and validation feedbacks.  The validation components and the different validators can be found
			under the package <i><b>com.odcgroup.mdf.editor.model.validation</b></i>
			<p><image href="images/domain_validation.png" /></p>
		</section>
		<section>
			<title>Properties View</title>	
			The Domain Designer provides a custom API to define tabbed pages for the domain model elements in the properties view.  This components is found
			under the package <i><b>com.odcgroup.mdf.editor.ui.dialogs</b></i>.  The tabbed page  and the respective factory implementations for different model elements are found under
			<i><b>com.odcgroup.mdf.editor.ui.dialogs.*</b></i>.
		</section>
		<section>
			<title>MDF Compare</title>	
			The source plugin project <b>mdf-compare</b> contains classes specific to domain-model compare extending the 
			EMF Compare Framework.  It supports comparison of a domain model with its local history, revision history, with
			other domain model and also with its standard version.  It also supports merging of model elements.
			<p><image href="images/domain_compare.png" /></p>
		</section>
		<section>
			<title>MDF Search</title>	
			The source plugin project <b>mdf-search</b> provides domain model specific search functionality.
		</section>
	</conbody>

</concept>
