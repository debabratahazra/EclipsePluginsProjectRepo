<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_domaindesigner_extensionpoints">
	<title>Extension Points</title>
	<prolog>
		<author type="creator">Phani Kumar Kotaprolu</author>

		<metadata>
			<keywords>
				<indexterm>domain</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<p>The following extension  points can be used to extend the Domain Designer features.</p>
			<simpletable>
				<sthead>
					<stentry>Extension Point</stentry>
					<stentry>Description</stentry>
				</sthead>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.modelvalidator</b></stentry>
					<stentry>						
						<p>
						Extension point to define a new model validator that would add up to other validators in the factory.
						Providers should implement <i><b>com.odcgroup.mdf.editor.model.validation.ModelValidator</b></i> to add a new model validator.
						</p>
						<p>
						The following example is from <b>mdf-editor</b> plugin, which defines new model validators.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.modelvalidator"&gt;
      							&lt;validator class="com.odcgroup.mdf.editor.model.validation.MdfModelValidator" /&gt;
      							&lt;validator class="com.odcgroup.mdf.editor.model.validation.MdfDocValidator" /&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.dialogpage</b></stentry>
					<stentry>						
						<p>
						Extension point to define new property tabs for a given domain model element.
						Providers should implement <i><b>com.odcgroup.mdf.editor.ui.dialogs.DialogPagesFactory</b></i> to add the desired dialog pages as tabs in the properties view.
						</p>
						<p>
						The following example is from <b>com.odcgroup.page.ui</b> plugin, which defines new property tab page for MdfBusinessType model element.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.dialogpage"&gt;
      							&lt;factory	 class="com.odcgroup.page.external.mdf.MdfBusinessTypePagesFactory"&gt;
      							&lt;/factory&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.mmlextensions</b></stentry>
					<stentry>
						<p>
						MML extensions are used to dynamically add information to the model elements, that is required
						by other components.  This is done by implementing MmlExtensionReader and MmlExtensionWriter interfaces and 
						making use of MdfAnnotation model elements.
						</p><p>
						The "com.odcgroup.mdf.editor.mmlextensions" extension point lets you define new MML extensios that are required
						by other plug-in components/editors. 
						</p>
						<p>
						The following example is from <b>com.odcgroup.querybuilder.editor</b> plugin, which defines Query Builder extensions for the domain model.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.mmlextensions"&gt;
      							&lt;reader	 class="com.odcgroup.querybuilder.mml.QbExtensionReader"&gt;
      							&lt;/reader&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.editionsupport_override</b></stentry>
					<stentry>
						<p>
						Extension point for overriding the default edition-support behavior while <i>creating/editing/removing/deprecation</i> of model elements.
						Providers should extend the class <i><b>com.odcgroup.mdf.editor.ui.dialogs.EditionSupport</b></i> to override the default behavior.
						</p>
						<p>
						The following example is from <b>mdf-custom</b> plugin project, which overrides the edition-support while editing domain models of a custom project.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.editionsupport_override"&gt;
      							&lt;editionsupport	 class="com.odcgroup.mdf.editor.customization_support.CustoEditionSupport"&gt;
      							&lt;/editionsupport&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.mdfmodelvalidator_override</b></stentry>
					<stentry>
						Extension point for overriding the default validation checks on model elements provided by the Domain Designer.
						Providers should extend the class <i><b>com.odcgroup.mdf.editor.model.validation.MdfModelValidator</b></i> to override the default checks.
						
						<p>
						The following example is from <b>mdf-custom</b> plugin project, which overrides the validation checks while editing domain models of a custom project.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.mdfmodelvalidator_override"&gt;
      							&lt;mdfModelValidator class="com.odcgroup.mdf.editor.customization_support.CustoMdfModelValidator"&gt;
      							&lt;/mdfModelValidator&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
				<strow>
					<stentry><b>com.odcgroup.mdf.editor.modelfactory_override</b></stentry>
					<stentry> 
						Extension point for overriding the default domain ModelFactory behavior that lets you create/add/copy/modify model elements provided by the Domain Designer.
						Providers should extend the class <i><b>com.odcgroup.mdf.editor.model.ModelFactory</b></i> to override the default factory methods.
						
						<p>
						The following example is from <b>mdf-custom</b> plugin project.
						</p>
						<i>
						&lt;extension  point="com.odcgroup.mdf.editor.modelfactory_override"&gt;
      							&lt;mdfModelFactory class="com.odcgroup.mdf.editor.customization_support.internal.CustomModelFactory"&gt;
      							&lt;/mdfModelFactory&gt;
   						&lt;/extension&gt;
   						</i>
					</stentry>
				</strow>
			</simpletable>			
		</section>
	</conbody>

</concept>
