<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_frameworks_customization">
	<title>Customization Support</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>customization</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<p>
			Starting with Design Studio 1.30.6, so-called "custo" projects are now supported.
			These projects are meant for people in Custo or in a client project, who want to customize
			the standard projects provided by Temenos without creating a full copy of such a project.
		</p>
		<section>
		<title>Concept</title>
		<p>
			The idea behind these custo projects is that the user should actually have the impression
			of working with the standard project, i.e. having all models available in the DS
			Navigator, being able to open them and reference them.
		</p>
		<p>
			Only the models that the user actually changes should physically exist in the custo-project,
			so that it is easily visible, what files have been customized - even without the use of any
			versioning system like CVS or SVN.
		</p>
		</section>
		<section>
		<title>Realization</title>
		<p>
			Design Studio comes bundled with all standard model projects. These can be seen as a kind of
			"repository" that the custo-projects use as their base version. In the new project wizard,
			these projects are available in the selection box for the base project.
		</p>
		<p>
			A user can choose to customize a model, which results in a local copy of the standard file.
			Deleting it from the custo-project is the equivalent to a "revert to standard" action.
		</p>
		<p>
			The code generation framework is designed in a way that it passes all model resources of
			the project to the cartridges regardless if the resource exists in the custo project or not.
			Hence the gen-project always contains all relevant generated files and there is no need to 
			overlay this with the standard version of the gen-project. The idea is that the gen-project
			can completely replace the original version and does not require any "classpath" tricks to
			make them both available to the runtime. 
		</p>
		<p>
			For translations and rules, the implementation had to be done in a different way as there is
			only a single file for a whole projects (considering the vrmodel-file to be the only officially
			visible file for the rules). Thus these models were given a unique name in order to avoid
			naming conflicts (both have a hash in their filename) and a special logic has to deal with
			the check, if a model has been customized, if it exists in the standard etc.
		</p>
		<p> 
			In the translation repository, this is solved by only storing customized labels in the custo
			repository, while reading all standard labels from the translation repository of the referenced
			standard model.
		</p>
		<p>
			For the rules, the problem is more complex, because the rule code generation does NOT allow
			generating code from the rule model of the standard projects. Therefore, when creating a custo
			project, the full rule model is copied to the custo project and it is renamed. This is required
			in order to be able to still access the standard version of a customized rule (for comparison or
			for simply opening it up in the editor). A "revert to standard" therefore also means a new
			copy of the standard rule file to the custo project - note that this breaks the VR concept of
			not reveiling the internal structure to its users; but there was simply no other way to implement it.
		</p>
		</section>
		<section>
		<title>Implementation Details</title>
		<p>
			It has been tried to seperate the custo functionality from the core functionality in order to
			keep the system architecture modular, i.e. the custo functionality could be removed from Design
			Studio without breaking any other code.
		</p>
		<p>
			The workbench provides the two plugins <codeph>workbench-custo-core</codeph> and 
			<codeph>workbench-custo-ui</codeph>, which provide the core functionality for custo projects.
		</p>
		<p>
			The <codeph>OdysseyCustomNature</codeph> is added to projects that are created as custo projects.
			The custo functionality will always only be activated on projects with this nature.
		</p>
		<p>
			A central class for the DS Navigator is the <codeph>CustomProject</codeph>, which
			replaces the standard <codeph>OfsProject</codeph> implementation. The <codeph>CustomProject</codeph>
			adds a new scope "standard" to the model packages and resources and thus allows showing
			standard resources in the DS Navigator without changing any code in it.
		</p>
		<p>
			The <codeph>workbench-custo-ui</codeph> plugin mainly contains context menus and actions for
			handling custo resources, like "customize it", "revert to standard" or "compare with standard".
		</p>
		</section>

	</conbody>

</concept>
