<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_frameworks_modelmigration_overview">
	<title>Model Migration Logics</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>migration</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>Concept</title>
			<p>
				Whenever there is a syntactical or semantical change in a models meta-model, a migration logic must be added to Design Studio
				in order to still support older versions of models. Each of these logics must only take care of the changes required by this
				specific change; it is not necessary to provide migration logics for different previous versions as the cumulation is done
				by the migration framework itself. 
			</p> 
			<p>
				It is therefore important that the migration logics are independent of the latest ecore meta-model as it cannot be assumed that
				the input or output of such a migration is compatible with the ecore meta-model. It is therefore recommended to base the 
				migration logics on a DOM XML parser (see implementation section for details) if the serialization format is based on XML.
			</p>
		</section>
		<section>
		<title>Declaration</title>
		<p>
			The plugin <codeph>workbench-migration</codeph> defines the extension point <codeph>com.odcgroup.workbench.migration.modelmigration</codeph>,
			which should be used to declare specific model migration logics.
		</p>
		<p>
			A migration is always declared for a specific model type. The extension declaring the migration should therefore be in a plugin for
			this model type, e.g. <codeph>&lt;modeltype&gt;-migration</codeph>. Besides an implementing class, a "source" and a "target" version
			must be provided. These define the meta-model versions that this migration can be applied on and are used by the Migration Framework
			to concatenate different logics.
		</p>
		<p>
			In some circumstances, a model migration might not be restricted to a single model type (see for example the migration of human
			expressions from domain model to translation model). In such a case, the migration should be declared for the primary model type
			(in the example the domain model type) and a dependency must be declared on all additional model types by the "requires" attribute
			of the extension. The migration framework then makes sure that all required model types are first migrated to the latest version
			before the current migration is executed. By this, the migration logic can assume that the required models are up-to-date and can
			use any public API and/or the ecore meta-model to do the required changes to them. As a consequence, there must never be circular
			dependencies in the "required" statements as this could not be resolved by the Migration Framework anymore.
		</p>
		</section>
		<section>
		<title>Implementation</title>
			<p>
				A migration logic must implement the interface <codeph>com.odcgroup.workbench.migration.IModelMigration</codeph>. In order to
				handle all properties automatically, the abstract class <codeph>com.odcgroup.workbench.migration.AbstractModelMigration</codeph>
				should be extended instead, which takes care of all these properties and their mapping from the extension.
			</p>
			<p>
				As explained above, it is recommended to base the migration logics on a DOM XML parser. For implementation convenience, the
				abstract class <codeph>com.odcgroup.workbench.migration.AbstractDOMModelMigration</codeph> can be used. In this case, only one
				method has to be implemented, which receives an XML <codeph>Document</codeph> object and can do the required transformations
				on it.
			</p>
			<p>
				The following image gives an overview over the relevant classes and interfaces:
			</p>
			<p><image href="images/migrationframework1.jpg" /></p>
		</section>
	</conbody>

</concept>
