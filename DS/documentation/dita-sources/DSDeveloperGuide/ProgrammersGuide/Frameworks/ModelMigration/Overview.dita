<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_frameworks_modelmigration_overview">
	<title>Overview</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>migration</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>Introduction</title>
			<p>
				The (ecore) meta-models of Design Studio are not carved in stone and are subject to continuous evolution. Some changes to meta-models might also break the backward compatibility,
				so that it is vital to provide migration means, so that existing models from older versions can still be used and do not have to be manually redone.
			</p> 
			<p>
				The current EMF framework cannot deal with models that do not adhere to the latest ecore meta-model. The XMIReader will simply fail loading the model, if there are discrepancies
				to the expected meta-model. The "official" Eclipse to this problem is the <xref scope="external" href="http://www.eclipse.org/proposals/edapt/">Edapt project</xref>. Unfortunately, at time of writing, this is still in a very early stage (project proposal)
				and thus not yet usable. Therefore, Design Studio comes with its own concept of dealing with this challenge.
			</p>
			<p>
				The main idea of this concept is to introduce a meta-model version attribute on all relevant models and to offer an extension point through which model migration logics can
				be registered. A key requirement is here, that these migrations can be concatinated. Thus it is always possible to migrate from any previous meta-model version to the
				very latest one without the need to provide specific migration logics for any previous version.
			</p>
		</section>
		<section>
			<title>Implementation</title>
			<p>
				The functionality offered by this framework is part of the basic workbench features can be found in the plugins <codeph>workbench-migration-core</codeph> and 
				<codeph>workbench-migration-ui</codeph> (for all UI related functionality). Besides this there are some minor things added in <codeph>workbench-core</codeph> to more easily
				support these concepts.
			</p>
		</section>
	</conbody>
</concept>
