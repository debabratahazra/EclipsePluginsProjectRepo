<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_frameworks_modelvalidation_validationresults">
	<title>Model Validation Results</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>validation</indexterm>
				<indexterm>results</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<p>
			To get hold of model validation results, there are actually a couple of different options available, which meet different requirements:
		</p>
		<section>
			<title>Reading Problem Markers</title>
			<p>
				As the batch validation is automatically executed on resource changes and leaves markers on the resources, a straight forward way
				is to read the markers and evaluate their severity and messages. This is for example done by the GMF decoration providers and
				the code can look similar like this:
				<codeblock>
private static final String MARKER_TYPE = "com.odcgroup.workbench.validation.ProblemMarker"; //$NON-NLS-1$
[...]
	List&lt;String&gt; problems = new ArrayList&lt;String&gt;();
	IResource resource = WorkspaceSynchronizer.getFile(eObject.eResource());
	if (resource == null || !resource.exists()) {
		return;
	}
	IMarker[] markers = markers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);
	for(IMarker marker : markers) {
		String uri = marker.getAttribute(EValidator.URI_ATTRIBUTE, ""); //$NON-NLS-1$
		if (uri.equals(elementUri)) {
			problems.add(marker.getAttribute(IMarker.MESSAGE, ""));
		}
	}		
				</codeblock>
			</p>
			<p>
				It is important though to note that this only gives you the results of the last validation run. If you have unsaved changes in your 
				editor and want to have the validation results for them, you need to choose another option.
			</p> 
		</section>
		<section>
			<title>Manually Launching a Batch Validation for EObjects</title>
			<p>
				You can request a batch validator and run the validation on a single EObject or a whole collection of EObjects by calling
				<codeblock>
ValidationUtil.createBatchValidator().validate(eObject);
				</codeblock>
				resp.
				<codeblock>
ValidationUtil.createBatchValidator().validate(eObjectCollection);
				</codeblock>
				This will return you an <codeph>IStatus</codeph> instance, which can be an <codeph>MultiStatus</codeph>, which you can then
				evaluate yourself. Keep in mind that running the validation might be expensive, so do not choose this option too often.
			</p>			
		</section>
		<section>
			<title>Registering an EValidator for Live Validations on EMF Change Notifications</title>
			<p>
				Registering a live validation adapter makes sure that your constraints are directly called whenever a change to the model takes place.
				The Design Studio Validation Framework provides the abstract class <codeph>AbstractLiveValidationContentAdapter</codeph>, for which
				the abstract method <codeph>handleFailureStatus(IStatus status)</codeph> needs to be implemented. This method is called on
				any live validation failure and the specific implementation can decide what to do with the validation status.
			</p>
			<p>
				The content adapter can be registered on a whole <codeph>ResourceSet</codeph>, on a <codeph>Resource</codeph> or on a single
				<codeph>EObject</codeph>. An implementation could look like as follows:
			</p>
			<codeblock>
EContentAdapter liveValidationContentAdapter = new AbstractLiveValidationContentAdapter() {
	protected void handleFailureStatus(IStatus status) {
		// do something with the result
	}
};

resource.eAdapters().add(liveValidationContentAdapter);
			</codeblock>			
		</section>
	</conbody>

</concept>
