<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_frameworks_workbench">
	<title>Workbench</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>workbench</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section>
			<title>Overview</title>
			<p>The Design Studio Workbench is the name for the collection of basic tools and functionalities which
			are shared among all designers and which build the core platform.</p>
			<p>This section describes the functionality that can be mainly found in the <codeph>workbench-core</codeph>
			and <codeph>workbench-ui</codeph> plugins. For all more specific functionality of the workbench (like
			code generation, validation, compare, etc.) you will find dedicated sections in this guide.</p>
		</section>
		<section>
			<title>DS Navigator</title>
			<p>Design Studio defines an "Temenos" perspective, which should be the default perspective for users working
			with Design Studio models. The only Design Studio specific view of this perspective is the <i>DS Navigator</i>
			which allows browsing the Design Studio model projects and managing their resources. It is the
			equivalent to the <i>Package Explorer</i> for Java development.</p>
			<p>The DS Navigator is based on the Common Navigator Framework (CNF), which is specifically designed
			to be extensible and customizable. Michael Elder has written a number of blog entries on how to use the 
			common navigator. These give a good introduction about what can be done with the CNF and how this is done:
			<ol>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/05/building-common-navigator-based-viewer.html">Part I: Defining the Viewer</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/05/building-common-navigator-based-viewer_22.html">Part II: Adding Content</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/06/building-common-navigator-based-viewer.html">Part III: Configuring Menus</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/06/building-common-navigator-based-viewer_18.html">Part IV: Object Contributions</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/06/building-common-navigator-_115067357450703178.html">Part V: How to programmatically configure menus</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/07/label-decorators-in-common-navigator.html">Label Decorators in a Common Navigator Framework viewer</xref></li>
				<li><xref scope="external" href="http://scribbledideas.blogspot.com/2006/05/where-do-we-go-from-here.html">Where do we go from here?</xref></li>
			</ol>
			</p>
			<p><b>DS Navigator Contributions</b></p>
			<p>The workbench-ui plugin includes some general contributions. These are:
			<ul>
				<li>OfsContentProvider and OfsLabelProvider, which deal with Design Studio model projects and model folders</li>
				<li>OfsResourceFilter, which filters out all resources that are not IOfsElements in an Design Studio model project, so that only Design Studio resources are displayed</li>
				<li>ModifyActionProvider, OfsModelDropAdapterAssistant and OpenActionProvider, which provide standard resource functionality (delete, rename, open, etc.) to the DS Navigator as the standard "resource content" is not part of it.</li>
			</ul>
			</p>
			<note>Please note that the <i>Project Explorer</i> is also based on the CNF and that all Design Studio contributions are designed in a way
			that they can also be added to the <i>Project Explorer</i>. The reason why this is not done is that there were a couple of issues
			viewer update refreshs that could not be solved in the <i>Project Explorer</i> and only worked correctly in the <i>DS
			Navigator</i>. The long-term goal should be nonetheless to make these contributions available to the <i>Project Explorer</i> as well.</note>
			
			<p><b>Conventions for Design Studio Contributions (models, etc.)</b></p>
			<p>Content contributions should have an id following the pattern com.odcgroup.workbench.ui.navigator.* and action contributions likewise com.odcgroup.workbench.ui.navigator.action.*. By this, these contributions will be automatically picked up and added to the OFS Navigator as well as to the Project Explorer. If any other id is used, these contributions must be explicitely declared using the org.eclipse.ui.navigator.viewer extension point.</p>
			<p>The workbench-ui plugin provides the abstract classes AbstractModelContentProvider and AbstractModelLabelProvider, which should be used for content contributions from OFS models.
			Please note that these providers only show the saved status of the models - they load the models in their own ResourceSet and do not share the EditingDomain with the editors,
	 		so that there is no on-the-fly update of the contents in the navigator.</p>		

			<p><b>Contribution of "Standard" Models like pageflow, process, page and module</b></p>
			<p>Every model plug-in should define a org.eclipse.ui.navigator.navigatorContent extension with the following entries:</p>
			<p>A "navigatorContent" should be enabled on IFiles with the extension of this model. An appropriate label should be displayed for the model file (instead of the filename with its extension) and the icon can be changed if necessary. Furthermore this extension can provide information on the content of the model file by providing its model elements as children to the file, so that a tree structure can be expanded.</p>
			<p>An "actionProvider" should be enabled on IFolders that are OfsModelFolders (test the property com.odcgroup.workbench.model, see e.g. the process-diagram-editor plugin). This provider can add menu entries to the context menu of a model folder, so that new models can be easily created, groups be added or files imported.</p>

			<p><b>Contribution of Domain Models (MDF)</b></p>
			<p>The MDF is integrated very similar to the standard models. All contributions are done in the mdf-integration plugin, which links the standard "OCS MDF Plugin" to the OFS Workbench.
			It defines an action provider to create new models via the context menu on the domain folder.</p>
			
			<p><b>Contribution of Visual Rules Models</b></p>
			<p>The Visual Rules (VR) integration is slightly different from the rest. As VR defines an additional layer (the vrmodel file), which is a kind of container or group for rules, 
			the Design Studio workbench creates a default container "rules_&lt;hashcode&gt;.vrmodel" in the rule folder and expects this to exist.</p>
			<p>VR comes with its own contributions to the Project Explorer. All that is done in the visualrules-integration plugin, is registering these contributions with the OFS Navigator as well
			and adding Design Studio specific actions to the model folder (like creating new rules based on a template, etc.).</p>
		</section>

<!-- TODO: This should be written after DS-2419 has been implemented
		<section>
			<title>Model Management</title>
		</section>
		<p>
		</p>
 -->		
	</conbody>

</concept>
