<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_pagedesigner_metamodel">
	<title>Metamodel</title>
	<prolog>
		<author type="creator">Alain Tripod</author>

		<metadata>
			<keywords>
				<indexterm>page</indexterm>
			</keywords>
		</metadata>
	</prolog>

	<conbody>

		<p>
			Here we describe briefly the principal data structures and design patterns used to implement the Page
			Designer.
		</p>

		<p>
			Basically, the Page Designer is made of two levels.
			<ul>
				<li>
					<p>
						The
						<b>knowledge level</b>
						describes the parts of the metamodel that can be changed often. It describes the type of widget,
						their properties, the event model, the accountability rules, etc. Elements in this level are
						part of the MOF/M2 level.
					</p>
				</li>
				<li>
					<p>
						the
						<b>operational level</b>
						contains an instance of a particular model (fragment, module, page) built by the user through
						the user interface of the Page Designer. Elements in this level are part of the MOF/M1 level.
					</p>
				</li>
			</ul>
		</p>

		<p>
			The
			<i>Type-Square Design Pattern</i>
			provides the basic foundation of a layered approach as depicted in the following figure (
			<i>a subset of the true class diagram</i>
			).
		</p>

		<image href="images/type_square_pattern.png" width="16cm">
			<alt>no figure available</alt>
		</image>

		<section>
			<title>The Knowledge Level</title>

			<p>
				At the higher level we have the meta-information (WidgetType, PropertyType, EventType,
				AccountabilityRule, etc.)
			</p>

			<p>
				All metamodels are located in the plugin
				<b>com.odcgroup.page.metamodel</b>
				under the folder
				<b>src/main/resources</b>
				. The table below gives a short description of these metamodels.
			</p>

			<p>
				These metamodels are modified at development time only, although it is possible to add new definitions
				at runtime. New definitions added at runtime are not persisted.
			</p>

			<simpletable>
				<sthead>
					<stentry>Metamodel</stentry>
					<stentry>Description</stentry>
				</sthead>
				<strow>
					<stentry>cdmcomp-widget-library.metamodel</stentry>
					<stentry>A specific widget library that defined Widget Types for the CDM project</stentry>
				</strow>
				<strow>
					<stentry>data-types.metamodel</stentry>
					<stentry>
						This metamodel constains a description of Data Types and Enumerations. Theses Types are used to
						defined property type in widgets libraries
					</stentry>
				</strow>
				<strow>
					<stentry>ic-widget-library.metamodel</stentry>
					<stentry>A specific widget library that defines a special Widget Type to render message</stentry>
				</strow>
				<strow>
					<stentry>page-designer.metamodel</stentry>
					<stentry>This metamodel defines both the accountability rules and the event metamodel.</stentry>
				</strow>
				<strow>
					<stentry>page-designer.transformmodel</stentry>
					<stentry>
						This metamodel defines transformation rules. The rule are implemented as java classes. These
						rules are used to transform an object of the operational level (PIM) to a platform specific
						model (PSM). Nowadays only XSP/XGUI is supported.
					</stentry>
				</strow>
				<strow>
					<stentry>page-designer.uimodel</stentry>
					<stentry>
						This metamodel defines the content of Palettes, the contextual menus and actions for widgets. It
						defines also the GEF figure that the editor must use to draw a specific Widget Type.
					</stentry>
				</strow>
				<strow>
					<stentry>xgui-widget-library.metamodel</stentry>
					<stentry>
						This library contains the description of a hierarchy of WidgetTypes, Property Types and a
						collection of Templates. It is based on our XGUI tag lib used to constructs HTML pages.
					</stentry>
				</strow>
			</simpletable>
			<p>
				<b>The Accountability Rule</b>
			</p>
			<p>
				The
				<i>Accountability Design Pattern</i>
				is used to describe hierarchical relationships amongst components. All the elements displayed in the
				Page Designer are Widgets. Certain Widgets such as HorizontalBoxes may contain other Widgets, others
				such as RadioButton cannot. The AccountabilityRules associate a parent Widget with the child Widgets
				which it may contain. This model is very useful if you need to bind two or more hierarchies onto a
				single Widget model. The Page Designer includes a specific case in which this binding is used
				<b>Containability</b>
				and
				<b>Includeability</b>
				. Multiplicities are also supported in this model.
			</p>

			<image href="images/accountability.png" />

			<ul>
				<li>
					<p>
						<b>Containability rules</b>
						determine if a Widget can contain another one. In this case the two Widgets are part of the same
						file. For example, if a Box can contain a TextField.
					</p>
				</li>

				<li>
					<p>
						<b>Includeability rules</b>
						determine if a Widget can include another one. For example a Page can include a Module. In this
						situation the two Widgets are in separate files.
					</p>
				</li>
			</ul>

			<p>
				<b>The Widget Metamodel</b>
			</p>

			<p>
				The
				<b>meta-model</b>
				is the base of the Page Designer's Data Structure. Here we define the basic
				<b>WidgetTypes</b>
				and their associated
				<b>PropertyTypes</b>
				. Using the editor generated by EMF (or by modifying the XML files directly) we can create an instance
				of this model. For example, we define a WidgetType named CheckBox. The CheckBox inherits from
				ToggleButton which has a PropertyType 'enabled'. The PropertyType 'enabled' has a default value of true.
				At the same time we define other WidgetTypes such as HorizontalBox, VerticalBox etc. This definition is
				stored as an XML file and represents the different types of Widgets which will be available to the
				end-user of the application. Each PropertyType has an associated
				<b>DataType</b>
				. The DataType conditions how the Property's value is presented in a Property Sheet. It also enables us
				to create enumerations.
			</p>

			<p>
				The meta-model also allows us to write the
				<b>AccountabilityRules</b>
				following the Accountability design pattern described earlier. These rules define which WidgetTypes can
				contain other WidgetTypes. Note that this definition is generic. For example suppose we have a
				CheckBoxes and RadioButtons which have a common parent ToggleButton. Additionally we also have
				HorizontalBoxes and VerticalBoxes which have a common parent Box. We can define an AccountabilityRule
				which states that ToggleButtons can be contained within Boxes. Thus with this single definition we can
				place CheckBoxes in HorizontalBoxes, RadioButtons in VerticalBoxes etc.
			</p>

			<p>
				We have also included the concept of a
				<b>WidgetLibrary</b>
				. This represents a library of WidgetTypes with their associated PropertyTypes. A single library
				probably corresponds to a library defined for the XSP pages, for example the XGUI library.
			</p>

			<p>
				Finally we have included the notion of a
				<b>WidgetTemplate</b>
				and associated
				<b>PropertyTemplates</b>
				and
				<b>EventTemplates</b>
				. This provides the information needed to create:
				<ul>
					<li>A simple Widget having Property values which differ from the default values</li>
					<li>
						Composite Widgets. These are Widgets which are composed of other Widgets (which may also be
						composed of other Widgets). Thus a WidgetTemplate allows for the creation of arbitrarily complex
						Widgets based upon simple base types.
					</li>
				</ul>
			</p>

			<p>
				The
				<b>EventModel</b>
				is a registry of WidgetEvents. A WidgetEvent contains the list of EventType's (such as OnBlur etc.)
				available for a specific WidgetType. The FunctionType and ParameterType are the functions which can be
				called when a particular event is invoked (such as checkboxCheck).
			</p>

			<p>
				<b>Main Classes</b>
			</p>
			<p>Hereafter we give a short description of the main classes</p>

			<ul>
				<li>
					<p>
						<b>MetaModel</b>
					</p>
					<p>This is the root element containing all the meta-information concerning WidgetTypes etc.</p>
				</li>

				<li>
					<p>
						<b>WidgetLibrary</b>
					</p>
					<p>
						This is a logical grouping of WidgetTypes. The most obvious Library is XGUI. Other libraries can
						also be defined.
					</p>
				</li>

				<li>
					<p>
						<b>DataType</b>
					</p>
					<p>
						The most obvious examples of DataTypes are primitive types such as Integer and Boolean. DataType
						can also be used to provide enumerations. For example, Alignment can have DataValues Left, Right
						and Center. Here we can describe the type of Editor to use in the PropertySheet along with the
						Validator and Converter to use to convert DataTypes to and from Strings. Note that the internal
						representation of a Property's value is ALWAYS a String.
					</p>
				</li>

				<li>
					<p>
						<b>DataValue</b>
					</p>
					<p>
						This is used for DataTypes which represent enumerations and provides a value and an ordinal
						number. The display name of a data value is used in all situations in which the value needs to
						be displayed to the end-user, for example, in combo-boxes.
					</p>
				</li>

				<li>
					<p>
						<b>WidgetType</b>
					</p>
					<p>
						This is the most important meta-definition in the meta-model. A WidgetType generally corresponds
						to a real UI element, for example a CheckBox. By analogy with Java this represents a class. Each
						WidgetType can have a parent WidgetType. This allows us to define hierarchies of Widgets. In
						this way we can treat WidgetTypes generically. For example, if we define a base-type Element
						such that ALL the children inherit from this type, then we can automatically add a PropertyType
						to EVERY WidgetType simply by adding a new PropertyType to the WidgetType 'Element'.
						Unfortunately no hierarchy is perfect therefore we have included the possibility for a
						WidgetType to exclude a PropertyType inherited from its parent. The name of the Widget is an
						internal one and is used, for example, in the page and module files. A display name can also be
						chosen. The display name is used in all situations in which the name of the Widget is displayed
						to the end-user.
					</p>
				</li>

				<li>
					<p>
						<b>PropertyType</b>
					</p>
					<p>
						A PropertyType represents an Attribute of a WidgetType. By analogy with Java this represents a
						Field of a Class. Each PropertyType has a DataType. It also has a default value. A flag permits
						one to determine if the PropertyType represents a label which is internationalizable. This has
						an impact in several areas including the editor which is used in the Property Sheet and the
						transformation process. The category of a PropertyType determines in which Tab it is displayed
						in the PropertySheet. The role represents an indirection between the PropertyType and the
						functionality that it supplies to the Page Designer. The name of the Property is an internal one
						and is used, for example, in the page and module files. The display name is used in all
						situations in which the name of the Property is displayed to the end-user.
					</p>
				</li>

				<li>
					<p>
						<b>PropertyCatagory</b>
					</p>
					<p>
						This is used in the generation of the Property Sheet in order to provide a logical grouping of
						properties.
					</p>
				</li>

				<li>
					<p>
						<b>PropertyValueConverter</b>
					</p>
					<p>This defines an interface for classes which can convert Property to and from Strings.</p>
				</li>

				<li>
					<p>
						<b>WidgetTemplate</b>
					</p>
					<p>
						This contains the definition of a Widget or group of Widgets which can be created, for example,
						from the Palette. It enables one to compose higher-level Widget definitions from simpler
						Widgets. Thus when an item is dragged from the Palette onto the diagram we can create an entire
						group of Widgets.
					</p>
				</li>

				<li>
					<p>
						<b>PropertyTemplate</b>
					</p>
					<p>This allows one to override the default value of a Property for a particular WidgetTemplate.</p>
				</li>

				<li>
					<p>
						<b>EventTemplate</b>
					</p>
					<p>
						This allows one to defines Events which will be created when the Widget is first created. Note
						that in order to be complete this should also contain PropertyTemplates, however at the moment
						this is not the case.
					</p>
				</li>

				<li>
					<p>
						<b>Parameter Template</b>
					</p>
					<p>This allows one to define the values of the parameters to events.</p>
				</li>

				<li>
					<p>
						<b>Accountability, AccountabilityRule</b>
					</p>
					<p>
						Accountability and AccountabilityRules are used to define containment (or inclusion)
						relationships between parent and child WidgetTypes. There are two types of Accountability,
						Containability and Includeability. An AccountabilityRule has two attributes, minOccurs and
						maxOccurs. Using these attribute we can specify how many instances of a particular child can be
						contained (included) in a parent. Set maxOccurs to -1 to allow an infinite number of child
						Widgets to be contained within the parent. Note that, if possible generic AccountabilityRules
						should be defined. For example it is better to define a rule stating that a Box can contain
						SimpleWidgets compared with three rules stating that a Box can contain a Button, CheckBox or
						RadioButton. In this way if we add a new WidgetType which inherits from SimpleWidget it will
						automatically be possible to add it to a Box.
					</p>
				</li>

				<li>
					<p>
						<b>IncludeabilityRule, InclusionType</b>
					</p>
					<p>
						In the XSP pages three types of inclusions are used:
						<ul>
							<li>
								CINCLUDE - This is Cocoon's inclusion mechanism. A &lt;cocoon:cinclude&gt; tag is
								generated when the file is exported.
							</li>
							<li>
								XINCLUDE - This is XML's standard inclusion mechanism. An &lt;xi:include&gt; tag is
								generated when the file is exported.
							</li>
							<li>
								SOURCE_INCLUDE - With this InclusionRule the entire source Widget is included in the
								final XSP page.
							</li>
						</ul>
					</p>
				</li>

				<li>
					<p>
						<b>EventModel</b>
					</p>
					<p>This is a registry of WidgetEvents and FunctionTypes.</p>
				</li>

				<li>
					<p>
						<b>EventType</b>
					</p>
					<p>This is an enumeration of standard types of events.</p>
				</li>

				<li>
					<p>
						<b>WidgetEvent</b>
					</p>
					<p>
						A WidgetEvent is a simple container class containing a mapping between the WidgetType and the
						types of events that is supports.
					</p>
				</li>

				<li>
					<p>
						<b>FunctionType</b>
					</p>
					<p>
						A FunctionType is the definition of a function which will be executed when an event is fired. It
						contains list of ParameterTypes. These are the arguments to the function.
					</p>
				</li>

				<li>
					<p>
						<b>ParameterType</b>
					</p>
					<p>
						A ParameterType is the type of one of the arguments to a function. It is used in conjunction
						with the FunctionType.
					</p>
				</li>

			</ul>
			<p>
				<b>The User Interface Model</b>
			</p>
			<p>
				The user interface model provides the description of how the various elements of the Page Designer
				should be displayed. For example, Palette, PaletteGroup and PaletteGroupItem contain all the information
				needed to draw the palette. A PaletteGroupItem is associated with the WidgetTemplate and therefore is
				able to create a Widget at the appropriate time.
			</p>
			<p>This model also provided RendererInfo objects which determine how a WidgetType should be displayed.</p>
			<p>
				Each page / module / fragment has an associated root Widget. Each WidgetType can have its own
				specialized Palette associated with it. The default Palette is used when no such specialized Palette has
				been defined for the root Widget.
			</p>
			<p>
				The UI Model is also handles the creation of contextual menus according to the type of Widget which is
				currently selected.
			</p>

			<p>
				<b>Main Classes</b>
			</p>
			<p>Hereafter we give a short description of the main classes</p>

			<ul>
				<li>
					<p>
						<b>UIModel</b>
					</p>
					<p>This is the container for the other items.</p>
				</li>
				<li>
					<p>
						<b>Palette</b>
					</p>
					<p>This represents the complete Palette. It is composed of PaletteGroups.</p>
				</li>
				<li>
					<p>
						<b>Palette Group</b>
					</p>
					<p>
						This is a logical grouping of PaletteGroupItems. For example, 'Modifiable' items may be placed
						within the same group.
					</p>
				</li>
				<li>
					<p>
						<b>PaletteGroupItem</b>
					</p>
					<p>
						This is a single item in the Palette. One can define the icon to display, its name etc. The most
						important property of the PaletteGroupItem is its association to a WidgetTemplate. This defines
						which WidgetTemplate should be used to create the Widget(s) whenever an item is dragged from the
						Palette onto the diagram
					</p>
				</li>
				<li>
					<p>
						<b>RendererInfo</b>
					</p>
					<p>
						This contains a mapping between a WidgetType and the draw2d figure used to display it. Each
						WidgetType should have a RendererInfo. One can also specialize the EditPart if the default
						WidgetEditPart is not convenient.
					</p>
				</li>
				<li>
					<p>
						<b>EditPolicyRole</b>
					</p>
					<p>
						Certain complex Widgets, such as Tables and Matrices, need specialized EditPolicies. These can
						be defined here and selecting the mode, (Design, All), the role (essentially which
						EditPolicy this implements) and the class implementing the EditPolicy. Note that currently only
						those EditPolicies which need overriding are available. In order handle other situations in
						which specific treatment is required you need to create new EditPolicyRoles and then delegate
						the work to be performed to these classes. This usually occurs within the existing EditPolicy
						classes which act as default versions
					</p>
				</li>
				<li>
					<p>
						<b>Menus</b>
					</p>
					<p>This is the container for WidgetMenus</p>
				</li>
				<li>
					<p>
						<b>WidgetMenu</b>
					</p>
					<p>
						This defines the menu for a specific type of Widget. Note that the runtime iterates through the
						list looking for a match between the WidgetMenu and the type of the selected Widget. Inheritance
						is taken into account during the lookup. Thus a WidgetMenu defined for WidgetType 'Element' will
						apply to almost all Widgets, since they inherit from WidgetType 'Element'. If you wish to
						override the menu for a specific Widget you MUST place its definition BEFORE that of the more
						general WidgetMenu defined for the base-class.
					</p>
				</li>
				<li>
					<p>
						<b>MenuItem</b>
					</p>
					<p>
						A MenuItem is used to group ActionGroups in a menu. For example File is a MenuItem which
						contains the ActionGroups, Print and Save. A MenuItem may have a parent. This enables MenuItems
						to be nested within other MenuItems. The root MenuItem is called Standard
					</p>
				</li>
				<li>
					<p>
						<b>ActionGroups</b>
					</p>
					<p>This is a container for ActionGroups.</p>
				</li>
				<li>
					<p>
						<b>ActionGroup</b>
					</p>
					<p>
						An ActionGroup is a logical grouping of Actions. For example the Undo and Redo Actions are in
						the same ActionGroup.
					</p>
				</li>
				<li>
					<p>
						<b>Actions</b>
					</p>
					<p>This is a container for Actions.</p>
				</li>
				<li>
					<p>
						<b>Action</b>
					</p>
					<p>
						This represents the actual Action to execute. It contains all the information needed to execute
						the action, such as the provider. It also details whether the Action is available in Design
						view. A keyboard accelerator can be defined for the Action.
					</p>
				</li>

			</ul>

			<p>Here's how the Palette is built by the Page Designer</p>

			<image href="images/palette.png" width="16cm">
				<alt>no figure available</alt>
			</image>
		</section>

		<section>
			<title>The Operational Level</title>

			<p>At this lower level we find instances of Model, Widgets and Propertys, Events and Parameter's.</p>

			<p>
				A Model instance is persistable and represents either a Fragment, a Module or a Page designed by a user.
			</p>

			<p>Models must be modified only at runtime.</p>

				<p>
					<b>Main Classes</b>
				</p>
				<p>Hereafter we give a short description of the main classes</p>

				<ul>
					<li>
						<p>
							<b>Model</b>
						</p>
						<p>
							This is the root element of the EMF XML resource which is saved. It is essentially a
							container which provides extra information related to the file itself, such as the version
							of the meta-model used to create it.
						</p>
					</li>

					<li>
						<p>
							<b>Widget</b>
						</p>
						<p>
							Each Widget generally corresponds to a visual UI element. It represents the instantiation of
							a WidgetType. These are created every time that a user drags a Widget from the Palette or an
							Attribute from the Domain outline. By analogy with Java this represents an instance of a
							class. Most of the time the Page Designer needs to use the meta-information contained within
							the WidgetType to perform actions.
						</p>
					</li>

					<li>
						<p>
							<b>Property</b>
						</p>
						<p>
							These are the properties of the Widgets. Each Property has an associated PropertyType which
							describes its default values, the editors used in the property sheet etc.
						</p>
					</li>

					<li>
						<p>
							<b>Event</b>
						</p>
						<p>
							A user can declare events which will be executed when the user performs specific actions.
							Each event causes a function to be executed (attribute functionName). The function accepts a
							list of Parameters and a list of properties.
						</p>
					</li>

					<li>
						<p>
							<b>Parameter</b>
						</p>
						<p>A Parameter is an argument to a function. It has a name and a value.</p>
					</li>

				</ul>

				<image href="images/operational_model.png" width="18cm">
					<alt>no figure available</alt>
				</image>

		</section>

	</conbody>

</concept>
