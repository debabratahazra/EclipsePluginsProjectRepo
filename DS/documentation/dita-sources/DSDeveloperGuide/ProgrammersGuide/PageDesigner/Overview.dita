<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_pagedesigner_overview">
	<title>Overview</title>
	<prolog>
		<author type="creator">Alain Tripod</author>

		<metadata>
			<keywords>
				<indexterm>page</indexterm>
			</keywords>
		</metadata>
	</prolog>
	
	<conbody>
	
		<section>
			<title>Technologies</title>
			
			<p> The Page Designer is a collection of Eclipse plugins essentially based on the technologies 
			depicted in the following figure:</p>  
			
			<image href="images/frameworks.png" width="16cm"><alt>no figure available</alt></image>
							
		</section>
		
		<section>
			<title>Four Layered Architecture</title>
	
				<p>The development of Page Designer is based upon the OMGs Meta-Object Facility (MOF). 
					This is defined as a four-layered architecture.</p>
	
				<image href="images/mof_levels.png" width="16cm"><alt>no figure available</alt></image>
	
				<ul>
					<li>Level M3 - Meta-Meta Model
						<p>At the top of the pyramid we have the meta-meta model. 
						This is a very abstract UML model describing generalized modelling concepts, 
						for example, Class, Object, Attribute etc. The ECore model defined in EMF 
						is very closely aligned with the MOF in that it defines classes such as EClass, 
						EObject and EAttribute.</p>
					</li> 
					<li>Level M2 - Meta-Model
						<p>The Meta-Model is a business-specific model. For example, in the case of 
						the Page Designer we have meta-modelling concepts such as WidgetType and 
						PropertyType. It is a platform-independent model since it is expressed entirely 
						in UML.</p>
					</li>
					<li>Level M1 - Model
						<p>This is a specific-definition of the Meta-Model. For example, we could 
						define a WidgetType "CheckBox" which contains a PropertyType "checked". 
						These definitions are stored in a platform-independent XML file and loaded 
						by the Page Designer when the application is launched.</p>
					</li>
					<li>Level M0 - User Code
						<p>These are the pages and modules written by the end user. The pages and 
						modules are stored in platform-independent XML files.</p>
					</li>
				</ul>
		
		</section>
		
		<section>
			<title>Application Description</title>
			
			<p>The essential steps of the application are as follows</p>
			
			<image href="images/overview.png" width="16cm"><alt>no figure available</alt></image>
			
			<ul>
				<li>
					<p>The developer writes the page-designer.metamodel, .uimodel and .transformmodel
					files. These are the basic definitions of the Page Designer. They can be edited 
					using the EMF editors generated automatically by EMF.</p>
				</li>
				<li>
					<p>When the application is launched it reads the page-designer.metamodel, .uimodel
					and .transformmodel files. These files provide all the information it needs to 
					generate the palette, property sheets etc.</p>
				</li>
				<li>
					<p>The user creates a new fragments, modules or pages.</p>
				</li>
				<li>
					<p>The user drags-and-drops a Widget onto the page. The PaletteGroupItem which 
					is linked to the Palette creates a new Widget using the WidgetTemplate that it 
					is associated with. The Widget is only created if the AccountabilityRules 
					authorize the addition of the new WidgetType onto the parent container.</p>
				</li>
				<li>
					<p>The user saves this information as .fragment, .module or .page files. 
					These respect the hierarchy defined in the model ECore definition.</p>
				</li>
				<li>
					<p>The user exports the pages to XSP. In this case the transformation rules
					defined in the .transformmodel are applied.</p>
				</li>
			</ul>
			
		</section>
		
		<section>
			<title>The Plugins</title>
			<p/>
			<simpletable>
				<sthead>
					<stentry>Plugin</stentry>
					<stentry>Description</stentry>
				</sthead>
				<strow>
					<stentry>com.odcgroup.page.edit, com.odcgroup.page.editor</stentry>
					<stentry>
						The generated editor. This editor is used mainly at development time
						to edit the metamodels of the page designer.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.generation</stentry>
					<stentry>
						This plugin provides the generation cartridge that 
						transforms PIM models to PSM models.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.metamodel</stentry>
					<stentry>
						This plugin provides the MetaModel (KnowLedge Level) 
						of the Page Designer.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.migration</stentry>
					<stentry>
						This plugins provides the migration facilities. 
						It is responsible to migrate older version of models to the last one.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.model</stentry>
					<stentry>
						This plugin provides the Model (Operational Level) of the Page Designer.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.model</stentry>
					<stentry>
						This plugin provides cross features between the Page Designer and the OCS
						application. It provides the preference page to load human expressions.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.pageflow.integration</stentry>
					<stentry>
						This plugin provides cross features between the Page Designer 
						and the PageFlow Designer. 
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.search</stentry>
					<stentry>
						This plugin provides the search facility in the Page Designer's models 
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.transformmodel</stentry>
					<stentry>
						This plugin provides the transformation facilities (PIM/PSM). 
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.ui</stentry>
					<stentry>
						This plugin provides the GUI and editing facilities of the Operational level.
						Essentially anything which is directly involved in the visual parts of the 
						application is in this plugin.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.uimodel</stentry>
					<stentry>
						This plugin provides the metamodel at the UI level (Palette, Menus, Actions
						and Renderer).
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.page.validation</stentry>
					<stentry>
						This plugin provides validation rules of models (Operational Level)
						designed by the users.
					</stentry>
				</strow>
			</simpletable>
			
		</section>
	</conbody>

</concept>
