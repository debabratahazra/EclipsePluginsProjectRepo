<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_ruledesigner_datatypesync">
	<title>Data Type Synchronization</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>rule</indexterm>
				<indexterm>synchronization</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<p>
			One of the most important parts of the Visual Rules integration is the data type synchronization.
			Visual Rules comes with its own meta model for data types and these types must be defined in
			a rule model in order to use them in the rules. For normal usage, Visual Rules provides an import
			for Java beans in order to use them as data types (and also generate the code in a way that these
			beans are used.
		</p>
		<section>
		<title>The Builder</title>
		<p>
			For use inside Design Studio, we do not have Java beans at hand (as long as no generation has
			been run). The only information that is available are the domain model resources. Hence, the
			visualrules-integration plugin introduces a builder, which reads the domain model, transforms
			the contained entities, datasets and enumerations into VR data types and stores these data types
			inside the rule model of the model project. 
		</p>			
		<p>
			The builder <codeph>DataTypeBuilder</codeph> can be found in the package 
			<codeph>com.odcgroup.visualrules.integration.datasync</codeph>.
			This builder works as an incremental project builder, i.e. it is activated on a full project build 
			as well as on a resource change of a domain model, but as well on project dependency setting changes.
			This is necessary because VR uses an "import" concept similar to Java and calls this "reuse".
			So by default, a rule model "B"	cannot use data types defined in a rule model "A". As
			domain models can reference each other (extend other entities, use referenced entities as attribute
			types), these referenced data types need to be made available to VR as well.
		</p>
		<p>
			Hence the builder also takes care of the "reuse" settings in the rule models, which simply means
			that if project B references project A, the root rule model of B will "reuse" the data types defined
			in the rule model of B.
		</p>
		</section>
		<section>
		<title>The Transformation</title>
		<p>
			The builder executes a model-to-model transformation from the EMF domain model to the VR data type model.
			This transformation is implemented in Java (class <codeph>DataTypeTransformer</codeph> as it is not too 
			complex given the similarity of the concepts. The class <codeph>SyncHelper</codeph> provides some helper
			methods and takes care of the mapping of primitive types.
		</p>
		</section>
		<section>
		<title>The Merge</title>
		<p>
			Design Studio creates an "internal" rule package in each rule model. The only purpose of this package
			is to store the synchronized data types and make them usable in the rules. For each domain in the project
			a subpackage with the name of the domain is created inside the "internal" package.
		</p>
		<p>
			On a synchronization of a domain model, all data types of the according package are deleted and the 
			new transformed types are pushed into VR. This procedure is much faster than trying to determine what
			entities have changed and to only replace these.
		</p>
		<p>
			As data types are only visible to the package where they are defined in and all subpackages of it, they
			are not directly available to the rules (which are in a "side" package of the internal package), not even
			in the same rule model. To circumvent this, a "reuse" setting is added to the root package of the rule model
			for each domain. I.e. on the root package there will be a reuse setting "rules_1234/internal/cbi" to make
			the data types of the CBI domain model available to the rules of this rule model.
		</p>
		<p>
			The same is done for all internal data type packages of rule models in referenced projects, so that these
			data types can be used as well. Please note that the reuse settings are only updated on a full build, but
			never on an incremental build. Therefore it is sometimes possible that they are slightly out of sync.
		</p>
		</section>
	</conbody>

</concept>
