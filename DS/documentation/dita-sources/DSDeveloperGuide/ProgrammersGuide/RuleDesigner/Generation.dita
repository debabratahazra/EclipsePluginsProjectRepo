<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_ruledesigner_generation">
	<title>Code Generation</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>rule</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>		
		<p>
			Visual Rules has its own code generation framework which is based on Apache Velocity.
			The VR API provides means to configure this code generator and to launch it.
		</p>
		<p>
			The VR code generator generates in an incremental fashion, i.e. it checks what rules have
			been changed since the last generation and then only generates the differences.
		</p>
		<p>
			In Design Studio, this code generator is integrated as a code cartridge, just like any other
			generation cartridge. The implementing class is <codeph>VisualRulesCodeGenerator</codeph> in
			the package <codeph>com.odcgroup.visualrules.integration.generation</codeph>.
			This cartridge configures the code generator (telling it what package prefixes to use, for
			which Java version to generate, what folder to generate to, etc.) and launches it.
		</p>
		<note>
			Note that the <codeph>RulesInitializer.initCodeGenerationSettings()</codeph> method
			performs similar settigs for the code generator. This is done in order to avoid the rule
			files to change if the user runs the code generation, which would be an unexpected side effect.
			Nonetheless, in order to ensure that all settings are correct at generation time, the code
			cartridge checks all of them and corrects them if necessary.</note>
	</conbody>

</concept>
