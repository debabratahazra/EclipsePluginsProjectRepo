<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_ruledesigner_overview">
	<title>Overview</title>
	<prolog>
		<author type="creator">Kai Kreuzer</author>

		<metadata>
			<keywords>
				<indexterm>rule</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<p>
			The Rule Designer (Visual Rules) is an editor for business rules with a graphical tree-based approach.
		</p>
		<p>
			As Visual Rules (VR) is a third-party product and therefore is designed to work also stand-alone, it comes
			with many features that can also be found in the framework layer of Design Studio.
			For example, it comes with its own project nature, a validation builder, model migration support,
			its own problem marker types, preference settings etc.
		</p>
		<p>
			It is not always trivial to integrate these functionalities into Design Studio, but Innovations provides
			APIs for the most important points to programmatically change the behavior of Visual Rules or to trigger
			certain actions.
		</p>
		<section>
			<title>The Plug-ins</title>
			<p>The Visual Rules Integration is split into a several source plugin projects.</p>
			<simpletable>
				<sthead>
					<stentry>Source Plugin</stentry>
					<stentry>Description</stentry>
				</sthead>
				<strow>
					<stentry>com.odcgroup.visualrules.integration</stentry>
					<stentry>
						The source plugin project <b>visualrules-integration</b> contains all classes that
						provide the main integration of Visual Rules into Design Studio. This includes the
						integration into the DS Navigator, the context menus, the adaption of available
						functionality, the <xref href="DataTypeSync.dita">data type syncronisation</xref>, the rule code generation integration, etc.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.visualrules.generation</stentry>
					<stentry>
						The source plugin project <b>visualrules-generation</b> contains all OCS specific code
						generation cartridges that provide the glue code between OCS and VisualRules.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.visualrules.custo.core</stentry>
					<stentry>
						The source plugin project <b>visualrules-custo-core</b> contains all classes for the
						support of custo projects in Design Studio. The rules require a quite different handling
						for this than the other model types.
					</stentry>
				</strow>
				<strow>
					<stentry>com.odcgroup.visualrules.custo.ui</stentry>
					<stentry>
						The source plugin project <b>visualrules-custo-ui</b> contains all UI related classes
						and resources for the support of custo projects in Design Studio.
					</stentry>
				</strow>
			</simpletable>			
		</section>
		<section>
			<title>Rule Resources</title>
			<p>
				The VR integration registers a model type "rule" with the workbench, which results in a "rule"
				folder for storing the model resources. VR does not simply work with one file per rule (extension ".vrrule", but it
				also has a "root" file for a whole rule hierarchy (called the "rule model" by VR, file extension ".vrmodel").
				Further there is a file for each package (extension ".vrpackage").
			</p>
			<p>
				As VR might change these structures in future releases, this is not considered to be public.
				So the only "entry point" for Design Studio is the root vrmodel file.
				<codeph>The RuleProjectInitializer</codeph> creates a "rules" package inside the "rule" model folder
				(due to the fact that no resources should be places in the root package) and creates a rule model
				with a unique name "rules_123.vrmodel", where "123" is a hash in order to have a unique name.
				Besides the rule model an empty "dummy.rule" file is created, which is the only file treated by
				Design Studio as an IOfsModelResource and its main purpose is to have a DS rule resource for checking
				if migration is necessary.
			</p>
			<p>
				As the Visual Rules files are not supposed to be public, VR defines its own URI scheme for uniquely identifying
				rules and packages. These URIs are used throughout the VR API and are called <i>vrpaths</i>:
				<codeblock>vrpath:/rules_123/packagename/subpackage/rulename</codeblock>
				The root VR path for a model project can be determined with the following method:
				<codeblock>RulesIntegrationPlugin.getVRBasePath(IProject project)</codeblock>
				This will return a String like <codeph>vrpath:/rules_123</codeph>.
			</p>
		</section>
		<section>
			<title>VisualRulesIntegration API</title>
			<p>
				The <codeph>VisualRulesIntegration</codeph> class is the entry point to the VR API. It is used at
				many places in the visualrules-integration plugin. Details about this API can be found in the 
				Visual Rules integration documentation, which is included in every E(DS) installation.
			</p>
		</section>
		<section>
			<title>Rule Templates</title>
			<p>
				The VR integration includes a package rule project (core-rule-models), which contains some elements that
				are needed throughout rules in Design Studio. These are for example rule templates that are used when new
				rules are created (e.g. to make sure that a validation rule has the correct input and output parameters)
				and OCS specific actions as for collecting validation messages for the user feedback.
			</p>
			<p>
				This rule model is provided through a VR artifact provided and a dependency is transparently
				added to each model projects <codeph>pom.xml</codeph> through the <codeph>PomConverterObjectFactory</codeph>.
			</p>
		</section>
		<section>
			<title>Rule API / Internal Structure</title>
			<p>
				For accessing existing rules of a model project, the visualrules-integration plugin defines an API
				that can be found in the package <codeph>com.odcgroup.visualrules.integration.api</codeph>. This adds
				an abstraction layer on the contextual rule access and the internal structure in the rule model (i.e.
				the vrpath construction).
			</p>
			<p>
				This API provides methods like <codeph>RuleModelFacade.getRulesForEntity(...)</codeph> for a given
				category (e.g. "validation") and thus offers a convenient access to rule names for other plugins
				that require such information (like visualrules-generation to only generate glue code for existing
				rules).
			</p>
			<p>
				Internally, the rules are stored in a way that reflects the following vrpath syntax:
				<codeblock>vrpath:/rules_123/&lt;domainname&gt;/&lt;entityname&gt;/&lt;rulecategory&gt;/System</codeblock>
				for example
				<codeblock>vrpath:/rules_123/CDMAPP/DSParticipantCorporationValidation/System</codeblock>				
			</p>
		</section>
	</conbody>

</concept>
