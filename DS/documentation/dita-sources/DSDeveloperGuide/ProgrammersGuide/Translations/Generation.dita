<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="devguide_programmersguide_translationdesigner_generation">
	<title>Translations Generation</title>
	<prolog>
		<author type="creator">Alain Tripod</author>

		<metadata>
			<keywords>
				<indexterm>translation</indexterm>
			</keywords>
		</metadata>
	</prolog>

	<conbody>
	
		<section>
			<title>Translations Generation</title>
			<p>			
				The source plugin project <b>translation-generation</b>, under the package 
				com.odcgroup.translation.generation contains classes and resources related to 
				code generation for the translations defined in models. 
			</p>
			<p>
				Actually there are two kind of generator. The first is able to generate NLS messages
				for OCS. The second generator is able to export all translations into an Excel file.
			</p>
			<p>
				The principle of the generation mechanism it the following. Internally the generation 
				framework starts by collecting all translations declared
				in all models. For each translation a ITranslationKey is build and pass to the generator
				that generate the appropriate target code.
			</p>
		</section>

		<section>
			<title>Extension Points</title>
			<p>			
				The extension point "com.odcgroup.translation.generation.generator" must be used to 
				declare generation provider. The definition of this extension point is located in
				the file com.odcgroup.translation.generation.generator.exsd.
			</p>
			<p>
				Each declared generation provider must extends the class BaseTranslationGenerationProvider
				and implements the interface ITranslationGeneratorProvider.
			</p>
			<p>
				Each concrete translation generator must implements the interface ITranslationGenerator.
			</p> 
			<p>
				The extension point "com.odcgroup.translation.keyprovider" must be used to 
				declare specific translation keys providers. Each provider must extends the base class
				BaseTranslationKeyProvider and implements the interface ITranslationKeyProvider. The
				concrete TranslationKey must implement the interface ITranslationKey.
			</p>
		</section>

	</conbody>

</concept>
