<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="SdlcFdsTdsVersion_6_0_menudesigner">
	<title>Menu Designer</title>
	<body>
		<section>
			<title>Description</title>
			<p>
				The menu designer in Design Studio lets an end-user define menu definitions, add, modify, delete menu entries like menu tab, menu item, sub-menu item. This manages the menu definitions without the need to manually write and maintain the Menu.xml and adding it to the generated business activities.
The aim of menu designer is limited to menu definition only. The look and feel of menus is not under Design Studio responsibility but managed by Framework configuration. 

			</p>
		</section>
		<section>
			<title>FDS Link</title>
			<p>
				<xref
					href="https://lausvn.oams.com/cgi-bin/viewvc.cgi/devel/projects/doc/active/triplea_plus/6.0/03.%20Construction%20%28Design%29/FDS_DSR12_MenuDesigner.doc?view=log"
					scope="external">FDS_DSR12_MenuDesigner.doc</xref>
			</p>
		</section>
		<section>
			<title>JIRA Issue(s)</title>
			<p>
				<xref href="http://rd.oams.com/browse/DS-4302" scope="external">DS-4302</xref>
			</p>
		</section>
		<section>
			<title>TDS</title>
			<p>
				<i> Note: FDS references are in parenthesis	</i>
			</p>
			<b>1. Menu Designer - Data Model (FDS 6.0)</b>
			<p>Eclipse Modeling Framework (EMF) will be used to model the data model required for the Menu Designer. As requested in the FDS, the menu model's
			serialization format should not be XMI, but a textual format that is easy to compare and merge. As a result, the ecore model (project) must be 
			created through the Xtext wizard. A new Xtext project "com.odcgroup.menu.model" with the DSL "com.odcgroup.menu.model.Menu" will be created. The Menu.xtext
			file needs to be adapted to define the DSL syntax for menus (see (4)). An ecore model (menu.ecore) and an EMF generator model (menu.genmodel) based on the
			menu.ecore are automatically created when running the Xtext code generation workflow.  The generator model will be adapted such that the generated model
			and editor code will generated in the specified plug-ins and appropriate packages.  The generated model code comprises the interfaces and factory to create
			java classes, the concrete implementation of model interfaces, and the adapter factory.
			</p>
			<b>2. Menu Designer - Editor (FDS 6.2)</b>
			<p>
				EMF will be used to create a editor for the defined data model.  It generates a tree editor which holds good for the menu designer.  The same generator
				model (menu.genmodel)can be used to generate the editor code.  The generated editor code will go into plug-in "menu-editor" (com.odcgroup.menu.editor).
				The data model comprises a menu item element with attributes name, securityRole, pageflow, enabled, displayTabs and references to submenu items and translations.
			</p>
			<p>The generated editor code will be customized as per the requirements.  The contextual menu for the menu items in the editor has to be adapted
			to remove the default "New Child" and "New Sibling" actions.  The generated classes "com.odcgroup.menu.editor.ui.MenuActionBarContributor" and "com.odcgroup.menu.model.provider.MenuItemProvider" are
			adapted to include only "New Menu Item" action and remove the rest.
			</p>
			<p>The default generated icons are also replaced with a more suitable icons under the icons folder of the "menu-editor" plug-in</p>
			
			<p>The generated "com.odcgroup.menu.editor.ui.MenuEditor" is a multi page editor with several tabs.  This needs to be adapted to include only one tab with
			a tree view (root element being the root menu item).  </p>			
			<p>Ordering of Menu Items (FDS 6.2.1) behavior comes with the generated editor.
			</p>
			<p>Keyboard Shortcuts (FDS 6.2.2) : The class "com.odcgroup.menu.editor.ui.MenuActionBarContributor" will be adapted to support key-board shortcuts like 'insert' key, 'delete' key and Ctrl-Up/Down  keys </p>
			<p>A double-click listener which implements org.eclipse.jface.viewers.IDoubleClickListener has to be
			added to the tree viewer.  This is required to open referenced pageflows (FDS 6.2.3)</p>
						
			<b>3. DS Model Project - Menu Entries (FDS 6.1)</b>
			<p>In order to define the menu definitions for a model project, all the model projects in the DS Navigator should provide a new model folder ‘Menus’ with a “Default” package (e.g. folder) representing the default WUI profile. 
			</p>
			<p>
				This is done by adding an extension "com.odcgroup.workbench.core.model" to the "menu-model" plugin.  A project initializer "com.odcgroup.menu.init.MenuModelProjectInitializer" is also required
				which creates the default package for DS model project.  This extension point also adds "New Package" contextual menu entry to define new packages under
				the menu model folder.
			</p>
			<p>
			Each DS project can have multiple menu entries per profile and activitiy.  Packages can be defined in the menus folder.  Menu definitions are created using
			a new menu creation wizard inside a package under menu model folder of the DS Navigator.  An action provider "com.odcgroup.menu.editor.wizard.MenuActionProvider"
			 needs to be defined for the extension "org.eclipse.ui.navigator.navigatorContent".  The classes that are required for this behavior are as follows
			 <ul>
			 	<li>com.odcgroup.menu.editor.wizard.MenuAction</li>
			 	<li>com.odcgroup.menu.editor.wizard.MenuActionProvider</li>
			 	<li>com.odcgroup.menu.editor.wizard.NewMenuWizard</li>
			 	<li>com.odcgroup.menu.editor.wizard.NewMenuWizardPage</li>
			 </ul>
			</p>
			<p>Only one menu can be possible per package.  Once a menu is created in a package "Create Menu" action should be disabled.  This is achieved in the MenuAction class.
			</p>
			<b>4. Textual DSL (FDS 6.3)</b>
			<p>The Menu.xtext file must contain the DSL syntax definition. All DS DSLs share some common grounds, so the first thing to do is to make the Menu DSL use the Workbench Common DSL.
			In order to be easy to understand for DS users that already know other DS DSLs, the syntax should be kept similar to the Page DSL syntax. Here's a starting point (details to be 
			discussed with BAs):</p>
			<codeblock>
grammar com.odcgroup.menu.model.Menu with com.odcgroup.workbench.dsl.Common hidden(WS, ML_COMMENT, SL_COMMENT) 

import "http://www.odcgroup.com/menu/model/Menu"

MenuRoot returns MenuRoot:
	'metamodelVersion' '=' metamodelVersion=String_Value 
	rootItem = MenuItem
;

MenuItem returns MenuItem:
	name=ID  
	('pageflow' '=' pageflow=String_Value)? 
	('enabled' '=' enabled=Enabled)? 
	('displayTabs' '=' displayTabs?='true')? 
	('securityRole' '='securityRole=String_Value)?
	('labels' labels+=Translation ( "," labels+=Translation)*)?
	('{' 
		(submenus+=MenuItem (submenus+=MenuItem)*)?
    '}')?
;
	
Translation:
	language=ID '=' message=String_Value
;

enum Enabled:
	true | false | conditional
;

String_Value :
	STRING | ID | VALUE | URI;
	
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '#' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;
</codeblock>
			<p>
				Menu model files must be serialized with UTF-8 encoding. In order to do so, a class MenuResource needs to be defined which extends AbstractDSLResource.
				This MenuResource must be registered as the resource implementation to use for menu models in the MenuRuntimeModule. Furthermore, the DSLEncodingProviderProvider must be
				registered as the provider for IEncodingProvider (similar as in PageRuntimeModule).
			</p>
			<p>Besides the project "com.odcgroup.menu.model", Xtext automatically generates the projects "com.odcgroup.menu.model.ui" and "com.odcgroup.menu.model.tests".
			These should be adapted to DS (e.g. update MANIFEST.MF), but the names and structures should be kept, so that Xtext code regeneration won't get into trouble.
			The generated UI project has a couple of extensions, which register a textual editor for menu files. Most of these extensions can and should be deactivated. 
			Unit tests for the DSL syntax should go into the "tests" project.</p>
			<b>5. Properties View (FDS 6.5)</b>
			<p>
				New Property sections will be defined for the menu-item element by creating an extension point "org.eclipse.ui.views.properties.tabbed.propertySections".
				The new property sections include "com.odcgroup.menu.editor.properties.MenuItemGeneralSection" and "com.odcgroup.menu.editor.properties.MenuItemTranslationSection".
				The property sections are based on the implementations in the plug-in "workbench-editors-properties".  This also requires extensions that extend
				"org.eclipse.ui.views.properties.tabbed.propertyContributor" and "org.eclipse.ui.views.properties.tabbed.propertyTabs" as well.
			</p>		
			<b>6. Validation Rules (FDS 6.6)</b>
			<p>
				A new plug-in "menu-validation"  will be created with a dependency on "workbench-validation".  An extension for "org.eclipse.emf.validation.constraintProviders" will
				be defined specific to menu model validations.  The class "com.odcgroup.menu.validation.MenuConstraints" extending "org.eclipse.emf.validation.AbstractModelConstraint"
				is created which holds all the validation check implementations specified in the FDS
			</p>	
			<p></p>
			<b>7. Code Generation (FDS 8.0)</b>
			<p>A new plug-in "menu-generation" with a dependency on "workbench-generation" will be created with an extension that specifies an model to code catridge.  The class "com.odcgroup.menu.generation.MenuGenerator" that implements com.odcgroup.workbench.generation.cartridge.CodeGenerator
			will be created.  oAW specific template files and workflow files are created as required for code generation.</p>		
			<p>An extension for "com.odcgroup.translation.generation.keyprovider" will also be created for the translation key generation that match the menu items</p>
		</section>
	</body>
</topic>
 