<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="SdlcFdsTdsVersion_6_0_enumenhancements">
	<title>Enumeration Enhancements - Radio Button Widget changes</title>
	<body>
		<section>
			<title>Description</title>
			<p>
				To display enumeration based dataset properties as Radio Buttons in Page Designer.
			</p>
		</section>
		<section>
			<title>FDS Link</title>
			<p>
				<xref
					href="https://lausvn.oams.com/cgi-bin/viewvc.cgi/devel/projects/doc/active/Design_Studio/5.0/03.%20Construction%20%28Design%29/FDS_DS5.0-EnumerationsEnhancements.doc?view=markup"
					scope="external">FDS_DS5.0-EnumerationsEnhancements.doc</xref>
			</p>
		</section>
		<section>
			<title>JIRA Issue(s)</title>
			<p>
				<xref href="http://rd.oams.com/browse/DS-2967" scope="external">DS-2967</xref>
			</p>
		</section>
		<section>
			<title>TDS</title>
			<p>
				<i> Note: FDS references are in parenthesis	</i>
			</p>
			<b>1. Radio Button widget properties (FDS 4.1.2.1)</b>
			<p>
				Property Type 'domainAttribute' has to be added to the <codeph>xgui-widget-library.metamodel</codeph> found in the page-metamodel plugin. A new property type
				'enumValue' with a display name 'Enumerated Value', data type 'String' and category 'general' is added to the <codeph>xgui-widget-library.metamodel</codeph>.  This property type
				is then added to the radio button widget.
			</p>
			<p>The widget template for radio button in <codeph>xgui-widget-library.metamodel</codeph> is adapted to set the default value for Horizontal Text Alignment property.  Rest of the
			properties are fine or to have required properties when a new .
			</p>
			<b>2. Property Filter (FDS 4.1.2.1)</b>
			<p>
				A new property filter class<codeph>com.odcgroup.page.model.filter.RadioButtonPropertyFilter</codeph> needs to be created to hide certain properties of
				the radio button widget when the domainAttribute property is set.  These properties include 'selected', 'bean-name', 'bean-property' and 'Group'.
				This property filter class implements <codeph>com.odcgroup.page.model.filter.PropertyFilter</codeph> interface.  The implementation on how to hide certain 
				properties can be referenced from other implementations like AttributePropertyFilter, CheckboxPropertyFilter classes found under the same package.
			</p>
			<b>3. Creation of Radio Button widgets (FDS 4.1)</b>
			<p>As per the FDS, when the domain attribute for a radio button is set and the domain attribute is of type enumeration then the system should display
			all permitted values in the editor. This means, the system should display as many radio buttons as the enumeration values in the enumeration.
			</p>
			<p>
			Creation of radio buttons on setting the domain attribute property can be done through the PropertySourAdapter implementation of the adapted property.
			In our case it would be the <codeph>com.odcgroup.page.ui.properties.DomainAttributePropertySourceAdapter</codeph>.  The methods setPropertyValue(Object newValue)
			and resetPropertyValue() needs to be adapted as per our requirement.  Creation of new widgets can be done using <codeph>com.odcgroup.page.ui.command.CreateWidgetCommand</codeph> 
			classes appended to CompoundCommand.
			</p>
			<p>
			The pseudo-code for creation of new radio button
			<codeblock>
MetaModel metamodel = MetaModelRegistry.getMetaModel();
WidgetLibrary library = metamodel.findWidgetLibrary("xgui");
WidgetTemplate template = library.findWidgetTemplate(WidgetTypeConstants.RADIO_BUTTON);
WidgetFactory factory = new WidgetFactory();
Widget field = factory.create(template);
int i = getWidget().getIndexOfSelectedChild();
CreateWidgetCommand cwc = new CreateWidgetCommand(getWidget().getParent(), field, i+1, new Point());
cc.add(cwc);
			</codeblock>
			While creating the new widget, ensure the values for properties 'enumValue', 'bean-name', 'bean-property' and 'group' are set accordingly. These properties
			are dependent on the domain attribute and the respective enumeration value.
			</p>
			<p>
			The resetPropertyValue() method needs to be properly adapted to ensure undo functionality to revert back the changes.
			</p>
			<b>4. Translation Support (FDS 4.1.2.1)</b>
			<p>
				The labels of radio buttons based on the enum value of Enumeration typed domain attribute must support domain translations and overriding them.  The class
				<codeph>com.odcgroup.page.model.translation.WidgetTranslationProvider</codeph> needs to be adapted to facilitate this functionality. A special case
				needs to be added like the one for TableColumn and MatrixCellItem widgets in the newTranslation(...) method. 
			</p>	
			<b>5. Validation Rules (FDS 4.1.3)</b>
			<p>
				Creation of radio buttons upon setting the domain attribute is constrained to only attributes of type boolean and enumeration only.  If any other
				type is set, it much raise an error.  This constraint can be checked while creating the new radio-buttons in the DomainAttributePropertySourceAdapter.
				The validation check has to be specified in PageWidgetValidator class of the page-validation plugin.
			</p>	
			<p></p>
			<b>6. XSP Generation (FDS 4.1.4)</b>
			<p>The transformer class "com.odcgroup.page.transformmodel.RadioButtonWidgetTransformer" is adapted to ensure the generation is done as per the template
			specified in the FDS.</p>		
			
		</section>
	</body>
</topic>
 