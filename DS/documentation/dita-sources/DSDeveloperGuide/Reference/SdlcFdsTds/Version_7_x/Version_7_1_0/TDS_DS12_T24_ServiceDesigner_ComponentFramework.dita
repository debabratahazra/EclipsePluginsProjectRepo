<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd">
<topic id="SdlcFdsTdsVersion_7_1_0_ServiceDesigner_ComponentFramework">
	<title>DS T24 Service Designer and Component Framework</title>
	<body>
		<section>
			<title>Description</title>
			<p>This document talks about the design and development of DS T24 Service Designer and Component Framework Feature.
				The aim is to is to integrate the existing current Ant-based T24 Component Framework Code Generation as a Cartridge
				into Design Studio for T24</p>
		</section>
		<section>
			<title>FDS Link</title>
			<p>
				<xref href="https://docs.google.com/document/d/1OeSQYgWAnIrnvvwMdmkwxqI6zpPZIKPMnxd8f6CtCSQ/edit" scope="external">FDS_DS12_Service_Designer_Component_Framework</xref>
			</p>
		</section>
		<section>
			<title>JIRA Issue(s)</title>
			<p>
				<xref href="http://rd.oams.com/browse/DS-5043" scope="external">DS-5043</xref>
			</p>
		</section>
		<section>
			<title>TDS</title>
			<p>
				<i> Note: FDS references are in parenthesis </i>
			</p>
		</section>
		<section>
			<b>1. Service Designer - Data Model</b>
		</section>
		<section>
			<p>
				Textual Modeling Framework (TMF) will be used to model the data model required for the Service Designer.
				The service model's serialization format should not be XMI, but a textual format that is easy
				to compare and merge. As a result, the ecore model (project) must be created through the Xtext wizard. A new Xtext
				project "com.odcgroup.service.model" with the DSL "com.odcgroup.service.model.Service" will be created.
				The Service.xtext file needs to be adapted to define the DSL syntax for services (see section 4). An ecore model
				(Service.ecore) and an EMF generator model (Service.genmodel) based on the Service.ecore
				are automatically created when running the Xtext code generation workflow. The generator model will be adapted such
				that the generated model and editor code will generated in the specified plug-ins and appropriate packages.
				The generated model code comprises the interfaces and factory to create java classes, the concrete implementation of
				model interfaces, and the adapter factory.
      		</p>

			<p>
				A new node for a new type of models is introduced in the Design Studio models projects Navigator, labeled
				“Services”.
				Under Services/ an end-user user can create New Packages, just like we have under Domains etc. today.
				Inside (Sub)Packages under Services/, one can create “New Service”. This action creates a new *.service model file.
				This is a DSL with the structure (see section 4) in a textual editor with syntax highlighting and auto-completion
				content assist.
      		</p>
		</section>
		<section>
			<b>2. Service Designer - Editor</b>
		</section>
		<section>
			<p>
				DSL Editor (XText) will be used as a editor for the defined data model. The generated
				editor code will go into plug-in com.odcgroup.service.model.ui.
				The data model comprises a service item element which will have a number of
				operations. Each operation can have input, output parameters and a return type.
				The generated editor code will be customized as per the requirements.
			</p>
			<p>
				The default generated icons are also replaced with a more suitable icons under the icons folder of the
				"com.odcgroup.service.model.ui" plug-in
			</p>
			<p>
				The XText editor is a single page text editor. The editor will have features like content assist and syntax
				coloring.
			</p>
			<b>Content Assist</b>
			<p>
				Content Assistance allows users to fetch the related contents by typing Ctrl + Space, by default the xtext logic
				of content assist will be in place and we will write our implementation to provide filtered options to users. Grammar
				written in Service.xtext (See section 4) will be used to provide the contents during content assistance.
			</p>
			<b>Syntax Highlighting</b>
			<p>
				The contents in the XText editor will be highlighted by colors respective to the identified content.
				Highlighting would be done to Service Model elements, Documentation and the keywords (Java/C/C++)
			</p>
		</section>
		<section>
			<b>3. DS Model Project - Service Entries</b>
			<p>In order to define the service definitions for a model project, all the model projects in the DS Navigator should
				provide a new model folder ‘Services’ with a
				“Default” package (e.g. folder). 
			</p>
			<p>
				This is done by adding an extension "com.odcgroup.workbench.core.model" to the "service-model" plugin.
				A project initializer "com.odcgroup.service.model.init.ServiceModelProjectInitializer" is also required
				which creates the default package for DS model project. This extension point also adds "New Package" contextual menu entry to
				define new packages under the service model folder.
			</p>
			<p>
				Each DS project can have multiple service entries. Packages can be defined in the services folder. Service
				definitions are created using a new service creation wizard inside a package under service model folder of the DS
				Navigator. An action provider "com.odcgroup.service.model.ui.ServiceActionProvider"
				needs to be defined for the extension "org.eclipse.ui.navigator.navigatorContent". The classes that are required for this
				behavior are as follows
				<ul>
					<li>com.odcgroup.service.model.ui.ServiceAction</li>
					<li>com.odcgroup.service.model.ui.ServiceActionProvider</li>
					<li>com.odcgroup.service.model.ui.ServiceWizard</li>
					<li>com.odcgroup.service.model.ui.wizard.ServiceWizardPage</li>
				</ul>
			</p>
			<p>Any number of services can be created in a package.
			</p>
		</section>
		<section>
			<b>4. Textual DSL</b>
			<p>
				The Service.xtext file must contain the DSL syntax definition. All DS DSLs share some common grounds, so the first
				thing to do is to make the Service DSL use the Workbench Common DSL.
				In order to be easy to understand for DS users those who already know other DS DSLs, the syntax should be kept similar to
				the Page DSL syntax. Here's a starting point...
			</p>
			<codeblock>
				grammar com.odcgroup.service.model.Service with com.odcgroup.workbench.dsl.Common hidden(WS, SL_COMMENT)

				import "platform:/resource/com.odcgroup.service.model/mdf.ecore" as mdf
				import "http://www.eclipse.org/emf/2002/Ecore" as ecore

				generate service "http://www.odcgroup.com/service/model/Service"

				Service:
				(documentation=Documentation)?
				'Service' name=ID
				(annotations+=Annotation)*
				'metamodelVersion' metamodelVersion=String_Value
				(operations+=Operation)*;

				Operation:
				(documentation=Documentation)?
				name=ID
				(annotations+=Annotation)*
				'(' (arguments+=Argument (',' arguments+=Argument)*)? ')'
				retType=ReturnType;

				ReturnType:
				(documentation=Documentation)?
				':' type=[mdf::MdfEntity|EntityRef]
				(annotations+=Annotation)*;

				Argument:
				(documentation=Documentation)?
				(inout=InOutType)?
				name=ID
				type=[mdf::MdfEntity|EntityRef]
				(multiplicity=Multiplicity)?
				(annotations+=Annotation)*;

				Documentation returns ecore::EString :
				ML_DOC;

				Annotation:
				'@' namespace=ID ':' name=ID ('(' properties+=AnnotationProperty (',' properties+=AnnotationProperty)* ')')?;

				AnnotationProperty:
				name=String_Value ('=' value=String_Value)?;

				enum InOutType:
				IN = 'IN' |
				OUT = 'OUT' |
				INOUT = 'INOUT';

				enum Multiplicity:
				OPTIONAL = '[0..1]' |
				MANY = '[0..*]' |
				MANDATORY = '[1..1]' |
				ONETOMANY = '[1..*]';


				EntityRef : ID (':' ID)?;

				// Terminals

				terminal ML_DOC : '/*' -> '*/';

				terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;

				terminal WS : (' '|'\t' | '\r' | '\n')+;
	</codeblock>
		</section>
		<section>
		<b>5. Code Generation</b>
		<p>
			A new plug-in "service-generation-t24" with a dependency on "workbench-generation" will be created with an extension that specifies
			an model to code cartridge. As per the FDS requirement we will have 4 code generation cartridges as defined below.		
		<ul>
			<li>com.odcgroup.service.generation.t24.internal.cartridges.jbc.JBCCodeGenerator (jBC)</li>			
			<li>com.odcgroup.service.generation.t24.internal.cartridges.cpp.CPPCodeGenerator (CPP)</li>
			<li>com.odcgroup.service.generation.t24.internal.cartridges.java.JavaCodeGenerator (Java)</li>
			<li>com.odcgroup.service.generation.t24.internal.cartridges.tafc.TAFCCodeGenerator (TAFC)</li>
			<li>com.odcgroup.service.generation.t24.internal.cartridges.tafj.TAFJCodeGenerator (TAFJ)</li>
		</ul>
		</p>
		<p>
			These code cartridges will be listed in Design Studio project properties page in a separate category "Component Framework".
			We will use "apiGen" templates to generate code for this cartridges.
		</p>
		</section>
	</body>
</topic>
   