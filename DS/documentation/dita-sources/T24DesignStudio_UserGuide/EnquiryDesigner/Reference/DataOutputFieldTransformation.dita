<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "http://docs.oasis-open.org/dita/dtd/reference.dtd" []>
<reference id="EnquiryDataOutputFieldtransformation">
	<title>Data Output Field transformation properties</title>
	<prolog>
		<author type="creator">Olivier Cevaer</author>
		<metadata>
			<keywords>
				<indexterm>Enquiry Data Output Field transformation properties</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<refbody>
		<section>
			<table pgwide="0">
				<tgroup id="TableGroup" cols="3">
					<colspec colname="Label" colwidth="10*" />
					<colspec colname="Description" colwidth="60*" />
					<colspec colname="Values" colwidth="100*" />
					<thead>
						<row id="TableHeader">
							<entry id="label" colname="Label" valign="top">Label, DSL Property, T24 Field</entry>
							<entry id="description" colname="Description" valign="top">Description</entry>
							<entry id="values" colname="Values" valign="top">Possible Values</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>Conversion Type / field.conversion / CONVERSION</entry>
							<entry>
								Allows data to be converted prior to display.
								<p>The conversion operation allows the manipulation of the result of an enquiry operation. The result of the
									conversion is then stored in the enquiry field.
								</p>
							</entry>
							<entry>
								<ul>
									<li>
										<i>Extract From N1 To N2 Delimited By X</i>
										<ul>
											<li>With delimiter (FIELD(F) X,N1,N2): Extract from the data, delimited by X, the N1th field to the N2th.
											</li>
											<li>Without delimiter (EXTRACT(E) N1, N2): Extract from the data starting at position N1 for N2 bytes </li>
										</ul>
									</li>
									<li>
										<i>Decrypt: </i>
										(DECRYPT) inform T24 that this field is sensitive and the routine
										attached to the field ENQ.DECRYPT.RTN in
										EB.ENC.PARAMETER parameter table is to be called either for
										decrypting
										or masking the data Field.Name must be a
										valid field name in the enquiry
									</li>
									<li>
										<i>Calculate Fixed Rate, field ccy:</i>
										(UTIL(U) FIXEQU,ccy) returns the equivalent value of an amount in a currency contained in the field ccy
										field.
										The
										rate used is the FIXED.RATE defined in the CURRENCY record. If no FIXED.RATE is specified a null
										value is
										returned.
									</li>
									<li>
										<i>Get Fixed Rate:</i>
										(UTIL (U) FIXRTE,ccy field): Returns the rate used to convert an amount to the Fixed currency specified in the
										CURRENCY
										held in the field ccy field. If no fixed rate is defined, a null value is returned.
									</li>
									<li>
										<i>Get Fixed Currency, field ccy:</i>
										(UTIL(U) FIXCCY,ccy) returns the equivalent currency linked to the currency defined in the field ccy
										field. If
										there is no FIXED.CCY defined, no value is returned.
									</li>
									<li>
										<i>Julian:</i>
										(JULIAN) convert the data from YYYYMMDD format to system internal format.
									</li>
									<li>
										<i>Repeat On Null:</i>
										(REPEAT) repeat previous data if current data is null - but only for the second and subsequent multi and
										subvalues -
										<p>note: If the field you are displaying is subvalued then you will get repitition of mvalue=2 and
											svalue=1
											(providing the data is null) because the mvalue is greater than one. If you do not want this then use
											THe
											Repeat Sub type.
											SUB
										</p>
									</li>
									<li>
										<i>Repeat Sub: </i>
										(REPEAT SUB) repeat previous data if current data is null - only if the subvalue number is greater than one
									</li>
									<li>
										<i>Repeat Every:</i>
										(REPEAT EVERY) repeat previous data if current data is null - regardless of multi/subvalue number
									</li>
									<li>
										<i>Absolute:</i>
										(UTIL ABS) return the Absolute value of an amount.
									</li>
									<li>
										<i>Basic O:</i>
										(OCONV XXX) convert data using Basic OCONV instruction XXX. See Basic manual
									</li>
									<li>
										<i>Basic I:</i>
										(ICONV XXX) convert data using Basic ICONV instruction XXX. See Basic manual.
									</li>
									<li>
										<i>Value X, Y:</i>
										(VALUE X,Y) Extract value X, sub-value Y from the data.
									</li>
									<li>
										<i>Replace, Old data, New Data:</i>
										(SUBSTITUTE (S) X,Y) if the data equals X then replace it with Y.
									</li>
									<li>
										<i>Get From, Applicaiton, Field, Language:</i>
										(LINK (L) XXX,YYY): Access application XXX using the current data as the key and return field name YYY as
										defined in the
										STANDARD.SELECTION record for XXX. Do not specify F. or company mnemonic in file name. Field
										Name YYY may
										be a
										data field or an I or J descriptor defined in the Standard Selection record of the application
										XXX.
										<p>
											Note that if a
											multi
											or
											sub valued item is returned from a Get From conversion type, the multi and sub values
											are converted to spaces,
											so the
											result cannot be displayed in separate lines.
										</p>
									</li>
									<li>
										<i>Call Routine, Routine:</i>
										(@ XXX) call user subroutine XXX.
									</li>
									<li>
										<i>Match Field, Pattern, Value:</i>
										(UTIL (U) MATCHFIELD XXX YYY) perform Basic MATCHFIELD function on XXX and YYY. Example: Match Field
										"0X\'CCY\'0X" "2". See Basic manual
									</li>
									<li>
										<i>Convert, old Data, New Data</i>
										CONVERT X,Y: Replace every occurrence of the character X with Y.
									</li>
								</ul>
							</entry>
						</row>
						<row>
							<entry>Operation Type  / field.operation / OPERATION</entry>
							<entry>
								Defines the enquiry instruction.
							</entry>
							<entry>
								<ul>
									<li>
										<i>Break At Line, Line NN:</i>
										(BREAK LINE NN) break when line NN has been exceeded.
									</li>
									<li>
										<i>Break On Change, Field XXX:</i>
										(BREAK CHANGE XXX) Break on change of enquiry field XXX.
									</li>
									<li>
										<i>Constant, Value xxx:</i>
										("xxx") use the constant contained in Value xxx.
									</li>
									<li>
										<i>Decision, Left Field, Operand, Right Field, First Field, Second Field:</i>
										(IF AA GT BB XXX YYY) Decision process.
										If left field AA is greater than right field BB then
										process enquiry
										field XXX else process enquiry
										field YYY.
										Field is Subvalued to allow the decision criteria to span
										more than a
										single line for clarity.
									</li>
									<li>
										<i>Calculuate, First Field AA, Operand + , Second Field BB</i>
										(CALC) Applies the operand (+) between first field AA and second field B.
										List of operands: | '-' | '/' | '*' |
										':'
										<ul>
											<li>'+': add</li>
											<li>'-': substract </li>
											<li>'/': divide</li>
											<li>'*': multiply</li>
											<li>':': concatenate</li>
										</ul>
									</li>
									<li>
										<i>Application Field, Field</i>
										(FIELD.NAME) Dynamically locates the field reference by using:
										FILE.NAME's STANDARD.SELECTION record.
									</li>
									<li>
										<i>Extract Field, Field</i>
										(FIELD XXX): Extract current value of enquiry field XXX.
									</li>
									<li>
										<i>Selection, Field</i>
										(SELECTION XXX): Return the value of the SELECTION.FIELD XXX entered in the selection criteria.
									</li>
									<li>
										<i>Field Numner, Number</i>
										(FIELD.NO) Field reference in Numeric format. (0 - ID) (Not recommended only use in cases where the (1-999)
										record is built by a routine and does not follow the layout of the file used - see USE.FIELD.NUMBERS)
									</li>
									<li>
										<i>Descriptor, Field</i>
										(IDESC XXX) Execute the I-descriptor defined in the STANDARD.SELECTION record of the FILE,
										as a Type I or J
										item, with the FIELD.NAME XXX.
										The result is returned in the same way as if the field was extracted from the
										record.
									</li>
									<li>
										<i>Descriptor, Field</i>
										(TOTAL XXX) Total enquiry field XXX.
									</li>
									<li>
										<i>Date Variables, Variable</i>
										Three possible variables available:
										<ul>
											<li>Today: (!TODAY) Extract todays date.</li>
											<li>Last Working Day: (!LAST.WORKING.DAY) Extract last working day. </li>
											<li>Next Working Day: (!NEXT.WORKING.DAY) Extract next working day.</li>
										</ul>
									</li>
									<li>
										<i>System Variables, Variable</i>
										Four possible variables available:
										<ul>
											<li>User: (!USER) Extract current user id.</li>
											<li>Company: (!COMPANY) Extract current company id. </li>
											<li>Language: (!LANGUAGE) Extract user's language code..</li>
											<li>Local Currency: (!LOCAL.CCY) Extract local currency code.</li>
										</ul>
									</li>
								</ul>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
	</refbody>
	<related-links>
		<link href="../Concept/EnquiryModel.dita" />
		<link href="../Task/Tasks.dita" />
	</related-links>
</reference>
