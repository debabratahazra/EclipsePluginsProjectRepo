<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="getting_started_with_packager">
	<title>Getting Started with packager</title>
	<prolog>
		<metadata>
			<keywords>
				<indexterm>packager</indexterm>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section conref="./concepts/Packager.dita#concept-29-08-2014--16-03-57/section-PackagerConcept" />
		<section>
			<p>
				Part of this Design Studio help guides you through a packager example which exposes a small part of
				T24 data that
				can
				be deployed to a T24 environment.
				Packaging process is structured around following steps:
				<ul>
					<li>
						Setting-up your T24 environment:
						It is advised to run on your machine a development T24
						environment you
						can use
						for validating your
						changes. The final package is aimed to be deployed on other T24 environments;
						validation,
						integration, production, mostly on remote servers.
					</li>
					<li>
						Setting-up your workspace:
						Your workspace is a folder on your machine holding all your
						projects required for the
						packaging.
					</li>
					<li>Bringing T24 Data records into your workspace:
						This part is about completing the package with additional T24
						artifacts, building a coherent business package to deploy.
					</li>
					<li>Modifying artifacts in your workspace:
						This chapter is about applying changes from Design Studio IDE on any kind
						of
						artifacts composing package.
					</li>
					<li>Packaging and deploying:
						After you have validated the changes against T24 development environment, you can
						create and deploy the package on
						one or many environments.
					</li>
				</ul>
			</p>
			<p>
				<b>Setting-up your environment:</b>
				<ul>
					<li>
						<xref href="../Workbench/Task/Technical/ReloadingT24Binaries.dita">Load T24 Binaries on your local installation.</xref>
					</li>
					<li>
						If your are running TAFJ environment,
						<xref href="../TAFJ/tasks/TAFJSetup.dita">setup TAFJ plug-in in your IDE.</xref>
					</li>
					<li>
						Start your T24 environment used for development:
						<ul>
							<li>TAFC: Agent</li>
							<li>TAFJ: database and web server.</li>
						</ul>
					</li>
					<li>
						Make sure you update the field SPF SYSTEM record, setting CACHE.EXPIRY field to 0. This avoids web server
						restarts due to caching issues.
					</li>
					<li>
						You can start the T24 browser:
						for instance, entering URL;
						<filepath>http://localhost:9089/BrowserWeb/servlet/BrowserServlet</filepath>
						with user: SSOUSER1 and password: 123456
					</li>
				</ul>
			</p>
			<p>
				<b>Setting-up your workspace:</b>
				<ul>
					<li>
						Create your projects from delivered packager template:
						<xref href="./tasks/CreatingDemoPackager.dita"></xref>
					</li>
					<li>
						For TAFJ installation, :
						<xref href="../TAFJ/tasks/TAFJToogle.dita">Toogle your project ft-custosample-data-code to TAFJ nature.</xref>
					</li>
					<li>
						Set the connection parameters to T24:
						<xref href="./../Workbench/Task/DeployingApplication/AddingServer.dita">Add T24 server</xref>
					</li>
				</ul>
				It is recommended to organize your projects;
				<filepath>-models</filepath>
				and
				<filepath>-data-code</filepath>
				, by component name.
			</p>
			<p>
				<b>Bringing T24 Data records into your workspace:</b>
				<ul>
					<li>
						Packager template models
						project already contains T24 standard applications. You can
						<xref href="./../DomainDesigner/tasks/ImportingApplications.dita">import your applications</xref>
						from your T24 environment.
						For instance,
						you can import the
						<varname>AA.ARR.ACCOUNT</varname>
						application
						by setting "AA.ARR.ACC*" in the Application filter
						and place it in:
						<filepath>ft-custosample-models\Applications\AA_Account\.</filepath>
					</li>
					<li>
						You may need to import your local fields and local ref. from T24, overriding the standard ones provided in
						packager
						template:
						<ul>
							<li>
								<xref href="./../DomainDesigner/tasks/ManagingLocalRef/ImportingLocalFieldDefinition.dita">Import local Field Definition (LOCAL.TABLE)</xref>
							</li>
							<li>
								<xref href="./../DomainDesigner/tasks/ManagingLocalRef/ImportingLocalRefApplication.dita">Import Local Ref (LOCAL.REF.TABLE)</xref>
							</li>
						</ul>
					</li>
					<li>
						Packager template models
						project already comes with standard Help text for applications. You can import your own
						T24
						documentation for
						applications:
						<xref href="../DomainDesigner/tasks/ImportingHelpText.dita">Import help text</xref>
						. The domain files are updated with your documentation. This will help you when designing screens and enquiries
						for picking the appropriate application fields.
						Note that this help text won't be packaged and then deployed on
						other environments.
					</li>
					<li>
						Packager template models
						projects provides few samples of standard screens and enquiries. You can of course import
						your
						own models from
						T24 environment:
						<ul>
							<li>
								<xref href="./../VersionDesigner/Task/ImportingVersions.dita">Import Screens</xref>
							</li>
							<li>
								<xref href="./../EnquiryDesigner/Task/ImportingEnquiries.dita">Import Enquiries</xref>
							</li>
						</ul>
					</li>
					<li>
						You can add to your project
						<filepath>ft-custosample-data-code</filepath>
						all the data records and Basic source you need to package.
						You can simply copy all your Basic code files
						in
						that
						project as they already are text files.
						Hereafter are the steps for
						retrieving
						records from
						your T24 environment:
						<ul>
							<li>
								TAFC:
								<ul>
									<li>
										<xref href="../T24BasicIDE\tasks\T24DataFile.dita">Extract Data file</xref>
									</li>
									<li>
										<xref href="../T24BasicIDE\tasks\T24Object.dita">Create T24 Objects and methods or subroutines</xref>
									</li>
								</ul>
								You can deploy your changes
								<xref href="../T24BasicIDE\tasks\SyncToT24.dita">by synchronizing with T24</xref>
							</li>
							<li>
								TAFJ:
								<ul>
									<li>
										<xref href="./tasks/ExtractingDataRecordsFromIDE.dita">Extracting data records</xref>
										You also can
										<xref href="./tasks/ExtractingDataRecordsInBulk.dita">extract data records in bulk mode.</xref>
									</li>
									<li>
										You can copy your routines in your workspace or you can create
										new T24 routine / component.
										For more details,
										please refer to TAFJ-Eclipse documentation.
									</li>
								</ul>
							</li>
						</ul>
					</li>
				</ul>
			</p>
			<p>
				<b>Modifying any kind of artifacts in your workspace:</b>
				<ul>
					<li>
						Changes on basic code and data records
						<filepath>(ft-custosample-data-code</filepath>
						project):
						<ul>
							<li>
								You can change a data record by simply editing it.
								for instance, open the
								<filepath>F.PGM.FILE!T24MONITOR.DISPATCHER.TEST.d</filepath>
								you can find in
								<filepath>.\src\Data\Model\FT_Modelbank</filepath>
								with text editor or JED editor (TAFJ) and append “Demo Pck” to the “@T24MONITOR.DISPATCHER”.
							</li>
							<li>
								Design Studio, thanks to TAFJ or TAFC plugins, provides support to Basic code.
								You can then edit,
								compile and run
								your Basic
								code in T24 environment you declared in your workspace.
								For instance, you can compile from the IDE the
								<filepath>V.FT.VALIDATION.b</filepath>
								routine you can find in
								<filepath>./src\Source\Private\FT_Modelbank\V.FT.VALIDATION.b</filepath>
							</li>
						</ul>
					</li>
					<li>
						Changes on models
						(
						<filepath>ft-custosample-models</filepath>
						project):
						<ul>
							<li>
								<xref href=".\tasks\DemoSamples\CreatingNewLocalRef.dita">You can add an example of new local ref</xref>
								.
							</li>
							<li>
								You can
								<xref href=".\tasks\DemoSamples\AmendingScreen.dita">amend a screen</xref>
							</li>
							<li>
								You can
								<xref href=".\tasks\DemoSamples\CreatingNewScreen.dita">create a new screen</xref>
							</li>
							<li>
								The same way,
								<xref href="../EnquiryDesigner\Task\AmendingEnquiry.dita">you can amend enquiry(ies)</xref>
							</li>
							<li>
								<xref href="./tasks/DemoSamples\CreatingNewEnquiry.dita">create a new enquiry</xref>
							</li>
						</ul>
					</li>
					<li>
						You can check that the
						<xref href="../Workbench\Task\DeployingApplication\GeneratingAndViewingCode.dita">code generation</xref>
						and deployment to the T24 environment
						of all models works fine. This assures you that packager will generate code
						successfully and
						that installation of generated XML files will be also successful on other remote environment(s).
					</li>
					<li>
						If you intend to modify models or files in a collaborative mode before packaging them, it is strongly advised to
						use
						<xref href="..\Workbench\Concept\SourceControl/SourceControlManagement.dita">source control management</xref>
						.
					</li>
				</ul>
			</p>
			<p>
				<b>Packaging and deploying:</b>
				<ul>
					<li>
						You can stop the T24 environment used for the development;
						<ul>
							<li>
								<xref href="../Workbench\Task\DeployingApplication\StartingStopingT24Server.dita">Stop T24 server.</xref>
								This is strongly recommanded avoiding deployment on your local T24 server when packager is generating models'
								code, updating T24 data and solwing down the process.
							</li>
							<li>Stop Agent for TAFC or database and web server for tAFJ.</li>
						</ul>
					</li>
					<li>
						You can now launch your package, according to your installation:
						<ul>
							<li>
								<xref href=".\tasks\LaunchingPackagerTAFC.dita">launch TAFC packager.</xref>
								The Basic files are compiled against
								Windows platform when packaging on your machine.
								This
								generated code cannot be
								deployed on other platforms like Unix.
								If your T24 target environment is in that
								case, you
								need to write a script
								to build your package on the target
								<xref href=".\tasks\PackagingOnRemoteServer.dita">remote server.</xref>

							</li>
							<li>
								<xref href=".\tasks\LaunchingPackagerTAFJ.dita">launch TAFJ packager.</xref>
								Java is multi-platform by default.
								Package generated from Window OS can be deployed on any
								other platform.
								You
								don't need to change the toogle properties in the
								<filepath>ft-custosample-data-code</filepath>
								and then keep the TAFJ environment used for the packaging exercise.
								The packager needs only a TAFJ compiler that
								is
								compatible with target environment.
							</li>
						</ul>
					</li>
					<li>
						If the build is successful, you can deploy the generated file. For the package
						exercise, it is
						recommended to
						deploy
						the package on a environment that is different from the one used for testing
						changes. This
						allows you to
						verify that
						your changes are correctly deployed by the installer.
						<ul>
							<li>
								<xref href=".\tasks\InstallingPackageTAFC.dita">Deploying tar file to TAFC</xref>
							</li>
							<li>
								<xref href=".\tasks\InstallingPackageTAFJ.dita">Deploying jar file to TAFJ</xref>
							</li>
						</ul>
					</li>
				</ul>
			</p>
			<p>
				<b>Verifying your package has been correctly installed:</b>
				<ul>
					<li>
						Run a
						<cmdname>tshow V.FT.VALIDATION</cmdname>
						to verify the new routine has been installed and compiled.
					</li>
					<li>Start your browser pointing to target T24 environment used for the installation.</li>
					<li>
						<xref href=".\tasks\DemoSamples\VerifyingSampleInstallation.dita">Validate changes in browser.</xref>
					</li>
				</ul>
			</p>
			<p>
				<b>Industrializing your package delivery:</b>
				<ul>
					<li>
						<xref href="..\Workbench\Reference\PackagerProjectList.dita">Add your projects to your source control repository.</xref>
					</li>
					<li>
						Use script language to build the package and
						deploy it on your validation environment(s).
						This provides continuous
						integration of your developments
						<xref href=".\tasks\PackagingOnRemoteServer.dita">on remote servers.</xref>
					</li>
				</ul>
			</p>
			<p>
				<b>Annexes</b>
				<ul>
					<li>
						<xref href=".\references/KnownLimitations.dita">Known Limitations.</xref>
					</li>
					<li>
						<xref href=".\FAQ/FAQ.dita">FAQ.</xref>
					</li>
				</ul>
			</p>
			<note>
				Basic files belong to one component. TAFC installer supports only one component per package, requiring a new
				package
				for each component, then a new project.
				With TAFJ you can create multiple components in your
				<filepath>*-data-code project</filepath>
				within the same package.
			</note>
		</section>
	</conbody>
</concept>

