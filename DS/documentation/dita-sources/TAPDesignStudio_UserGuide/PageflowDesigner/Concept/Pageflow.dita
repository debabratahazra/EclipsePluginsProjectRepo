<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd" []>
<concept id="concept-08-04-2008--12-29-33">
  <title>Pageflows</title>
  <prolog>
    <author type="creator">Mathias Astier</author>
    <metadata>
      <keywords>
        <indexterm>page flow concept</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>
   A pageflow describes a business activity that a single end user
   realizes through the application interface. Designing
   the business
   activity in a pageflow means describing the method and its alternatives
   that the user must use to achieve
   the task. A pageflow is represented in
   the diagram with an
   <xref href="InitState.dita#concept-08-04-2008--12-29-45" type="concept" format="dita" scope="local">Initial State</xref>
   as the starting point and ending with
   one or more
   <xref href="EndState.dita#concept-08-04-2008--12-29-41" type="concept" format="dita" scope="local">End States</xref>
   . At execution time, the pageflow behaves as a state
   machine that is composed  of a finite number of States,
   <xref href="Transition.dita#concept-08-04-2008--12-29-19" type="concept" format="dita" scope="local">Transitions</xref>
   between those
   States, and actions executed during a transition.
  </p>
    <p>A pageflow determines and controls how the user navigates through the
   activity in a Triple&apos;A Plus
   component. For
   example, you can create a pageflow using Pageflow Designer to define how bank
   accounts are opened for new clients in the Client Data
   Management
   (CDM) component. The aim of Pageflow Designer is to have business and IT
   professionals collaborate in
   designing pageflows that is independent of
   the underlying programming codes.
  </p>
    <p>
   A pageflow can be called from a menu item, from a
   page button or link, or from another pageflow. All calls to pageflows are
   secured based on their request URL. This is the only way to enforce security access
   on pageflows.
   Even if a pageflow is never called from an
   available menu entry, it must  be added in the appropriate WUI profile menus as
   disabled if it should not be shown.
   At runtime, the application
   checks that:
   <ul>
        <li>This pageflow URL corresponds to a menu item of the user&apos;s current WUI profile (enabled or not).</li>
        <li>The security role associated to the menu item, if any, is in the user&apos;s Function Security Profile.</li>
      </ul>
  </p>
  </conbody>
  <related-links>
    <link href="../Task/CreatingPageflowFile.dita">
<?xm-replace_text Creating page flow files?>    </link>
    <link href="../Task/ImportOCSPageflowFile.dita">
<?xm-replace_text Importing  XML page flow files?>    </link>
    <link href="../Reference/PageflowProperties.dita">
<?xm-replace_text page flow properties?>    </link>
    <link href="../../MenuDesigner/Concept/MenuModel.dita">
<?xm-replace_text page flow properties?>    </link>
  </related-links>
</concept>
