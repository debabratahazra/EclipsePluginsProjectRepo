# UTF-8
# UTF-8
/* Parameter Definitions for Position Management */
Domain PM_Config
	@t24:i (module=PM)
	@java:Package (value=com.temenos.t24.datamodel.pm.pm_config)
namespace "http://www.temenos.com/t24/PM_Config"
metamodelVersion 1.30.6
Classes {
	/* PM.AC.PARAM


This table allows the user to define the parameters governing the rules for the handling of the cash accounts (Account application) in the Position Management module, and for the on-line update of accounts via all cash transfer applications, ie Funds Transfer, Teller, Data Capture, Money Market, Loans and Deposits, Securities, and Future Rate Agreements.
The facilities available are -       -   The spreading over time of balances and transactions.       -   The allocation of 'actual' interest rate for account or to           allocate a special rate from the Parameter file.        -  Allocation of different Position Classes. The main factor for these facilities is the Category Code on the account. The balance spread and interest rate allocation can be varied at the currency and/or balance sign level.
For the spreading of balances and transactions. The on-line transactions can be spread in the same way as the overnight balance or can be allocated to the value date on the transaction. It is possible when setting up enquiries etc, to extract on-line, transactions which have been spread for certain applications, while for other applications the actual value date is used. Maturity date movements from applications like Money Market are never spread.
In a similar way to the Securities Application, it is necessary to specify these parameters by overall type of position as defined in the table 'PM.POSN.REFERENCE' (Gap, Cash-flow etc...).
The file that is used during the on-line day is called PM.AC.PARAM.DLY.  This ensures that all on-line updates to the Position Management system are based on yesterdays PM.AC.PARAM records, so that any changes to the records in this file are not made until the end of day processing. */
	PM_AC_PARAM
		@t24:i (t24Name=PM.AC.PARAM, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* Indicates the 'ID' of the record i.e. the position ID (Gap, cash etc..) for which the user wants to define the parameters applicable for the handling of the account balances in this type of position.
It is anticipated that there will be only two records on this file.  One for the cash position with a key of CAS and one for the interest mismatch with a key of GAP.
Validation Rules
3 alphanumeric characters.
the ID must exist on the table 'PM.POSN.REFERENCE'. */
		POSITION_ID -> PM_Config:PM_AC_PARAM PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=0.0, core=true, businessType=AA, t24Name=POSITION.ID)
		DESCRIPTION -> byValue PM_Config:PM_AC_PARAM__DESCRIPTION *
		SHORT_NAME -> byValue PM_Config:PM_AC_PARAM__SHORT_NAME *
		/* Identifies the calendar to be used for the spreading of position movements defined below in field PERIOD.ID.
Validation Rules
2 to 5 characters, type AA. (Mandatory Input)
Must exist on the PM.CALENDAR file. */
		CALENDAR -> PM_Config:PM_CALENDAR required
			@i18n:Label (en=Calendar)
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=3.0, core=true, businessType=AA, t24Name=CALENDAR)
		/* Determines whether interest rates are to be applied to all movement entries generated.  If set to 'Y' then an interest rate is determined for the movement based on the fields set below.
The fields PRD.INT.TYPE and FLT.INT.TYPE below can be used to enter interest rates to be stored with each account movement generated by this record.  If this field is set to 'Y' then these interest rates will be used, otherwise no interest rates will be stored with the movement entries.
If this field is set to 'Y' and the fields PRD.INT.TYPE and FLT.INT.TYPE are not set then the interest rates to be applied are determined from either the ACCOUNT.CREDIT.INT or ACCOUNT.DEBIT.INT records for the account being processed.  If there is no account interest conditions set, then the accounts group conditions are used to determine the interest rate.
Validation Rules
'Y' or 'N'  (Blank implies 'N') */
		INTEREST_RATES : T24BusinessTypes:DEF
			@i18n:Label (en="Interest Rates")
			@i18n:Tooltip (en="Interest Rates")
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=4.0, core=true, t24Name=INTEREST.RATES)
		CATEGORY_FROM -> byValue PM_Config:PM_AC_PARAM__CATEGORY_FROM *
		SPD_GRP_SIGN -> byValue PM_Config:PM_AC_PARAM__SPD_GRP_SIGN *
		/* This fields indicates the position of the CATEGORY code in the CONSOLIDATE.ASST.LIAB key, and is used when data is to be extracted from the CAL file. For example
AC.1.TR.CHF.1001.N.999..4100.GB.9000.GB.....US0010001
The value in this field should be 5 as the category code takes up the 5th position of the CAL key. */
		CATEGORY_POSITION : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=2, sysNumber=25.0, core=true, t24Name=CATEGORY.POSITION)
		/* Reserved for future use. */
		R6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=26.0, core=true, t24Name=R6)
		/* Reserved for future use. */
		R7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=27.0, core=true, t24Name=R7)
		OVERRIDE -> byValue PM_Config:PM_AC_PARAM__OVERRIDE *
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=29.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=30.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_AC_PARAM__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_AC_PARAM__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=33.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=34.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=35.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=36.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=37.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_AC_PARAM__DESCRIPTION
	{
		/* Multi-language field allowing the user to specify a long description for the record he is creating.
Validation Rules
35 alphanumeric characters. Mandatory input. */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, multiLanguage=true, sysNumber=1.0, core=true, t24Name=DESCRIPTION)
	}
	PM_AC_PARAM__SHORT_NAME
	{
		/* Multi-language field allowing the user to specify a short description for the record he is creating.
Validation Rules
20 alphanumeric characters. Mandatory input. No default value. */
		SHORT_NAME : T24BusinessTypes:AA
			@t24:i (align=L, inputBehaviour=I, maxLength=10, multiLanguage=true, sysNumber=2.0, core=true, t24Name=SHORT.NAME)
	}
	PM_AC_PARAM__CATEGORY_FROM
	{
		/* Specifies the specific category code or the starting code (in case of a range) for which the conditions defined afterwards apply.
Validation Rules
5 numeric characters Mandatory input. Multi-value field associated with fields 5.1 to 14.1.1.
All multi-value groups must be entered in ascending order.
If the value entered is in the second or greater multi-value set, then the value must be greater than the CATEGORY.TO field in the previous multi-value set. */
		CATEGORY_FROM : mml:Integer required
			@t24:i (align=R, inputBehaviour=I, maxLength=6, sysNumber=5.0, core=true, t24Name=CATEGORY.FROM, mask="R##-###")
		/* Specifies the last category code (in case of a range) for which the conditions defined afterwards apply.
Validation Rules
5 numeric characters Optional input. No default value. Multi-value field associated with fields 5.1 to 14.1.1.
Input not allowed if 'CATEGORY FROM' not entered.
Must be greater than the CATEGORY FROM value. */
		CATEGORY_TO : mml:Integer required
			@t24:i (align=R, inputBehaviour=I, maxLength=6, sysNumber=6.0, core=true, t24Name=CATEGORY.TO, mask="R##-###")
		/* Introduced in G14.1.


Specifies whether the associated CLASS.OVERNIGHT could accept a FXP type Position Class.


If this field is set to YES, then in the associated CLASS.OVERNIGHT only a FXP type Position Class (Starting with AC) could be specified.


During Batch Processing, the  Balances of  only Local Currency Accounts (in the Categories  specified in the  range  CATEGORY.FROM and CATEGORY.TO)  would be reported in the Position specified as CLASS.OVERNIGHT. This might be used to separately report the Balance Position of Internal FX Revaluation Accounts in a FXP type Position Class.


Validation Rules


Valid values are YES/NO. */
		LCY_FX_POSN : PM_Config:PM_AC_PARAM__CATEGORY_FROM__LCY_FX_POSN
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=7.0, core=true, t24Name=LCY.FX.POSN)
		/* Specifies the Position Class to which the user wants to relate the accounts included in the range of category codes defined in the previous 2 fields.
This class is used for the overnight account value dated balance updates to the position management system.  It is additionally used for on-line account movements if the fields CLS.ONLINE.SPRD and CLS.ONLINE.ACTL are not set. The overnight account value dated balance will be spread across a range of calender dates as specified in the fields SPD.GRP.SIGN to FLT.INT.TYPE below.  The field BAL.SPD.GRP points to the group SPD.GRP.SIGN that the spreading parameters are defined in. On-line transaction will not be spread they will be allocated to the value date on the transaction.
When the fields CLS.ONLINE.SPRD and CLS.ONLINE.ACTL are not set then following Position Class records need to be created for the applications that are in Position Management. Where aaa is the last three characters and aa is third and fourth digit from the value in this field.
DC:       DCaaa Account Activity
FRA:      FRaaC Settlement Account Activity           FRaaH Estimated Settlement Account Activity - Hedge.           FRaaT Estimated Settlement Account Activity - Trade.
FX:       FXaaS Spot Deal Account Activity.           FXaaF Forward Deal Account Activity.           FXaaP Interest Hedge Principal Account Activity.           FXaaI Interest Hedge Interest Account Activity.
FT:       FTaaa Account Activity
LD:       LDaaS Value Date Account Activity.           LDaaI Principal Increase Account Activity.           LDaaD Principal Decrease Account Activity.           LDaaM Principal at Maturity Account Activity.           LDaaP Principal Repayments Account Activity.           LDaaN Interest Payment Account Activity.           LDaaC Discount Taken Account Activity.
MM:       MMaaS Value date Account Activity.           MMaaI Principal Increase Account Activity.           MMaaD Principal repayment Account Activity.           MMaaM Principal at Maturity Account Activity.           MMaaN Interest at Maturity Account Activity.           MMaaR Interest payment Account Activity.
SC:       SCaaa Security Trade level Account Activity.
TT:       TTaaa Account Activity.
Validation Rules


5 alphanumeric characters. Mandatory input. Multi-value field associated with fields 5.1 to 14.1.1.
Must exist on the table 'PM.POSN.CLASS'
The first two characters must be 'AC'.
If the value of LCY.FX.POSN is not YES, then the third character must be in the range 'A' to 'E'.
If the value of LCY.FX.POSN is YES, then the Position Class should be of   type (Field POSITION.TYPE in PM.POSN.CLASS) FXP.
Within a multi-value group the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT can not have the same value.
The first four characters can not be used in the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT on another record on the PM.AC.PARAM file. */
		CLASS_OVERNIGHT -> PM_Config:PM_POSN_CLASS required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=8.0, core=true, businessType=AA, t24Name=CLASS.OVERNIGHT)
		/* Specifies the Position Class to which the user wants to relate the accounts included in the range of category codes defined in the previous 2 fields.  Used for on line account movements that are to be spread across a range of dates.
This class is used when on line account movements are required to be spread across a range of calender dates as specified in the fields SPD.GRP.SIGN to FLT.INT.TYPE below.  The field BAL.SPD.GRP points to the group SPD.GRP.SIGN that the spreading parameters are defined in.
When this field contains data then following Position Class records need to be created for the applications that are in Position Management. Where aaa is the last three characters and aa is third and fourth digit from the value in this field..
DC:       DCaaa Account Activity
FRA:      FRaaC Settlement Account Activity           FRaaH Estimated Settlement Account Activity - Hedge.           FRaaT Estimated Settlement Account Activity - Trade. FX:       FXaaS Spot Deal Account Activity.           FXaaF Forward Deal Account Activity.           FXaaP Interest Hedge Principal Account Activity.           FXaaI Interest Hedge Interest Account Activity.
FT:       FTaaa Account Activity
LD:       LDaaS Value Date Account Activity.           LDaaI Principal Increase Account Activity.           LDaaD Principal Decrease Account Activity.           LDaaM Principal at Maturity Account Activity.           LDaaP Principal Repayments Account Activity.           LDaaN Interest Payment Account Activity.           LDaaC Discount Taken Account Activity.
MM:       MMaaS Value date Account Activity.           MMaaI Principal Increase Account Activity.           MMaaD Principal repayment Account Activity.           MMaaM Principal at Maturity Account Activity.           MMaaN Interest at Maturity Account Activity.           MMaaR Interest payment Account Activity.
SC:       SCaaa Security Trade level Account Activity.
TT:       TTaaa Account Activity.
Validation Rules
5 alphanumeric characters. Multi-value field associated with fields 5.1 to 14.1.1.
Must exist on the table 'PM.POSN.CLASS'
The first two characters must be 'AC'. The third character must be in the range 'A' to 'E'.
Within a multi-value group the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT can not have the same value.
The first four characters can not be used in the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT on another record on the PM.AC.PARAM file. */
		CLS_ONLINE_SPRD -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=9.0, core=true, businessType=AA, t24Name=CLS.ONLINE.SPRD)
		/* Specifies the Position Class to which the user wants to relate the accounts included in the range of category codes defined in the previous 2 fields.  Used for on line account movements.
If a separate class is to be used for on line account movements (ie. not the same class as used for overnight value dated balance movements), then it must be entered in this field.
When field 8.1 CLS.ONLINE.ACTL is present then this field is also required. This is so that at the transaction input stage for the on-line deals both actual date and spread amount date Position Class records will be raised. This then allows for a mixture of actual and spread position classes to be used in different enquiries and/or spread figures for one application and the actual figures for another application.
When this field contains data and the actual figures are to be used in the enquiries then following Position Class records will need to be created for the applications that are in Position Management. Where aaa is the last three characters and aa is third and fourth digit from the value in this field..
DC:       DCaaa Account Activity
FRA:      FRaaC Settlement Account Activity           FRaaH Estimated Settlement Account Activity - Hedge.           FRaaT Estimated Settlement Account Activity - Trade.
FX:       FXaaS Spot Deal Account Activity.           FXaaF Forward Deal Account Activity.           FXaaP Interest Hedge Principal Account Activity.           FXaaI Interest Hedge Interest Account Activity.
FT:       FTaaa Account Activity
LD:       LDaaS Value Date Account Activity.           LDaaI Principal Increase Account Activity.           LDaaD Principal Decrease Account Activity.           LDaaM Principal at Maturity Account Activity.           LDaaP Principal Repayments Account Activity.           LDaaN Interest Payment Account Activity.           LDaaC Discount Taken Account Activity.
MM:       MMaaS Value date Account Activity.           MMaaI Principal Increase Account Activity.           MMaaD Principal repayment Account Activity.           MMaaM Principal at Maturity Account Activity.           MMaaN Interest at Maturity Account Activity.           MMaaR Interest payment Account Activity.
SC:       SCaaa Security Trade level Account Activity.
TT:       TTaaa Account Activity.
Validation Rules
5 alphanumeric characters. Multi-value field associated with fields 5.1 to 14.1.1.
Must exist on the table 'PM.POSN.CLASS'
The first two characters must be 'AC'. The third character must be in the range 'A' to 'E'.
Within a multi-value group the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT can not have the same value.
The first four characters can not be used in the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT on another record on the PM.AC.PARAM file.
If CLS.ONLINE.SPRD is entered, then this field is mandatory. */
		CLS_ONLINE_ACTL -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=10.0, core=true, businessType=AA, t24Name=CLS.ONLINE.ACTL)
		/* Specifies the Position Class to which the user wants to relate the accounts included in the range of category codes defined in the previous 2 fields.  Used for overnight account accrual movements.
This class is used for the any outstanding accrued interest and charges on an account. Credit interest totals are kept separate from the debit interest and charges.
The accrued interest amounts are spread across a range of calender dates as specified in the fields SPD.GRP.SIGN to FLT.INT.TYPE below. The field INT.SPD.GRP points to the group SPD.GRP.SIGN that the spreading parameters are defined in.
This position class does not require extra position classes to be created at individual application level as it is only used in the overnight creation of account position details.
Validation Rules
5 alphanumeric characters. Multi-value field associated with fields 5.1 to 14.1.1.
Must exist on the table 'PM.POSN.CLASS'
The first two characters must be 'AC'. The third character must be in the range 'A' to 'E'.
Within a multi-value group the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT can not have the same value.
The first four characters can not be used in the fields CLASS.OVERNIGHT to CLS.ACCRUED.INT on another record on the PM.AC.PARAM file. */
		CLS_ACCRUED_INT -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=11.0, core=true, businessType=AA, t24Name=CLS.ACCRUED.INT)
		/* Indicates if the OPEN.VAL.DATED.BAL from the ACCOUNT record is to be reversed for the purpose of calculating which spread group the position update is to be found at, ie. DEBIT or CREDIT.
If this field is set to yes, then the accounts OPEN.VAL.DATED.BAL is reversed, so that the SPD.GRP.SIGN located for the purpose of spreading PM Movements will be the opposite to the true account open value dated balance.  For example if an account has an open value dated balance of CREDIT 3,000, and this field is set to yes then the SPD.GRP.SIGN located will be n.DEBIT, where n is the BAL/INT.SPD.GRP id.
Validation Rules
1 character type SSS Values = 'Y' = yes or blank Multi-value field associated with fields 5.1 to 14.1.1. */
		REVERSE_BALANCE : PM_Config:PM_AC_PARAM__CATEGORY_FROM__REVERSE_BALANCE
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=12.0, core=true, t24Name=REVERSE.BALANCE)
		/* Indicates whether the balance data is to be extracted from the ACCOUNT table or from the CONSOLIDATE.ASST.LIAB (CAL) table. In a system with large numbers of accounts it is much more efficient to extract data from the CAL rather than process a large numner of individual account records. */
		ACC_OR_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=13.0, core=true, t24Name=ACC.OR.CAL)
		/* If data is to be extracted from the CONSOLIDATE.ASST.LIAB table then the condition group is specified here. This condition group will then be used to determine a default rate from GROUP.DEBIT.INT or GROUP.CREDIT.INT  depending on the dign of the amounts extracted.
It is possible that acounts from more than one condition group will be incorparated into the balance fields on a CAL record, so this field allows the most sensible group to be defined when arriving at an interest rate to be used in the PM enquiries. */
		GROUP_KEY : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=2, sysNumber=14.0, core=true, t24Name=GROUP.KEY)
		CURRENCY -> byValue PM_Config:PM_AC_PARAM__CATEGORY_FROM__CURRENCY *
	}
	PM_AC_PARAM__CATEGORY_FROM__CURRENCY
	{
		/* Allows different spreading rules to be applied depending on the currency of the transaction.
If different spreading criteria and rates are to be applied to transactions depending on the currency, then each currency that requires this should be input here.  If the value 'DEFAULT' is entered in one of the sub value sets, then all other currencies not defined will use the spreading rules indicated by fields BAL.SPD.GRP or INT.SPD.GRP.
Validation Rules
Standard Currency Format or value 'DEFAULT'. Multi-value field associated with fields 5.1 to 14.1.1.  Sub value field associated with fields 12.1.1 to 14.1.1.
Must be a valid currency on the CURRENCY file or the value 'DEFAULT'. */
		CURRENCY : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=7, sysNumber=15.0, core=true, t24Name=CURRENCY)
		/* Points to the first part of the key int field SPD.GRP.SIGN in order to determine the interest rates and spreading parameters for account balance movements.
Once the category and currency groups have been determined, then the value in this fields points to the first part of the key in the field SPD.GRP.SIGN (the second part is made up of the values 'CREDIT', 'DEBIT', or 'BOTH' to distinguish debit and credit accounts) in order to obtain the interest rates and spreading parameters for account balance movements.
Validation Rules
1 -2 Alphanumeric characters. Multi-value field associated with fields 5.1 to 14.1.1.  Sub value field associated with fields 12.1.1 to 14.1.1.
Must point to a valid first part of key (ie before the '.'CREDIT|DEBIT|BOTH) of field SPD.GRP.SIGN. */
		BAL_SPD_GRP : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=16.0, core=true, t24Name=BAL.SPD.GRP)
		/* Points to the first part of the key int field SPD.GRP.SIGN in order to determine the interest rates and spreading parameters for account balance movements.
Once the category and currency groups have been determined, then the value in this fields points to the first part of the key in the field SPD.GRP.SIGN (the second part is made up of the values 'CREDIT', 'DEBIT', or 'BOTH' to distinguish debit and credit accounts) in order to obtain the interest rates and spreading parameters for account interest accrual movements.
Validation Rules
1 -2 Alphanumeric characters. Multi-value field associated with fields 5.1 to 14.1.1.  Sub value field associated with fields 12.1.1 to 14.1.1.
Must point to a valid first part of key (ie before the '.'CREDIT|DEBIT|BOTH) of field SPD.GRP.SIGN. */
		INT_SPD_GRP : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=17.0, core=true, t24Name=INT.SPD.GRP)
	}
	PM_AC_PARAM__SPD_GRP_SIGN
	{
		/* Specifies a unique key pointed to by the fields BAL.SPD.GRP and INT.SPD.GRP and the type of balance to which the conditions apply.
Validation Rules
The following values are accepted: [AA]'.CREDIT' = only if credit balance. [AA]'.DEBIT'  = only if debit balance. [AA]'.BOTH'   = whichever is the sign of the balance. Where AA is user definable. Multi-value field associated with fields 15.1 to 21.1. */
		SPD_GRP_SIGN : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=18.0, core=true, t24Name=SPD.GRP.SIGN)
		PERIOD_ID -> byValue PM_Config:PM_AC_PARAM__SPD_GRP_SIGN__PERIOD_ID *
		/* Reserved for future use. Multi-value field associated with fields 15.1 to 21.1. */
		R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=23.0, core=true, t24Name=R3)
		/* Reserved for future use. Multi-value field associated with fields 15.1 to 21.1. */
		R4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=24.0, core=true, t24Name=R4)
	}
	PM_AC_PARAM__SPD_GRP_SIGN__PERIOD_ID
	{
		/* Specifies the date/period to which the user wants to apply the movement/activity.
Note that if opening account positions are to be shown in a separate calendar "bucket", using OPE, instead of being included in the "CAL" bucket, OPE should be specified here.
Validation Rules
2 - 5 characters Mandatory input. Multi-value field associated with fields 15.1 to 21.1.  Sub value field associated with fields 16.1.1 to 19.1.1.
Must correspond to a valid period on the table 'PM.CALENDAR'. */
		PERIOD_ID : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=19.0, core=true, t24Name=PERIOD.ID)
		/* Specifies the percentage of the total balance of the accounts pertaining to the category code range which needs to be applied to the date/period indicated in the previous field.
For one sub-value set the percentages should add up to 100,  although there are no checks that this is the case at present. This allows for part percentages on Internal accounts to be fed into Position Management.
Validation Rules
Standard percentage format. Multi-value field associated with fields 15.1 to 21.1.  Sub value field associated with fields 16.1.1 to 19.1.1.
must not exceed 100%. */
		PERCENTAGE : T24BusinessTypes:R
			@t24:i (align=R, inputBehaviour=I, maxLength=11, sysNumber=20.0, core=true, t24Name=PERCENTAGE)
		/* Allows the user to assign a cost by means of an interest rate to all the accounts pertaining to the category code range and period defined in the previous fields.
This field is normal left blank as is field 19.1.1 FLT.INT.RATE so that the actual interest conditions for the account can be used.
Where either there is a large volume of accounts with similar conditions and a lot of small movements i.e Savings accounts or Internal accounts i.e Capital Investment accounts  then an interest rate is entered in this field or a linkage to a Basic Interest Table is entered in filed 19.1.1 FLT.INT.RATE. Input in this field will only make sense when the position ID refers to an Interest mismatch/gap/position type.
Validation Rules
Standard interest rate. Multi-value field associated with fields 15.1 to 21.1.  Sub value field associated with fields 16.1.1 to 19.1.1.
Can not be present if associated Sub-value field 19.1.1. FLT.INT.RATE is present. */
		PRD_INT_TYPE : T24BusinessTypes:R
			@t24:i (align=R, inputBehaviour=I, maxLength=3, sysNumber=21.0, core=true, t24Name=PRD.INT.TYPE)
		/* Allows the user to assign a cost, by means of an Interest key, to all accounts pertaining to the category code range defined in the previous field.
This field is normal left blank as is field 18.1.1 PRD.INT.RATE so that the actual interest conditions for the account can be used.
Where either there is a large volume of accounts with similar conditions and a lot of small movements i.e Savings accounts or Internal accounts i.e Capital Investment accounts  then an interest rate is entered in the previous field 18.1.1 PRD.INT.RATE or a linkage to a Basic Interest Table is entered in this field.
Input in this field will only make sense when the position ID refers to an Interest mismatch/gap/position type.
Validation Rules
1 to 4 numeric characters. Multi-value field associated with fields 15.1 to 21.1.  Sub value field associated with fields 16.1.1 to 19.1.1.
must exist in the 'BASIC.INTEREST' table.
Cannot be present if associated sub-value field 18.1.1. PRD.INT.RATE is present. */
		FLT_INT_TYPE -> ST_RateParameters:BASIC_RATE_TEXT
			@t24:i (align=R, inputBehaviour=I, maxLength=4, sysNumber=22.0, core=true, t24Name=FLT.INT.TYPE)
	}
	PM_AC_PARAM__OVERRIDE
	{
		/* Reserved for future use. */
		OVERRIDE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=35, sysNumber=28.0, core=true, t24Name=OVERRIDE)
	}
	PM_AC_PARAM__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=31.0, core=true, t24Name=INPUTTER)
	}
	PM_AC_PARAM__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=32.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* This application is used to define the conditions for the maintenance

PM.TRAN.ACTIVITY
records for applications linked to
PM
through generic interface (Applications in modules other than
DC, FR, FT, FX, LD, MM, ND, PD, SC, SW, TT
), during batch processing.



The first sets of fields in this application

OPEN.BRACKET
to
LINK.TO.NXT.FLD
) could be

PM.TRAN.ACTIVITY

records with
GAP
position movements (records with ID: Transaction ID*GAP), during batch processing. Here the
PM.TRAN.ACTIVITY
records for
GAP
movements would be




The second sets of fields in the application (from
OP.BRACKET
to

MAT.NXT.FLD
) could be



PM.TRAN.ACTIVITY
records for */
	PM_APPL_SELECTION
		@t24:i (t24Name=PM.APPL.SELECTION, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* PM.APPL.SELECT.ID
ID of this file must be any application which is not linked to PM already or PM processing is not handled already. i.e.; should be other than the applications -

FOREX
MM.MONEY.MARKET
FRA.DEAL
LD.LOANS.AND.DEPOSITS
SEC.TRADE
SECURITY. TRANSFER
SWAP
PD.PAYMENT.DUE,
ENTITLEMENT
CD.TRADE
DATA.CAPTURE
TELLER.TRANSACTION
FUNDS.TRANSFER
Validation Rules

Should be a valid application.
Maximum of 35 characters are allowed. */
		PM_APPL_SELECT_ID -> PM_Config:PM_APPL_SELECTION PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=0.0, core=true, businessType=A, t24Name=PM.APPL.SELECT.ID)
		OPEN_BRACKET -> byValue PM_Config:PM_APPL_SELECTION__OPEN_BRACKET *
		OP_BRACKET -> byValue PM_Config:PM_APPL_SELECTION__OP_BRACKET *
		RESERVED5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=15.0, core=true, t24Name=RESERVED5)
		RESERVED4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=16.0, core=true, t24Name=RESERVED4)
		RESERVED3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=17.0, core=true, t24Name=RESERVED3)
		RESERVED2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=18.0, core=true, t24Name=RESERVED2)
		RESERVED1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=19.0, core=true, t24Name=RESERVED1)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=20.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=21.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_APPL_SELECTION__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_APPL_SELECTION__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=24.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=25.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=26.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=27.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=28.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_APPL_SELECTION__OPEN_BRACKET
	{
		/* If more than one set of conditions are specified (in the fields OPEN.BRACKET  to LINK.TO.NXT.FLD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields
OPEN.BRACKET  to     LINK.TO.NXT.FLD.
Optional Input. */
		OPEN_BRACKET : PM_Config:PM_APPL_SELECTION__OPEN_BRACKET__OPEN_BRACKET
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=1.0, core=true, t24Name=OPEN.BRACKET)
		/* Specifies the name of a valid field in the application defined in the ID.

Validation Rules



Field     associated with the fields OPEN.BRACKET  to LINK.TO.NXT.FLD. */
		SEL_FIELD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=2.0, core=true, t24Name=SEL.FIELD)
		/* Specifies the Operator  for evaluating the  conditions.

Validation Rules



Valid     Operators are EQ, GE, GT, IN, LE, LK, LT, NE, NR, RG, UL.

Field associated with the fields OPEN.BRACKET  to     LINK.TO.NXT.FLD.

Mandatory if SEL.FIELD has a value. */
		SEL_OPERAND : PM_Config:PM_APPL_SELECTION__OPEN_BRACKET__SEL_OPERAND
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=3.0, core=true, t24Name=SEL.OPERAND)
		/* Specifies a value for comparison.
This field can be either a Constant or the name of a valid field belonging to the application specified in the ID of this record.
Validation Rules

If it is a Constant , the value of the Constant should be given within     double Quotes.
"TODAY" would return the Bank Date.
Mandatory if SEL.FIELD has a value.

Field associated with the fields OPEN.BRACKET  to     LINK.TO.NXT.FLD. */
		SEL_FROM : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=4.0, core=true, t24Name=SEL.FROM)
		/* If a Range of Values has to be specified for a Condition, then this field can be used.
This field can be either a Constant or the name of a valid field belonging to the application specified in the ID of this record.
Validation Rules


If it is a Constant , the value of the Constant should     be given within double Quotes.
"TODAY" would return the Bank Date.
This field can be entered only if the value of the field SEL.OPERAND      is 'RG' or 'NR'.

Field     associated with the fields OPEN.BRACKET  to LINK.TO.NXT.FLD. */
		SEL_TO : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=5.0, core=true, t24Name=SEL.TO)
		/* If more than one set of conditions are specified (in the fields OPEN.BRACKET  to LINK.TO.NXT.FLD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields
OPEN.BRACKET  to     LINK.TO.NXT.FLD.
Optional Input. */
		CLOSE_BRACKET : PM_Config:PM_APPL_SELECTION__OPEN_BRACKET__CLOSE_BRACKET
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=6.0, core=true, t24Name=CLOSE.BRACKET)
		/* Specifies the RELATIONAL Type Operators AND/OR, which connects  more than one condition.

Validation Rules



Only values     of AND, OR are allowed.


Mandatory     input (except for the last one) when more than one condition is specified in the fields OPEN.BRACKET     to CLOSE.BRACKET.

Field associated with the fields OPEN.BRACKET  to     LINK.TO.NXT.FLD. */
		LINK_TO_NXT_FLD : PM_Config:PM_APPL_SELECTION__OPEN_BRACKET__LINK_TO_NXT_FLD
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=7.0, core=true, t24Name=LINK.TO.NXT.FLD)
	}
	PM_APPL_SELECTION__OP_BRACKET
	{
		/* If more than one set of conditions are specified (in the fields OP.BRACKET  to MAT.NXT.FLD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields
OP.BRACKET  to     MAT.NXT.FLD.
Optional Input. */
		OP_BRACKET : PM_Config:PM_APPL_SELECTION__OP_BRACKET__OP_BRACKET
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=8.0, core=true, t24Name=OP.BRACKET)
		/* Specifies the name of a valid field in the application defined in the ID.

Validation Rules



Field     associated with the fields OP.BRACKET  to MAT.NXT.FLD. */
		MAT_FIELD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=9.0, core=true, t24Name=MAT.FIELD)
		/* Specifies the Operator  for evaluating the  conditions.

Validation Rules



Valid     Operators are EQ, GE, GT, IN, LE, LK, LT, NE, NR, RG, UL.

Field associated with the fields OP.BRACKET  to     MAT.NXT.FLD.

Mandatory if MAT.FIELD has a value. */
		MAT_OPERAND : PM_Config:PM_APPL_SELECTION__OP_BRACKET__MAT_OPERAND
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=10.0, core=true, t24Name=MAT.OPERAND)
		/* Specifies a value for comparison.
This field can be either a Constant or the name of a valid field belonging to the application specified in the ID of this record.
Validation Rules

If it is a Constant , the value of the Constant should be given within     double Quotes.
"TODAY" would return the Bank Date.
Mandatory if MAT.FIELD has a value.

Field associated with the fields OP.BRACKET  to     MAT.NXT.FLD. */
		MAT_FROM : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=11.0, core=true, t24Name=MAT.FROM)
		/* If a Range of Values has to be specified for a Condition, then this field can be used.
This field can be either a Constant or the name of a valid field belonging to the application specified in the ID of this record.
Validation Rules


If it is a Constant , the value of the Constant should     be given within double Quotes.
"TODAY" would return the Bank Date.
This field can be entered only if the value of the field MAT.OPERAND      is 'RG' or 'NR'.

Field     associated with the fields OP.BRACKET  to MAT.NXT.FLD. */
		MAT_TO : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=12.0, core=true, t24Name=MAT.TO)
		/* If more than one set of conditions are specified (in the fields OP.BRACKET  to MAT.NXT.FLD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields
OP.BRACKET  to     MAT.NXT.FLD.
Optional Input. */
		CL_BRACKET : PM_Config:PM_APPL_SELECTION__OP_BRACKET__CL_BRACKET
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=13.0, core=true, t24Name=CL.BRACKET)
		/* Specifies the RELATIONAL Type Operators AND/OR, which connects  more than one condition.

Validation Rules



Only values     of AND, OR are allowed.


Mandatory     input (except for the last one) when more than one condition is specified in     the fields OP.BRACKET to CL.BRACKET.

Field associated with the fields OP.BRACKET  to     MAT.NXT.FLD. */
		MAT_NXT_FLD : PM_Config:PM_APPL_SELECTION__OP_BRACKET__MAT_NXT_FLD
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=14.0, core=true, t24Name=MAT.NXT.FLD)
	}
	PM_APPL_SELECTION__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=22.0, core=true, t24Name=INPUTTER)
	}
	PM_APPL_SELECTION__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=23.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* This parameter file  could be used to define the conditions for forming PM groups (Field: PM.GROUP.TYPE)  for T24 applications which would be linked to PM processing through the generic interface. It would be possible (using the application PM.GROUP.TYPE) to map the fields of an application to PM.TRAN.ACTIVITY fields, for each PM group defined here.

For example,

For the application DX.TRADE related to PM through generic interface, a record could be created in this Application  with ID 'DX.TRADE'. Conditions could be defined in this application to form the PM Groups for the application DX.TRADE. */
	PM_APPLICATION_PARAM
		@t24:i (t24Name=PM.APPLICATION.PARAM, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* Specifies the ID of the PM.APPLICATION.PARAM File.
It specifies the Application, for which PM Gap movements processing would be handled through the PM generic interface.
Validation Rules

It should be a Valid T24 application defined in PGM.FILE.
It should not be an Application belonging to a product, already linked to PM (i.e.     it should not  be an application  belonging to the Products DC,     FR, FT, FX, LD, MM, ND, PD, SC, SW, TT). */
		PM_APP_PARAM_ID -> PM_Config:PM_APPLICATION_PARAM PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=0.0, core=true, businessType=A, t24Name=PM.APP.PARAM.ID)
		PM_GROUP_TYPE -> byValue PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE *
		RESERVED10 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=12.0, core=true, t24Name=RESERVED10)
		RESERVED9 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=13.0, core=true, t24Name=RESERVED9)
		RESERVED8 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=14.0, core=true, t24Name=RESERVED8)
		RESERVED7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=15.0, core=true, t24Name=RESERVED7)
		RESERVED6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=16.0, core=true, t24Name=RESERVED6)
		RESERVED5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=17.0, core=true, t24Name=RESERVED5)
		RESERVED4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=18.0, core=true, t24Name=RESERVED4)
		RESERVED3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=19.0, core=true, t24Name=RESERVED3)
		RESERVED2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=20.0, core=true, t24Name=RESERVED2)
		RESERVED1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=21.0, core=true, t24Name=RESERVED1)
		OVERRIDE -> byValue PM_Config:PM_APPLICATION_PARAM__OVERRIDE *
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=23.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=24.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_APPLICATION_PARAM__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_APPLICATION_PARAM__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=27.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=28.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=29.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=30.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=31.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_APPLICATION_PARAM__PM_GROUP_TYPE
	{
		/* Specifies the name of the Position Group satisfying the conditions defined in the set.
Validation Rules


Field associated with the fields PM.GROUP.TYPE to     REL.NEXT.FD.
Maxm. of  40  Alphanumeric characters.
Mandatory Input. */
		PM_GROUP_TYPE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=1.0, core=true, t24Name=PM.GROUP.TYPE)
		/* Specifies the name of  a multi-valued field in the application defined in the ID of this record, and PM Gap movements would be  generated for each value of this field, provided the conditions defined under this field are satisfied.
For example,
If it is required to generate  PM Gap movements  for each value of  the multi-value field PRIMARY.CUSTOMER in  DX.TRADE , then the field name 'PRIMARY.CUSTOMER' should be specified as the Multivalue Driver.
Validation Rules


Field associated with the fields PM.GROUP.TYPE to     REL.NEXT.FD.
It should be the name of a Multivalue field in the APPLICATION, which is specified in     the ID.
Optional field. */
		MULTI_VAL_DRIV : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=2.0, core=true, t24Name=MULTI.VAL.DRIV)
		BRACKETS_OP -> byValue PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP *
	}
	PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP
	{
		/* If more than one set of conditions are specified for a PM Group (in the fields BRACKETS.OP  to REL.NEXT.FD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields PM.GROUP.TYPE to     REL.NEXT.FD.
Optional Input. */
		BRACKETS_OP : PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__BRACKETS_OP
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=3.0, core=true, t24Name=BRACKETS.OP)
		/* Specifies the name of a valid field in the application defined in the ID.
For the  Record ID field, a portion of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.
Validation Rules

Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD.
The field specified here could be a Multi-Value / Sub-Value field, only if a     value in the field MULTI.VAL.DRIV     has been specified.
If a value for the field REPLACE.FILE has been  specified, then the     value of the field specified here should be the ID of a record in  the file     specified as REPLACE.FILE. */
		FIELD_NAME : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=4.0, core=true, t24Name=FIELD.NAME)
		/* Specifies the name of a valid T24 application, whose fields need  to be used in the conditions  to be satisfied  for position groups.
Validation Rules

Should be a valid T24 application defined in PGM.FILE.
Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD. */
		REPLACE_FILE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=21, sysNumber=5.0, core=true, t24Name=REPLACE.FILE)
		/* Specifies the name of a valid field  in the file defined  in  REPLACE.FILE, which could be used for checking conditions.
Validation Rules

Name of a valid field in the REPLACE.FILE.
It cannot be the name of a Multi-Value or a Sub-Value field.
Value allowed only if  REPLACE.FILE has been specified.
Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD. */
		REPLACE_FLD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=6.0, core=true, t24Name=REPLACE.FLD)
		/* Specifies the Operator  for evaluating the PM group conditions.
Validation Rules

Valid Operators are EQ, GE, GT, IN, LE, LK, LT, NE, RG, UL.
Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD. */
		DECISION : PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__DECISION
			@t24:i (align=L, inputBehaviour=I, maxLength=20, sysNumber=7.0, core=true, t24Name=DECISION)
		/* Specifies a value for comparison, for determination of PM groups.
This field can be either a Constant or the name of a valid field belonging to the application specified in the ID of this record. This field can be a Multi-Value / Sub-Value field only if  a value for the field MULTI.VAL.DRIV has been defined.
Validation Rules

If it is a Constant , the value of the Constant should be given within     double Quotes.
If a field name is specified in DECISION.FRM, then the following validations     would apply:
FIELD.NAME                                                DECISION.FRM
(i)   Single value Field                                           Single Value Field / Constant
(ii)  Multi-Value Field                                           Multi-Value Field / Single Value Field / Constant
(iii) Sub-Value Field                                             Sub-Value Field / Single Value Field / Constant.

If a Multivalue Driver is defined in the field MULTI.VAL.DRIV, and if a     Multi-value / Sub-value field is specified in   DECISION.FRM,      then it should be ensured that they belong to the     same Multi-Value Set as the field entered in the MULTI.VAL.DRIV     Field.
If the FIELD.NAME and the DECISION.FRM are both Sub-Value fields , then it     should be ensured that both of them should belong to the same Sub-Value set.
Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD. */
		DECISION_FRM : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=50, sysNumber=8.0, core=true, t24Name=DECISION.FRM)
		/* If a Range of Values has to be specified for a Condition, then this field can be used.
Validation Rules

Only a Constant is allowed within double quotes.
This field can be entered only if the value of the field DECISION is 'RG'.
Field associated with the fields PM.GROUP.TYPE to REL.NEXT.FD. */
		DECISION_TO : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=30, sysNumber=9.0, core=true, t24Name=DECISION.TO)
		/* If more than one set of conditions are specified for a particular  PM Group (in the fields BRACKETS.OP  to REL.NEXT.FD),  then the level  of Brackets could  be specified  to prioritize the conditions. Brackets can be entered upto 4 levels of Priorities.
Validation Rules


Field associated with the fields PM.GROUP.TYPE to     REL.NEXT.FD.
Optional Input. */
		BRACKETS_CL : PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__BRACKETS_CL
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=10.0, core=true, t24Name=BRACKETS.CL)
		/* Specifies the RELATIONAL Type Operators AND/OR, which connects  more than one condition specified for a PM group.
Validation Rules

Only values of AND, OR are allowed.
Mandatory input (except for the last one) when more than one condition is     specified  for a PM group in the fields BRACKETS.OP thru' BRACKETS.CL      (defined in PM.GROUP.TYPE). */
		REL_NEXT_FD : PM_Config:PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__REL_NEXT_FD
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=11.0, core=true, t24Name=REL.NEXT.FD)
	}
	PM_APPLICATION_PARAM__OVERRIDE
	{
		OVERRIDE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=35, sysNumber=22.0, core=true, t24Name=OVERRIDE)
	}
	PM_APPLICATION_PARAM__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=25.0, core=true, t24Name=INPUTTER)
	}
	PM_APPLICATION_PARAM__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=26.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* Each 'PM.POSN.REFERENCE' record must be linked to a Calendar record, the purpose of the Calendar record is to provide the time splits by which information is to be grouped.  The near time periods are likely to be days whereas further out time periods will be months, quarters and years.
It is recommended that a different calendar is used for each position.
The calendar record GAP is a compulsory record as it is required for spread of "Account" data in the end of day routines.
When a calendar record is updated during the day the changes do not take effect until the end of day run occurs. */
	PM_CALENDAR
		@t24:i (t24Name=PM.CALENDAR, level=F, type=U, allowedFunctions="A C D E I L P Q R S", localRefAllowed=false)
	{
		/* This is the key to PM.CALENDAR file.
The calendar record allows positions to be aggregated by periods.
Validation Rules
2 to 5 characters, type AA. (Mandatory). */
		PM_CALENDAR_ID -> PM_Config:PM_CALENDAR PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=0.0, core=true, businessType=AA, t24Name=PM.CALENDAR.ID)
		/* This is the short name for the Calendar record.
Validation Rules
1 to 10 characters type AA. */
		SHORT_NAME : T24BusinessTypes:AA required
			@i18n:Label (en="Short name")
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=1.0, core=true, t24Name=SHORT.NAME)
		DESCRIPTION -> byValue PM_Config:PM_CALENDAR__DESCRIPTION *
		PERIOD -> byValue PM_Config:PM_CALENDAR__PERIOD *
		/* This indicates the date and time when the Start.Date and End.Dates were last calculated.
Validation Rules
12 characters, type ''. */
		SYS_UPD_TIME : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=15, sysNumber=12.0, core=true, t24Name=SYS.UPD.TIME, mask="RDD DD  DD ##:##")
		BASE_COUNTRY -> byValue PM_Config:PM_CALENDAR__BASE_COUNTRY *
		RESERVED5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=14.0, core=true, t24Name=RESERVED5)
		RESERVED4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=15.0, core=true, t24Name=RESERVED4)
		RESERVED3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=16.0, core=true, t24Name=RESERVED3)
		RESERVED2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=17.0, core=true, t24Name=RESERVED2)
		RESERVED1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=18.0, core=true, t24Name=RESERVED1)
		OVERRIDE -> byValue PM_Config:PM_CALENDAR__OVERRIDE *
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=20.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=21.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_CALENDAR__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_CALENDAR__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=24.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=25.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=26.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=27.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=28.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_CALENDAR__DESCRIPTION
	{
		/* This is the description of the Calendar record.
Validation Rules
Up to 4 * 35 characters, type A. (Optional). (Multi-value). */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=2.0, core=true, t24Name=DESCRIPTION)
	}
	PM_CALENDAR__PERIOD
	{
		/* This is the period for which value dates are to be aggregated.
*   - Refers to the remaining period, if                  this is not input, '*' will be                  offended by the system as the last                  period.            OPE - Opening Position            CAL - Call/Today            TOM - Tomorrow            SPT - Spot - 2 working days            D   - Number of calendar days from Spot                  Date.            W   - Number of weeks from Spot Date            M   - Number of months from Spot Date            Y   - Number of Years from Spot Date
Note:     if a particular date falls on a non            working day then it is merged with the            next working day.
e.g.  5th Jan (working day)                  6th Jan (week end)                  7th Jan (week end)                  8th, 9th, 10th (working day).
If the day is 5th Jan
Period    End Date (inclusive)             CAL      5th Jan             TOM      8th Jan             SPT      9th Jan             1D       10th Jan             2D       11th Jan             2W       23rd Jan             1M       9th Feb             1Y       9th Jan next year

Note:     Overlapping periods are not rejected; just            an override message is displayed if a            period overlaps with the next period. The            said period will have the same end date as            the next period.  (i.e. There will be no            real position entry for the 1st period).            This is the case for weekend periods which            are merged in with the first working day            of the week.
Validation Rules
1 to 3 characters, in 2 main types. a.  '*', , 'OPE', 'CAL', 'TOM' or 'SPT'. b. NNNX,  where NN = 1 to 999 inclusive x = D, W, M, Y,. (Mandatory). (Multivalue field associated with fields 4.1 to 11.1).
Duplicate PERIOD is not allowed.
If OPE is present, it must be the first period. If OPE is not present, and CAL is defined, it must be the fist period.
If the last character is the same as the previous period, the preceding digits must be in ascending order.
'D', must precede 'W','M', 'Y',.
'W' and 'M' must precede 'Y'.
'Y' must precede '*'. */
		PERIOD : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=3.0, core=true, t24Name=PERIOD)
		/* This is the date suffix of the period end date.
Only period 'CAL' can have a date suffix of 0 or 2.  Though this option is not used at present.  If left blank processing for calculating End.Date.SFX (field 8.1) assumes value 8 has been entered.
Validation Rules
1 character, must be 0, 2 or 8. Multivalue field associated with field 3.1 and 5.1. to 11.1. */
		DATE_SFX : PM_Config:PM_CALENDAR__PERIOD__DATE_SFX required
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=4.0, core=true, t24Name=DATE.SFX)
		/* This is the start date of the period.
This field is updated by the system overnight.
Start date of the first period is 00000000 and for subsequent periods it is the same as the previous periods END.DATE.
Validation Rules
8 characters, type A. (No input). (Multivalue field associated with field 3.1 to 4.1 and 6.1 to 11.1). */
		START_DATE : T24BusinessTypes:D
			@t24:i (align=R, inputBehaviour=N, maxLength=8, sysNumber=5.0, core=true, t24Name=START.DATE, typeModifiers=1000)
		/* This gives the suffix of the start date of a period.
This field is updated by the system overnight, but is unused at present.
Validation Rules
1 character, type ' '. (No input.) (Multivalue field associated with fields 3.1 to 5.1 and 7.1 to 11.1). */
		START_DATE_SFX : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=6.0, core=true, t24Name=START.DATE.SFX)
		/* This is the end date of the period.
This field is updated by the system overnight.
Validation Rules
8 characters, type A. (No input). (Multivalue field associated with fields 3.1 to 6.1 and 8.1 to 11.1). */
		END_DATE : T24BusinessTypes:D
			@t24:i (align=R, inputBehaviour=N, maxLength=8, sysNumber=7.0, core=true, t24Name=END.DATE)
		/* This is the date suffix for the end date of the period.
This field is updated by the system overnight to the DATE.SFX (field 4.1) specified.  If no value entered then this field is defaulted with a value of 8.
Validation Rules
1 character, type ''. (No input.) (Multivalue field associated with fields 3.1 to 7.1 and 9.1 to 10.1.) */
		END_DATE_SFX : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=8.0, core=true, t24Name=END.DATE.SFX)
		/* This field is reserved for future use.
Validation Rules
(No input). Multivalue field associated with fields 3.1 to 8.1 and 10.1 to 11.1. */
		R1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=9.0, core=true, t24Name=R1)
		/* This field is reserved for future use.
Validation Rules
(No input). Multivalue field associated with fields 3.1 to 9.1 and field 11.1. */
		R2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=10.0, core=true, t24Name=R2)
		/* This field is reserved for future use.
Validation Rules
(No input). Multivalue field associated with fields 3.1 to 10.1. */
		R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=11.0, core=true, t24Name=R3)
	}
	PM_CALENDAR__BASE_COUNTRY
	{
		/* Specifies the countries and region codes which will be used for building the calendar.
If specified the holidays for the countries and or regions specified in this field will be considered when constructing the calendar. If there is no value specified the local country defined in the COMPANY record will be used.
This field may only be used when the EU module is installed.
Validation Rules
Optional Field 2 alpha or 2 alpha plus 2 numeric. No Duplicates allowed Input must be a valid item in the COUNTRY or REGION table. */
		BASE_COUNTRY : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=4, sysNumber=13.0, core=true, t24Name=BASE.COUNTRY)
	}
	PM_CALENDAR__OVERRIDE
	{
		/* Contains details of any overrides applicable to this calendar.
Conditions where overrides will be required include the following:
'Period end dates overlap'.
Validation Rules
Up to 35 type A (alphanumeric) charaters. Multivalue field. (Internal field) */
		OVERRIDE : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=19.0, core=true, t24Name=OVERRIDE)
	}
	PM_CALENDAR__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=22.0, core=true, t24Name=INPUTTER)
	}
	PM_CALENDAR__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=23.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* OVERVIEW PM.DLY.POSN.CLASS
This file is the aggregate of today's activities.
'L', 'P' and 'S' are the only permissible functions on this file. */
	PM_DLY_POSN_CLASS
		@t24:i (t24Name=PM.DLY.POSN.CLASS, level=F, type=L, allowedFunctions="L P S", localRefAllowed=false)
	{
		/* This is the key to PM.DLY.POSN.CLASS file
The key is made up of (POSN.CLASS). (CURRENCY.MARKET).(DEALER.DESK).(POSN.TYPE).(CCY) (VALUE.DATE).(VALUE.DATE.SFX).
For all these fields refer to PM.TRAN.ACTIVITY.
Validation Rules
28 characters, type 'A'. */
		DLY_POSN_CLASS_ID -> PM_Config:PM_DLY_POSN_CLASS PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=50, sysNumber=0.0, core=true, businessType=A, t24Name=DLY.POSN.CLASS.ID)
		ASST_LIAB_CD -> byValue PM_Config:PM_DLY_POSN_CLASS__ASST_LIAB_CD *
		/* Specifies the source application for which the position movement has been generated.
Validation Rules

System generated field. */
		APPLICATION : T24BusinessTypes:A
			@i18n:Label (en=Application)
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=6.0, core=true, t24Name=APPLICATION)
		/* This indicates the date and time when the position was last created/updated.
Validation Rules
12 characters, type ''. (No input.) */
		DATE_TIME : mml:Integer
			@i18n:Label (en="Date time")
			@i18n:Tooltip (en="Date and time when record was input or authorised")
			@t24:i (align=R, inputBehaviour=I, maxLength=15, sysNumber=7.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
		TXN_REFERENCE -> byValue PM_Config:PM_DLY_POSN_CLASS__TXN_REFERENCE *
		DATE : T24BusinessTypes:D
			@i18n:Label (en=Date)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, core=false, t24Name=DATE, genOperation="FIELD(@ID,\'.\',6)")
		CCY : T24BusinessTypes:CCY
			@i18n:Label (en=Ccy)
			@t24:i (align=R, inputBehaviour=N, maxLength=3, core=false, t24Name=CCY, genOperation="FIELD(@ID,\'.\',5)")
		POSN_CLASS : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=3, core=false, t24Name=POSN.CLASS, genOperation="FIELD(@ID,\'.\',1)")
		CURRENCY_RANK : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=6, core=false, t24Name=CURRENCY.RANK, genOperation="CCY>CURRENCY>RANK")
	}
	PM_DLY_POSN_CLASS__ASST_LIAB_CD
	{
		/* This indicates the asset/liability code of the position class on a daily basis
1  -  Asset
2  -  Liability
3  -  Total of Asset and Liability
4  -  Total of unsigned Asset and unsigned Liability
Validation Rules
1 character, type ''. (No input.) Multi-value associated group.) */
		ASST_LIAB_CD : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=1.0, core=true, t24Name=ASST.LIAB.CD)
		AMT_CODE -> byValue PM_Config:PM_DLY_POSN_CLASS__ASST_LIAB_CD__AMT_CODE *
	}
	PM_DLY_POSN_CLASS__ASST_LIAB_CD__AMT_CODE
	{
		/* This indicates the type of amount stored in AMOUNT for a particular ASST.LIAB.CD
1  -  Currency amount
2  -  Local Spot Equivalent (for future use)
3  -  Local Equivalent
4  -  Alternate Spot Equivalent (for future use)
5  -  Alternate Equivalent (for future use)
6  -  Breakeven
7  -  Net amount for Positions with aggregate method                 'C' or 'G'.  (For further details refer to field                 AGGR.METHOD of PM.POSN.REFERENCE)
10 and above -                 Interest rates pointer, values can be 'FIXED' or                 in the form ' [L][nnn]*[+/-                 ][m.m]*[CREDIT/DEBIT]*CCY*BASIS                     where:                     L         - 'G' for Group Interest, or B                               for BASIC.INTEREST (Base                               rates).
nnn       - Id of group or basic interest                               record.
m.m       - Margin.
NOTE: *CCY and *BASIS  are only used when the interest rate that applies is for a different Currency or Basis than is usually associated with the amount applied or associated currency.
Validation Rules
1 character, type '' (No input.) (Multi-value associated group with ASST.LIAB.CD) */
		AMT_CODE : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=2.0, core=true, t24Name=AMT.CODE)
		/* This is the amount stored for the corresponding AMT.CODEs within a particular ASST.LIAB.CD.
Validation Rules
1 to 14 characters, type 'AMT' (No input.) (Multi-value associated with AMT.CODE and ASST.LIAB.CD) */
		AMOUNT : T24BusinessTypes:AMT
			@t24:i (align=R, inputBehaviour=I, maxLength=19, sysNumber=3.0, core=true, t24Name=AMOUNT)
		/* This gives the rate for the amount in the previous field.
AMT.CODE 1 stores                 Interest rates or                 Exchange rates
AMT.CODEs 2 to 5 or Fixed store                 Rate = AMT.CODE 1 amount /AMT.CODE n amount
AMT.CODE 6 stores Breakeven rate
AMT.CODE 7 is not used presently
Validation Rules
1 to 10 characters, type 'R' (No input.) (Multi-value associated with AMT.CODE and ASST.LIAB.CD). */
		AVG_RATE : T24BusinessTypes:R
			@t24:i (align=R, inputBehaviour=I, maxLength=11, sysNumber=4.0, core=true, t24Name=AVG.RATE)
		/* This gives the total of the amount times the rate for each update to the amount field.  This field is only updated when the AMT CODE field is set to 'FIXED'.
Validation Rules
(No input.) */
		AMT_RATE : T24BusinessTypes:AMT
			@t24:i (align=R, inputBehaviour=I, maxLength=19, sysNumber=5.0, core=true, t24Name=AMT.RATE)
	}
	PM_DLY_POSN_CLASS__TXN_REFERENCE
	{
		/* Links this record with the associated PM.TRAN.ACTIVITY records.
Validation Rules
System maintained. */
		TXN_REFERENCE : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=12, sysNumber=8.0, core=true, t24Name=TXN.REFERENCE)
	}
	/* This parameter file is used to define the mapping of  values  from an application attached to PM through generic interface to the fields of  the table  PM.TRAN.ACTIVITY.

When a transaction  is input in an application attached to PM through the generic interface,  the parameters defined in the table PM.APPLICATION.PARAM would determine the PM Groups for that transaction. For each such PM Group in an application, there could be a record in PM.GROUP.TYPE to enable the mapping of values for generating PM.TRAN.ACTIVITY Gap records. */
	PM_GROUP_TYPE
		@t24:i (t24Name=PM.GROUP.TYPE, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* Specifies the ID of the PM.GROUP.TYPE application.
The format of the  ID will be 'APPLICATION*PM.GROUP.TYPE', where 'APPLICATION' is the ID of a valid record in  PM.APPLICATION.PARAM and 'PM.GROUP.TYPE' is a PM Group (Field: PM.GROUP.TYPE) defined  in PM.APPLICATION.PARAM in  the record with ID  'APPLICATION'.
For example, an  ID could  be 'DX.TRADE*GRP.NAME' where 'GRP.NAME' is a value of the field PM.GROUP.TYPE in PM.APPLICATION.PARAM record with ID = 'DX.TRADE'.
Validation Rules

Two components separated by '*' where the first component should be the ID     of a valid record in PM.APPLICATION.PARAM and second component should be a     value of the field PM.GROUP.TYPE in the record with ID equal to the first     component in PM.APPLICATION.PARAM. */
		PM_GROUP_TYPE_ID -> PM_Config:PM_GROUP_TYPE PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=50, sysNumber=0.0, core=true, businessType=A, t24Name=PM.GROUP.TYPE.ID)
		DESCRIPTION -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION *
		DEC_TYPE -> byValue PM_Config:PM_GROUP_TYPE__DEC_TYPE *
		CAL_TYPE -> byValue PM_Config:PM_GROUP_TYPE__CAL_TYPE *
		REPLAC_TYPE -> byValue PM_Config:PM_GROUP_TYPE__REPLAC_TYPE *
		RESERVED10 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=43.0, core=true, t24Name=RESERVED10)
		RESERVED9 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=44.0, core=true, t24Name=RESERVED9)
		RESERVED8 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=45.0, core=true, t24Name=RESERVED8)
		RESERVED7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=46.0, core=true, t24Name=RESERVED7)
		RESERVED6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=47.0, core=true, t24Name=RESERVED6)
		RESERVED5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=48.0, core=true, t24Name=RESERVED5)
		RESERVED4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=49.0, core=true, t24Name=RESERVED4)
		RESERVED3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=50.0, core=true, t24Name=RESERVED3)
		RESERVED2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=51.0, core=true, t24Name=RESERVED2)
		RESERVED1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=16, sysNumber=52.0, core=true, t24Name=RESERVED1)
		OVERRIDE -> byValue PM_Config:PM_GROUP_TYPE__OVERRIDE *
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=54.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=55.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_GROUP_TYPE__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_GROUP_TYPE__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=58.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=59.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=60.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=61.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=62.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_GROUP_TYPE__DESCRIPTION
	{
		/* Specifies the description for a PM Group.
Validation Rules

Maximum of  40 alphanumeric characters.
Optional field. */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=1.0, core=true, t24Name=DESCRIPTION)
		/* Specifies the value which could  be used to map to the field CURRENCY.MARKET in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field CURRENCY.MARKET in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)



INT.KEY.CAL:

Validation Rules

Value mandatory if  the field CCY.MKT.CAL has a value other than     those starting with '@' or 'DEC'.
Value not allowed if the field CCY.MKT.CAL has a value starting with '@'     or 'DEC'.
Either CURRENCY.MARKET or  CCY.MKT.CAL should  have a value.
Should be name of  a valid field of the Application defined in the ID     or it could be a constant enclosed in double quotes. */
		CURRENCY_MARKET : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=2.0, core=true, t24Name=CURRENCY.MARKET)
		CCY_MKT_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__CCY_MKT_CAL *
		/* Specifies the value which could  be used to map to the field DEALER.DESK  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field DEALER.DESK  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)



INT.KEY.CAL:

Validation Rules

Value mandatory if  the field DLR.DSK.CAL has a value other than     those starting with '@' or 'DEC'.
Value not allowed if the field DLR.DSK.CAL has a value starting with '@'     or 'DEC'.
Either the field DEALER.DESK or   DLR.DSK.CAL should  have a value.
Should be name of  a valid field of the Application defined in the ID     or it could be a constant enclosed in double quotes. */
		DEALER_DESK : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=4.0, core=true, t24Name=DEALER.DESK)
		DLR_DSK_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__DLR_DSK_CAL *
		/* Specifies the value which could  be used to map to the field POSN.TYPE in PM.TRAN.ACTIVITY (PM Gap movement details  for   the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field POSN.TYPE  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)



INT.KEY.CAL:

Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Either the     field POSN.TYPE or
should have a     value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		POSN_TYPE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=6.0, core=true, t24Name=POSN.TYPE)
		POS_TYP_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__POS_TYP_CAL *
		/* Specifies the value which could  be used to map to the field ASST.LIAB.CD in PM.TRAN.ACTIVITY (PM Gap movement details  for   the  Application and Group specified in the ID).

A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.

A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.


It is also possible to map to the field ASST.LIAB.CD  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.


The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.



Example for direct mapping of values:


PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT


CURRENCY.MARKET:
"1" (Constant 1 mapped)


CCY.MKT.CAL:
No value.


INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)


INT.KEY.CAL:
No value.



Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Either the     field ASST.LIAB.CD or
should have a     value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		ASST_LIAB_CD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=8.0, core=true, t24Name=ASST.LIAB.CD)
		AST_LIB_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__AST_LIB_CAL *
		/* Specifies the value which could  be used to map to the field VALUE.DATE in PM.TRAN.ACTIVITY (PM Gap movement details  for   the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field VALUE.DATE  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.

Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Either the     field VALUE.DATE or
should have a     value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		VALUE_DATE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=10.0, core=true, t24Name=VALUE.DATE)
		VAL_DT_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__VAL_DT_CAL *
		/* Specifies the value which could  be used to map to the field VALUE.DATE.SFX in PM.TRAN.ACTIVITY (PM Gap movement details  for   the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field VALUE.DATE.SFX  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.

Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Either the     field VALUE.DATE.SFX or
should have a     value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		VALUE_DATE_SFX : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=12.0, core=true, t24Name=VALUE.DATE.SFX)
		VAL_SFX_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__VAL_SFX_CAL *
		/* Specifies the value which could  be used to map to the field POSN.CLASS in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
ID of a valid record from the application PM.POSN.CLASS should be entered here.

It is also possible to map to the field POSN.CLASS in PM.TRAN.ACTIVITY, a value returned after processing by pre-defined operator  DEC or a  value returned by a routine  specified in the field POS.CLS.CAL. (For details refer to the help text for POS.CLS.CAL). .

Validation Rules


Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Either the     field POSN.CLASS or
should have a     value.

Should be     the ID of a valid record in PM.POSN.CLASS. */
		POSN_CLASS -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=14.0, core=true, businessType=A, t24Name=POSN.CLASS)
		POS_CLS_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__POS_CLS_CAL *
		/* Specifies the value which could  be used to map to the field CURRENCY in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field CURRENCY in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field CCY.CAL has a value other than those starting     with '@' or 'DEC'.

Value not     allowed if the field CCY.CAL has a value starting with '@' or 'DEC'.

Either the     field CURRENCY or CCY.CAL should have a value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		CURRENCY : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=16.0, core=true, t24Name=CURRENCY)
		CCY_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__CCY_CAL *
		/* Specifies the value which could  be used to map to the field CCY.AMT in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field CCY.AMT in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field CCY.AMT.CAL has a value other than those     starting with '@' or 'DEC'.

Value not     allowed if the field CCY.AMT.CAL has a value starting with '@' or 'DEC'.

Either the     field CCY.AMT or CCY.AMT.CAL should have a value.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		CCY_AMT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=18.0, core=true, t24Name=CCY.AMT)
		CCY_AMT_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__CCY_AMT_CAL *
		/* Specifies the value which could  be used to map to the field RATE  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field RATE  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
.CAL has a value     other than those starting with '@' or 'DEC'.

Value not     allowed if the field
.CAL has a value starting     with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		RATE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=20.0, core=true, t24Name=RATE)
		RATE_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__RATE_CAL *
		/* Specifies the value which could  be used to map to the field INT.KEY  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field INT.KEY  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		INT_KEY : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=22.0, core=true, t24Name=INT.KEY)
		INT_KEY_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__INT_KEY_CAL *
		/* Specifies the value which could  be used to map to the field MARGIN  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field MARGIN  in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		MARGIN : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=24.0, core=true, t24Name=MARGIN)
		MARGIN_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__MARGIN_CAL *
		/* Specifies the value which could  be used to map to the field EQUIV.CODE  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field
in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		EQUIV_CODE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=26.0, core=true, t24Name=EQUIV.CODE)
		EQU_CD_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__EQU_CD_CAL *
		/* Specifies the value which could  be used to map to the field EQUIV.AMT  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field
in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		EQUIV_AMT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=28.0, core=true, t24Name=EQUIV.AMT)
		EQU_AMT_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__EQU_AMT_CAL *
		/* Specifies the value which could  be used to map to the field ACTY.PROD.CD  in PM.TRAN.ACTIVITY (generated for the PM Gap movement of  the  Application and Group specified in the ID).
A valid field from the application specified in the ID or a Constant (in double quotes) could be entered here.
A part  of the ID could be also specified here by defining the value as  '@ID[x,y]', which would return a value of 'y' characters from the x th character of the ID of the transaction record.

It is also possible to map to the field
in PM.TRAN.ACTIVITY a value returned by a  routine, or a value returned after processing by pre-defined operators of DEC or CAL or REP. When the operators CAL or REP is specified, the value in this field would be used by the operators  for determining the value to be mapped.

The pre-defined operators or the routine could be specified in the '.CAL'  field which is next to the  field used for mapping.

Example for direct mapping of values:

PM.GROUP.TYPE:

ID:
MG.MORTGAGE*DEFAULT

CURRENCY.MARKET:
"1" (Constant 1 mapped)

CCY.MKT.CAL:
No value.

INT.KEY:
EFFECTIVE.INT  (Value of the Field EFFECTIVE.INT  is mapped)

INT.KEY.CAL:
No value.


Validation Rules


Value     mandatory if  the field
has a     value other than those starting with '@' or 'DEC'.

Value not     allowed if the field
has a value     starting with '@' or 'DEC'.

Should be     name of  a valid field of the Application defined in the ID or it could     be a constant enclosed in double quotes. */
		ACTY_PROD_CD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=30.0, core=true, t24Name=ACTY.PROD.CD)
		ACT_PRD_CAL -> byValue PM_Config:PM_GROUP_TYPE__DESCRIPTION__ACT_PRD_CAL *
	}
	PM_GROUP_TYPE__DESCRIPTION__CCY_MKT_CAL
	{
		/* This field  specifies  the calculation parameter  for the field CURRENCY.MARKET.

It is possible to map to the field CURRENCY.MARKET in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with
@ character)
could be also specified in this field to return a value which could be mapped to the  field CURRENCY.MARKET of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a
sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE)
to the field
VALUE.DATE
of
PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in CURRENCY.MARKET is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in CURRENCY.MARKET is not allowed.

Either the     field CURRENCY.MARKET or CCY.MKT.CAL should have a value. */
		CCY_MKT_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=3.0, core=true, t24Name=CCY.MKT.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__DLR_DSK_CAL
	{
		/* This field  specifies  the calculation parameter  for the field DEALER.DESK.

It is possible to map to the field DEALER.DESK in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field DEALER.DESK of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in DEALER.DESK is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in DEALER.DESK is not allowed.

Either the     field DEALER.DESK or DLR.DSK.CAL should have a value. */
		DLR_DSK_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=5.0, core=true, t24Name=DLR.DSK.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__POS_TYP_CAL
	{
		/* This field  specifies  the calculation parameter  for the field POSN.TYPE.

It is possible to map to the field POSN.TYPE in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field POSN.TYPE of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in POSN.TYPE is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in POSN.TYPE is not allowed.

Either the     field POSN.TYPE or POS.TYP.CAL should have a value. */
		POS_TYP_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=7.0, core=true, t24Name=POS.TYP.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__AST_LIB_CAL
	{
		/* This field  specifies  the calculation parameter  for the field ASST.LIAB.CD.

It is possible to map to the field ASST.LIAB.CD in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field ASST.LIAB.CD of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in ASST.LIAB.CD is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in ASST.LIAB.CD is not allowed.

Either the     field ASST.LIAB.CD or AST.LIB.CAL should have a value. */
		AST_LIB_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=9.0, core=true, t24Name=AST.LIB.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__VAL_DT_CAL
	{
		/* This field  specifies  the calculation parameter  for the field VALUE.DATE.

It is possible to map to the field VALUE.DATE in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field VALUE.DATE of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in VALUE.DATE is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in VALUE.DATE is not allowed.

Either the     field VALUE.DATE or VAL.DT.CAL should have a value. */
		VAL_DT_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=11.0, core=true, t24Name=VAL.DT.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__VAL_SFX_CAL
	{
		/* This field  specifies  the calculation parameter  for the field VALUE.DATE.SFX.

It is possible to map to the field VALUE.DATE.SFX in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field VALUE.DATE.SFX of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in VALUE.DATE.SFX is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in VALUE.DATE.SFX is not allowed.

Either the     field VALUE.DATE.SFX or VAL.SFX.CAL should have a value. */
		VAL_SFX_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=13.0, core=true, t24Name=VAL.SFX.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__POS_CLS_CAL
	{
		/* This field  specifies  the calculation parameter  for the field POSN.CLASS.

It is possible to map to the field POSN.CLASS in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operator  DEC  or by attaching a sub-routine in this field.
If the pre-defined Operator is  specified in this field, it  should be specified in the  format:  'DEC*Tag Name', where the 'Tag Name'  is the value specified in the  field  DEC.TYPE.

Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field POSN.CLASS of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If      the DEC calculation parameter is specified, then its  value should be     of the format: 'DEC*Tag Name', where the 'Tag Name'  is the value     specified in the  field  DEC.TYPE.
If     a sub-routine is attached to this field,  it should be pre-fixed with     '@' character.
If     a sub-routine is attached to this field, it should have been defined in     PGM.FILE with TYPE=S.

If     the value of this field begins with characters  '@' or 'DEC', then a     value in POSN.CLASS is not allowed.

Either     the field POSN.CLASS or POS.CLS.CAL should have a value. */
		POS_CLS_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=15.0, core=true, t24Name=POS.CLS.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__CCY_CAL
	{
		/* This field  specifies  the calculation parameter  for the field CURRENCY.

It is possible to map to the field CURRENCY in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field CURRENCY of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in CURRENCY is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in CURRENCY is not allowed.

Either the     field CURRENCY or CCY.CAL should have a value. */
		CCY_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=17.0, core=true, t24Name=CCY.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__CCY_AMT_CAL
	{
		/* This field  specifies  the calculation parameter  for the field CCY.AMT.

It is possible to map to the field CCY.AMT in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field CCY.AMT of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in CCY.AMT is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in CCY.AMT is not allowed.

Either the     field CCY.AMT or CCY.AMT.CAL should have a value. */
		CCY_AMT_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=19.0, core=true, t24Name=CCY.AMT.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__RATE_CAL
	{
		/* This field  specifies  the calculation parameter  for the field RATE.

It is possible to map to the field RATE in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field RATE of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in RATE is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in RATE is not allowed. */
		RATE_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=21.0, core=true, t24Name=RATE.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__INT_KEY_CAL
	{
		/* This field  specifies  the calculation parameter  for the field INT.KEY.

It is possible to map to the field INT.KEY in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field INT.KEY of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in INT.KEY is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in INT.KEY is not allowed. */
		INT_KEY_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=23.0, core=true, t24Name=INT.KEY.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__MARGIN_CAL
	{
		/* This field  specifies  the calculation parameter  for the field MARGIN.

It is possible to map to the field MARGIN in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field MARGIN of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in MARGIN is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in MARGIN is not allowed. */
		MARGIN_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=25.0, core=true, t24Name=MARGIN.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__EQU_CD_CAL
	{
		/* This field  specifies  the calculation parameter  for the field EQUIV.CODE.

It is possible to map to the field EQUIV.CODE in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field EQUIV.CODE of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in EQUIV.CODE is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in EQUIV.CODE is not allowed. */
		EQU_CD_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=27.0, core=true, t24Name=EQU.CD.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__EQU_AMT_CAL
	{
		/* This field  specifies  the calculation parameter  for the field EQUIV.AMT.

It is possible to map to the field EQUIV.AMT in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field EQUIV.AMT of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in EQUIV.AMT is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in EQUIV.AMT is not allowed. */
		EQU_AMT_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=29.0, core=true, t24Name=EQU.AMT.CAL)
	}
	PM_GROUP_TYPE__DESCRIPTION__ACT_PRD_CAL
	{
		/* This field  specifies  the calculation parameter  for the field ACTY.PROD.CD.

It is possible to map to the field ACTY.PROD.CD in PM.TRAN.ACTIVITY
, a value returned after processing by pre-defined operators of DEC or CAL or REP or by attaching a sub-routine in this field.
If the pre-defined Operators are specified in this field, they should be specified in the  format:  'Pre-defined Operator*Tag Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or 'REP' and the 'Tag Name'  is the value specified in the  fields DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined Operator.

Example:

This field could have the following values:
'DEC*abcde' where DEC is a Pre-defined Operator and 'abcde' is a Tag Name defined in the field DEC.TYPE.
'CAL*pqrst' where CAL is a Pre-defined Operator and 'pqrst' is a Tag Name defined in the field CAL.TYPE.
'REP*vwxyz' where REP is a Pre-defined Operator and 'vwxyz' is a Tag Name defined in the field REPLAC.TYPE.


Example for CAL  Operator in '.CAL'  fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.



Example  for REP Operator in '.CAL' fields:

PM.GROUP.TYPE:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.



Example  for DEC Operator in '.CAL' fields:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as ' 1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as ' 2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


A subroutine (prefixed with @ character) could be also specified in this field to return a value which could be mapped to the  field ACTY.PROD.CD of
PM.TRAN.ACTIVITY
.

The sub-routine specified in the '.CAL' field could have only two parameters both separated by a , the first parameter being the output parameter and the second parameter being the input parameter. If there is more than one input parameter, they could be specified in the second parameter separated by the delimiter :.


Example for Subroutine in the '.CAL' fields:



To map the output of a sub-routine DX.DATES (with output parameter RETURN.DATE and input parameters CONTRACT.CODE, MAT.PERIOD, DATE.TO.RETURN and RETURN.CODE) to the field
VALUE.DATE
of PM.TRAN.ACTIVITY:


PM.GROUP.TYPE:
ID:
DX.TRADE*FXP-PRI


VALUE.DATE:
(No value)


VAL.DT.CAL:
@DX.DATES(RETURN.DATE,CONTRACT.CODE:MAT.PERIOD:DATE.TO.RETURN:RETURN.CODE)



Validation Rules

If a calculation parameter is     specified, then the value should be of the format: 'Pre-defined Operator*Tag     Name', where the 'Pre-defined Operator' could be either 'DEC', 'CAL' or     'REP' and the 'Tag Name'  is the value specified in the  fields     DEC.TYPE or CAL.TYPE or REPLAC.TYPE depending on the  Pre-defined     Operator.
If a sub-routine is attached     to this field,  it should be pre-fixed with '@' character.
If a sub-routine is attached     to this field, it should have been defined in PGM.FILE with TYPE=S.

If the     value of this field begins with characters other than '@' or 'DEC', then a     value in ACTY.PROD.CD is mandatory.

If the     value of this field begins with characters  '@' or 'DEC', then a value     in ACTY.PROD.CD is not allowed. */
		ACT_PRD_CAL : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=31.0, core=true, t24Name=ACT.PRD.CAL)
	}
	PM_GROUP_TYPE__DEC_TYPE
	{
		/* Specifies a Tag Name for the Pre-defined Operator 'DEC', which could be used in the '.CAL' fields.
The '.CAL'  fields using the 'DEC' operator could be of  the  format:  'DEC*Tag Name', where the 'Tag Name'  is a value defined in this field.

Validation Rules

Maximum of 30 alphanumeric characters.
Duplicates not allowed.
This field is associated with the fields  from DEC.TYPE to DEC.VALUE. */
		DEC_TYPE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=32.0, core=true, t24Name=DEC.TYPE)
		DEC_ANSWER -> byValue PM_Config:PM_GROUP_TYPE__DEC_TYPE__DEC_ANSWER *
	}
	PM_GROUP_TYPE__DEC_TYPE__DEC_ANSWER
	{
		/* This is the value returned for mapping to a field of PM.TRAN.ACTIVITY, when the DEC operator is used in a '.CAL' field.

Example  for DEC Operator:



PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI



ASST.LIAB.CD
:
(No value)



AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)


DEC.TYPE:

ASST.LIAB




DEC.ANSWER:
1 (Value Returned)



DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)



DEC.OPERAND:
EQ (Operand for Comparison)



DEC.VALUE:
BUY (Value compared to)



DEC.ANSWER:
2 (Value Returned)



DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)



DEC.OPERAND:
EQ (Operand for Comparison)



DEC.VALUE:
SELL




The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as '1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as '2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.


Validation Rules

A Constant value entered without quotes.
Field associated with the fields from DEC.TYPE to DEC.VALUE. */
		DEC_ANSWER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=33.0, core=true, t24Name=DEC.ANSWER)
		/* Specifies the field used for comparison purposes by  DEC operator.

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as '1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as '2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.

Validation Rules

Should be the name of a valid  field in the application     specified in the ID.

This field is associated with the fields  from     DEC.TYPE to DEC.VALUE. */
		DEC_FIELD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=34.0, core=true, t24Name=DEC.FIELD)
		/* Specifies the Operator  for evaluating a condition used by DEC Operator.


Example  for DEC Operator:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as '1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as '2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.

Validation Rules



Valid     Operators are EQ, GE, GT, LE, LK, LT, NE, UL.


This field is associated with the     fields  from DEC.TYPE to DEC.VALUE. */
		DEC_OPERAND : PM_Config:PM_GROUP_TYPE__DEC_TYPE__DEC_ANSWER__DEC_OPERAND
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=35.0, core=true, t24Name=DEC.OPERAND)
		/* Specifies the name of a field or a constant  for comparison, used by a DEC operator.

Example  for DEC Operator:

PM.GROUP.TYPE
:
ID:
DX.TRADE*FXP-PRI

ASST.LIAB.CD
:
(No value)

AST.LIB.CAL
:
DEC*ASST.LIAB (DEC-Operator, ASST.LIAB-Tag Name)

DEC.TYPE:

ASST.LIAB


DEC.ANSWER:
1 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
BUY (Value compared to)

DEC.ANSWER:
2 (Value Returned)

DEC.FIELD:
PRI.BUY.SELL (Field whose value would be compared)

DEC.OPERAND:
EQ (Operand for Comparison)

DEC.VALUE:
SELL


The value of  ASST.LIAB.CD in PM.TRAN.ACTIVITY in this case would be mapped as '1'  if the value of the field PRI.BUY.SELL is equal to 'BUY' and  it would be mapped as '2'  if the value of the field PRI.BUY.SELL is equal to 'SELL'.

Validation Rules

Should be the name of a valid field in the application specified in the ID     or a  Constant value entered within double quotes.

This field is associated with the fields  from     DEC.TYPE to DEC.VALUE. */
		DEC_VALUE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=36.0, core=true, t24Name=DEC.VALUE)
	}
	PM_GROUP_TYPE__CAL_TYPE
	{
		/* Specifies a Tag Name for the Pre-defined Operator 'CAL', which could be used in the '.CAL' fields.
The '.CAL'  fields using the 'CAL' operator could be of  the  format:  'CAL*Tag Name', where the 'Tag Name'  is a value defined in this field.

Validation Rules

Maximum of 30 alphanumeric characters.
Duplicates not allowed.
This field is associated with the fields  from CAL.TYPE to CAL.FIELD. */
		CAL_TYPE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=37.0, core=true, t24Name=CAL.TYPE)
		CALC_OPERAND -> byValue PM_Config:PM_GROUP_TYPE__CAL_TYPE__CALC_OPERAND *
	}
	PM_GROUP_TYPE__CAL_TYPE__CALC_OPERAND
	{
		/* Specifies the arithmetic operator   used by CAL  Operator.

Example for CAL  Operator:

PM.GROUP.TYPE:

ID:
DRAWINGS*DISCOUNT

INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)

INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)

CAL.TYPE:
RATE (Tag Name)

CALC.OPERAND:
ADD (Operand for calculation)

CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)

The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.

Validation Rules



Valid     Operators are ADD, DIVIDE, MULTIPLY, SUBTRACT


This field is associated with the     fields  from CAL.TYPE to CAL.FIELD. */
		CALC_OPERAND : PM_Config:PM_GROUP_TYPE__CAL_TYPE__CALC_OPERAND__CALC_OPERAND
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=38.0, core=true, t24Name=CALC.OPERAND)
		/* Specifies the name of a field or a constant  used for calculation  purposes by  CAL  operator.
Example for CAL  Operator:


PM.GROUP.TYPE:

ID:
DRAWINGS*DISCOUNT


INT.KEY:
DISCOUNT.RATE (Field Name whose value is used for calculation)


INT.KEY.CAL:
CAL*RATE (CAL-Operator, RATE-Tag Name)


CAL.TYPE:
RATE (Tag Name)


CALC.OPERAND:
ADD (Operand for calculation)


CALC.FIELD:
LOAD.RATE (Field Name whose value is used for calculation)


The value of INT.KEY in PM.TRAN.ACTIVITY in this case would be mapped as the sum of values in the fields DISCOUNT.RATE and  LOAD.RATE.


Validation Rules

Should be the name of a valid  field in the application     specified in the ID or a constant in double quotes.

This field is associated with the fields  from     CAL.TYPE to CAL.FIELD. */
		CALC_FIELD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=39.0, core=true, t24Name=CALC.FIELD)
	}
	PM_GROUP_TYPE__REPLAC_TYPE
	{
		/* Specifies a Tag Name for the Pre-defined Operator 'REP', which could be used in the '.CAL' fields.
The '.CAL'  fields using the 'REP' operator could be of  the  format:  'REP*Tag Name', where the 'Tag Name'  is a value defined in this field.

Validation Rules

Maximum of 30 alphanumeric characters.
Duplicates not allowed.
This field is associated with the fields  from REPLAC.TYPE to     REPLAC.FIELD. */
		REPLAC_TYPE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=40.0, core=true, t24Name=REPLAC.TYPE)
		REPLAC_FILE -> byValue PM_Config:PM_GROUP_TYPE__REPLAC_TYPE__REPLAC_FILE *
	}
	PM_GROUP_TYPE__REPLAC_TYPE__REPLAC_FILE
	{
		/* Specifies the name of a valid T24 application, whose fields could  be used by the REP Operator.

Example  for REP Operator:

PM.GROUP.TYPE
:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.


Validation Rules



Should be a     valid T24 application defined in PGM.FILE.


Field     associated with the fields REPLAC.FILE  to REPLAC.FIELD. */
		REPLAC_FILE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=41.0, core=true, t24Name=REPLAC.FILE)
		/* Specifies the name of a valid single-valued field in REPLAC.FILE used by the REP Operator.

Example  for REP Operator:

PM.GROUP.TYPE
:
ID:
DRAWINGS*DISCOUNT

CURRENCY.MARKET:
LC.ID (A local ref. Field in DRAWINGS whose value would be used to relate to a record in the application specified in the field  REPLAC.FILE)

CCY.MKT.CAL:
REP*MKT (REP-Operator, MKT-Tag Name)

REPLAC.TYPE:
MKT (Tag Name)

REPLAC.FILE:
LETTER.OF.CREDIT (Related Application  Name)

REPLAC.FIELD:
CURRENCY.MARKET (Field in the Related Application)

The value of  CURRENCY.MARKET in PM.TRAN.ACTIVITY in this case would be mapped as the value of the field CURRENCY.MARKET in the LC record whose ID is equal to the value of the field LC.ID in the DRAWINGS record.

Validation Rules

Should be name of a single-valued field in the file specified as     REPLAC.FILE. */
		REPLAC_FIELD : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=42.0, core=true, t24Name=REPLAC.FIELD)
	}
	PM_GROUP_TYPE__OVERRIDE
	{
		OVERRIDE : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=35, sysNumber=53.0, core=true, t24Name=OVERRIDE)
	}
	PM_GROUP_TYPE__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=56.0, core=true, t24Name=INPUTTER)
	}
	PM_GROUP_TYPE__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=57.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* OVERVIEW PM.GRP
This table is used primarily to set up groups which can then be specified in 'GRP.ABBR' in the file 'PM.POSN.REFERENCE'.
Each record created in this table serves the purpose of a generalised transaction which allows a set of records of some specific files (such as 'DEALER.DESK', 'FX.POS.TYPE', 'CURRENCY.MARKET') to be grouped together.
These groups can then be used in the definition of the various positions in 'PM.POSN.REFERENCE'. */
	PM_GRP
		@t24:i (t24Name=PM.GRP, level=F, type=U, allowedFunctions="A C D E I L P Q R S", localRefAllowed=true)
	{
		/* This is the key to PM.GRP
Validation Rules
3 to 5 characters type AA. (Mandatory). */
		PM_GROUP_ID -> PM_Config:PM_GRP PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=0.0, core=true, businessType=AA, t24Name=PM.GROUP.ID)
		/* This is the short name of the group.
Validation Rules
1 to 10 characters type AA. (Mandatory). */
		SHORT_NAME : T24BusinessTypes:AA required
			@i18n:Label (en="Short name")
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=1.0, core=true, t24Name=SHORT.NAME)
		DESCRIPTION -> byValue PM_Config:PM_GRP__DESCRIPTION *
		/* This is the application file from which the user wants to define a group.
A group will be formed for this application field.  (e.g. DEALER.DESK as an application, then desk 01, 02, 03, could form a group).
Validation Rules
1 to 35 characters, type A. (Mandatory).
Must be a valid application file. */
		APPLICATION -> EB_SystemTables:PGM_FILE required
			@i18n:Label (en=Application)
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=3.0, core=true, businessType=AA, t24Name=APPLICATION)
		RECORD_ID -> byValue PM_Config:PM_GRP__RECORD_ID *
		/* This is reserved for future use.
Validation Rules
No input. */
		R1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=5.0, core=true, t24Name=R1)
		/* This is reserved for future use.
Validation Rules
No input. */
		R2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=6.0, core=true, t24Name=R2)
		/* This is reserved for future use.
Validation Rules
No input. */
		R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=7.0, core=true, t24Name=R3)
		/* This is reserved for future use.
Validation Rules
No input. */
		R4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=8.0, core=true, t24Name=R4)
		/* This is reserved for future use.
Validation Rules
No input. */
		R5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=9.0, core=true, t24Name=R5)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=11.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=12.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_GRP__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_GRP__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=15.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=16.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=17.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=18.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=19.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_GRP__DESCRIPTION
	{
		/* This is the description of the group.
Validation Rules
Up to 4 * 35 characters type A. (Optional) (Multivalue). */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=2.0, core=true, t24Name=DESCRIPTION)
	}
	PM_GRP__RECORD_ID
	{
		/* These are the records that are used to form a group.


Validation Rules
1 to 35 characters, type A. (Mandatory). (Multivalue).
Must be a valid record on the APPLICATION file.
No duplicate. */
		RECORD_ID : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=4.0, core=true, t24Name=RECORD.ID)
	}
	PM_GRP__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=13.0, core=true, t24Name=INPUTTER)
	}
	PM_GRP__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=14.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* PM.PARAMETER

This is the parameter file that drives the Position Management System.
The main functions are:
a.        To allow the overnight batch process to determine either:
(i) To read the unauthorised contracts/deals for                 'HOLD' or 'DELETE' process or
(ii) To read the authorised file and to re-create all the                 activities.
b.        To set the appropriate Position Classes for various           activities relating to the FOREX application.           PM.POSN.REFERENCE can then be used to determine           which position contains what 'POSN.CLASS'. */
	PM_PARAMETER
		@t24:i (t24Name=PM.PARAMETER, level=I, type=U, allowedFunctions="A C D E I L P Q R S", localRefAllowed=false)
	{
		/* This is the key to PM.PARAMETER FILE.
PM.PARAMETER is used to specify the various parameters used by position management.
Validation Rules
6 Characters. -      (i) Must be SYSTEM. */
		PM_PARAMETER_ID -> PM_Config:PM_PARAMETER PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=6, sysNumber=0.0, core=true, t24Name=PM.PARAMETER.ID)
		APPLN -> byValue PM_Config:PM_PARAMETER__APPLN *
		APPLN_INC -> byValue PM_Config:PM_PARAMETER__APPLN_INC *
		/* For internal use only.
Validation Rules
2 Numeric Characters. Value = 22 */
		COL : PM_Config:PM_PARAMETER__COL
			@i18n:Label (en=Col)
			@i18n:Tooltip (en=Col)
			@t24:i (align=R, inputBehaviour=N, maxLength=2, sysNumber=4.0, core=true, t24Name=COL)
		/* For internal use only.

Validation Rules
1 - 3 numeric Characters Value  = "50" */
		FX_ROW : PM_Config:PM_PARAMETER__FX_ROW
			@i18n:Label (en="Fx Row")
			@i18n:Tooltip (en="Fx Row")
			@t24:i (align=R, inputBehaviour=N, maxLength=3, sysNumber=5.0, core=true, t24Name=FX.ROW)
		/* This field contains the position class that is associated with FX spot and Swap/Forward deals done under the rebate method.
Validation Rules
5 characters, type 'AA'.
Must be a valid record on PM.POSN.CLASS. */
		FX_FOREX -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Forex")
			@i18n:Tooltip (en="Fx Forex")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=6.0, core=true, businessType=AA, t24Name=FX.FOREX)
		/* This field contains the position CLASS that is associated wit Forex SW/FW deals that have REVALUATION type equal to "IN" or "SL"
Validation Rules
5, type 'AA'. (Optional)
Must be a valid record on PM.POSN.CLASS. */
		FX_SW -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Sw")
			@i18n:Tooltip (en="Forex Swap")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=7.0, core=true, businessType=AA, t24Name=FX.SW)
		/* This field contains the position CLASS that is associated with FX Swap deals that have REVALUATION type of 'SL' or 'IN'.  It represents the position class for the start activity.
This is the start activity POSN Class for FX interest swaps.
Validation Rules
5 characters, Type 'A'. (Optional)
Must be a valid record on PM POSN CLASS.
Must be present if FX.INT.SW.MAT.is present. */
		FX_INT_SW_ST -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Int Sw St")
			@i18n:Tooltip (en="FX Int Swap Start")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=8.0, core=true, businessType=AA, t24Name=FX.INT.SW.ST)
		/* This field contains the position CLASS that is associated with Forex SW/FW deals that have REVALUATION type of 'SL' or 'IN'.  It represents the position class for the maturity activity.
This is the start activity POSN CLASS for FX interest swaps.
Validation Rules
5 characters, Type 'AA'. (Optional)
Must be a valid record on PM POSN CLASS.
Must be present if FX.INT.SW.ST. is present.
Must not be present if FX.INT.Sw.ST is not present. */
		FX_INT_SW_MAT -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Int Sw Mat")
			@i18n:Tooltip (en="FX Int Swap Maturity")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=9.0, core=true, businessType=AA, t24Name=FX.INT.SW.MAT)
		/* This field contains the position class that is associated with Forex FW deals that have REVALUATION type of 'IH'. It represents the position class for the start activity.
This activity is for the Notional Amounts involved in an FX           deal at the associated Spot date.
Validation Rules
5 Characters, Type 'AA'. (Optional) */
		FX_PRIN_ST -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Prin St")
			@i18n:Tooltip (en="Forex Principal Start")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=10.0, core=true, businessType=AA, t24Name=FX.PRIN.ST)
		/* This field contains the position class that is associated with FX Swap deals using 'SF' revaluation type.
Validation Rules
5 characters, type 'AA'.
Must be a valid record on PM.POSN.CLASS. */
		FX_SW_PL_FWD_POS -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Sw Pl Fwd Pos")
			@i18n:Tooltip (en="FX Swap PL Fwd Pos")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=11.0, core=true, businessType=AA, t24Name=FX.SW.PL.FWD.POS)
		/* This field is obsolete at 14.2.0
This field contained the position class that is associated with Forex FW deals that have REVALUATION type of 'IH'. It represents the position class for the HEDGED Interest activity.
Validation Rules
Obsolete */
		FX_CASH_HDG_INT -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=N, maxLength=5, sysNumber=12.0, core=true, businessType=AA, t24Name=FX.CASH.HDG.INT)
		/* This field is obsolete at 14.2.0
This field contained the position class that is associated with Forex FW deals that have REVALUATION type of 'IH'. It represents the position class for the START activity to be used in the GAP analysis.
Validation Rules
Obsolete */
		FX_GAP_PRIN_ST -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=N, maxLength=5, sysNumber=13.0, core=true, businessType=AA, t24Name=FX.GAP.PRIN.ST)
		/* This field is obsolete at 14.2.0
This field contained the position class that is associated with Forex FW deals that have REVALUATION type of 'IH'. It represents the position class for the MATURITY activity to be used in the GAP analysis.
Validation Rules
Obsolete */
		FX_GAP_PRIN_MAT -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=N, maxLength=5, sysNumber=14.0, core=true, businessType=AA, t24Name=FX.GAP.PRIN.MAT)
		/* This field contains the Position Class record that is associated with the Currrency Asset and Liability position.
This field is required if Position Management is active and there are any currency positions in the T24 system.
Validation Rules
5 characters, type "AA". (Mandatory) */
		FX_ASST_LIAB -> PM_Config:PM_POSN_CLASS required
			@i18n:Label (en="Fx Asst Liab")
			@i18n:Tooltip (en="Forex Asset Liability")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=15.0, core=true, businessType=AA, t24Name=FX.ASST.LIAB)
		/* This field contains the position class that is associated with FX Forward Interest Cover deals.
Validation Rules
5 characters, type 'AA'.
Must be a valid record on PM.POSN.CLASS. */
		FX_FWD_INT_COVER -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Fwd Int Cover")
			@i18n:Tooltip (en="FX Fwd Int Cover")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=16.0, core=true, businessType=AA, t24Name=FX.FWD.INT.COVER)
		/* PM Class for the unused element of FOREX multi-option deal.
Validation Rules
5 Characters of the type 'AA' Must exist on the PM.POSN.CLASS file */
		FX_OPT_AVAIL_CLS -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fx Opt Avail Cls")
			@i18n:Tooltip (en="Forex Option Avail Class")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=17.0, core=true, businessType=AA, t24Name=FX.OPT.AVAIL.CLS)
		/* For internal use only.
Validation Rules
1 - 3 numeric characters. Value "50" */
		MM_ROW : PM_Config:PM_PARAMETER__MM_ROW
			@i18n:Label (en="Mm Row")
			@i18n:Tooltip (en="Money Market Row")
			@t24:i (align=R, inputBehaviour=N, maxLength=3, sysNumber=18.0, core=true, t24Name=MM.ROW)
		LMM_DEP_CAT -> byValue PM_Config:PM_PARAMETER__LMM_DEP_CAT *
		LMM_LOAN_CAT -> byValue PM_Config:PM_PARAMETER__LMM_LOAN_CAT *
		/* This field contains the start POSN CLASS for Overnight (one day) money.
1. This is the POSN CLASS for the start activity.
2. If this is specified, for any one day money, it takes precedence over the position class defined in LMM GAP ST.
Validation Rules */
		LMM_ONITE_GAP_ST -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Lmm Onite Gap St")
			@i18n:Tooltip (en="LMM Onite Gap Start")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=21.0, core=true, businessType=AA, t24Name=LMM.ONITE.GAP.ST)
		/* This field contains the maturity POSN CLASS for Overnight (one day) money.
1. This is the POSN CLASS for the maturity activity.
2. If this is specified, for any one day money, it takes precedence over the position class defined in LMM GAP MAT.
Validation Rules */
		LMM_ONITE_GAP_MAT -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Lmm Onite Gap Mat")
			@i18n:Tooltip (en="LMM Onite Gap Maturity")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=22.0, core=true, businessType=AA, t24Name=LMM.ONITE.GAP.MAT)
		/* This field contains the date suffix.


1.        This field allows the system to generate one day money           maturity activity.
2.        If a period is set to 'ODM' in PM CALENDAR, this field           should be set to the same corresponding DATE SFX.
Validation Rules
1 character, type ''.
Must be either 0 or 2. */
		LMM_ONITE_GM_SFX : PM_Config:PM_PARAMETER__LMM_ONITE_GM_SFX
			@i18n:Label (en="Lmm Onite Gm Sfx")
			@i18n:Tooltip (en="LMM Onite Gm Suffix")
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=23.0, core=true, t24Name=LMM.ONITE.GM.SFX)
		LMM_CAT -> byValue PM_Config:PM_PARAMETER__LMM_CAT *
		/* This field contains the Position Class assigned to Interest Maturity Activity on Money Market transactions.
Validation Rules
5 characters, type "A" (optional). */
		LMM_INTEREST -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=28.0, core=true, businessType=AA, t24Name=LMM.INTEREST)
		/* This field is reserved for future use.
Validation Rules
No input. */
		LMM_R2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=29.0, core=true, t24Name=LMM.R2)
		/* This field is reserved for future use.
Validation Rules
No input. */
		LMM_R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=30.0, core=true, t24Name=LMM.R3)
		/* Validation Rules
Mandatory input.
A maximum of 12 characters may be entered.
The following values are permitted:       PLACINGS      TAKINGS */
		ENQ_NEG_SIGN : PM_Config:PM_PARAMETER__ENQ_NEG_SIGN required
			@t24:i (align=L, inputBehaviour=I, maxLength=12, sysNumber=31.0, core=true, t24Name=ENQ.NEG.SIGN)
		HVL_APP -> byValue PM_Config:PM_PARAMETER__HVL_APP *
		PM_FX_SYNTH_RTN -> EB_SystemTables:EB_API
			@t24:i (align=L, inputBehaviour=I, maxLength=25, sysNumber=33.0, core=true, businessType=HOOK, t24Name=PM.FX.SYNTH.RTN)
		FRA_LONG_RATE -> EB_SystemTables:EB_API
			@t24:i (align=L, inputBehaviour=I, maxLength=25, sysNumber=34.0, core=true, businessType=HOOK, t24Name=FRA.LONG.RATE)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=35.0, core=true, t24Name=R7)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=36.0, core=true, t24Name=R6)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=37.0, core=true, t24Name=R5)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=38.0, core=true, t24Name=R4)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=39.0, core=true, t24Name=R3)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=40.0, core=true, t24Name=R2)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=41.0, core=true, t24Name=R1)
		/* This field is reserved for future use.
Validation Rules
No input. */
		R0 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=42.0, core=true, t24Name=R0)
		/* This field indicates whether GAP activies are generated for TRADE type FRA deals. GAP activites are always generated for HEDGE type trades.
Validation Rules
YES indicates that GAP activities are generated for TRADE type deals, NO or blank indicates that GAP activities are not generated. */
		FRA_TRADE_GAP : PM_Config:PM_PARAMETER__FRA_TRADE_GAP
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=43.0, core=true, t24Name=FRA.TRADE.GAP)
		/* The PM.POSN.CLASS used to identify Negotiated Deal activities.
Validation Rules
5 Characters of the type 'AA' Must exist on the PM.POSN.CLASS file */
		FX_NDF -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=44.0, core=true, businessType=AA, t24Name=FX.NDF)
		/* Introduced in Release G14.1
Specifies  whether a FXP Position needs to be generated in PM.TRAN.ACTIVITY for the Local Currency, when a transaction involving a Foreign Currency and a Local Currency is input in the Applications FT, TT and DC.

If this parameter is set to YES, data related to FXP Position class  FTFFT or  TTFXP (depending on the Parameterization in PM.PC.PARAM) would be respectively  updated in PM.TRAN.ACTIVITY, for Local Currency movement also, when a Transaction involving a Foreign and Local Currency is  input in the Applications FT and TT.

If this parameter is set to YES, data related to FXP Position class DCFDC (depending on the Parameterization in PM.PC.PARAM) would be updated in PM.TRAN.ACTIVITY for Local Currency movement also, when a Foreign Currency Transaction
is input in the Application DC.

In this parameter is set to NO or Null,  then in the above specified cases  the FXP type Position class data  would be generated only for Foreign Currency movement.
Validation Rules

Valid values are YES, NO or Null.
NO and Null are equivalent. */
		BUILD_LCY_POSN : PM_Config:PM_PARAMETER__BUILD_LCY_POSN
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=45.0, core=true, t24Name=BUILD.LCY.POSN)
		/* Introduced in G14.1.
Specifies whether contracts with Zero interest rates need  to be updated in PM.DLY.POSN.CLASS  GAP position records  in the Sub-value 10 fields.
If this field is Null or NO, then contracts with Zero interest rates would not be updated in PM.DLY.POSN.CLASS GAP position records in the Sub-value 10 fields, and consequently they would not be reported in PM.GAP enquiry, which is the functionality before the T24 release G14.1.
On the other hand, if  this field is set to YES, then then contracts with Zero interest rates would be updated in PM.DLY.POSN.CLASS GAP position records in the Sub-value 10 fields, and consequently they would be reported in PM.GAP enquiry.


Example 1: PM.PARAMETER: ZERO.INT.RATE:YES

MM0235700101: PRINCIPAL: USD 1,000,000,     INTEREST.RATE:  0,      MATURITY DATE: 20031223

MM0235700102: PRINCIPAL: USD 2,000,000,     INTEREST.RATE: 10,      MATURITY DATE: 20031223

































































BNK






































Example 2: PM.PARAMETER: ZERO.INT.RATE:NO or NULL.

MM0235700301: PRINCIPAL: EUR 1,000,000,     INTEREST.RATE:  0,     MATURITY DATE: 20031223

MM0235700302: PRINCIPAL: EUR 2,000,000,     INTEREST.RATE: 10,     MATURITY DATE: 20031223


































































BNK





































Validation Rules

Valid values are YES, NO or Null. */
		ZERO_INT_RATE : PM_Config:PM_PARAMETER__ZERO_INT_RATE
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=46.0, core=true, t24Name=ZERO.INT.RATE)
		RESERVED_1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=35, sysNumber=47.0, core=true, t24Name=RESERVED.1)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=48.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=49.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_PARAMETER__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_PARAMETER__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=52.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=53.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=54.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=55.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=56.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_PARAMETER__APPLN
	{
		/* Application  whose PM records need to be maintained during batch processing.
Validation Rules

Should be  ID of  a valid application   in      PGM.FILE.
For applications in  modules other than those linked to PM  through generic interface
(i.e.     Applications in modules other than
DC, FR, FT, FX, LD, MM, ND, PD, SC, SW, TT
)
Cannot have duplicate values. */
		APPLN -> EB_SystemTables:PGM_FILE required
			@t24:i (align=L, inputBehaviour=I, maxLength=45, sysNumber=1.0, core=true, businessType=A, t24Name=APPLN)
		/* This is the processing code for the application defined in previous field.
For applications not linked to PM through generic interface
1. NAU if set means that only the following PM.TRAN.ACTIVITY records will be regenerated in the COB
those with a value date falling within the COB processing period
those where the TRAN.PROC.DTL date falls within the COB processing period
2.  CA means that all PM.TRAN.ACTIVITY records will be regenerated.
FX records will always be re generated as the local equivalents need to be revalued.
The reason for the above is to try and improve performance in a T24 non stop environment.
NAU setting should be quicker as not as many records will be regenerated. An example would be PM.TRAN.ACTIVITY records with a large number of weekly or monthly schedules. If NAU is set then these types of records would only be processed when a value date is due. The disadvantage is that account (CAS) type activities would not be recalcualted on a daily basis so if an acount balance changes the interest key  would only be recalculated on the next due date. The setting basically depends on the type of enquiries being used.
3. For interface using generic PM the parameters defined in the application
PM.APPL.SELECTION
would further determine the maintenance of
PM.TRAN.ACTIVITY
records during batch processing
Validation Rules

1 - 3 characters, type 'A'. (Optional.) (Associated multivalue with field     1.1).
Must be 'CA' or 'NAU'. */
		PROC_CODE : PM_Config:PM_PARAMETER__APPLN__PROC_CODE
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=2.0, core=true, t24Name=PROC.CODE)
	}
	PM_PARAMETER__APPLN_INC
	{
		/* This is a multi valued field.
Validation Rules

System updated field through the application PM.UPDATE.APPL.
ID of  a valid T24 product. */
		APPLN_INC -> EB_SystemTables:EB_PRODUCT required
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=3.0, core=true, businessType=A, t24Name=APPLN.INC)
	}
	PM_PARAMETER__LMM_DEP_CAT
	{
		/* This field contains the deposit CATEGORY code(s).
This field could contain either a single category, or a range of CATEGORY separated by a ','.
Validation Rules
1 - 11 characters type 'A'.
Must be a valid CATEGORY record.
If a range is used, the 2nd CATEGORY must be greater than the 1st CATEGORY. */
		LMM_DEP_CAT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=11, sysNumber=19.0, core=true, t24Name=LMM.DEP.CAT)
	}
	PM_PARAMETER__LMM_LOAN_CAT
	{
		/* This field contains the loan CATEGORY code(s).
This field could contain either a single category, or a range of CATEGORY separated by a ','.
Validation Rules
1 - 11 characters type 'A'. (Optional) (Multivalue)
Must be a valid CATEGORY record.
If a range is used, the 2nd CATEGORY must be greater than the 1st CATEGORY. */
		LMM_LOAN_CAT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=11, sysNumber=20.0, core=true, t24Name=LMM.LOAN.CAT)
	}
	PM_PARAMETER__LMM_CAT
	{
		/* This field contains the CATEGORY that is related to a specific POSN CLASS.


1.        This field could contain either a single CATEGORY, or a           range of CATEGORY seperated by a ','.
2.        This allows the POSN CLASS to be generated for different           categories.
Validation Rules
1 - 11 characters, type 'A'. (Optional) (Multivalue associated with fields 19.1 to 21.1)
Must be a valid CATEGORY record. */
		LMM_CAT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=11, sysNumber=24.0, core=true, t24Name=LMM.CAT)
		/* This field contains the start POSN CLASS assigned to the principle start activity on Money Market Transaction.
Validation Rules
5 characters, type 'AA'. (Optional) (Multivalue associated with fields 18.1  AND 20.1 TO 21.1)
Must be a valid record on PM POSN CLASS.
Must be present if the corresponding LMM GAP MAT is present. */
		LMM_GAP_ST -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=25.0, core=true, businessType=AA, t24Name=LMM.GAP.ST)
		/* This field contains the maturity POSN CLASS assigned to the principle maturity activity on Money Market Transaction.
Validation Rules
5 characters, type 'A'. (Optional) (Multivalue associated with fields 18.1, 19.1 and 21.1)
Must be a valid record on PM POSN CLASS.
Must be present if the corresponding LMM GAP ST is present.
Must not be present if LMM GAP ST is not present. */
		LMM_GAP_MAT -> PM_Config:PM_POSN_CLASS
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=26.0, core=true, businessType=AA, t24Name=LMM.GAP.MAT)
		/* This field contains the date suffix.
This field should only be input if there is a need to aggregate call money into a separate period.
It should be set to the corresponding 'CAL' DATE SFX in PM CALENDAR.
Validation Rules
1 character, type ''. (Optional.) (Multivalue associated group with fields 18.1 to 20.1).
Must be either 0 or 2. */
		LMM_GM_DATE_SFX : PM_Config:PM_PARAMETER__LMM_CAT__LMM_GM_DATE_SFX
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=27.0, core=true, t24Name=LMM.GM.DATE.SFX)
	}
	PM_PARAMETER__HVL_APP
	{
		/* For environments which have high volume low value transactions in either Funds Transfer or Teller applications it is possible to switch of the generation of the PM.TRAN.ACTIVITY and PM.DRILL.DOWN records.

Enquiries for high volume modules will not be able to drill down to the transaction level detail.

This field is used to control this functionality, valid options;
• Null
• FT
• TT */
		HVL_APP : PM_Config:PM_PARAMETER__HVL_APP__HVL_APP
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=32.0, core=true, t24Name=HVL.APP)
	}
	PM_PARAMETER__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=50.0, core=true, t24Name=INPUTTER)
	}
	PM_PARAMETER__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=51.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* This table  defines the parameters for generation of account  and forex  related position movements  in PM.TRAN.ACTIVITY, for modules/applications linked to PM Module through the generic interface.
For the PD module, this table defines which of the generic position types are applicable to it, and also defines for each position type an associated character that is used to identify any account  related movements.
For  the Data Capture, Funds Transfer and  Teller Modules, this table defines the Transaction Codes and defines the parameters for account  related movements and  also define the position classes for forex related movements in PM Module.
For the above referred modules, there could be only one record at module level with IDs  viz. DC, FT, PD, TT for Data Capture, Funds Transfer, PD and Teller modules respectively.
For other applications in modules linked to PM through generic interface (i.e. Applications in modules other than FR, FX, LD, MM, ND, SC, SW), there could be one record per application in this table. For these applications, the account movement  parameters could be defined either for generic position types or for transaction codes. */
	PM_PC_PARAM
		@t24:i (t24Name=PM.PC.PARAM, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* Defines the source application for which the PM module account (cash)/forex  movements need to be generated.
Validation Rules

For the Payment Due Module, only value of PD would be allowed.
For the Funds Transfer Module, only value of FT would be allowed.
For the Teller Module, only  value of TT would be allowed.
For the Data Capture  module, only value of DC would be allowed.
Applications from modules not attached to PM through the PM generic     interface (i.e. applications from the modules FR, FX, LD,  MM,     ND, PD, SC, SW) would not be     allowed.
Must be the ID of a valid record in PGM.FILE. */
		KEY -> PM_Config:PM_PC_PARAM PK required
			@i18n:Label (en=Key)
			@i18n:Tooltip (en="Indicates th transaction key")
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=0.0, core=true, businessType=A, t24Name=KEY)
		POSN_TYPE -> byValue PM_Config:PM_PC_PARAM__POSN_TYPE *
		/* For applications linked to PM through generic interface (Applications in modules other than  FR, FX, LD, MM, ND, SC, SW),  this field specifies
the PM Module FX position movements created by real accounting entries.


Validation Rules

Optional field.
Should be the ID of a valid record of PM.POSN.CLASS.
First 2 characters should match with that of the ID value.
Value not allowed if the record ID is PD. */
		REAL_FX_CLASS -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Real Fx Class")
			@i18n:Tooltip (en="Real Forex Class")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=5.0, core=true, businessType=A, t24Name=REAL.FX.CLASS)
		/* For applications linked to PM through generic interface (Applications in modules other than FR, FX, LD, MM, ND, SC, SW),  this field specifies
the FX position movements created by forward (cash-flow) accounting entries.

Validation Rules

Optional field.
Should be the ID of a valid record of PM.POSN.CLASS.

First 2 characters should match with that of the ID     value.
Value Mandatory if the field FWD.FX.PRG.CNT has a value.
Input not allowed in records with ID as DC, PD or  TT. */
		FWD_FX_CLASS -> PM_Config:PM_POSN_CLASS
			@i18n:Label (en="Fwd Fx Class")
			@i18n:Tooltip (en="Forward Forex Class")
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=6.0, core=true, businessType=A, t24Name=FWD.FX.CLASS)
		/* For applications linked to PM through generic interface (Applications in modules other than FR, FX, LD, MM, ND, SC, SW),  this field   specifies

It could


APPLIC

-



NO


-

YES


-

Validation Rules

Valid values are APPLIC, NO and YES.
Value allowed only if FWD.FX.CLASS is specified. */
		FWD_FX_PRG_CNT : PM_Config:PM_PC_PARAM__FWD_FX_PRG_CNT
			@i18n:Label (en="Fwd Fx Prg Cnt")
			@i18n:Tooltip (en="Forward Forex Prg Cnt")
			@t24:i (align=L, inputBehaviour=I, maxLength=6, sysNumber=7.0, core=true, t24Name=FWD.FX.PRG.CNT)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVED_4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=8.0, core=true, t24Name=RESERVED.4)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVED_3 : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=1, sysNumber=9.0, core=true, t24Name=RESERVED.3)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVED_2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=10.0, core=true, t24Name=RESERVED.2)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVED_1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=11.0, core=true, t24Name=RESERVED.1)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=12.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=13.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_PC_PARAM__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_PC_PARAM__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=16.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=17.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=18.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=19.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=20.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_PC_PARAM__POSN_TYPE
	{
		/* For the record with ID equal to 'PD':   Defines the generic position type used to identify individual position movements. This must match the POSN.TYPE field defined on a STMT.ENTRY generated by the source application before an accounts related position activity is created. For example PD.AMOUNT.TYPE is used to define the POSN.TYPE associated with each PD accounting activity. This is then stored in the STMT.ENTRY generated for that accounting activity. If the STMT.ENTRY POSN.TYPE matches a POSN.TYPE defined in this field,  then a position activity wil be generated. This means that the information which goes into PM can be set up to suit individual requirements, by simply adding or removing the POSN.TYPE from this table. As long as the POSN.TYPE is set in the STMT.ENTRY it is possible to enter a new POSN.TYPE in this field and set PM to rebuild to regenerate activities retroactively.

For new  applications linked to PM through generic interface (Applications in modules other than DC, FR, FT, FX, LD, MM, ND, PD, SC, SW, TT) either this field or the fields TRAN.CODE.START and TRAN.CODE.END could be used to identify the last character of the related account movement position class.  However, the definition of  Position Types would be effective only if they are supported at application level and populated in STMT.ENTRY.
Validation Rules

3 character alphabetic. Must be present on PM.POSN.TYPE.
Either POSN.TYPE or TRAN.CODE.START is mandatory.
For records with ID as DC, FT or TT, input is not allowed. */
		POSN_TYPE -> PM_Config:PM_POSN_TYPE
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=1.0, core=true, businessType=AA, t24Name=POSN.TYPE)
		/* For applications
linked to PM through generic interface (Applications in modules other than DC, FR, FT, FX, LD, MM, ND, SC, SW, TT),
If the TRANSACTION.CODE  field defined on a STMT.ENTRY generated by the source application lies in the range of values defined in the fields TRAN.CODE.START and TRAN.CODE.END, then an  account  related position activity would be  created in PM.TRAN.ACTIVITY.

Validation Rules

Should be the ID of a valid record in  the TRANSACTION table.
Value not allowed if  the field POSN.TYPE has a value.
Either POSN.TYPE or TRAN.CODE.START is mandatory.
Value of TRAN.CODE.START in different multi-values should be in ascending     order. */
		TRAN_CODE_START -> ST_Config:TRANSACTION
			@t24:i (align=R, inputBehaviour=I, maxLength=3, sysNumber=2.0, core=true, t24Name=TRAN.CODE.START)
		/* For applications
linked to PM through generic interface (Applications in modules other than DC, FR, FT, FX, LD, MM, ND, SC, SW, TT),

Validation Rules



Should be     the ID of a valid record in  the TRANSACTION table.

Value  allowed only if  the field TRAN.CODE.START  has a     value.


Value cannot  be less  than the value of the field     TRAN.CODE.START. */
		TRAN_CODE_END -> ST_Config:TRANSACTION
			@t24:i (align=R, inputBehaviour=I, maxLength=3, sysNumber=3.0, core=true, t24Name=TRAN.CODE.END)
		/* Defines the last character of the five character position class generated for accounts type position activities.
Example for use of POSN.TYPE: A PD contract generates a STMT.ENTRY record which updates an account with a category code of 4500 which falls in the range (1000 to 4999) defined on PM.AC.PARAM for customer accounts, with a position class of PMASC. The entry has a POSN.TYPE code of PAM ( Principal at Maturity ). This code is matched with the 'PAM' POSN.TYPE of the PD record on this file with an associated ACC.MVMT.CHAR of 'M'. The Position Class generated will be PDASM, where 'PD' relates to the first two characters of the source application defined in the ID, 'AS' is derived from the relevant class on PM.AC.PARAM. 'M' is the value from this field.
Example for use of TRANS.CODE.START: A MG.MORTGAGE transaction  generates a STMT.ENTRY record which updates an account with a category code of 1001 which falls in the range (1000 to 4999) defined on PM.AC.PARAM for customer accounts, with a position class of PMASC. The entry has a TRANSACTION.CODE of 800 (Mortgage Principal Drawdown). This transaction code is matched with the TRAN.CODE.START and TRAN.CODE.END values (if defined) of the MG.MORTGAGE  record on this file with an associated ACC.MVMT.CHAR of  'S'. The Position Class generated will be MGASS, where 'MG' relates  to the first two characters of the source application defined in the ID,  'AS' is derived from the relevant class on PM.AC.PARAM and 'S' is the value from this field.
If no value is defined here, then the value of last character of the account movement position class would be taken from the position class defined in PM.AC.PARAM as explained above.
Validation Rules

Optional input.
One character Alpha.
For records with ID as  DC, FT or TT, input is not allowed. */
		ACC_MVMT_CHAR : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=4.0, core=true, t24Name=ACC.MVMT.CHAR)
	}
	PM_PC_PARAM__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=14.0, core=true, t24Name=INPUTTER)
	}
	PM_PC_PARAM__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=15.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* OVERVIEW PM.POSN.CLASS
The PM.POSN.CLASS file has been created to record all the activities which can be used to build different types of positions, (GAP, Cashflow, Forex etc).  Transactions from the various T24 Applications are divided into multiple activities, to each activity one position class ID will be assigned.  As such, the position class ID serves as a link between each activity and the various positions defined by the user in the table "PM.POSN.REFERENCE".
Some of these position class ID's have been predefined within T24.  This is the case for Data Capture, Funds Transfer, Money Market, Securities and Future Rate Agreement.
The position class ID's relating to the Account, Loans and Deposits, and Forex applications are table driven but at the moment specific values have already been defined and it is recommended to keep them.
The position class ID's to be used for the account activity associated with the contracts and transactions have certain parts of the ID predetermined. The fifth character is system controled whilst the third and fourth come from the data held on the PM.AC.PARAM file.
Position Class ID's can be set up for those activities which are required to be included in the different positions, but are not maintained within T24.  There is no predefinition of these items.
The current list of position class ID's for T24 applications is provided below.
Firstly, there is a list that gives a brief summary for each Position Class by application.
Then follows a further more detailed explanation for each recommended Position Class.
The third list is the recommended list of Account movement Position Classes by Application.
In the first two lists some Position Classes have 'aaa' and others have 'aa' this means that these Classes are for the Account movement activities.
For the Accounts application a set of Classes is given for ordinary accounts (i.e Non - Nostro) and a set for Nostro Accounts. Also, both Cash and Gap Classes are listed. If the same time spread is to be used for both Cash and Gap account movements then only one set need be set up. For the online account movements it is possible to break the movements down over time or not. To be able to do this extra Classes have been allowed for. See PM.AC.PARAM for further information.
The current list of Position Classes recommended for the T24 applications is as follows
AC:       For NON - NOSTRO Accounts -           ACACC =   AC-Cash Overnight Valued dated Balance           ACAIC =   AC-Cash Overnight Accrued Interest           ACAGG =   AC-Gap Overnight Valued dated Balance           ACALG =   AC-Gap Overnight Accrued Interest           ACASC =   AC-Cash Online Movements Spread.           ACAAC =   AC-Cash Online Movements Actual.           ACAHG =   AC-Gap Online Movements Spread.           ACAKG =   AC-Gap Online Movements Actual.
For NOSTRO accounts -           ACBCC =   AC-Cash Overnight Valued dated Balance           ACBIC =   AC-Cash Overnight Accrued Interest           ACBGG =   AC-Gap Overnight Valued dated Balance           ACBLG =   AC-Gap Overnight Accrued Interest           ACBSC =   AC-Cash Online Movements Spread.           ACBAC =   AC-Cash Online Movements Actual.           ACBHG =   AC-Gap Online Movements Spread.           ACBKG =   AC-Gap Online Movements Actual.
DC:       DCFDC =   DC-Currency Position Activity           DCaaa =   DC-Cash/Gap Account Activity.                     (Entry across an account)
FR:       FRFRS =   FRA Start           FRFRM =   FRA Maturity           FRXLM =   FRA Loan of a settled deal           FRXDM =   FRA Deposit of a settled deal           FRXNM =   FRA Net rate of a settled deal           FRaaC =   FRA Settlement           FRaaH =   FRA Estimated Settlement - Hedge.           FRaaT =   FRA Estimated Settlement - Trade.
FT:       FTFFT =   FT-Currency Position Activity           FTaaa =   FT-Cash/Gap Account Activity                     (entry across an Account)
FX:       FXFXP =   Forex SP and SW/FW rebate FX Position           FXFSW =   Forex SW/FW IN/SL FX Position           FXSWS =   Forex SW IN/SL Start           FXSWM =   Forex SW In/SL Maturity           FXFSP =   Forex FW interest hedge FX Position           FXIHS =   Forex FW interest hedge gap start (spot)           FXIHM =   Forex FW interest hedge gap maturity           FXIMS =   Forex FW interest method gap start (spot)           FXIMM =   Forex FW interest method gap maturity           FXSLS =   Forex FW straight line gap start (spot)           FXSLM =   Forex FW straight line gap maturity           FXaaS =   Forex Spot Cash/Gap Account Activity.           FXaaF =   Forex FW Cash/Gap Account Activity.           FXaaP =   Forex FW IHedge Principal Account                     Activity.           FXaaI =   Forex FW IHedge Interest Account Activity.           ALFAL =   Asset Liability Position LD:       LDXST =   LD Principal Activity Start - Gap           LDXMG =   LD Principal Activity Maturity - Gap           LDXPT =   LD Principal Tax           LDXPI =   LD Principal Increase - Gap           LDXDG =   LD Principal Decrease - Gap           LDXIC =   LD Interest Capitalisation           LDXIT =   LD Interest Tax           LDXPG =   LD Principal Repayment - Gap           LDXCM =   LD Commission           LDXCT =   LD Commission Tax           LDXCH =   LD Charges           LDXFE =   LD Fees           LDXFI =   LD Forward Fixed Interest           LDXVI =   LD Forward Variable Interest           LDaaS =   LD Account Activity for Value date           LDaaI =   LD Account Activity for Principal Increase           LDaaD =   LD Account Activity for Principal Decrease           LDaaM =   LD Account Activity for Principal at                     Maturity           LDaaP =   LD Account Activity for Principal                     Repayments           LDaaN =   LD Account Activity for Interest Payments           LDaaC =   LD Account Activity for Discount Taken
MM        MMMPS =   MM  Principal Activity Start           MMMPM =   MM  Principal Activity Maturity           MMMPI =   MM  Principal Increase           MMMPD =   MM  Principal Decrease/Repayment           MMMRM =   MM  Rollover Maturity of old period           MMMRS =   MM  Start of rollover period           MMMIC =   MM  Interest Capitalisation           MMaaS =   MM Account Activity for Value date           MMaaI =   MM Account Activity for Principal Increase           MMaaD =   MM Account Activity for Principal Decrease           MMaaM =   MM Account Activity for Principal at                     Maturity           MMaaN =   MM Account Activity for Interest at Maturity           MMaaR =   MM Account Activity for Interest Payment
SC:       SCFSC =   SC-Currency Position Activity           SCCSM =   SC-Cash Flow Position Principal                     Activity - Maturity (from PM.SC.Param)           SCGSM =   SC-Gap Position Activity - Maturity                     (from PM.SC.Param)           SCSCI =   SC-Cash Flow Position Interest                     Activity - Maturity           SCaaa =   SC -Account Activity (from deal).
TT:       TTFXP =   TT- Currency Position Activity           TTaaa =   TT- Account Activity.                     (entry across an Account) A detailed explanation for each of these position class ID's can be found hereafter:
1.        Account
ACACC =   This represents the code which is associated to the cash           activity record relating to the value dated balance as           opening of business of Non Nostro Accounts.           This class can be used as base for account movements at           application level, when no spreading of movements over           time is required.
ACAIC =   This represents the code which is associated to the cash           activity record relating to the amount of accrued interest           and charges outstanding on Non Nostro Accounts.
ACAGG =   This represents the code which is associated to the           interest mismatch (gap) activity record relating to the           value dated balance as at the opening of business of Non           Nostro accounts.           This class can be used as base for account movements at           application level, when no spreading of movements over           time is required.
ACALG =   This represents the code which is associated to the           interest mismatch (gap) activity record relating to the           amount of accrued interest and charges outstanding on           Non Nostro Accounts.
ACASC =   This represents the code which is the base for cash           account movements at application level, when the           movements are to be spread over time for Non Nostro           Accounts.
ACAAC =   This represents the code which is the base for cash           account movements at application level, when movements           are being spread over time and to allow for case where           the actual movement is required this class is used for Non           Nostro  Accounts.
ACAHG =   This represents the code which is the base for interest           mismatch (gap) account movements at application level,           when the movements are to be spread over time for Non           Nostro Accounts.
ACAKG =   This represents the code which is the base for interest           mismatch (gap) account movements at application level,           when movements are being spread over time and to allow           for case where the actual movement is required this class           is used for Non Nostro  Accounts.
ACBCC =   This represents the code which is associated to the cash           activity record relating to the balance of Nostro           accounts.           This class can be used as base for account movements at           application level, when no spreading of movements over           time is required.
ACBIC =   This represents the code which is associated to the cash           activity record relating to the amount of accrued interest           and charges outstanding on Nostro Accounts.
ACBGG =   This represents the code which is associated to the           interest mismatch (gap) activity record relating to the           value dated balance as at the opening of business of           Nostro accounts.           This class can be used as base for account movements at           application level, when no spreading of movements over           time is required.
ACBLG =   This represents the code which is associated to the           interest mismatch (gap) activity record relating to the           amount of accrued interest and charges outstanding on           Nostro Accounts.
ACBSC =   This represents the code which is the base for cash           account movements at application level, when the           movements are to be spread over time for Nostro           Accounts.
ACBAC =   This represents the code which is the base for cash           account movements at application level, when movements           are being spread over time and to allow for case where           the actual movement is required this class is used for           Nostro Accounts.
ACBHG =   This represents the code which is the base for interest           mismatch (gap) account movements at application level,           when the movements are to be spread over time for Nostro           Accounts.
ACBKG =   This represents the code which is the base for interest           mismatch (gap) account movements at application level,           when movements are being spread over time and to allow           for case where the actual movement is required this class           is used for Nostro Accounts.
2         Data Capture
DCFDC =   This represents the code which will be associated to the           currency activity record generated from a Data Capture           entry, impacting the Asset & Liability currency position.
DCaaa =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated from           any Data Capture entry for an Account.
3         Future Rate Agreement
FRFRS =   This represents the code which will be associated to the           (notional) PRINCIPAL activity record existing for the           START (value date) of a FRA transaction.
FRFRM =   This represents the code which will be associated to the           (notional) PRINCIPAL activity record existing for the           MATURITY (maturity date) of a FRA transaction.
FRXLM =   This represents the code which will be associated to the           Principal GAP Loan activity.  Value dated to the maturity           of the FRA transaction.
FRXDM =   This represents the code which will be associated to the           Principal GAP Deposit activity.  Value dated to the           maturity of the FRA transaction.
FRXNM =   This represents the code which will be associated to the           Principal net GAP activity.  Value dated to the maturity           of the FRA transaction i.e. the rate difference between           FRXLM and FRXDM.
FRaaC =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Settlement amount existing on the settlement (value)           date of a FRA transaction.
FRaaH =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the estimated settlement on a hedge deal.
FRaaT =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the estimated settlement on a trade deal.
4         Funds Transfer
FTFFT =   This represents the code which will be associated to the           Currency activity records generated from a Funds           Transfer Transaction impacting the Asset & Liability           Currency Position.
FTaaa =   This represents the code which will be associated to the           Cash/Gap activity record generated from any Funds           Transfer transaction.  A Cash activity record is only           raised when the associated accounting entry is for an           Account.
5         FOREX
FXFXP =   This represents the code which will be associated to the           activity record deriving from a SPOT forex contract or a           FORWARD/SWAP forex contract using the Rebate           revaluation Method.
FXFSW =   This represents the code which will be associated to the           activity record deriving from a FORWARD/SWAP forex           contract using the Interest or Straight Line revaluation           method.  This activity record is used essentially to           produce the currency position information.
FXSWS =   This represents the code which will be associated to the           activity record deriving from the SPOT leg of a SWAP           contract using the Interest or Straight Line revaluation           method.  This record corresponds to the START activity           and is used essentially to produce, interest mismatch           information.
FXSWM =   This represents the code which will be associated to the           activity record deriving from the FORWARD LEG of a           SWAP contract  This record corresponds to the           MATURITY activity and is used essentially to produce           interest mismatch information.
FXFSP =   This represents the code which will be associated to the           activity record deriving from a FORWARD forex contract           using the Interest Hedge revaluation method.  This           activity record is used essentially to produce the           currency position information.
FXIHS =   This represents the code which will be associated to the           activity record deriving from the SPOT date of a           FORWARD contract using the Interest Hedge revaluation           method.  This record corresponds to the START activity           and is used essentially to produce, interest mismatch           information.
FXIHM =   This represents the code which will be associated to the           activity record deriving from the VALUE date of a           FORWARD contract using the Interest Hedge revaluation           method.  This record corresponds to the MATURITY           activity and is used essentially to produce, interest           mismatch information.
FXIMS =   This represents the code which will be associated to the           activity record deriving from the SPOT date of a           FORWARD contract using the Interest Method revaluation           method.  This record corresponds to the START activity           and is used essentially to produce, interest mismatch           information.
FXIMM =   This represents the code which will be associated to the           activity record deriving from the VALUE date of a           FORWARD contract using the Interest Method revaluation           method.  This record corresponds to the MATURITY           activity and is used essentially to produce, interest           mismatch information.
FXSLS =   This represents the code which will be associated to the           activity record deriving from the SPOT date of a           FORWARD contract using the Straight Line revaluation           method.  This record corresponds to the START activity           and is used essentially to produce, interest mismatch           information.
FXSLM =   This represents the code which will be associated to the           activity record deriving from the VALUE date of a           FORWARD contract using the Straight Line revaluation           method.  This record corresponds to the MATURITY           activity and is used essentially to produce, interest           mismatch information.
FXaaS =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Forex Spot deal or the Spot leg of a swap deal.
FXaaF =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the  Forex Forward deal, where the revaluation method is           other than IH for the Forward leg of a swap deal.
FXaaP =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the notional principal on a Forex Forward deal, where the           revaluation method is IH.
FXaaI =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the notional interest on a Forex Forward deal, where the           revaluation method is IH.
ALFAL =   This represents the code which will be associated to the           Asset and Liability Currency Position.
6         Loans and Deposits
LDXST =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the START           (value date) of a Loan or Deposit Transaction.
LDXMG =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the MATURITY           (maturity date) of a Loan or Deposit transaction for           inclusion in the interest mismatch information.
LDXPT =   This represents the code which will be associated with           any TAX deducted from principal activities within a Loan           or Deposit transaction.
LDXPI =   This represents the code which will be associated to the           Principal activity record, existing for the INCREASE in           principal and will be for Value Date of principal increase.
LDXDG =   This represents the code associated with a reduction in           principal for inclusion in the Gap Analysis. LDXIC =   This represents the code which will be associated to the           INTEREST activity record existing when a contract           reaches its interest review date and interest is being           capitalised.  The date associated with this activity will be           either the maturity date of the contract if the contract           has a fixed maturity date and there are no interest           schedules or the date of the next interest schedule or the           next interest payment date if it is a call or notice           contract.
LDXIT =   This represents the code which will be associated with           any TAX to be deducted from interest on a Loan or           Deposit transaction and will contain a date equal to the           next interest payment date.
LDXPG =   This represents the code associated with any           SCHEDULED REPAYMENTS that are due to take place           during the life of a Loan or Deposit transaction.  Code is           for inclusion in the interest mismatch information.
Note:  If there is a rate revision schedule or rate change date set on the Loan and Deposit record, then an LDXPG will be raised for this date with amount of outstanding principal as at that date.  There will be no LDXPG records for future repayment schedule dates and no LDXMG for final maturity date.
LDXCM =   This represents the code associated with any           COMMISSION to be received on a Loan transaction.
LDXCT =   This represents the code associated with any TAX amount           to be deducted from commissions receivable on a Loan           transaction.
LDXCH =   This represents the code associated with any charge           applicable to a Loan or Deposit transaction.
LDXFE =   This represents the code associated with any fees which           may have been defined on a Loan or Deposit Schedule.
LDaaS =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the PRINCIPAL amount for the Value (start) date on a           Loan or Deposit contract.
LDaaI =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           any Principal Increase on a Loan or Deposit contract.
LDaaD =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           any Principal Decrease on a Loan or Deposit contract.
LDaaM =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Principal at Maturity of a Loan or Deposit contract.
LDaaP =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           any any SCHEDULED REPAYMENTS that are due to take           place during the life of a Loan or Deposit contract.
LDaaN =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           any Interest activity deriving from Loan or Deposit           transaction.  The date associated with this activity will           be either the maturity date of the contract if the contract           has a fixed maturity date and there are no interest           schedules or the date of the next interest schedule or the           next interest payment date if it is a call or notice           contract.
LDaaC =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Discount taken at the start of a Loan or Deposit           contract.
7         Money Market
MMMPS =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the START           (value date) of a Money Market Transaction.
MMMPM =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the MATURITY           (maturity date) of a Money Market transaction.
MMMPI =   This represents the code which will be associated to the           Principal activity record, existing for the INCREASE in           principal and will be for Value Date of principal increase.
MMMPD =   This represents the code which will be associated to the           Principal activity record existing for repayment of           principal through either MM.PAYMENT.ENTRY (for           Liability Contract) or through MM.RECEIPT.ENTRY (for           Asset Contract) and will be for the Value Date of           principal repayment.
MMMRM =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the maturity of           old (original) deal with value date of the old maturity           date.
MMMRS =   This represents the code which will be associated to the           PRINCIPAL activity record existing for the start of the           new period of a rolled over contract.  The value date will           be for the old (original) maturity date.
MMMIC =   This represents the code which will be associated to the           INTEREST activity record existing when a contract is           being rolled over and interest is being capitalised.  The           date will be the rollover date for the contract.
MMaaS =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the PRINCIPAL amount for the Value (start) date on a           Money Market contract.
MMaaI =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           any Principal Increase on a Money Market contract.
MMaaD =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Principal activity record existing for repayment of           principal through either MM.PAYMENT.ENTRY (for           Liability Contract) or through MM.RECEIPT.ENTRY (for           Asset Contract) and will be for the Value Date of           principal repayment.
MMaaM =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the Principal at Maturity of a Money Market contract.
MMaaN =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the INTEREST activity record deriving from a money           market transaction.  The date associated with this           activity will be the maturity date of the contract if the           contract has a fixed maturity date or the next interest           payment date if it is a call or notice contract.
MMaaR =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the INTEREST  activity  record  existing  for  the           repayment  of interest on an asset Contract through           MM.RECEIPT.ENTRY and will be for the value date of           principal repayment.
8         Securities
SCFCS =   This represents the code which will be associated to the           Currency activity record generated from a Securities           Transaction impacting the Asset & Liability Currency           position.
SCCSM =   This represents the code which is associated to the           Principal Cash activity record relating to the maturity of           a security deal outgoing in the bank's own position.
SCGSM =   This represents the code which is associated to the           Principal Interest Mismatch (gap) activity record relating           to the maturity of a security deal outgoing in the bank's           own position.
SCSCI =   This represents the code which is associated to the cash           Interest activity record relating to the maturity of a           security deal outgoing in the bank's own position.
SCaaa =   This represents the code(s) which will be associated to           the cash/gap account activity record(s) generated for           the for Securities movement at Security trade level.
9         Teller
TTFXP =   This represents the code which will be associated to the           Currency activity records generated from a Teller           Transaction impacting the Asset & Liability Currency           Position.
TTaaa =   This represents the code which will be associated to the           Cash/Gap activity record generated from any Teller           transaction.  A Cash activity record is only raised when           the associated accounting entry is for an Account.
The list of Position Classes that would be required if there were a CASH and GAP requirement to spread the online movements for all applications and to have a split between Non Nostro and Nostro Accounts. The base Position Classes are taken to be:-
ACASC     Cash Non Nostro Accounts. ACAHG     Gap Non Nostro Accounts. ACBSC     Cash Nostro Accounts. ACBHG     Gap Nostro Accounts.
The other Position Class required are: -
DC:       DCASC =   DC - Cash Non Nostro Accounts.           DCAHG =   DC - Gap Non Nostro Accounts.           DCBSC =   DC - Cash Nostro Accounts.           DCBHG =   DC - Gap Nostro Accounts.
FR:       FRASC =   Settlement Amount. Cash Non Nostro.           FRAHC =   Settlement Amount. Gap Non Nostro.           FRBSC =   Settlement Amount. Cash Nostro.           FRBHC =   Settlement Amount. Gap Nostro.           FRASH =   Estimated Settlement Hedge. Cash Non Nostro.           FRAHH =   Estimated Settlement Hedge. Gap Non Nostro.           FRBSH =   Estimated Settlement Hedge. Cash Nostro.           FRBHH =   Estimated Settlement Hedge. Gap Nostro.           FRAST =   Estimated Settlement Trade. Cash Non Nostro.           FRAHT =   Estimated Settlement Trade. Gap Non Nostro.           FRBST =   Estimated Settlement Trade. Cash Nostro.           FRBHT =   Estimated Settlement Trade. Gap Nostro.
FT:       FTASC =   FT - Cash Non Nostro Accounts.           FTAHG =   FT - Gap Non Nostro Accounts.           FTBSC =   FT - Cash Nostro Accounts.           FTBHG =   FT - Gap Nostro Accounts.
FX:       FXASS =   Spot Deals. Cash Non Nostro.           FXAHS =   Spot Deals. Gap Non Nostro.           FXBSS =   Spot Deals. Cash Nostro.           FXBHS =   Spot Deals. Gap Nostro.           FXASF =   Forward non IH deals. Cash Non Nostro.           FXAHF =   Forward non IH deals. Gap Non Nostro.           FXBSF =   Forward non IH deals. Cash Nostro.           FXBHF =   Forward non IH deals. Gap Nostro.           FXASP =   Notional Principal IH deals. Cash Non Nostro.           FXAHP =   Notional Principal IH deals. Gap Non Nostro.           FXBSP =   Notional Principal IH deals. Cash Nostro.           FXBHP =   Notional Principal IH deals. Gap Nostro.           FXASI =   Notional Interest IH deals. Cash Non Nostro.           FXAHI =   Notional Interest IH deals. Gap Non Nostro.           FXBSI =   Notional Interest IH deals. Cash Nostro.           FXBHI =   Notional Interest IH deals. Gap Nostro.
LD:       LDASS =   Principal Start. Cash Non Nostro.           LDAHS =   Principal Start. Gap Non Nostro.           LDBSS =   Principal Start. Cash Nostro.           LDBHS =   Principal Start. Gap Nostro.           LDASI =   Principal Increase. Cash Non Nostro.           LDAHI =   Principal Increase. Gap Non Nostro.           LDBSI =   Principal Increase. Cash Nostro.           LDBHI =   Principal Increase. Gap Nostro.           LDASD =   Principal Decrease. Cash Non Nostro.           LDAHD =   Principal Decrease. Gap Non Nostro.           LDBSD =   Principal Decrease. Cash Nostro.           LDBHD =   Principal Decrease. Gap Nostro.           LDASM =   Principal at Maturity. Cash Non Nostro.           LDAHM =   Principal at Maturity. Gap Non Nostro.           LDBSM =   Principal at Maturity. Cash Nostro.           LDBHM =   Principal at Maturity. Gap Nostro.           LDASP =   Principal Repayments. Cash Non Nostro.           LDAHP =   Principal Repayments. Gap Non Nostro.           LDBSP =   Principal Repayments. Cash Nostro.           LDBHP =   Principal Repayments. Gap Nostro.           LDASN =   Interest Payments. Cash Non Nostro.           LDAHN =   Interest Payments. Gap Non Nostro.           LDBSN =   Interest Payments. Cash Nostro.           LDBHN =   Interest Payments. Gap Nostro.           LDASC =   Discount Taken. Cash Non Nostro.           LDAHC =   Discount Taken. Gap Non Nostro.           LDBSC =   Discount Taken. Cash Nostro.           LDBHC =   Discount Taken. Gap Nostro.
MM        MMASS =   Principal Start. Cash Non Nostro.           MMAHS =   Principal Start. Gap Non Nostro.           MMBSS =   Principal Start. Cash Nostro.           MMBHS =   Principal Start. Gap Nostro.           MMASI =   Principal Increase. Cash Non Nostro.           MMAHI =   Principal Increase. Gap Non Nostro.           MMBSI =   Principal Increase. Cash Nostro.           MMBHI =   Principal Increase. Gap Nostro.           MMASD =   Principal Repayment. Cash Non Nostro.           MMAHD =   Principal Repayment. Gap Non Nostro.           MMBSD =   Principal Repayment. Cash Nostro.           MMBHD =   Principal Repayment. Gap Nostro.           MMASM =   Principal at Maturity. Cash Non Nostro.           MMAHM =   Principal at Maturity. Gap Non Nostro.           MMBSM =   Principal at Maturity. Cash Nostro.           MMBHM =   Principal at Maturity. Gap Nostro.           MMASN =   Interest Payments. Cash Non Nostro.           MMAHN =   Interest Payments. Gap Non Nostro.           MMBSN =   Interest Payments. Cash Nostro.           MMBHN =   Interest Payments. Gap Nostro.           MMASR =   Interest Repayments. Cash Non Nostro.           MMAHR =   Interest Repayments. Gap Non Nostro.           MMBSR =   Interest Repayments. Cash Nostro.           MMBHR =   Interest Repayments. Gap Nostro.
SC:       SCASC =   Deal level Movement. Cash Non Nostro.           SCAHG =   Deal level Movement. Gap Non Nostro.           SCBSC =   Deal level Movement. Cash Nostro.           SCBHG =   Deal Level Movement - Gap Nostro.
TT:       TTASC =   Teller - Cash Non Nostro Accounts.           TTAHG =   Teller - Gap Non Nostro Accounts.           TTBSC =   Teller - Cash Nostro Accounts.           TTBHG =   Teller - Gap Nostro Accounts.
FIELD NO            FIELD NAME
0                   KEY           1                   SHORT NAME           2.1                 DESCRIPTION           3                   PRODUCT           4                   R2           5                   R3           6                   R4           7                   R5           8.1                 LOCAL REF */
	PM_POSN_CLASS
		@t24:i (t24Name=PM.POSN.CLASS, level=I, type=U, allowedFunctions="A C D E I L P Q R S", localRefAllowed=true)
	{
		/* This is the key to PM.POSN.CLASS file. Each of these keys will correspond to an activity from a Module transaction.
Posn.Class is used to determine the activities that are used to form various positions.  (See PM.POSN.REFERENCE).
Validation Rules
5 characters type AA. (Mandatory). */
		PM_POSN_CLASS_ID -> PM_Config:PM_POSN_CLASS PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=0.0, core=true, businessType=AA, t24Name=PM.POSN.CLASS.ID)
		/* This is the short name of POSN.CLASS.
Validation Rules
1 to 10 characters, type AA. (Mandatory). */
		SHORT_NAME : T24BusinessTypes:AA required
			@i18n:Label (en="Short name")
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=1.0, core=true, t24Name=SHORT.NAME)
		DESCRIPTION -> byValue PM_Config:PM_POSN_CLASS__DESCRIPTION *
		/* Indicates the product Application relating to the position class being created.
Input in this field should either correspond to a valid T24 application or a meaningful code for activities being loaded through PM.POSITION.CAPTURE.
Examples of valid T24 applications are:
DC  for Data Capture
MM  for Money Market
FX  for Forex
AC  for Accounts
etc.
The code used for PM.POSITION.CAPTURE must be a code other than a T24 application code.
Validation Rules
2 characters type A. */
		PRODUCT : T24BusinessTypes:A
			@i18n:Label (en=Product)
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=3.0, core=true, t24Name=PRODUCT)
		SKP_TXN_REF_CCY -> byValue PM_Config:PM_POSN_CLASS__SKP_TXN_REF_CCY *
		/* Indicates the type of postion position class, there are 3 options
CAS for cash or account based movements
GAP for contract activity based movements
FXP for forex related movements, i.e. where the POSTION table will be updated */
		POSITION_TYPE : PM_Config:PM_POSN_CLASS__POSITION_TYPE required
			@i18n:Label (en="Position Type")
			@i18n:Tooltip (en="Position Type")
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=6.0, core=true, t24Name=POSITION.TYPE)
		/* This indicates the original account based postion class from which this class has been derived. These account based classes are set up based on the account category as defined on PM.AC.PARAM. For example when  a  Gap or Forex activity is generated a Cash type activity is generate based on the category of the underlying account, i.e the account that is updated. The first and second characters of the class are generated from the applciation, the second and thrid from the relevant PM.AC.PARAM entry and the fiith character is activity specific. eg. MMMPS for a gap start activity for an MM contract could generate MMASS from ACASC when a customer current account is the drawdown account, or MMBSS from ACBSC when the drawdown account is a nostro. */
		ORIGINAL_CLASS -> PM_Config:PM_POSN_CLASS
			@t24:i (align=R, inputBehaviour=N, maxLength=5, sysNumber=7.0, core=true, t24Name=ORIGINAL.CLASS)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=9.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=10.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_POSN_CLASS__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_POSN_CLASS__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=13.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=14.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=15.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=16.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=17.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_POSN_CLASS__DESCRIPTION
	{
		/* This is the description of POSN.CLASS.
This field should be used to store a meaningful description of the Position Class.
Validation Rules
Up to 4 * 35 characters, type A. (Optional). (Multivalue). */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, multiLanguage=true, sysNumber=2.0, core=true, t24Name=DESCRIPTION)
	}
	PM_POSN_CLASS__SKP_TXN_REF_CCY
	{
		/* For very high volume activities it does not make sense to drill down to indivdual activities in PM enquiries for either operational or performance reasons. For example in a retail environment where there could be thousands of similar transactions per day in local currency. This indicates that for activies related to this postion class for the currency specified that the drill down option will be turned off. This field is associated with the SKIP.TXN.REF.PER field where the blocking of drill down can also be controlled by value date, or in fact by today plus the number of days indicated. For example we coudl block drilldown for all FT or teller activites in local currency value today. */
		SKP_TXN_REF_CCY : T24BusinessTypes:CCY
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=4.0, core=true, t24Name=SKP.TXN.REF.CCY)
		/* Assiciated with SKP.TXN.REF.CCY, indicates that for the relevant currency that drill down will be blocked when the value date is less than or equal to today plus the number of days in this field. e.g a value of 1 woudl indicate that only activies with a value date of greater than tomorrow will have dirll doen active. */
		SKP_TXN_REF_PER : mml:Integer
			@t24:i (align=R, inputBehaviour=I, maxLength=5, sysNumber=5.0, core=true, t24Name=SKP.TXN.REF.PER)
	}
	PM_POSN_CLASS__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=11.0, core=true, t24Name=INPUTTER)
	}
	PM_POSN_CLASS__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=12.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* 'PM.POSN.REFERENCE' is used to group activities from 'PM.POSN.CLASS' into positions.
Typical positions which will be built by the user refer to the:
o         GAP Position :      to monitor the interest rate                               exposure.
o         CASH Position:      to monitor the cash-flow and                               liquidity exposure.
o         FX Position  :      to monitor the currency                               exposure.

Individual PM enquiry settings are controlled via the PM.ENQ.PARAM application */
	PM_POSN_REFERENCE
		@t24:i (t24Name=PM.POSN.REFERENCE, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=true)
	{
		/* This key identifies a type of position which the user wants to build.
Typical positions will be built by the user to control his currency exposure, interest exposure, liquidity exposure etc.
In the standard release, these are the following 3 predefined positions:
- CAS = Cash-flow Position           - FXP = Currency Position           - GAP = Interest Mismatch Position.
The enquiries are built around these keys.
Validation Rules
2 to 3 characters type AA. */
		POSN_REF_ID -> PM_Config:PM_POSN_REFERENCE PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=14, sysNumber=0.0, core=true, businessType=AA, t24Name=POSN.REF.ID)
		/* This is the short name of the POSN. REFERENCE.
Validation Rules
1 to 10 characters type AA. (Mandatory). */
		SHORT_NAME : T24BusinessTypes:AA required
			@i18n:Label (en="Short name")
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=1.0, core=true, t24Name=SHORT.NAME)
		DESCRIPTION -> byValue PM_Config:PM_POSN_REFERENCE__DESCRIPTION *
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=3.0, core=true, t24Name=R3)
		/* This field is reserved for future use.
Validation Rules
(No input). */
		R4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=4.0, core=true, t24Name=R4)
		/* This field is reserved for future use.
Validation Rules
(No input). */
		R5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=5.0, core=true, t24Name=R5)
		/* This field is reserved for future use.
Validation Rules
(No input). */
		R6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=6.0, core=true, t24Name=R6)
		/* Indicates the default calendar that is used for this position. The calendar required for enquiries is set up in PM.ENQ.PARAM. This calendar will be used by the own book Securities PM rotuiens to defined the defualt maturity date for SC activities.
Validation Rules
5 characters, type AA. (Optional).
If it is input, it must be a valid record in 'PM.CALENDAR' file. */
		CALENDAR -> PM_Config:PM_CALENDAR
			@i18n:Label (en=Calendar)
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=7.0, core=true, businessType=AA, t24Name=CALENDAR)
		/* This is reserved for future use.
Validation Rules
(No input). */
		R8 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=8.0, core=true, t24Name=R8)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R9 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=9.0, core=true, t24Name=R9)
		POSN_CLASS -> byValue PM_Config:PM_POSN_REFERENCE__POSN_CLASS *
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R11 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=11.0, core=true, t24Name=R11)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R12 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=12.0, core=true, t24Name=R12)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R13 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=13.0, core=true, t24Name=R13)
		GRP_ABBR -> byValue PM_Config:PM_POSN_REFERENCE__GRP_ABBR *
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R18 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=18.0, core=true, t24Name=R18)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R19 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=19.0, core=true, t24Name=R19)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R20 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=20.0, core=true, t24Name=R20)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R21 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=21.0, core=true, t24Name=R21)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R22 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=22.0, core=true, t24Name=R22)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R23 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=23.0, core=true, t24Name=R23)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R24 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=24.0, core=true, t24Name=R24)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R25 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=25.0, core=true, t24Name=R25)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R26 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=26.0, core=true, t24Name=R26)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R27 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=27.0, core=true, t24Name=R27)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R28 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=28.0, core=true, t24Name=R28)
		/* This field is reserved for future use.
Validation Rules
(No input.). */
		R29 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=29.0, core=true, t24Name=R29)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=31.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=32.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_POSN_REFERENCE__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_POSN_REFERENCE__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=35.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=36.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=37.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=38.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=39.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_POSN_REFERENCE__DESCRIPTION
	{
		/* This is the description of POSN.REFERENCE.
Validation Rules
Up to 4 * 35 characters, type A. (Optional). (Multivalue). */
		DESCRIPTION : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=2.0, core=true, t24Name=DESCRIPTION)
	}
	PM_POSN_REFERENCE__POSN_CLASS
	{
		/* This contains the POSN CLASS's that are to be included for the position.
(i) The basic building block for a position is                 activities.  Activities are generated from deals.                 Each activity contains a POSN CLASS.            (ii) By including these POSN.CLASS's, the position is                 created.
Validation Rules
5 characters type AA. (Mandatory). (Multivalue).
Must be a valid record on POSN.CLASS file.
No duplicates. */
		POSN_CLASS -> PM_Config:PM_POSN_CLASS required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=10.0, core=true, businessType=AA, t24Name=POSN.CLASS)
	}
	PM_POSN_REFERENCE__GRP_ABBR
	{
		/* This field is no longer used in PM but it the the lead field in a multi valued set which includes the DLR.DSK.GRP used in PM.REPORTS.

2 character alpha field */
		GRP_ABBR : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=2, sysNumber=14.0, core=true, t24Name=GRP.ABBR)
		/* The description of the group.

(1) 1 to 35 characters, type A.
(Optional).
(Multivalue associated with field 14.1 and fields 16.1 to
28.1.1). */
		GRP_DESC : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=35, sysNumber=15.0, core=true, t24Name=GRP.DESC)
		/* This is used to indicate the relevant currency markets that
are to be included for the GRP.ABBR.
__________________________________________________

(1) 1 to 5 characters, type 'A'.
(Mandatory).
(Multivalue associated with fields 14.1, 15.1, and fields
17.1 to 28.1.1).

(2) It must be a valid record on PM.GRP field with
APPLICATION = CURRENCY.MARKET, or it must
be a valid record on CURRENCY.MARKET file. */
		CCY_MKT_GRP : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=16.0, core=true, t24Name=CCY.MKT.GRP)
		/* This is used to indicate the relevant dealer desks that are to be included for the GRP.ABBR.
These dealer desk group are used in the PM.REPORTS application to define dealer desk groups to appear in the relevant PM.REPORT

(1) 2 to 5 characters, type A.
(Mandatory).
(Multivalue associated with fields 14.1 to 16.1 and fields
18.1 to 28.1.1).

(2) It must be a valid record on PM.GRP with
APPLICATION = DEALER DESK, or it must be a
valid record on DEALER.DESK. */
		DLR_DSK_GRP : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=17.0, core=true, t24Name=DLR.DSK.GRP)
	}
	PM_POSN_REFERENCE__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=33.0, core=true, t24Name=INPUTTER)
	}
	PM_POSN_REFERENCE__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=34.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* This application is used to define a series of generic position types, i.e. they are not application specific. PM.PC.PARAM is used to define the actual position types for specific applications. This application is new to G7, and in this release the PD (payment due) module is the only application using this method of defining position activities. */
	PM_POSN_TYPE
		@t24:i (t24Name=PM.POSN.TYPE, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=true)
	{
		/* Defines a generic position type. e.g. PAM Principal At Maturity      IAM Interest At Maturity
Validation Rules
3 character Alphabetic */
		POSN_TYPE -> PM_Config:PM_POSN_TYPE PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=0.0, core=true, businessType=AAA, t24Name=POSN.TYPE)
		DESCRIPTION -> byValue PM_Config:PM_POSN_TYPE__DESCRIPTION *
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_10 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=2.0, core=true, t24Name=RESERVE.10)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_9 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=3.0, core=true, t24Name=RESERVE.9)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_8 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=4.0, core=true, t24Name=RESERVE.8)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=5.0, core=true, t24Name=RESERVE.7)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=6.0, core=true, t24Name=RESERVE.6)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=7.0, core=true, t24Name=RESERVE.5)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=8.0, core=true, t24Name=RESERVE.4)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=9.0, core=true, t24Name=RESERVE.3)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=10.0, core=true, t24Name=RESERVE.2)
		/* Standard T24 numeric field.
Validation Rules

A maximum of 1 characters may be entered.
This is a NOINPUT field. */
		RESERVE_1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=1, sysNumber=11.0, core=true, t24Name=RESERVE.1)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=13.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=14.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_POSN_TYPE__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_POSN_TYPE__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=17.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=18.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=19.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=20.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=21.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_POSN_TYPE__DESCRIPTION
	{
		/* Describes the generic POSN.TYPE,  (used as enrichment)
Validation Rules
30 character multivalue language field */
		DESCRIPTION : T24BusinessTypes:AA required
			@t24:i (align=L, inputBehaviour=I, maxLength=30, multiLanguage=true, sysNumber=1.0, core=true, t24Name=DESCRIPTION)
	}
	PM_POSN_TYPE__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=15.0, core=true, t24Name=INPUTTER)
	}
	PM_POSN_TYPE__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=16.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	/* PM.SC.PARAM

This table allows the user to define the parameters governing the rules for the handling of the cash accounts (Securities application) in the Position Management module.
It is necessary to specify these parameters by overall type of position as defined in the table 'PM.POSN.REFERENCE' (Gap, Cash-flow etc...). */
	PM_SC_PARAM
		@t24:i (t24Name=PM.SC.PARAM, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=true)
	{
		/* Indicates the 'ID' of the record i.e. the position ID (Gap, cash etc..) for which the user wants to define the parameters applicable for the handling of the account balances in this type of position.
It is anticipated that there will be only two records on this file.  One for the cash position with a key of CAS and one for the interest mismatch with a key of GAP.
Validation Rules
3 alphanumeric characters. the ID must exist on the table 'PM.POSN.REFERENCE'. */
		POSITION_ID -> PM_Config:PM_SC_PARAM PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=14, sysNumber=0.0, core=true, businessType=AA, t24Name=POSITION.ID)
		DESCRIPTION -> byValue PM_Config:PM_SC_PARAM__DESCRIPTION *
		SHORT_NAME -> byValue PM_Config:PM_SC_PARAM__SHORT_NAME *
		PORTFOLIO_ID -> byValue PM_Config:PM_SC_PARAM__PORTFOLIO_ID *
		INCL_REDEEM_PRI : PM_Config:PM_SC_PARAM__INCL_REDEEM_PRI
			@t24:i (align=L, inputBehaviour=I, maxLength=3, sysNumber=14.0, core=true, t24Name=INCL.REDEEM.PRI)
		BOND_YTM_GAP : T24BusinessTypes:HOOK
			@t24:i (align=L, inputBehaviour=I, maxLength=25, sysNumber=15.0, core=true, t24Name=BOND.YTM.GAP)
		RESERVED_7 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=16.0, core=true, t24Name=RESERVED.7)
		RESERVED_6 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=17.0, core=true, t24Name=RESERVED.6)
		RESERVED_5 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=18.0, core=true, t24Name=RESERVED.5)
		RESERVED_4 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=19.0, core=true, t24Name=RESERVED.4)
		RESERVED_3 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=20.0, core=true, t24Name=RESERVED.3)
		RESERVED_2 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=21.0, core=true, t24Name=RESERVED.2)
		RESERVED_1 : mml:Integer
			@t24:i (align=R, inputBehaviour=N, maxLength=55, sysNumber=22.0, core=true, t24Name=RESERVED.1)
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=24.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=25.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_SC_PARAM__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_SC_PARAM__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=28.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=29.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=30.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=31.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=32.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_SC_PARAM__DESCRIPTION
	{
		/* Multi-language field allowing the user to specify a long description for the record they create.
Validation Rules
1-35 alphanumeric characters. Mandatory input. */
		DESCRIPTION : T24BusinessTypes:AA required
			@t24:i (align=L, inputBehaviour=I, maxLength=35, multiLanguage=true, sysNumber=1.0, core=true, t24Name=DESCRIPTION)
	}
	PM_SC_PARAM__SHORT_NAME
	{
		/* Multi-language field allowing the user to specify a short description for the record they create.
Validation Rules
1-20 alphanumeric characters. Mandatory input. No default value. */
		SHORT_NAME : T24BusinessTypes:AA required
			@t24:i (align=L, inputBehaviour=I, maxLength=20, multiLanguage=true, sysNumber=2.0, core=true, t24Name=SHORT.NAME)
	}
	PM_SC_PARAM__PORTFOLIO_ID
	{
		/* Specifies the specific portfolio which is to be considered, using the conditions defined in fields 7.1 - 10.1.
Validation Rules
1-10 alphanumeric characters Mandatory input Multivalue field associated with fields 4.1 to 13.1.
must be a valid SEC.ACC.MASTER id. */
		PORTFOLIO_ID -> SCO_PortfolioMaintenance:SEC_ACC_MASTER required
			@t24:i (align=L, inputBehaviour=I, maxLength=18, sysNumber=3.0, core=true, businessType=A, t24Name=PORTFOLIO.ID)
		/* Specifies the type of portfolio which the corresponding id number is to be considered as.
Validation Rules
1-10 characters Mandatory input. Multivalue field associated with fields 3.1 and 5.1 to 13.1.
must be either TRADING or INVESTMENT. */
		PORTFOLIO_TYPE : PM_Config:PM_SC_PARAM__PORTFOLIO_ID__PORTFOLIO_TYPE required
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=4.0, core=true, t24Name=PORTFOLIO.TYPE)
		/* Specifies whether the positions should be recorded on a per day basis or as a net position.
For a Trading portfolio the positions can be raised either according to the value date of each forward position or just for the net position.
Validation Rules
Upto 5 characters Mandatory input for Trading Portfolio, not allowed for an Investment Portfolio. Multivalue field associated with fields 3.1 to 5.1 and 7.1 to 13.1.
For a Trading Portfolio must be either DAILY or NET.
For an Investment Portfolio must be left blank. */
		OVERNIGHT_PROC : PM_Config:PM_SC_PARAM__PORTFOLIO_ID__OVERNIGHT_PROC
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=5.0, core=true, t24Name=OVERNIGHT.PROC)
		/* Reserved for future use. */
		R2 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=6.0, core=true, t24Name=R2)
		ASSET_TYPE -> byValue PM_Config:PM_SC_PARAM__PORTFOLIO_ID__ASSET_TYPE *
		/* Reserved for future use. */
		R6 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=12.0, core=true, t24Name=R6)
		/* Reserved for future use. */
		R7 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=13.0, core=true, t24Name=R7)
	}
	PM_SC_PARAM__PORTFOLIO_ID__ASSET_TYPE
	{
		/* Specifies the type of security to be considered under the aforementioned Portfolio.  This may be general e.g. BONDS or SHARES or more specific e.g. U.K. GILTS.
Validation Rules
1-10 Alphanumeric characters Mandatory input No default value Multivalue field associated with fields 3.1 to 6.1 and 8.1 to 13.1. Sub multivalue field associated with fields 8.1.1. to 11.1.1.
Must either be 'B'ond, 'S'hare,  or a valid id on the ASSET.TYPE TABLE. */
		ASSET_TYPE : PM_Config:PM_SC_PARAM__PORTFOLIO_ID__ASSET_TYPE__ASSET_TYPE required
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=7.0, core=true, t24Name=ASSET.TYPE)
		/* Specifies the date/period to which the user wants to apply the movement/activity.
Validation Rules
1-10 characters Mandatory input. Multivalue field associated with fields 3.1 to 7.1 and 9.1 to 13.1. and Subvalue 7.1.1 and 9.1.1. to 11.1.1.
Must correspond to a valid period on the table 'PM.CALENDAR', or be equal to MAT for the maturity of the security. */
		PERIOD_ID : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=8.0, core=true, t24Name=PERIOD.ID)
		/* Allows the user to give a default maturity date, to be used when MAT is entered into Field 8.1.1. and no maturity date is available on the SEC ACCOUNT MASTER.
Validation Rules
Up to 11 characters date format YYYYMMDD Mandatory input for Investment Portfolio not allowed for Trading. No default value Multivalue field associated with fields 3.1 to 8.1 and 10.1 to 13.1. and Subvalue 7.1.1 to 8.1.1 and 10.1.1. to 11.1.1. */
		DEFAULT_MAT : T24BusinessTypes:D
			@t24:i (align=R, inputBehaviour=I, maxLength=11, sysNumber=9.0, core=true, t24Name=DEFAULT.MAT)
		/* Allows the user to define the current price valuation to be against the redemption price and yield.
Validation Rules
1 Alphanumeric character Y or N Mandatory input Default 'N' Multivalue field associated with fields 3.1 to 9.1 and 11.1 to 13.1 and subvalued associated with fields 7.1.1. to 9.1.1 and 11.1.1.
'Y' is only allowed for Investment Portfolio Bonds. */
		INT_GAP_YTM : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=10.0, core=true, t24Name=INT.GAP.YTM)
		/* Allows the user to define a Default rate to be applied to shares within a Portfolio.
Validation Rules
Up to 11 numeric characters Multi value field associated with fields 3.1 to 10.1 and 12.1 to 13.1 and subvalued associated 7.1.1 to 10.1.1
Required fo shares
Not allowed for Bonds */
		DEFAULT_INT : T24BusinessTypes:R
			@t24:i (align=R, inputBehaviour=I, maxLength=11, sysNumber=11.0, core=true, t24Name=DEFAULT.INT)
	}
	PM_SC_PARAM__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=26.0, core=true, t24Name=INPUTTER)
	}
	PM_SC_PARAM__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=27.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_SC_PARAM_INV
		@t24:i (t24Name=PM.SC.PARAM.INV, level=F, type=L, allowedFunctions="L P S", localRefAllowed=false)
	{
		/* Standard T24 alphanumeric field.
Validation Rules
Mandatory input.
A maximum of 30 characters may be entered. */
		PORTFOLIO_NO -> PM_Config:PM_SC_PARAM_INV PK required
			@i18n:Label (en="Portfoio No")
			@i18n:Tooltip (en="Indicates the Portfolio Account of the customer")
			@t24:i (align=L, inputBehaviour=I, maxLength=30, sysNumber=0.0, core=true, businessType=A, t24Name=PORTFOLIO.NO)
		ASSET_TYPE -> byValue PM_Config:PM_SC_PARAM_INV__ASSET_TYPE *
		POSN_CLASS -> byValue PM_Config:PM_SC_PARAM_INV__POSN_CLASS *
		PERIOD_ID -> byValue PM_Config:PM_SC_PARAM_INV__PERIOD_ID *
		DEFAULT_MAT -> byValue PM_Config:PM_SC_PARAM_INV__DEFAULT_MAT *
		INT_GAP_YTM -> byValue PM_Config:PM_SC_PARAM_INV__INT_GAP_YTM *
		R1 -> byValue PM_Config:PM_SC_PARAM_INV__R1 *
		/* Standard T24 alphanumeric field.
Validation Rules
A maximum of 10 characters may be entered. */
		PORTFOLIO_TYPE : T24BusinessTypes:A
			@i18n:Label (en="Portfolio Type")
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=8.0, core=true, t24Name=PORTFOLIO.TYPE)
		/* Standard T24 alphanumeric field.
Validation Rules
A maximum of 5 characters may be entered. */
		OVERNIGHT_PROC : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=5, sysNumber=9.0, core=true, t24Name=OVERNIGHT.PROC)
		/* Standard T24 alphanumeric field.
Validation Rules
A maximum of 1 characters may be entered. */
		R4 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=10.0, core=true, t24Name=R4)
	}
	PM_SC_PARAM_INV__ASSET_TYPE
	{
		/* Fields ASSET.TYPE to R2 form a related multi value set. Standard T24 alphanumeric field.
Validation Rules
Mandatory input.
A maximum of 30 characters may be entered. */
		ASSET_TYPE : T24BusinessTypes:A required
			@t24:i (align=L, inputBehaviour=I, maxLength=30, sysNumber=1.0, core=true, t24Name=ASSET.TYPE)
	}
	PM_SC_PARAM_INV__POSN_CLASS
	{
		POSN_CLASS -> byValue PM_Config:PM_SC_PARAM_INV__POSN_CLASS__POSN_CLASS *
	}
	PM_SC_PARAM_INV__POSN_CLASS__POSN_CLASS
	{
		/* This is a multi valued field. Standard T24 alphanumeric field.
Validation Rules
A maximum of 40 characters may be entered. */
		POSN_CLASS : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=40, sysNumber=2.0, core=true, t24Name=POSN.CLASS)
	}
	PM_SC_PARAM_INV__PERIOD_ID
	{
		PERIOD_ID -> byValue PM_Config:PM_SC_PARAM_INV__PERIOD_ID__PERIOD_ID *
	}
	PM_SC_PARAM_INV__PERIOD_ID__PERIOD_ID
	{
		/* This is a multi valued field. Standard T24 alphanumeric field.
Validation Rules
A maximum of 10 characters may be entered. */
		PERIOD_ID : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=3.0, core=true, t24Name=PERIOD.ID)
	}
	PM_SC_PARAM_INV__DEFAULT_MAT
	{
		DEFAULT_MAT -> byValue PM_Config:PM_SC_PARAM_INV__DEFAULT_MAT__DEFAULT_MAT *
	}
	PM_SC_PARAM_INV__DEFAULT_MAT__DEFAULT_MAT
	{
		/* This is a multi valued field. Standard T24 alphanumeric field.
Validation Rules
A maximum of 8 characters may be entered. */
		DEFAULT_MAT : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=8, sysNumber=4.0, core=true, t24Name=DEFAULT.MAT)
	}
	PM_SC_PARAM_INV__INT_GAP_YTM
	{
		INT_GAP_YTM -> byValue PM_Config:PM_SC_PARAM_INV__INT_GAP_YTM__INT_GAP_YTM *
	}
	PM_SC_PARAM_INV__INT_GAP_YTM__INT_GAP_YTM
	{
		/* This is a multi valued field. Standard T24 alphanumeric field.
Validation Rules
A maximum of 1 characters may be entered. */
		INT_GAP_YTM : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=5.0, core=true, t24Name=INT.GAP.YTM)
	}
	PM_SC_PARAM_INV__R1
	{
		R1 -> byValue PM_Config:PM_SC_PARAM_INV__R1__R1 *
	}
	PM_SC_PARAM_INV__R1__R1
	{
		/* This is a multi valued field. Standard T24 alphanumeric field.
Validation Rules
A maximum of 1 characters may be entered. */
		R1 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=6.0, core=true, t24Name=R1)
		/* Fields ASSET.TYPE to R2 form a related multi value set. Standard T24 alphanumeric field.
Validation Rules
A maximum of 1 characters may be entered. */
		R2 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=I, maxLength=1, sysNumber=7.0, core=true, t24Name=R2)
	}
	/* PM.SC.SHARE.RATES

This is a file to contain Psuedo Share Interest rates for the recording of the Securities Gap position within Position Management. */
	PM_SC_SHARE_RATES
		@t24:i (t24Name=PM.SC.SHARE.RATES, level=I, type=H, allowedFunctions="A C D E H I L P Q R S", localRefAllowed=false)
	{
		/* Indicates the 'ID' of the record in which the user wish to define the parameterised interest rates.
Validation Rules
Upto 10 Alphanumeric characters. Must be a valid Security Master Key or a valid Sub Asset Type. */
		SHARERATE_ID -> PM_Config:PM_SC_SHARE_RATES PK required
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=0.0, core=true, businessType=S, t24Name=SHARERATE.ID)
		PORTFOLIO_TYPE -> byValue PM_Config:PM_SC_SHARE_RATES__PORTFOLIO_TYPE *
		RECORD_STATUS : T24BusinessTypes:STAT
			@i18n:Label (en="Record Status")
			@t24:i (align=L, inputBehaviour=N, maxLength=4, sysNumber=8.0, core=true, t24Name=RECORD.STATUS)
		CURR_NO : mml:Integer
			@i18n:Label (en="Curr No")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=9.0, core=true, t24Name=CURR.NO)
		INPUTTER -> byValue PM_Config:PM_SC_SHARE_RATES__INPUTTER *
		DATE_TIME -> byValue PM_Config:PM_SC_SHARE_RATES__DATE_TIME *
		AUTHORISER : T24BusinessTypes:A
			@i18n:Label (en=Authoriser)
			@i18n:Tooltip (en="Indicates the User who Authorises the record")
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=12.0, core=true, t24Name=AUTHORISER)
		CO_CODE -> ST_CompanyCreation:COMPANY
			@i18n:Label (en=Company)
			@t24:i (align=L, inputBehaviour=N, maxLength=11, sysNumber=13.0, core=true, businessType=A, t24Name=CO.CODE, mask="R##-###-####")
		DEPT_CODE -> ST_Config:DEPT_ACCT_OFFICER
			@i18n:Label (en="Dept Code")
			@t24:i (align=R, inputBehaviour=N, maxLength=4, sysNumber=14.0, core=true, t24Name=DEPT.CODE)
		AUDITOR_CODE : T24BusinessTypes:A
			@i18n:Label (en="Auditor Code")
			@i18n:Tooltip (en="Auditor Code")
			@t24:i (align=L, inputBehaviour=E, maxLength=16, sysNumber=15.0, core=true, t24Name=AUDITOR.CODE)
		AUDIT_DATE_TIME : T24BusinessTypes:RELTIME
			@i18n:Label (en="Audit Date Time")
			@i18n:Tooltip (en="Date and time when record was audited")
			@t24:i (align=L, inputBehaviour=E, maxLength=15, sysNumber=16.0, core=true, t24Name=AUDIT.DATE.TIME, mask="RDD DD  DD ##:##")
	}
	PM_SC_SHARE_RATES__PORTFOLIO_TYPE
	{
		/* Specifies the type of portfolio for which the corresponding interest rate is to be applied.
Validation Rules
1-10 characters. Mandatory input. Multi valued field associated with fields 2.1 to 7.1 Must be either 'TRADING' or 'INVESTMENT' Cannot be duplicated. */
		PORTFOLIO_TYPE : PM_Config:PM_SC_SHARE_RATES__PORTFOLIO_TYPE__PORTFOLIO_TYPE required
			@t24:i (align=L, inputBehaviour=I, maxLength=10, sysNumber=1.0, core=true, t24Name=PORTFOLIO.TYPE)
		/* Indicates the Psuedo Interest Rate which is to be applied to the Position for the Securities specified.
Validation Rules
1-11 numeric characters. Mandatory input. Multi value field associated with fields 1.1 to 7.1 */
		INT_RATE : T24BusinessTypes:R required
			@t24:i (align=R, inputBehaviour=I, maxLength=11, sysNumber=2.0, core=true, t24Name=INT.RATE)
		/* Reserved for future use. */
		R5 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=3.0, core=true, t24Name=R5)
		/* Reserved for future use. */
		R4 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=4.0, core=true, t24Name=R4)
		/* Reserved for future use. */
		R3 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=5.0, core=true, t24Name=R3)
		/* Reserved for future use. */
		R2 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=6.0, core=true, t24Name=R2)
		/* Reserved for future use. */
		R1 : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=20, sysNumber=7.0, core=true, t24Name=R1)
	}
	PM_SC_SHARE_RATES__INPUTTER
	{
		INPUTTER : T24BusinessTypes:A
			@t24:i (align=L, inputBehaviour=N, maxLength=40, sysNumber=10.0, core=true, t24Name=INPUTTER)
	}
	PM_SC_SHARE_RATES__DATE_TIME
	{
		DATE_TIME : T24BusinessTypes:RELTIME
			@t24:i (align=L, inputBehaviour=N, maxLength=15, sysNumber=11.0, core=true, t24Name=DATE.TIME, mask="RDD DD  DD ##:##")
	}
}
Enumerations {
	PM_AC_PARAM__INTEREST_RATES : mml:string
		NO=NO
		YES=YES
	PM_AC_PARAM__CATEGORY_FROM__LCY_FX_POSN : mml:string
		YES=YES
		NO=NO
	PM_AC_PARAM__CATEGORY_FROM__REVERSE_BALANCE : mml:string
		Y=Y
		N=N
		NULL=NULL
	PM_AC_PARAM__CATEGORY_FROM__ACC_OR_CAL : mml:string
		CAL=CAL
		ACC=ACC
		NULL=NULL
	PM_APPL_SELECTION__OPEN_BRACKET__OPEN_BRACKET : mml:string
		n1__="1 ("
		n2___="2 (("
		n3____="3 ((("
		n4_____="4 (((("
	PM_APPL_SELECTION__OPEN_BRACKET__SEL_OPERAND : mml:string
		EQ=EQ
		NE=NE
		LT=LT
		LE=LE
		GT=GT
		GE=GE
		LK=LK
		UL=UL
		NR=NR
		RG=RG
	PM_APPL_SELECTION__OPEN_BRACKET__CLOSE_BRACKET : mml:string
		n1__="1 )"
		n2___="2 ))"
		n3____="3 )))"
		n4_____="4 ))))"
	PM_APPL_SELECTION__OPEN_BRACKET__LINK_TO_NXT_FLD : mml:string
		OR=OR
		AND=AND
	PM_APPL_SELECTION__OP_BRACKET__OP_BRACKET : mml:string
		n1__="1 ("
		n2___="2 (("
		n3____="3 ((("
		n4_____="4 (((("
	PM_APPL_SELECTION__OP_BRACKET__MAT_OPERAND : mml:string
		EQ=EQ
		NE=NE
		LT=LT
		LE=LE
		GT=GT
		GE=GE
		LK=LK
		UL=UL
		NR=NR
		RG=RG
	PM_APPL_SELECTION__OP_BRACKET__CL_BRACKET : mml:string
		n1__="1 )"
		n2___="2 ))"
		n3____="3 )))"
		n4_____="4 ))))"
	PM_APPL_SELECTION__OP_BRACKET__MAT_NXT_FLD : mml:string
		OR=OR
		AND=AND
	PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__BRACKETS_OP : mml:string
		n1__="1 ("
		n2___="2 (("
		n3____="3 ((("
		n4_____="4 (((("
	PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__DECISION : mml:string
		EQ=EQ
		GE=GE
		GT=GT
		LE=LE
		LT=LT
		NE=NE
		RG=RG
		IN=IN
		LK=LK
		UL=UL
	PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__BRACKETS_CL : mml:string
		n1__="1 )"
		n2___="2 ))"
		n3____="3 )))"
		n4_____="4 ))))"
	PM_APPLICATION_PARAM__PM_GROUP_TYPE__BRACKETS_OP__REL_NEXT_FD : mml:string
		AND=AND
		OR=OR
	PM_CALENDAR__PERIOD__DATE_SFX : mml:string
		n8=8
	PM_GROUP_TYPE__DEC_TYPE__DEC_ANSWER__DEC_OPERAND : mml:string
		EQ=EQ
		NE=NE
		GE=GE
		GT=GT
		LE=LE
		LT=LT
		LK=LK
		UL=UL
	PM_GROUP_TYPE__CAL_TYPE__CALC_OPERAND__CALC_OPERAND : mml:string
		ADD=ADD
		SUBTRACT=SUBTRACT
		MULTIPLY=MULTIPLY
		DIVIDE=DIVIDE
	PM_PARAMETER__APPLN__PROC_CODE : mml:string
		CA=CA
		NAU=NAU
	PM_PARAMETER__COL : mml:string
		n25=25
	PM_PARAMETER__FX_ROW : mml:string
		n10=10
	PM_PARAMETER__MM_ROW : mml:string
		n21=21
	PM_PARAMETER__LMM_ONITE_GM_SFX : mml:string
		n0=0
		n2=2
		NULL=NULL
	PM_PARAMETER__LMM_CAT__LMM_GM_DATE_SFX : mml:string
		n0=0
		n2=2
		NULL=NULL
	PM_PARAMETER__ENQ_NEG_SIGN : mml:string
		PLACINGS=PLACINGS
		TAKINGS=TAKINGS
	PM_PARAMETER__HVL_APP__HVL_APP : mml:string
		FT=FT
		TT=TT
	PM_PARAMETER__FRA_TRADE_GAP : mml:string
		YES=YES
		NO=NO
	PM_PARAMETER__BUILD_LCY_POSN : mml:string
		YES=YES
		NO=NO
	PM_PARAMETER__ZERO_INT_RATE : mml:string
		YES=YES
		NO=NO
	PM_PC_PARAM__FWD_FX_PRG_CNT : mml:string
		NO=NO
		YES=YES
		APPLIC=APPLIC
	PM_POSN_CLASS__POSITION_TYPE : mml:string
		CAS=CAS
		FXP=FXP
		GAP=GAP
	PM_SC_PARAM__PORTFOLIO_ID__PORTFOLIO_TYPE : mml:string
		TRADING=TRADING
		INVESTMENT=INVESTMENT
	PM_SC_PARAM__PORTFOLIO_ID__OVERNIGHT_PROC : mml:string
		DAILY=DAILY
		NET=NET
	PM_SC_PARAM__PORTFOLIO_ID__ASSET_TYPE__ASSET_TYPE : mml:string
		B=B
		S=S
	PM_SC_PARAM__INCL_REDEEM_PRI : mml:string
		YES=YES
		NO=NO
	PM_SC_SHARE_RATES__PORTFOLIO_TYPE__PORTFOLIO_TYPE : mml:string
		TRADING=TRADING
		INVESTMENT=INVESTMENT
}