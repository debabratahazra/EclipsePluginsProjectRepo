<?xml version="1.0" encoding="UTF-8"?>

<!-- =====================================================================
			This file was created at 2006-08-30
			Version: 0.0.0
			Author: stch
			Contributions by:
			
		 ===================================================================== -->

<project basedir="." default="build" name="com.zealcore.sd.lttng.importer">



	<!-- =====================================================================
			Declare user defined properties below
		 ===================================================================== -->

	<property name="jar-project" value="false" />


	<!-- =====================================================================
			Using instantiatons getclasspath ANT plugin to resolve classpath
			rather than having to keep the class path updated.
		 ===================================================================== -->



	<property environment="env" />


	<property name="ECLIPSE_HOME" value="${eclipse.home}" />
	<property name="build.tmp" value="build-tmp" />
	<property name="build.out" value="target" />



	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.5" />
	<property name="source" value="1.5" />
	<property name="project" value="${ant.project.name}" />

	<property name="install.dir" value="NOT SET!!!" />


	<!-- getclasspath ANT plugin from instantiations -->
	<path id="project.classpath">
		<pathelement path="${tools.path}" />
	</path>

	<!-- Read MANIFEST.MF to resolve Bundle-Version and other properties -->

	<target name="read-manifest">
		<mkdir dir="${build.tmp}" />
		<copy file="META-INF/MANIFEST.MF" todir="${build.tmp}" />
		<replace file="${build.tmp}/MANIFEST.MF">
			<replacefilter token=":=" value="=" />
			<replacefilter token=":" value="=" />
			<replacetoken>;</replacetoken>
			<replacevalue>
			</replacevalue>
			<replacefilter token="singleton=true" value="" />
		</replace>
		<property file="${build.tmp}/MANIFEST.MF" />
		<echo message="Bundle-Version=${Bundle-Version}">
		</echo>
		<delete dir="build-tmp" />

		<!-- Assign the plugin.name to the Bundble-SymbolicName found in manifest -->
		<property name="plugin.name" value="${Bundle-SymbolicName}" />

		<!-- Read build.properties -->
		<property file="build.properties" />
	</target>

	<!-- ============================ Eclipse Generated Code =========================== -->


	<target name="init">
		<mkdir dir="bin" />
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="src" excludes="**/*.uad, **/*.ucd, **/*.uld, **/*.upd, **/*.udd, **/*.uod, **/*.usd, **/*.utd, **/*.uud, **/*.odd, **/*.ead, **/*.ecd, **/*.eld, **/*.epd, **/*.edd, **/*.eod, **/*.esd, **/*.etd, **/*.eud, **/*.urd*.uml2, **/*.ecore, **/*.launch, **/*.java" />
		</copy>
	</target>
	<target name="clean">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.out}">
				<include name="**/*" />
			</fileset>
		</delete>
	</target>
	<target depends="clean" name="cleanall" />
	<target depends="build-subprojects,build-project" name="build" />
	<target name="build-subprojects" />
	<target depends="init" name="build-project">
		<echo message="Building Project: ${plugin.name}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}">
			<src path="src" />
			<classpath refid="project.classpath" />
		</javac>
	</target>
	<target name="build-refprojects" />
	<target name="init-eclipse-compiler">
		<copy todir="${ant.library.dir}">
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</copy>
		<unzip dest="${ant.library.dir}">
			<patternset includes="jdtCompilerAdapter.jar" />
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</unzip>
	</target>
	<target name="build-eclipse-compiler">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
		<antcall target="build" />
	</target>


	<!-- =============================================================================== 
			Zealcore ANT Code:
			
			Prerequisities:
				* ${ECLIPSE_HOME} must be set
				* Must be run in same JRE as eclipse
		 =============================================================================== -->
	<tstamp>
		<!-- Generate a build id (can be used to separate different jar builds -->
		<format property="buildid" pattern="yyyyMMdd" />
	</tstamp>


	<target name="deploy" depends="read-manifest" description="This task deploys the plugin project to target">

		<property name="version" value="${Bundle-Version}.${buildid}" />


		<mkdir dir="${build.out}/${plugin.name}_${version}" />
		<mkdir dir="${build.out}/${plugin.name}_${version}/META-INF" />

		<echo message="Deploying ${plugin.name} to ${build.out}/${plugin.name}_${version} jar-project=${jar-project}" />

		<!--
		<jar destfile="${build.out}/${plugin.name}_${version}/${plugin.name}_${version}.jar">
			<fileset dir="bin" />
		</jar>
		-->
		<copy todir="${build.out}/${plugin.name}_${version}">
			<fileset dir="${output..}" />
		</copy>

		<copy todir="${build.out}/${plugin.name}_${version}/META-INF">
			<fileset dir="META-INF" />
		</copy>

		<replace file="${build.out}/${plugin.name}_${version}/META-INF/MANIFEST.MF">
			<replacefilter token="Bundle-Version: ${Bundle-Version}" value="Bundle-Version: ${version}" />
		</replace>

		<copy todir="${build.out}/${plugin.name}_${version}">
			<fileset dir="./" includes="${bin.includes}" />
		</copy>

		<zip destfile="${build.out}/${plugin.name}_${version}.jar" compress="false">
			<fileset dir="${build.out}/${plugin.name}_${version}" />
		</zip>

		<!--
		<delete dir="${build.out}/${plugin.name}_${version}"/> -->

	</target>



	<target name="install" depends="clean, deploy">
		<echo message="Installing: ${ant.project.name} to ${install.dir}" />
		<copy todir="${install.dir}">
			<fileset dir="${build.out}" includes="${plugin.name}_${version}.jar" />
		</copy>
	</target>



	<!-- =====================================================================
			Installs the pluing to the ${eclipse.home} directory
		 ===================================================================== -->




	<target name="install_old" depends="deploy" description="Installs the plugin to ${ECLIPSE_HOME}">

		<echo message="Installing ${plugin.name} to ${eclipse.home}" />
		<copy todir="${ECLIPSE_HOME}/plugins">
			<fileset dir="target" />
		</copy>
	</target>


</project>

