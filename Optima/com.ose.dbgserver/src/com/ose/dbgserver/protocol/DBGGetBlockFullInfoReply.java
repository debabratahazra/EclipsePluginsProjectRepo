/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGGetBlockFullInfoReply extends Message implements dbgserverinterfaceConstants{
   public int bid;
   public int creator;
   public int createTimeTick;
   public int createTimeUTick;
   public int userId;
   public int maxSigSize;
   public int segId;
   public int sigPoolId;
   public int stackPoolId;
   public String blockName;


   public DBGGetBlockFullInfoReply(int _bid, int _creator, int _createTimeTick, int _createTimeUTick, int _userId, int _maxSigSize, int _segId, int _sigPoolId, int _stackPoolId, String _blockName) {
      bid = _bid;
      creator = _creator;
      createTimeTick = _createTimeTick;
      createTimeUTick = _createTimeUTick;
      userId = _userId;
      maxSigSize = _maxSigSize;
      segId = _segId;
      sigPoolId = _sigPoolId;
      stackPoolId = _stackPoolId;
      blockName = _blockName;
   }

   public DBGGetBlockFullInfoReply(DataInputStream _s) throws IOException { signalNo = 32989; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.bid, this.creator, this.createTimeTick, this.createTimeUTick, this.userId, this.maxSigSize, this.segId, this.sigPoolId, this.stackPoolId, this.blockName);}
   public final static void write(DataOutputStream _s, int _bid, int _creator, int _createTimeTick, int _createTimeUTick, int _userId, int _maxSigSize, int _segId, int _sigPoolId, int _stackPoolId, String _blockName   ) throws IOException {
         int _i;
         int _blockNameSize=_blockName.length()+1;
         _s.writeInt(DBGGETBLOCKFULLINFOREPLY);
         int _size=44
            +4+_blockNameSize
            ;
         _s.writeInt(_size);
         _s.writeInt(_bid);
         _s.writeInt(_creator);
         _s.writeInt(_createTimeTick);
         _s.writeInt(_createTimeUTick);
         _s.writeInt(_userId);
         _s.writeInt(_maxSigSize);
         _s.writeInt(_segId);
         _s.writeInt(_sigPoolId);
         _s.writeInt(_stackPoolId);
         int _dynSize=44;
         int _bytes2Skip;

         // write blockName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_blockNameSize);
         _dynSize+=_blockNameSize;
         _s.writeBytes(_blockName);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         bid=_s.readInt();
         creator=_s.readInt();
         createTimeTick=_s.readInt();
         createTimeUTick=_s.readInt();
         userId=_s.readInt();
         maxSigSize=_s.readInt();
         segId=_s.readInt();
         sigPoolId=_s.readInt();
         stackPoolId=_s.readInt();
         int _dynSize=44;
         int _bytes2Skip;

         // read blockName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _blockName[] = new byte[_size];
         _s.readFully(_blockName, 0, _size);
         blockName=new String(_blockName, 0,0, _blockName.length-1);
   }
}
