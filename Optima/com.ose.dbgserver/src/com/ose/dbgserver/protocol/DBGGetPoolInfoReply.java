/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGGetPoolInfoReply extends Message implements dbgserverinterfaceConstants{
   public int pid;
   public int totSize;
   public int freeSize;
   public int frBaseAddr[];
   public int frSize[];
   public int frUsedStk[];
   public int frUsedSig[];
   public int stkConfSizes[];
   public int sigConfSizes[];
   public int stkAllocSizes[];
   public int sigAllocSizes[];
   public int stkFreeSizes[];
   public int sigFreeSizes[];


   public DBGGetPoolInfoReply(int _pid, int _totSize, int _freeSize, int _frBaseAddr[], int _frSize[], int _frUsedStk[], int _frUsedSig[], int _stkConfSizes[], int _sigConfSizes[], int _stkAllocSizes[], int _sigAllocSizes[], int _stkFreeSizes[], int _sigFreeSizes[]) {
      pid = _pid;
      totSize = _totSize;
      freeSize = _freeSize;
      frBaseAddr = _frBaseAddr;
      frSize = _frSize;
      frUsedStk = _frUsedStk;
      frUsedSig = _frUsedSig;
      stkConfSizes = _stkConfSizes;
      sigConfSizes = _sigConfSizes;
      stkAllocSizes = _stkAllocSizes;
      sigAllocSizes = _sigAllocSizes;
      stkFreeSizes = _stkFreeSizes;
      sigFreeSizes = _sigFreeSizes;
   }

   public DBGGetPoolInfoReply(DataInputStream _s) throws IOException { signalNo = 32952; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.pid, this.totSize, this.freeSize, this.frBaseAddr, this.frSize, this.frUsedStk, this.frUsedSig, this.stkConfSizes, this.sigConfSizes, this.stkAllocSizes, this.sigAllocSizes, this.stkFreeSizes, this.sigFreeSizes);}
   public final static void write(DataOutputStream _s, int _pid, int _totSize, int _freeSize, int _frBaseAddr[], int _frSize[], int _frUsedStk[], int _frUsedSig[], int _stkConfSizes[], int _sigConfSizes[], int _stkAllocSizes[], int _sigAllocSizes[], int _stkFreeSizes[], int _sigFreeSizes[]   ) throws IOException {
         int _i;
         _s.writeInt(DBGGETPOOLINFOREPLY);
         int _size=20
            +4+(((_frBaseAddr.length*4) & 3) == 0 ? (_frBaseAddr.length*4) : ((_frBaseAddr.length*4) + 4 - ((_frBaseAddr.length*4)&3)))
            +4+(((_frSize.length*4) & 3) == 0 ? (_frSize.length*4) : ((_frSize.length*4) + 4 - ((_frSize.length*4)&3)))
            +4+(((_frUsedStk.length*4) & 3) == 0 ? (_frUsedStk.length*4) : ((_frUsedStk.length*4) + 4 - ((_frUsedStk.length*4)&3)))
            +4+(((_frUsedSig.length*4) & 3) == 0 ? (_frUsedSig.length*4) : ((_frUsedSig.length*4) + 4 - ((_frUsedSig.length*4)&3)))
            +4+(((_stkConfSizes.length*4) & 3) == 0 ? (_stkConfSizes.length*4) : ((_stkConfSizes.length*4) + 4 - ((_stkConfSizes.length*4)&3)))
            +4+(((_sigConfSizes.length*4) & 3) == 0 ? (_sigConfSizes.length*4) : ((_sigConfSizes.length*4) + 4 - ((_sigConfSizes.length*4)&3)))
            +4+(((_stkAllocSizes.length*4) & 3) == 0 ? (_stkAllocSizes.length*4) : ((_stkAllocSizes.length*4) + 4 - ((_stkAllocSizes.length*4)&3)))
            +4+(((_sigAllocSizes.length*4) & 3) == 0 ? (_sigAllocSizes.length*4) : ((_sigAllocSizes.length*4) + 4 - ((_sigAllocSizes.length*4)&3)))
            +4+(((_stkFreeSizes.length*4) & 3) == 0 ? (_stkFreeSizes.length*4) : ((_stkFreeSizes.length*4) + 4 - ((_stkFreeSizes.length*4)&3)))
            +4+(_sigFreeSizes.length*4)
            ;
         _s.writeInt(_size);
         _s.writeInt(_pid);
         _s.writeInt(_totSize);
         _s.writeInt(_freeSize);
         int _dynSize=20;
         int _bytes2Skip;

         // write frBaseAddr
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_frBaseAddr.length*4));
         _dynSize+=(_frBaseAddr.length*4);
         for(_i = 0 ; _i < _frBaseAddr.length ; _i++) 
            _s.writeInt(_frBaseAddr[_i]);

         // write frSize
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_frSize.length*4));
         _dynSize+=(_frSize.length*4);
         for(_i = 0 ; _i < _frSize.length ; _i++) 
            _s.writeInt(_frSize[_i]);

         // write frUsedStk
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_frUsedStk.length*4));
         _dynSize+=(_frUsedStk.length*4);
         for(_i = 0 ; _i < _frUsedStk.length ; _i++) 
            _s.writeInt(_frUsedStk[_i]);

         // write frUsedSig
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_frUsedSig.length*4));
         _dynSize+=(_frUsedSig.length*4);
         for(_i = 0 ; _i < _frUsedSig.length ; _i++) 
            _s.writeInt(_frUsedSig[_i]);

         // write stkConfSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_stkConfSizes.length*4));
         _dynSize+=(_stkConfSizes.length*4);
         for(_i = 0 ; _i < _stkConfSizes.length ; _i++) 
            _s.writeInt(_stkConfSizes[_i]);

         // write sigConfSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_sigConfSizes.length*4));
         _dynSize+=(_sigConfSizes.length*4);
         for(_i = 0 ; _i < _sigConfSizes.length ; _i++) 
            _s.writeInt(_sigConfSizes[_i]);

         // write stkAllocSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_stkAllocSizes.length*4));
         _dynSize+=(_stkAllocSizes.length*4);
         for(_i = 0 ; _i < _stkAllocSizes.length ; _i++) 
            _s.writeInt(_stkAllocSizes[_i]);

         // write sigAllocSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_sigAllocSizes.length*4));
         _dynSize+=(_sigAllocSizes.length*4);
         for(_i = 0 ; _i < _sigAllocSizes.length ; _i++) 
            _s.writeInt(_sigAllocSizes[_i]);

         // write stkFreeSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_stkFreeSizes.length*4));
         _dynSize+=(_stkFreeSizes.length*4);
         for(_i = 0 ; _i < _stkFreeSizes.length ; _i++) 
            _s.writeInt(_stkFreeSizes[_i]);

         // write sigFreeSizes
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_sigFreeSizes.length*4));
         _dynSize+=(_sigFreeSizes.length*4);
         for(_i = 0 ; _i < _sigFreeSizes.length ; _i++) 
            _s.writeInt(_sigFreeSizes[_i]);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         pid=_s.readInt();
         totSize=_s.readInt();
         freeSize=_s.readInt();
         int _dynSize=20;
         int _bytes2Skip;

         // read frBaseAddr
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         frBaseAddr=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            frBaseAddr[_i]=_s.readInt();

         // read frSize
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         frSize=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            frSize[_i]=_s.readInt();

         // read frUsedStk
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         frUsedStk=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            frUsedStk[_i]=_s.readInt();

         // read frUsedSig
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         frUsedSig=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            frUsedSig[_i]=_s.readInt();

         // read stkConfSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         stkConfSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            stkConfSizes[_i]=_s.readInt();

         // read sigConfSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         sigConfSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            sigConfSizes[_i]=_s.readInt();

         // read stkAllocSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         stkAllocSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            stkAllocSizes[_i]=_s.readInt();

         // read sigAllocSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         sigAllocSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            sigAllocSizes[_i]=_s.readInt();

         // read stkFreeSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         stkFreeSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            stkFreeSizes[_i]=_s.readInt();

         // read sigFreeSizes
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         sigFreeSizes=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            sigFreeSizes[_i]=_s.readInt();
   }
}
