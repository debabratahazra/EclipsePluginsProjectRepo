/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGGetProcessFullInfoReply extends Message implements dbgserverinterfaceConstants{
   public int pid;
   public int bid;
   public int parent;
   public int userId;
   public short procType;
   public short status;
   public short priority;
   public short signalsInQueue;
   public int entryPoint;
   public int createTimeTick;
   public int createTimeUTick;
   public int fsemValue;
   public int stackSize;
   public int lineNumber;
   public int signalBuffers;
   public int wantedSignals[];
   public String processName;
   public String fileName;
   public String CPURegisters;


   public DBGGetProcessFullInfoReply(int _pid, int _bid, int _parent, int _userId, short _procType, short _status, short _priority, short _signalsInQueue, int _entryPoint, int _createTimeTick, int _createTimeUTick, int _fsemValue, int _stackSize, int _lineNumber, int _signalBuffers, int _wantedSignals[], String _processName, String _fileName, String _CPURegisters) {
      pid = _pid;
      bid = _bid;
      parent = _parent;
      userId = _userId;
      procType = _procType;
      status = _status;
      priority = _priority;
      signalsInQueue = _signalsInQueue;
      entryPoint = _entryPoint;
      createTimeTick = _createTimeTick;
      createTimeUTick = _createTimeUTick;
      fsemValue = _fsemValue;
      stackSize = _stackSize;
      lineNumber = _lineNumber;
      signalBuffers = _signalBuffers;
      wantedSignals = _wantedSignals;
      processName = _processName;
      fileName = _fileName;
      CPURegisters = _CPURegisters;
   }

   public DBGGetProcessFullInfoReply(DataInputStream _s) throws IOException { signalNo = 32962; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.pid, this.bid, this.parent, this.userId, this.procType, this.status, this.priority, this.signalsInQueue, this.entryPoint, this.createTimeTick, this.createTimeUTick, this.fsemValue, this.stackSize, this.lineNumber, this.signalBuffers, this.wantedSignals, this.processName, this.fileName, this.CPURegisters);}
   public final static void write(DataOutputStream _s, int _pid, int _bid, int _parent, int _userId, short _procType, short _status, short _priority, short _signalsInQueue, int _entryPoint, int _createTimeTick, int _createTimeUTick, int _fsemValue, int _stackSize, int _lineNumber, int _signalBuffers, int _wantedSignals[], String _processName, String _fileName, String _CPURegisters   ) throws IOException {
         int _i;
         int _processNameSize=_processName.length()+1;
         int _fileNameSize=_fileName.length()+1;
         int _CPURegistersSize=_CPURegisters.length()+1;
         _s.writeInt(DBGGETPROCESSFULLINFOREPLY);
         int _size=60
            +4+(((_wantedSignals.length*4) & 3) == 0 ? (_wantedSignals.length*4) : ((_wantedSignals.length*4) + 4 - ((_wantedSignals.length*4)&3)))
            +4+((_processNameSize & 3) == 0 ? _processNameSize : (_processNameSize + 4 - (_processNameSize&3)))
            +4+((_fileNameSize & 3) == 0 ? _fileNameSize : (_fileNameSize + 4 - (_fileNameSize&3)))
            +4+_CPURegistersSize
            ;
         _s.writeInt(_size);
         _s.writeInt(_pid);
         _s.writeInt(_bid);
         _s.writeInt(_parent);
         _s.writeInt(_userId);
         _s.writeShort(_procType);
         _s.writeShort(_status);
         _s.writeShort(_priority);
         _s.writeShort(_signalsInQueue);
         _s.writeInt(_entryPoint);
         _s.writeInt(_createTimeTick);
         _s.writeInt(_createTimeUTick);
         _s.writeInt(_fsemValue);
         _s.writeInt(_stackSize);
         _s.writeInt(_lineNumber);
         _s.writeInt(_signalBuffers);
         int _dynSize=60;
         int _bytes2Skip;

         // write wantedSignals
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_wantedSignals.length*4));
         _dynSize+=(_wantedSignals.length*4);
         for(_i = 0 ; _i < _wantedSignals.length ; _i++) 
            _s.writeInt(_wantedSignals[_i]);

         // write processName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_processNameSize);
         _dynSize+=_processNameSize;
         _s.writeBytes(_processName);
         _s.writeByte(0);

         // write fileName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_fileNameSize);
         _dynSize+=_fileNameSize;
         _s.writeBytes(_fileName);
         _s.writeByte(0);

         // write CPURegisters
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_CPURegistersSize);
         _dynSize+=_CPURegistersSize;
         _s.writeBytes(_CPURegisters);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         pid=_s.readInt();
         bid=_s.readInt();
         parent=_s.readInt();
         userId=_s.readInt();
         procType=_s.readShort();
         status=_s.readShort();
         priority=_s.readShort();
         signalsInQueue=_s.readShort();
         entryPoint=_s.readInt();
         createTimeTick=_s.readInt();
         createTimeUTick=_s.readInt();
         fsemValue=_s.readInt();
         stackSize=_s.readInt();
         lineNumber=_s.readInt();
         signalBuffers=_s.readInt();
         int _dynSize=60;
         int _bytes2Skip;

         // read wantedSignals
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         wantedSignals=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            wantedSignals[_i]=_s.readInt();

         // read processName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _processName[] = new byte[_size];
         _s.readFully(_processName, 0, _size);
         processName=new String(_processName, 0,0, _processName.length-1);

         // read fileName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _fileName[] = new byte[_size];
         _s.readFully(_fileName, 0, _size);
         fileName=new String(_fileName, 0,0, _fileName.length-1);

         // read CPURegisters
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _CPURegisters[] = new byte[_size];
         _s.readFully(_CPURegisters, 0, _size);
         CPURegisters=new String(_CPURegisters, 0,0, _CPURegisters.length-1);
   }
}
