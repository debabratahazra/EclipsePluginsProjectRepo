/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGGetProgramInfoReply extends Message implements dbgserverinterfaceConstants{
   public int status;
   public int prgHandle;
   public int prgStatus;
   public int entrypoint;
   public int resident;
   public int bid;
   public int sid;
   public int pid;
   public int uid;
   public int section[];
   public byte sectionNames[];
   public String name;
   public String args;
   public byte env[];


   public DBGGetProgramInfoReply(int _status, int _prgHandle, int _prgStatus, int _entrypoint, int _resident, int _bid, int _sid, int _pid, int _uid, int _section[], byte _sectionNames[], String _name, String _args, byte _env[]) {
      status = _status;
      prgHandle = _prgHandle;
      prgStatus = _prgStatus;
      entrypoint = _entrypoint;
      resident = _resident;
      bid = _bid;
      sid = _sid;
      pid = _pid;
      uid = _uid;
      section = _section;
      sectionNames = _sectionNames;
      name = _name;
      args = _args;
      env = _env;
   }

   public DBGGetProgramInfoReply(DataInputStream _s) throws IOException { signalNo = 33043; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.status, this.prgHandle, this.prgStatus, this.entrypoint, this.resident, this.bid, this.sid, this.pid, this.uid, this.section, this.sectionNames, this.name, this.args, this.env);}
   public final static void write(DataOutputStream _s, int _status, int _prgHandle, int _prgStatus, int _entrypoint, int _resident, int _bid, int _sid, int _pid, int _uid, int _section[], byte _sectionNames[], String _name, String _args, byte _env[]   ) throws IOException {
         int _i;
         int _nameSize=_name.length()+1;
         int _argsSize=_args.length()+1;
         _s.writeInt(DBGGETPROGRAMINFOREPLY);
         int _size=44
            +4+(((_section.length*4) & 3) == 0 ? (_section.length*4) : ((_section.length*4) + 4 - ((_section.length*4)&3)))
            +4+((_sectionNames.length & 3) == 0 ? _sectionNames.length : (_sectionNames.length + 4 - (_sectionNames.length&3)))
            +4+((_nameSize & 3) == 0 ? _nameSize : (_nameSize + 4 - (_nameSize&3)))
            +4+((_argsSize & 3) == 0 ? _argsSize : (_argsSize + 4 - (_argsSize&3)))
            +4+_env.length
            ;
         _s.writeInt(_size);
         _s.writeInt(_status);
         _s.writeInt(_prgHandle);
         _s.writeInt(_prgStatus);
         _s.writeInt(_entrypoint);
         _s.writeInt(_resident);
         _s.writeInt(_bid);
         _s.writeInt(_sid);
         _s.writeInt(_pid);
         _s.writeInt(_uid);
         int _dynSize=44;
         int _bytes2Skip;

         // write section
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_section.length*4));
         _dynSize+=(_section.length*4);
         for(_i = 0 ; _i < _section.length ; _i++) 
            _s.writeInt(_section[_i]);

         // write sectionNames
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_sectionNames.length);
         _dynSize+=_sectionNames.length;
         _s.write(_sectionNames);

         // write name
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_nameSize);
         _dynSize+=_nameSize;
         _s.writeBytes(_name);
         _s.writeByte(0);

         // write args
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_argsSize);
         _dynSize+=_argsSize;
         _s.writeBytes(_args);
         _s.writeByte(0);

         // write env
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_env.length);
         _dynSize+=_env.length;
         _s.write(_env);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         status=_s.readInt();
         prgHandle=_s.readInt();
         prgStatus=_s.readInt();
         entrypoint=_s.readInt();
         resident=_s.readInt();
         bid=_s.readInt();
         sid=_s.readInt();
         pid=_s.readInt();
         uid=_s.readInt();
         int _dynSize=44;
         int _bytes2Skip;

         // read section
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         section=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            section[_i]=_s.readInt();

         // read sectionNames
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         sectionNames=new byte[_size];
         _s.readFully(sectionNames,0,_size);

         // read name
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _name[] = new byte[_size];
         _s.readFully(_name, 0, _size);
         name=new String(_name, 0,0, _name.length-1);

         // read args
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _args[] = new byte[_size];
         _s.readFully(_args, 0, _size);
         args=new String(_args, 0,0, _args.length-1);

         // read env
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         env=new byte[_size];
         _s.readFully(env,0,_size);
   }
}
