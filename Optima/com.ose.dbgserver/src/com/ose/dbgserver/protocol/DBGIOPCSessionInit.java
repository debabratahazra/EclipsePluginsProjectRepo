/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGIOPCSessionInit extends Message implements dbgserverinterfaceConstants{
   public int pid;
   public int huntTimeout;
   public int endMarkSignals[];
   public String huntPath;


   public DBGIOPCSessionInit(int _pid, int _huntTimeout, int _endMarkSignals[], String _huntPath) {
      pid = _pid;
      huntTimeout = _huntTimeout;
      endMarkSignals = _endMarkSignals;
      huntPath = _huntPath;
   }

   public DBGIOPCSessionInit(DataInputStream _s) throws IOException { signalNo = 33018; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.pid, this.huntTimeout, this.endMarkSignals, this.huntPath);}
   public final static void write(DataOutputStream _s, int _pid, int _huntTimeout, int _endMarkSignals[], String _huntPath   ) throws IOException {
         int _i;
         int _huntPathSize=_huntPath.length()+1;
         _s.writeInt(DBGIOPCSESSIONINIT);
         int _size=16
            +4+(((_endMarkSignals.length*4) & 3) == 0 ? (_endMarkSignals.length*4) : ((_endMarkSignals.length*4) + 4 - ((_endMarkSignals.length*4)&3)))
            +4+_huntPathSize
            ;
         _s.writeInt(_size);
         _s.writeInt(_pid);
         _s.writeInt(_huntTimeout);
         int _dynSize=16;
         int _bytes2Skip;

         // write endMarkSignals
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_endMarkSignals.length*4));
         _dynSize+=(_endMarkSignals.length*4);
         for(_i = 0 ; _i < _endMarkSignals.length ; _i++) 
            _s.writeInt(_endMarkSignals[_i]);

         // write huntPath
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_huntPathSize);
         _dynSize+=_huntPathSize;
         _s.writeBytes(_huntPath);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         pid=_s.readInt();
         huntTimeout=_s.readInt();
         int _dynSize=16;
         int _bytes2Skip;

         // read endMarkSignals
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         endMarkSignals=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            endMarkSignals[_i]=_s.readInt();

         // read huntPath
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _huntPath[] = new byte[_size];
         _s.readFully(_huntPath, 0, _size);
         huntPath=new String(_huntPath, 0,0, _huntPath.length-1);
   }
}
