/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGMonitorCreateKillNotify extends Message implements dbgserverinterfaceConstants{
   public short state;
   public byte eventType;
   public byte notUsed;
   public int procType;
   public int bid;
   public int tick;
   public int utick;
   public int abstime;
   public int abstick;
   public int creatorPid;
   public int pid;
   public String name;


   public DBGMonitorCreateKillNotify(short _state, byte _eventType, byte _notUsed, int _procType, int _bid, int _tick, int _utick, int _abstime, int _abstick, int _creatorPid, int _pid, String _name) {
      state = _state;
      eventType = _eventType;
      notUsed = _notUsed;
      procType = _procType;
      bid = _bid;
      tick = _tick;
      utick = _utick;
      abstime = _abstime;
      abstick = _abstick;
      creatorPid = _creatorPid;
      pid = _pid;
      name = _name;
   }

   public DBGMonitorCreateKillNotify(DataInputStream _s) throws IOException { signalNo = 32930; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.state, this.eventType, this.notUsed, this.procType, this.bid, this.tick, this.utick, this.abstime, this.abstick, this.creatorPid, this.pid, this.name);}
   public final static void write(DataOutputStream _s, short _state, byte _eventType, byte _notUsed, int _procType, int _bid, int _tick, int _utick, int _abstime, int _abstick, int _creatorPid, int _pid, String _name   ) throws IOException {
         int _i;
         int _nameSize=_name.length()+1;
         _s.writeInt(DBGMONITORCREATEKILLNOTIFY);
         int _size=44
            +4+_nameSize
            ;
         _s.writeInt(_size);
         _s.writeShort(_state);
         _s.writeByte(_eventType);
         _s.writeByte(_notUsed);
         _s.writeInt(_procType);
         _s.writeInt(_bid);
         _s.writeInt(_tick);
         _s.writeInt(_utick);
         _s.writeInt(_abstime);
         _s.writeInt(_abstick);
         _s.writeInt(_creatorPid);
         _s.writeInt(_pid);
         int _dynSize=44;
         int _bytes2Skip;

         // write name
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_nameSize);
         _dynSize+=_nameSize;
         _s.writeBytes(_name);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         state=_s.readShort();
         eventType=_s.readByte();
         notUsed=_s.readByte();
         procType=_s.readInt();
         bid=_s.readInt();
         tick=_s.readInt();
         utick=_s.readInt();
         abstime=_s.readInt();
         abstick=_s.readInt();
         creatorPid=_s.readInt();
         pid=_s.readInt();
         int _dynSize=44;
         int _bytes2Skip;

         // read name
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _name[] = new byte[_size];
         _s.readFully(_name, 0, _size);
         name=new String(_name, 0,0, _name.length-1);
   }
}
