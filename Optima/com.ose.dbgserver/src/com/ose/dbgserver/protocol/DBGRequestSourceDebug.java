/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGRequestSourceDebug extends Message implements dbgserverinterfaceConstants{
   public int pid;
   public int programHandle;
   public String hostName;
   public String userName;
   public String execFileName;


   public DBGRequestSourceDebug(int _pid, int _programHandle, String _hostName, String _userName, String _execFileName) {
      pid = _pid;
      programHandle = _programHandle;
      hostName = _hostName;
      userName = _userName;
      execFileName = _execFileName;
   }

   public DBGRequestSourceDebug(DataInputStream _s) throws IOException { signalNo = 33048; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.pid, this.programHandle, this.hostName, this.userName, this.execFileName);}
   public final static void write(DataOutputStream _s, int _pid, int _programHandle, String _hostName, String _userName, String _execFileName   ) throws IOException {
         int _i;
         int _hostNameSize=_hostName.length()+1;
         int _userNameSize=_userName.length()+1;
         int _execFileNameSize=_execFileName.length()+1;
         _s.writeInt(DBGREQUESTSOURCEDEBUG);
         int _size=16
            +4+((_hostNameSize & 3) == 0 ? _hostNameSize : (_hostNameSize + 4 - (_hostNameSize&3)))
            +4+((_userNameSize & 3) == 0 ? _userNameSize : (_userNameSize + 4 - (_userNameSize&3)))
            +4+_execFileNameSize
            ;
         _s.writeInt(_size);
         _s.writeInt(_pid);
         _s.writeInt(_programHandle);
         int _dynSize=16;
         int _bytes2Skip;

         // write hostName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_hostNameSize);
         _dynSize+=_hostNameSize;
         _s.writeBytes(_hostName);
         _s.writeByte(0);

         // write userName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_userNameSize);
         _dynSize+=_userNameSize;
         _s.writeBytes(_userName);
         _s.writeByte(0);

         // write execFileName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_execFileNameSize);
         _dynSize+=_execFileNameSize;
         _s.writeBytes(_execFileName);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         pid=_s.readInt();
         programHandle=_s.readInt();
         int _dynSize=16;
         int _bytes2Skip;

         // read hostName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _hostName[] = new byte[_size];
         _s.readFully(_hostName, 0, _size);
         hostName=new String(_hostName, 0,0, _hostName.length-1);

         // read userName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _userName[] = new byte[_size];
         _s.readFully(_userName, 0, _size);
         userName=new String(_userName, 0,0, _userName.length-1);

         // read execFileName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _execFileName[] = new byte[_size];
         _s.readFully(_execFileName, 0, _size);
         execFileName=new String(_execFileName, 0,0, _execFileName.length-1);
   }
}
