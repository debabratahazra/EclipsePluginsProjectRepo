/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGSetSendEvact extends Message implements dbgserverinterfaceConstants{
   public int action;
   public int countNumber;
   public int state;
   public int nextState;
   public int withSignalData;
   public int fromSignalNumber;
   public int toSignalNumber;
   public byte fromName[];
   public byte toName[];


   public DBGSetSendEvact(int _action, int _countNumber, int _state, int _nextState, int _withSignalData, int _fromSignalNumber, int _toSignalNumber, byte _fromName[], byte _toName[]) {
      action = _action;
      countNumber = _countNumber;
      state = _state;
      nextState = _nextState;
      withSignalData = _withSignalData;
      fromSignalNumber = _fromSignalNumber;
      toSignalNumber = _toSignalNumber;
      fromName = _fromName;
      toName = _toName;
   }

   public DBGSetSendEvact(DataInputStream _s) throws IOException { signalNo = 32919; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.action, this.countNumber, this.state, this.nextState, this.withSignalData, this.fromSignalNumber, this.toSignalNumber, this.fromName, this.toName);}
   public final static void write(DataOutputStream _s, int _action, int _countNumber, int _state, int _nextState, int _withSignalData, int _fromSignalNumber, int _toSignalNumber, byte _fromName[], byte _toName[]   ) throws IOException {
         int _i;
         _s.writeInt(DBGSETSENDEVACT);
         int _size=36
            +4+((_fromName.length & 3) == 0 ? _fromName.length : (_fromName.length + 4 - (_fromName.length&3)))
            +4+_toName.length
            ;
         _s.writeInt(_size);
         _s.writeInt(_action);
         _s.writeInt(_countNumber);
         _s.writeInt(_state);
         _s.writeInt(_nextState);
         _s.writeInt(_withSignalData);
         _s.writeInt(_fromSignalNumber);
         _s.writeInt(_toSignalNumber);
         int _dynSize=36;
         int _bytes2Skip;

         // write fromName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_fromName.length);
         _dynSize+=_fromName.length;
         _s.write(_fromName);

         // write toName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_toName.length);
         _dynSize+=_toName.length;
         _s.write(_toName);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         action=_s.readInt();
         countNumber=_s.readInt();
         state=_s.readInt();
         nextState=_s.readInt();
         withSignalData=_s.readInt();
         fromSignalNumber=_s.readInt();
         toSignalNumber=_s.readInt();
         int _dynSize=36;
         int _bytes2Skip;

         // read fromName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         fromName=new byte[_size];
         _s.readFully(fromName,0,_size);

         // read toName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         toName=new byte[_size];
         _s.readFully(toName,0,_size);
   }
}
