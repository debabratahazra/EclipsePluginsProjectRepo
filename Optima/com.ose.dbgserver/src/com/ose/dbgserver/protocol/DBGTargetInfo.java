/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGTargetInfo extends Message implements dbgserverinterfaceConstants{
   public int byteOrder;
   public short maxSigSize;
   public short cpu_class;
   public int cpu_type;
   public int notUsed3;
   public int notUsed4;
   public int supportedFeatures[];


   public DBGTargetInfo(int _byteOrder, short _maxSigSize, short _cpu_class, int _cpu_type, int _notUsed3, int _notUsed4, int _supportedFeatures[]) {
      byteOrder = _byteOrder;
      maxSigSize = _maxSigSize;
      cpu_class = _cpu_class;
      cpu_type = _cpu_type;
      notUsed3 = _notUsed3;
      notUsed4 = _notUsed4;
      supportedFeatures = _supportedFeatures;
   }

   public DBGTargetInfo(DataInputStream _s) throws IOException { signalNo = 32909; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.byteOrder, this.maxSigSize, this.cpu_class, this.cpu_type, this.notUsed3, this.notUsed4, this.supportedFeatures);}
   public final static void write(DataOutputStream _s, int _byteOrder, short _maxSigSize, short _cpu_class, int _cpu_type, int _notUsed3, int _notUsed4, int _supportedFeatures[]   ) throws IOException {
         int _i;
         _s.writeInt(DBGTARGETINFO);
         int _size=28
            +4+(_supportedFeatures.length*4)
            ;
         _s.writeInt(_size);
         _s.writeInt(_byteOrder);
         _s.writeShort(_maxSigSize);
         _s.writeShort(_cpu_class);
         _s.writeInt(_cpu_type);
         _s.writeInt(_notUsed3);
         _s.writeInt(_notUsed4);
         int _dynSize=28;
         int _bytes2Skip;

         // write supportedFeatures
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt((_supportedFeatures.length*4));
         _dynSize+=(_supportedFeatures.length*4);
         for(_i = 0 ; _i < _supportedFeatures.length ; _i++) 
            _s.writeInt(_supportedFeatures[_i]);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         byteOrder=_s.readInt();
         maxSigSize=_s.readShort();
         cpu_class=_s.readShort();
         cpu_type=_s.readInt();
         notUsed3=_s.readInt();
         notUsed4=_s.readInt();
         int _dynSize=28;
         int _bytes2Skip;

         // read supportedFeatures
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         _size/=4;
         supportedFeatures=new int[_size];
         for(_i = 0 ; _i < _size ; _i++) 
            supportedFeatures[_i]=_s.readInt();
   }
}
