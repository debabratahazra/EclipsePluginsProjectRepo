/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGTraceErrorReply extends Message implements dbgserverinterfaceConstants{
   public int traceEntry;
   public int tick;
   public int utick;
   public int abstime;
   public int abstick;
   public int error;
   public int extra;
   public short type;
   public short procType;
   public int pid;
   public String name;
   public byte extraData[];


   public DBGTraceErrorReply(int _traceEntry, int _tick, int _utick, int _abstime, int _abstick, int _error, int _extra, short _type, short _procType, int _pid, String _name, byte _extraData[]) {
      traceEntry = _traceEntry;
      tick = _tick;
      utick = _utick;
      abstime = _abstime;
      abstick = _abstick;
      error = _error;
      extra = _extra;
      type = _type;
      procType = _procType;
      pid = _pid;
      name = _name;
      extraData = _extraData;
   }

   public DBGTraceErrorReply(DataInputStream _s) throws IOException { signalNo = 32942; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.traceEntry, this.tick, this.utick, this.abstime, this.abstick, this.error, this.extra, this.type, this.procType, this.pid, this.name, this.extraData);}
   public final static void write(DataOutputStream _s, int _traceEntry, int _tick, int _utick, int _abstime, int _abstick, int _error, int _extra, short _type, short _procType, int _pid, String _name, byte _extraData[]   ) throws IOException {
         int _i;
         int _nameSize=_name.length()+1;
         _s.writeInt(DBGTRACEERRORREPLY);
         int _size=44
            +4+((_nameSize & 3) == 0 ? _nameSize : (_nameSize + 4 - (_nameSize&3)))
            +4+_extraData.length
            ;
         _s.writeInt(_size);
         _s.writeInt(_traceEntry);
         _s.writeInt(_tick);
         _s.writeInt(_utick);
         _s.writeInt(_abstime);
         _s.writeInt(_abstick);
         _s.writeInt(_error);
         _s.writeInt(_extra);
         _s.writeShort(_type);
         _s.writeShort(_procType);
         _s.writeInt(_pid);
         int _dynSize=44;
         int _bytes2Skip;

         // write name
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_nameSize);
         _dynSize+=_nameSize;
         _s.writeBytes(_name);
         _s.writeByte(0);

         // write extraData
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_extraData.length);
         _dynSize+=_extraData.length;
         _s.write(_extraData);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         traceEntry=_s.readInt();
         tick=_s.readInt();
         utick=_s.readInt();
         abstime=_s.readInt();
         abstick=_s.readInt();
         error=_s.readInt();
         extra=_s.readInt();
         type=_s.readShort();
         procType=_s.readShort();
         pid=_s.readInt();
         int _dynSize=44;
         int _bytes2Skip;

         // read name
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _name[] = new byte[_size];
         _s.readFully(_name, 0, _size);
         name=new String(_name, 0,0, _name.length-1);

         // read extraData
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         extraData=new byte[_size];
         _s.readFully(extraData,0,_size);
   }
}
