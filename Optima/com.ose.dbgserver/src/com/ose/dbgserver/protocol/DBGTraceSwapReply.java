/*
     This module was generated automatically from /vobs/ose5/core_ext/dbgserver/private/dbgserverinterface.stl.
                DO NOT EDIT THIS FILE
*/



package com.ose.dbgserver.protocol;
import java.io.*;

public class DBGTraceSwapReply extends Message implements dbgserverinterfaceConstants{
   public int traceEntry;
   public int tick;
   public int utick;
   public int abstime;
   public int abstick;
   public short fromProcType;
   public short toProcType;
   public int fromPid;
   public int toPid;
   public String fromName;
   public String toName;


   public DBGTraceSwapReply(int _traceEntry, int _tick, int _utick, int _abstime, int _abstick, short _fromProcType, short _toProcType, int _fromPid, int _toPid, String _fromName, String _toName) {
      traceEntry = _traceEntry;
      tick = _tick;
      utick = _utick;
      abstime = _abstime;
      abstick = _abstick;
      fromProcType = _fromProcType;
      toProcType = _toProcType;
      fromPid = _fromPid;
      toPid = _toPid;
      fromName = _fromName;
      toName = _toName;
   }

   public DBGTraceSwapReply(DataInputStream _s) throws IOException { signalNo = 32941; read(_s);}
   public final void sendMessage(DataOutputStream _s) throws IOException { write(_s, this.traceEntry, this.tick, this.utick, this.abstime, this.abstick, this.fromProcType, this.toProcType, this.fromPid, this.toPid, this.fromName, this.toName);}
   public final static void write(DataOutputStream _s, int _traceEntry, int _tick, int _utick, int _abstime, int _abstick, short _fromProcType, short _toProcType, int _fromPid, int _toPid, String _fromName, String _toName   ) throws IOException {
         int _i;
         int _fromNameSize=_fromName.length()+1;
         int _toNameSize=_toName.length()+1;
         _s.writeInt(DBGTRACESWAPREPLY);
         int _size=40
            +4+((_fromNameSize & 3) == 0 ? _fromNameSize : (_fromNameSize + 4 - (_fromNameSize&3)))
            +4+_toNameSize
            ;
         _s.writeInt(_size);
         _s.writeInt(_traceEntry);
         _s.writeInt(_tick);
         _s.writeInt(_utick);
         _s.writeInt(_abstime);
         _s.writeInt(_abstick);
         _s.writeShort(_fromProcType);
         _s.writeShort(_toProcType);
         _s.writeInt(_fromPid);
         _s.writeInt(_toPid);
         int _dynSize=40;
         int _bytes2Skip;

         // write fromName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_fromNameSize);
         _dynSize+=_fromNameSize;
         _s.writeBytes(_fromName);
         _s.writeByte(0);

         // write toName
         _bytes2Skip=4-_dynSize&3;
         for(_i=0;_i<_bytes2Skip;_i++) _s.writeByte(0);
         _dynSize+=_bytes2Skip;
         _s.writeInt(_toNameSize);
         _dynSize+=_toNameSize;
         _s.writeBytes(_toName);
         _s.writeByte(0);
   }
   public final void read(DataInputStream _s) throws IOException {
         int _i;
         int _size=_s.readInt();
         traceEntry=_s.readInt();
         tick=_s.readInt();
         utick=_s.readInt();
         abstime=_s.readInt();
         abstick=_s.readInt();
         fromProcType=_s.readShort();
         toProcType=_s.readShort();
         fromPid=_s.readInt();
         toPid=_s.readInt();
         int _dynSize=40;
         int _bytes2Skip;

         // read fromName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _fromName[] = new byte[_size];
         _s.readFully(_fromName, 0, _size);
         fromName=new String(_fromName, 0,0, _fromName.length-1);

         // read toName
         _bytes2Skip=4-_dynSize&3;
         if(_bytes2Skip!=0) {_s.skipBytes(_bytes2Skip);_dynSize+=_bytes2Skip;}
         _size=_s.readInt();
         _dynSize+=_size;
         byte _toName[] = new byte[_size];
         _s.readFully(_toName, 0, _size);
         toName=new String(_toName, 0,0, _toName.length-1);
   }
}
